{"ast":null,"code":"/*!\n * hkdf.js - hkdf for bcrypto\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HKDF\n *   https://tools.ietf.org/html/rfc5869\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n/**\n * HKDF\n */\n\n\nfunction extract(hash, ikm, salt) {\n  assert(hash && typeof hash.id === 'string');\n  if (ikm == null) ikm = Buffer.alloc(0);\n  if (salt == null) salt = Buffer.alloc(hash.size, 0x00);\n  return hash.mac(ikm, salt);\n}\n\nfunction expand(hash, prk, info, len) {\n  if (info == null) info = Buffer.alloc(0);\n  assert(hash && typeof hash.id === 'string');\n  assert(Buffer.isBuffer(prk));\n  assert(Buffer.isBuffer(info));\n  assert(len >>> 0 === len);\n  if (prk.length !== hash.size) throw new RangeError('Invalid PRK length.');\n  const blocks = Math.ceil(len / hash.size);\n  if (blocks > 255) throw new RangeError('Invalid output length.');\n  const out = Buffer.alloc(blocks * hash.size);\n  const ctr = Buffer.from([0]);\n  const mac = hash.hmac();\n  let prev = Buffer.alloc(0);\n  let pos = 0;\n\n  for (let i = 0; i < blocks; i++) {\n    ctr[0] += 1;\n    mac.init(prk);\n    mac.update(prev);\n    mac.update(info);\n    mac.update(ctr);\n    prev = mac.final();\n    pos += prev.copy(out, pos);\n  }\n\n  return out.slice(0, len);\n}\n\nfunction derive(hash, ikm, salt, info, len) {\n  const prk = extract(hash, ikm, salt);\n  return expand(hash, prk, info, len);\n}\n/*\n * Expose\n */\n\n\nexports.native = 0;\nexports.extract = extract;\nexports.expand = expand;\nexports.derive = derive;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/bcrypto/lib/js/hkdf.js"],"names":["assert","require","extract","hash","ikm","salt","id","Buffer","alloc","size","mac","expand","prk","info","len","isBuffer","length","RangeError","blocks","Math","ceil","out","ctr","from","hmac","prev","pos","i","init","update","final","copy","slice","derive","exports","native"],"mappings":"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","sourcesContent":["/*!\n * hkdf.js - hkdf for bcrypto\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HKDF\n *   https://tools.ietf.org/html/rfc5869\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\n\n/**\n * HKDF\n */\n\nfunction extract(hash, ikm, salt) {\n  assert(hash && typeof hash.id === 'string');\n\n  if (ikm == null)\n    ikm = Buffer.alloc(0);\n\n  if (salt == null)\n    salt = Buffer.alloc(hash.size, 0x00);\n\n  return hash.mac(ikm, salt);\n}\n\nfunction expand(hash, prk, info, len) {\n  if (info == null)\n    info = Buffer.alloc(0);\n\n  assert(hash && typeof hash.id === 'string');\n  assert(Buffer.isBuffer(prk));\n  assert(Buffer.isBuffer(info));\n  assert((len >>> 0) === len);\n\n  if (prk.length !== hash.size)\n    throw new RangeError('Invalid PRK length.');\n\n  const blocks = Math.ceil(len / hash.size);\n\n  if (blocks > 255)\n    throw new RangeError('Invalid output length.');\n\n  const out = Buffer.alloc(blocks * hash.size);\n  const ctr = Buffer.from([0]);\n  const mac = hash.hmac();\n\n  let prev = Buffer.alloc(0);\n  let pos = 0;\n\n  for (let i = 0; i < blocks; i++) {\n    ctr[0] += 1;\n\n    mac.init(prk);\n    mac.update(prev);\n    mac.update(info);\n    mac.update(ctr);\n\n    prev = mac.final();\n    pos += prev.copy(out, pos);\n  }\n\n  return out.slice(0, len);\n}\n\nfunction derive(hash, ikm, salt, info, len) {\n  const prk = extract(hash, ikm, salt);\n  return expand(hash, prk, info, len);\n}\n\n/*\n * Expose\n */\n\nexports.native = 0;\nexports.extract = extract;\nexports.expand = expand;\nexports.derive = derive;\n"]},"metadata":{},"sourceType":"script"}