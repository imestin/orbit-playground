{"ast":null,"code":"/*!\n * elliptic.js - elliptic curves for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/elliptic:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/elliptic\n *\n * Formulas from DJB and Tanja Lange [EFD].\n *\n * References:\n *\n *   [GECC] Guide to Elliptic Curve Cryptography\n *     D. Hankerson, A. Menezes, and S. Vanstone\n *     https://tinyurl.com/guide-to-ecc\n *\n *   [GLV] Faster Point Multiplication on Elliptic Curves\n *     R. Gallant, R. Lambert, and S. Vanstone\n *     https://link.springer.com/content/pdf/10.1007/3-540-44647-8_11.pdf\n *\n *   [MONT1] Montgomery curves and the Montgomery ladder\n *     Daniel J. Bernstein, Tanja Lange\n *     https://eprint.iacr.org/2017/293.pdf\n *\n *   [COZ] Scalar Multiplication on Elliptic Curves from Co-Z Arithmetic\n *     R. Goundar, M. Joye, A. Miyaji, M. Rivain, A. Venelli\n *     https://www.matthieurivain.com/files/jcen11b.pdf\n *\n *   [SQUARED] Elligator Squared\n *     Mehdi Tibouchi\n *     https://eprint.iacr.org/2014/043.pdf\n *\n *   [SEC1] SEC 1 - Standards for Efficient Cryptography Group\n *     Certicom Research\n *     https://www.secg.org/sec1-v2.pdf\n *\n *   [SEC2] SEC 2: Recommended Elliptic Curve Domain Parameters\n *     Certicom Research\n *     https://www.secg.org/sec2-v2.pdf\n *\n *   [SIDE1] Elliptic Curves and Side-Channel Attacks\n *     Marc Joye\n *     https://pdfs.semanticscholar.org/8d69/9645033e25d74fcfd4cbf07a770d2e943e14.pdf\n *\n *   [BLIND] Side-Channel Analysis on Blinding Regular Scalar Multiplications\n *     B. Feix, M. Roussellet, A. Venelli\n *     https://eprint.iacr.org/2014/191.pdf\n *\n *   [ALT] Alternative Elliptic Curve Representations\n *     R. Struik\n *     https://tools.ietf.org/id/draft-ietf-lwig-curve-representations-02.html\n *\n *   [ARITH1] Arithmetic of Elliptic Curves\n *     Christophe Doche, Tanja Lange\n *     Handbook of Elliptic and Hyperelliptic Curve Cryptography\n *     Page 267, Section 13 (978-1-58488-518-4)\n *     https://hyperelliptic.org/HEHCC/index.html\n *\n *   [ARITH2] The Arithmetic of Elliptic Curves, 2nd Edition\n *     Joseph H. Silverman\n *     http://www.pdmi.ras.ru/~lowdimma/BSD/Silverman-Arithmetic_of_EC.pdf\n *\n *   [EFD] Explicit-Formulas Database\n *     Daniel J. Bernstein, Tanja Lange\n *     https://hyperelliptic.org/EFD/index.html\n *\n *   [SAFE] SafeCurves: choosing safe curves for elliptic-curve cryptography\n *     Daniel J. Bernstein\n *     https://safecurves.cr.yp.to/\n *\n *   [4GLV] Refinement of the Four-Dimensional GLV Method on Elliptic Curves\n *     Hairong Yi, Yuqing Zhu, and Dongdai Lin\n *     http://www.site.uottawa.ca/~cadams/papers/prepro/paper_19_slides.pdf\n *\n *   [ICART] How to Hash into Elliptic Curves\n *     Thomas Icart\n *     https://eprint.iacr.org/2009/226.pdf\n *\n *   [SSWU1] Efficient Indifferentiable Hashing into Ordinary Elliptic Curves\n *     E. Brier, J. Coron, T. Icart, D. Madore, H. Randriam, M. Tibouchi\n *     https://eprint.iacr.org/2009/340.pdf\n *\n *   [SSWU2] Rational points on certain hyperelliptic curves over finite fields\n *     Maciej Ulas\n *     https://arxiv.org/abs/0706.1448\n *\n *   [H2EC] Hashing to Elliptic Curves\n *     A. Faz-Hernandez, S. Scott, N. Sullivan, R. S. Wahby, C. A. Wood\n *     https://git.io/JeWz6\n *     https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve\n *\n *   [SVDW1] Construction of Rational Points on Elliptic Curves\n *     A. Shallue, C. E. van de Woestijne\n *     https://works.bepress.com/andrew_shallue/1/download/\n *\n *   [SVDW2] Indifferentiable Hashing to Barreto-Naehrig Curves\n *     Pierre-Alain Fouque, Mehdi Tibouchi\n *     https://www.di.ens.fr/~fouque/pub/latincrypt12.pdf\n *\n *   [SVDW3] Covert ECDH over secp256k1\n *     Pieter Wuille\n *     https://gist.github.com/sipa/29118d3fcfac69f9930d57433316c039\n *\n *   [MONT2] Montgomery Curve (wikipedia)\n *     https://en.wikipedia.org/wiki/Montgomery_curve\n *\n *   [SIDE2] Weierstrass Elliptic Curves and Side-Channel Attacks\n *     Eric Brier, Marc Joye\n *     http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.2.273&rep=rep1&type=pdf\n *\n *   [SIDE3] Unified Point Addition Formulae and Side-Channel Attacks\n *     Douglas Stebila, Nicolas Theriault\n *     https://eprint.iacr.org/2005/419.pdf\n *\n *   [MONT3] Montgomery Curves and their arithmetic\n *     C. Costello, B. Smith\n *     https://eprint.iacr.org/2017/212.pdf\n *\n *   [ELL2] Elliptic-curve points indistinguishable from uniform random strings\n *     D. Bernstein, M. Hamburg, A. Krasnova, T. Lange\n *     https://elligator.cr.yp.to/elligator-20130828.pdf\n *\n *   [RFC7748] Elliptic Curves for Security\n *     A. Langley, M. Hamburg, S. Turner\n *     https://tools.ietf.org/html/rfc7748\n *\n *   [TWISTED] Twisted Edwards Curves\n *     D. Bernstein, P. Birkner, M. Joye, T. Lange, C. Peters\n *     https://eprint.iacr.org/2008/013.pdf\n *\n *   [ELL1] Injective Encodings to Elliptic Curves\n *     P. Fouque, A. Joux, M. Tibouchi\n *     https://eprint.iacr.org/2013/373.pdf\n *\n *   [ISOGENY] Twisting Edwards curves with isogenies\n *     Mike Hamburg\n *     https://www.shiftleft.org/papers/isogeny/isogeny.pdf\n *\n *   [RFC8032] Edwards-Curve Digital Signature Algorithm (EdDSA)\n *     S. Josefsson, SJD AB, I. Liusvaara\n *     https://tools.ietf.org/html/rfc8032\n *\n *   [TIMING] Remote Timing Attacks are Still Practical\n *     B. Brumley, N. Tuveri\n *     https://eprint.iacr.org/2011/232.pdf\n *\n *   [SCHNORR] Schnorr Signatures for secp256k1\n *     Pieter Wuille\n *     https://github.com/sipa/bips/blob/d194620/bip-schnorr.mediawiki\n *\n *   [BIP340] Schnorr Signatures for secp256k1\n *     Pieter Wuille, Jonas Nick, Tim Ruffing\n *     https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n *\n *   [JCEN12] Efficient Software Implementation of Public-Key Cryptography\n *            on Sensor Networks Using the MSP430X Microcontroller\n *     C. P. L. Gouvea, L. B. Oliveira, J. Lopez\n *     http://conradoplg.cryptoland.net/files/2010/12/jcen12.pdf\n *\n *   [FIPS186] Federal Information Processing Standards Publication\n *     National Institute of Standards and Technology\n *     https://tinyurl.com/fips-186-3\n *\n *   [RFC5639] Elliptic Curve Cryptography (ECC) Brainpool\n *             Standard Curves and Curve Generation\n *     M. Lochter, BSI, J. Merkle\n *     https://tools.ietf.org/html/rfc5639\n *\n *   [TWISTEQ] Twisted Edwards & Short Weierstrass Equivalence\n *     Christopher Jeffrey\n *     https://gist.github.com/chjj/16ba7fa08d64e8dda269a9fe5b2a8bbc\n *\n *   [ECPM] Elliptic Curve Point Multiplication (wikipedia)\n *     https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication\n */\n'use strict';\n\nconst {\n  custom\n} = require('../internal/custom');\n\nconst BN = require('../bn');\n/*\n * Constants\n */\n\n\nconst types = {\n  AFFINE: 0,\n  JACOBIAN: 1,\n  PROJECTIVE: 2,\n  EXTENDED: 3\n};\nconst jsfIndex = [-3, // -1 -1\n-1, // -1 0\n-5, // -1 1\n-7, // 0 -1\n0, // 0 0\n7, // 0 1\n5, // 1 -1\n1, // 1 0\n3 // 1 1\n];\nconst USE_FIXED = false;\nlet uid = 0;\n/**\n * Curve\n */\n\nclass Curve {\n  constructor(Point, type, conf) {\n    this.Point = null;\n    this.id = null;\n    this.uid = uid++;\n    this.ossl = null;\n    this.type = 'base';\n    this.endian = 'be';\n    this.hash = null;\n    this.prefix = null;\n    this.context = false;\n    this.prime = null;\n    this.p = null;\n    this.red = null;\n    this.fieldSize = 0;\n    this.fieldBits = 0;\n    this.adjustedSize = 0;\n    this.signBit = 0;\n    this.mask = 0;\n    this.n = null;\n    this.h = null;\n    this.q = null;\n    this.z = null;\n    this.g = null;\n    this.nh = null;\n    this.scalarSize = 0;\n    this.scalarBits = 0;\n    this.zero = null;\n    this.one = null;\n    this.two = null;\n    this.three = null;\n    this.four = null;\n    this.i2 = null;\n    this.i3 = null;\n    this.i4 = null;\n    this.i6 = null;\n    this.torsion = null;\n    this.endo = null;\n    this.hi = null;\n\n    this._init(Point, type, conf);\n  }\n\n  _init(Point, type, conf) {\n    assert(typeof Point === 'function');\n    assert(typeof type === 'string');\n    assert(conf && typeof conf === 'object');\n    assert(conf.red == null || conf.red instanceof BN.Red);\n    assert(conf.p != null, 'Must pass a prime.');\n    assert(conf.id == null || typeof conf.id === 'string');\n    assert(conf.ossl == null || typeof conf.ossl === 'string');\n    assert(conf.endian == null || typeof conf.endian === 'string');\n    assert(conf.hash == null || typeof conf.hash === 'string');\n    assert(conf.prefix == null || typeof conf.prefix === 'string');\n    assert(conf.context == null || typeof conf.context === 'boolean');\n    assert(conf.prime == null || typeof conf.prime === 'string');\n    assert(conf.torsion == null || Array.isArray(conf.torsion)); // Point class.\n\n    this.Point = Point; // Meta.\n\n    this.id = conf.id || null;\n    this.ossl = conf.ossl || null;\n    this.type = type;\n    this.endian = conf.endian || (type === 'short' ? 'be' : 'le');\n    this.hash = conf.hash || null;\n    this.prefix = conf.prefix ? Buffer.from(conf.prefix, 'binary') : null;\n    this.context = conf.context || false;\n    this.prime = conf.prime || null; // Prime.\n\n    this.p = BN.fromJSON(conf.p); // Reduction.\n\n    if (conf.red) {\n      this.red = conf.red;\n    } else {\n      // Use Montgomery when there is no fast reduction for the prime.\n      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n      this.red.precompute();\n    } // Precalculate encoding length.\n\n\n    this.fieldSize = this.p.byteLength();\n    this.fieldBits = this.p.bitLength();\n    this.adjustedSize = this.fieldSize + ((this.fieldBits & 7) === 0);\n    this.signBit = this.adjustedSize * 8 - 1;\n    this.mask = 0xff;\n    if ((this.fieldBits & 7) !== 0) this.mask = (1 << (this.fieldBits & 7)) - 1; // Curve configuration, optional.\n\n    this.n = BN.fromJSON(conf.n || '0');\n    this.h = BN.fromJSON(conf.h || '1');\n    this.q = this.n.mul(this.h);\n    this.z = BN.fromJSON(conf.z || '0').toRed(this.red);\n    this.g = null;\n    this.nh = this.n.ushrn(1);\n    this.scalarSize = this.n.byteLength();\n    this.scalarBits = this.n.bitLength(); // Useful for many curves.\n\n    this.zero = new BN(0).toRed(this.red);\n    this.one = new BN(1).toRed(this.red);\n    this.two = new BN(2).toRed(this.red);\n    this.three = new BN(3).toRed(this.red);\n    this.four = new BN(4).toRed(this.red); // Inverses.\n\n    this.i2 = this.two.redInvert();\n    this.i3 = this.three.redInvert();\n    this.i4 = this.i2.redSqr();\n    this.i6 = this.i2.redMul(this.i3); // Torsion.\n\n    this.torsion = new Array(this.h.word(0));\n\n    for (let i = 0; i < this.torsion.length; i++) this.torsion[i] = this.point(); // Endomorphism.\n\n\n    this.endo = null; // Cache.\n\n    this.hi = null; // Memoize.\n\n    this._scale = memoize(this._scale, this);\n    this.isIsomorphic = memoize(this.isIsomorphic, this);\n    this.isIsogenous = memoize(this.isIsogenous, this); // Sanity checks.\n\n    assert(this.p.sign() > 0 && this.p.isOdd());\n    assert(this.n.sign() >= 0);\n    assert(this.h.sign() > 0 && this.h.cmpn(255) <= 0);\n    assert(this.endian === 'be' || this.endian === 'le');\n    return this;\n  }\n\n  _finalize(conf) {\n    assert(conf && typeof conf === 'object'); // Create base point.\n\n    this.g = conf.g ? this.pointFromJSON(conf.g) : this.point(); // Parse small order points.\n\n    if (conf.torsion) {\n      assert(conf.torsion.length === this.torsion.length);\n\n      for (let i = 0; i < this.torsion.length; i++) this.torsion[i] = this.pointFromJSON(conf.torsion[i]);\n    }\n\n    return this;\n  }\n\n  _findTorsion() {\n    // Find all torsion points by grinding.\n    assert(!this.n.isZero());\n    const h = this.h.word(0);\n    const x = this.one.redNeg();\n    const out = [this.point()];\n    const set = new Set();\n    let len = h;\n\n    while (out.length < len) {\n      let p;\n      x.redIAdd(this.one);\n\n      try {\n        p = this.pointFromX(x.clone());\n      } catch (e) {\n        continue;\n      }\n\n      try {\n        p = p.mul(this.n);\n      } catch (e) {\n        len = 2;\n        continue;\n      }\n\n      if (p.isInfinity()) continue;\n      p.normalize();\n\n      for (const point of [p, p.neg()]) {\n        const key = point.key();\n\n        if (!set.has(key)) {\n          out.push(point);\n          set.add(key);\n        }\n      }\n    }\n\n    out.sort((a, b) => a.cmp(b));\n\n    while (out.length < h) out.push(this.point());\n\n    return out;\n  }\n\n  _simpleMul(p, k) {\n    // Left-to-right point multiplication.\n    //\n    // [GECC] Algorithm 3.27, Page 97, Section 3.3.\n    //        Algorithm 3.26, Page 96, Section 3.3.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(!k.red); // We prefer left-to-right since it\n    // allows us to repeatedly add an\n    // affine point to the accumulator.\n\n    const bits = k.bitLength(); // Flip sign if necessary.\n\n    if (k.isNeg()) p = p.neg(); // Multiply.\n\n    let acc = this.jpoint();\n\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = k.bit(i);\n      acc = acc.dbl();\n      if (bit === 1) acc = acc.add(p);\n    }\n\n    return acc;\n  }\n\n  _simpleMulAdd(points, coeffs) {\n    // Multiple point multiplication, also known\n    // as \"Shamir's trick\".\n    //\n    // [GECC] Algorithm 3.48, Page 109, Section 3.3.3.\n    assert(Array.isArray(points));\n    assert(Array.isArray(coeffs));\n    assert(points.length === coeffs.length);\n    const len = points.length;\n    const npoints = new Array(len);\n    const ncoeffs = coeffs; // Check arrays and calculate size.\n\n    let max = 0;\n\n    for (let i = 0; i < len; i++) {\n      const point = points[i];\n      const coeff = coeffs[i];\n      assert(point instanceof Point);\n      assert(coeff instanceof BN);\n      assert(!coeff.red);\n      if (i > 0 && point.type !== points[i - 1].type) throw new Error('Cannot mix points.'); // Flip signs if necessary.\n\n      npoints[i] = coeff.isNeg() ? point.neg() : point; // Compute max scalar size.\n\n      max = Math.max(max, coeff.bitLength());\n    } // Multiply and add.\n\n\n    let acc = this.jpoint();\n\n    for (let i = max - 1; i >= 0; i--) {\n      acc = acc.dbl();\n\n      for (let j = 0; j < len; j++) {\n        const point = npoints[j];\n        const coeff = ncoeffs[j];\n        const bit = coeff.bit(i);\n        if (bit === 1) acc = acc.add(point);\n      }\n    }\n\n    return acc;\n  }\n\n  _constMul(p, k, rng) {\n    assert(p instanceof Point); // Must have order.\n\n    if (this.n.isZero()) return this._simpleMul(p, k); // Use Co-Z arithmetic for Weierstrass (h=1).\n\n    if (this.type === 'short' && this.h.cmpn(1) === 0) return this._coZLadderMul(p, k); // Otherwise, a regular ladder.\n\n    return this._ladderMul(p, k);\n  }\n\n  _ladderMul(p, k) {\n    // Generalized Montgomery Ladder.\n    //\n    // [MONT1] Page 24, Section 4.6.2.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(!k.red); // Curve must expose some form of unified\n    // addition (this is easier said than done\n    // for Weierstrass curves). This ensures\n    // both branches of the ladder consume\n    // the same power and number of cycles.\n    //\n    // We implement the ladder as a branchless\n    // function with a constant time swap.\n    //\n    // Current cost:\n    //\n    //   N * (14M + 14S + 11A + 2*a + 1*8 + 3*4 + 2*3 + 4*2)\n    //\n    //   N=256 => 3584M + 3584S + 2816A + 512*a\n    //          + 256*8 + 768*4 + 512*3 + 1024*2\n\n    const [sign, bits, exp] = getLadderBits(k, this.q); // Clone points (for safe swapping).\n\n    let a = p.toJ().clone();\n    let b = this.jpoint().clone();\n    let swap = 0; // Climb the ladder.\n\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = exp[i >> 3] >> (i & 7) & 1; // Maybe swap.\n\n      a.swap(b, swap ^ bit); // Unified addition.\n\n      a = a.uadd(b);\n      b = b.udbl();\n      swap = bit;\n    } // Finalize loop.\n\n\n    a.swap(b, swap); // Flip sign retroactively.\n\n    b.swap(b.neg(), sign);\n    return b;\n  }\n\n  _coZLadderMul(p, k) {\n    // Co-Z Montgomery Ladder.\n    //\n    // [COZ] Algorithm 9, Page 6, Section 4.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(!k.red); // Multiply with Co-Z arithmetic. This method is\n    // 2x faster than our regular unified addition\n    // ladder. However, there are some problems with\n    // leakage of the scalar length.\n    //\n    // There are three issues with this algorithm:\n    //\n    //   1. The amount of steps in the ladder is not\n    //      constant, since we must assume k[n-1]=1\n    //      (it follows that k[n]=0). A side effect\n    //      of this is that we cannot handle a point\n    //      at infinity (k[n-1]=0).\n    //\n    //   2. On the off chance we pass in a \"low\"\n    //      scalar (lacking several hi bits), there\n    //      will be a noticeable difference in cycles.\n    //\n    //   3. The algorithm cannot handle k = -1 mod n.\n    //      It will overflow to infinity.\n    //\n    // To avoid two of these issues, we _negate_ the\n    // scalar in the event that bits(k) < bits(-k). If\n    // we do end up negating a scalar, we negate the\n    // resulting point in constant time at the end.\n    //\n    // Doing this not only solves the point at infinity\n    // issue (i.e. N-0=N=0), but it also ensures a scalar\n    // is within at least 1 bit of the order (usually).\n    //\n    // The final edge case can be solved with a\n    // comparison and subsequent constant-time swap at\n    // the end.\n    //\n    // Note that our scalar recoding here disallows\n    // the possibility of curves with a cofactor > 1.\n    //\n    // A possibility for a perf improvement involves\n    // using the ZACAU method. This is faster assuming\n    // a cost of 1S < 1M, but our squaring impl. is\n    // identical to our multiplication impl., so we\n    // wouldn't get any real benefit.\n    //\n    // Current cost:\n    //\n    //   1M + 5S + 8A + 4*2 + 1*8\n    //   N * (11M + 3S + 21A + 1*2)\n    //\n    //   N=256 => 2817M + 773S + 5384A + 256*2 + 4*2 + 1*8\n\n    const c = p.toJ().clone();\n    const [sign, bits, exp, m1] = getCOZBits(k, this.n); // Initial double (we assume k[n-1] == 1).\n\n    let [a, b] = c.zdblu();\n    let swap = 0; // Climb the ladder.\n\n    for (let i = bits - 2; i >= 0; i--) {\n      const bit = exp[i >> 3] >> (i & 7) & 1; // Maybe swap.\n\n      a.swap(b, swap ^ bit); // Co-Z addition.\n\n      [a, b] = b.zaddc(a);\n      [b, a] = a.zaddu(b);\n      swap = bit;\n    } // Finalize loop.\n\n\n    a.swap(b, swap); // Final edge case.\n\n    b.swap(c.neg(), m1); // Adjust sign.\n\n    b.swap(b.neg(), sign);\n    return b;\n  }\n\n  _fixedMul(p, k) {\n    // Fixed-base method for point multiplication.\n    //\n    // [ECPM] \"Windowed method\".\n    // [GECC] Page 95, Section 3.3.\n    //\n    // Windows are appropriately shifted to avoid any\n    // doublings. This reduces a 256 bit multiplication\n    // down to 64 additions with a window size of 4.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(p.pre && p.pre.windows); // Get precomputed windows.\n\n    const {\n      width,\n      bits,\n      points\n    } = p._getWindows(0, 0); // Recompute window size.\n\n\n    const size = 1 << width; // Recompute steps.\n\n    const steps = (bits + width - 1) / width >>> 0; // Multiply.\n\n    let acc = this.jpoint();\n\n    for (let i = 0; i < steps; i++) {\n      const bits = k.bits(i * width, width);\n      acc = acc.add(points[i * size + bits]);\n    } // Adjust sign.\n\n\n    if (k.isNeg()) acc = acc.neg();\n    return acc;\n  }\n\n  _fixedNafMul(p, k) {\n    // Fixed-base NAF windowing method for point multiplication.\n    //\n    // [GECC] Algorithm 3.42, Page 105, Section 3.3.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(p.pre && p.pre.doubles); // Get precomputed doubles.\n\n    const {\n      step,\n      points\n    } = p._getDoubles(0, 0); // Get fixed NAF (in a more windowed form).\n\n\n    const naf = getFixedNAF(k, 2, k.bitLength() + 1, step); // Compute steps.\n\n    const I = ((1 << step + 1) - (step % 2 === 0 ? 2 : 1)) / 3; // Multiply.\n\n    let a = this.jpoint();\n    let b = this.jpoint();\n\n    for (let i = I; i > 0; i--) {\n      for (let j = 0; j < naf.length; j++) {\n        const nafW = naf[j];\n        if (nafW === i) b = b.add(points[j]);else if (nafW === -i) b = b.sub(points[j]);\n      }\n\n      a = a.add(b);\n    }\n\n    return a;\n  }\n\n  _windowMul(width, p, k) {\n    // Windowed method for point multiplication.\n    //\n    // [ECPM] \"Windowed method\".\n    // [GECC] Page 95, Section 3.3.\n    assert(width >>> 0 === width);\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    const size = 1 << width;\n    const bits = Math.max(k.bitLength(), this.n.bitLength());\n    const steps = (bits + width - 1) / width >>> 0;\n    const wnd = new Array(size);\n    const point = p.toJ(); // Precompute.\n\n    wnd[0] = this.jpoint();\n    wnd[1] = point;\n\n    for (let i = 2; i < size; i += 2) {\n      wnd[i + 0] = wnd[i >> 1].dbl();\n      wnd[i + 1] = wnd[i].add(point);\n    } // Multiply.\n\n\n    let acc = this.jpoint();\n\n    for (let i = steps - 1; i >= 0; i--) {\n      const bits = k.bits(i * width, width);\n\n      if (i === steps - 1) {\n        acc = wnd[bits];\n      } else {\n        acc = acc.dblp(width);\n        acc = acc.add(wnd[bits]);\n      }\n    } // Adjust sign.\n\n\n    if (k.isNeg()) acc = acc.neg();\n    return acc;\n  }\n\n  _slideMul(width, p, k) {\n    // Sliding window method for point multiplication.\n    //\n    // [ECPM] \"Sliding-window method\".\n    // [GECC] Algorithm 3.38, Page 101, Section 3.3.\n    assert(width >>> 0 === width);\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    const size = 1 << width - 1;\n    const wnd = new Array(size);\n    const point = p.toJ(); // Precompute.\n\n    wnd[0] = point.dblp(width - 1);\n\n    for (let i = 1; i < size; i++) wnd[i] = wnd[i - 1].add(point); // Multiply.\n\n\n    let i = k.bitLength();\n    let r = this.jpoint();\n\n    while (i >= width) {\n      const pos = i - width;\n      const bits = k.bits(pos, width);\n\n      if (bits < size) {\n        r = r.dbl();\n        i -= 1;\n        continue;\n      }\n\n      r = r.dblp(width);\n      r = r.add(wnd[bits & ~size]);\n      i = pos;\n    } // Finish.\n\n\n    if (i > 0) {\n      const bits = k.bits(0, i);\n\n      while (i--) {\n        r = r.dbl();\n        if (bits >> i & 1) r = r.add(p);\n      }\n    } // Adjust sign.\n\n\n    if (k.isNeg()) r = r.neg();\n    return r;\n  }\n\n  _wnafMul(w, p, k) {\n    // Window NAF method for point multiplication.\n    //\n    // [GECC] Algorithm 3.36, Page 100, Section 3.3.\n    assert(p instanceof Point);\n    assert(k instanceof BN); // Precompute window.\n\n    const {\n      width,\n      points\n    } = p._safeNAF(w); // Get NAF form.\n\n\n    const naf = getNAF(k, width, k.bitLength() + 1); // Add `this`*(N+1) for every w-NAF index.\n\n    let acc = this.jpoint();\n\n    for (let i = naf.length - 1; i >= 0; i--) {\n      const z = naf[i];\n      if (i !== naf.length - 1) acc = acc.dbl();\n      if (z > 0) acc = acc.add(points[z - 1 >> 1]);else if (z < 0) acc = acc.sub(points[-z - 1 >> 1]);\n    }\n\n    return acc;\n  }\n\n  _wnafMulAdd(w, points, coeffs) {\n    // Multiple point multiplication, also known\n    // as \"Shamir's trick\" (with interleaved NAFs).\n    //\n    // [GECC] Algorithm 3.48, Page 109, Section 3.3.3.\n    //        Algorithm 3.51, Page 112, Section 3.3.\n    //\n    // This is particularly useful for signature\n    // verifications and mutiplications after an\n    // endomorphism split.\n    assert(w >>> 0 === w);\n    assert(Array.isArray(points));\n    assert(Array.isArray(coeffs));\n    assert(points.length === coeffs.length);\n    const length = points.length;\n    const wnd = new Array(length);\n    const naf = new Array(length); // Check arrays and calculate size.\n\n    let max = 0;\n\n    for (let i = 0; i < length; i++) {\n      const point = points[i];\n      const coeff = coeffs[i];\n      assert(point instanceof Point);\n      assert(coeff instanceof BN);\n      if (i > 0 && point.type !== points[i - 1].type) throw new Error('Cannot mix points.'); // Avoid sparse arrays.\n\n      wnd[i] = null;\n      naf[i] = null; // Compute max scalar size.\n\n      max = Math.max(max, coeff.bitLength() + 1);\n    } // Compute NAFs.\n\n\n    let ppoint = null;\n    let pcoeff = null;\n    let len = 0;\n\n    for (let i = 0; i < length; i++) {\n      const point = points[i];\n      const coeff = coeffs[i];\n\n      const pre = point._getNAF(0); // Use precomputation if available.\n\n\n      if (pre) {\n        wnd[len] = pre.points;\n        naf[len] = getNAF(coeff, pre.width, max);\n        len += 1;\n        continue;\n      } // Save last non-precomputed point.\n\n\n      if (!ppoint) {\n        ppoint = point;\n        pcoeff = coeff;\n        continue;\n      } // Compute JSF in NAF form.\n\n\n      wnd[len] = ppoint._getJNAF(point);\n      naf[len] = getJNAF(pcoeff, coeff, max);\n      ppoint = null;\n      pcoeff = null;\n      len += 1;\n    } // Regular NAF for odd points.\n\n\n    if (ppoint) {\n      const nafw = ppoint._safeNAF(w);\n\n      wnd[len] = nafw.points;\n      naf[len] = getNAF(pcoeff, nafw.width, max);\n      len += 1;\n    } // Multiply and add.\n\n\n    let acc = this.jpoint();\n\n    for (let i = max - 1; i >= 0; i--) {\n      if (i !== max - 1) acc = acc.dbl();\n\n      for (let j = 0; j < len; j++) {\n        const z = naf[j][i];\n        if (z > 0) acc = acc.add(wnd[j][z - 1 >> 1]);else if (z < 0) acc = acc.sub(wnd[j][-z - 1 >> 1]);\n      }\n    }\n\n    return acc;\n  }\n\n  _endoWnafMulAdd(points, coeffs) {\n    throw new Error('Not implemented.');\n  }\n\n  _scale(curve, invert) {\n    assert(curve instanceof Curve);\n    assert(curve.p.eq(this.p));\n\n    switch (curve.type) {\n      case 'short':\n        return this._scaleShort(curve, invert);\n\n      case 'mont':\n        return this._scaleMont(curve, invert);\n\n      case 'edwards':\n        return this._scaleEdwards(curve, invert);\n\n      default:\n        throw new Error('Not implemented.');\n    }\n  }\n\n  _scaleShort(curve, invert) {\n    throw new Error('Not implemented.');\n  }\n\n  _scaleMont(curve, invert) {\n    throw new Error('Not implemented.');\n  }\n\n  _scaleEdwards(curve, invert) {\n    throw new Error('Not implemented.');\n  }\n\n  isElliptic() {\n    throw new Error('Not implemented.');\n  }\n\n  jinv() {\n    throw new Error('Not implemented.');\n  }\n\n  isComplete() {\n    return false;\n  }\n\n  precompute(rng) {\n    assert(!this.g.isInfinity(), 'Must have base point.');\n    assert(!this.n.isZero(), 'Must have order.');\n    this.g.precompute(this.n.bitLength(), rng);\n    return this;\n  }\n\n  scalar(num, base, endian) {\n    const k = new BN(num, base, endian);\n    assert(!k.red);\n    if (this.n.isZero()) return k;\n    return k.imod(this.n);\n  }\n\n  field(num, base, endian) {\n    const x = BN.cast(num, base, endian);\n    if (x.red) return x.forceRed(this.red);\n    return x.toRed(this.red);\n  }\n\n  point(x, y) {\n    throw new Error('Not implemented.');\n  }\n\n  jpoint(x, y, z) {\n    throw new Error('Not implemented.');\n  }\n\n  xpoint(x, z) {\n    throw new Error('Not implemented.');\n  }\n\n  cpoint(xx, xz, yy, yz) {\n    assert(xx instanceof BN);\n    assert(xz instanceof BN);\n    assert(yy instanceof BN);\n    assert(yz instanceof BN);\n    if (xz.isZero() || yz.isZero()) return this.point();\n    const z = xz.redMul(yz).redInvert();\n    const x = xx.redMul(yz).redMul(z);\n    const y = yy.redMul(xz).redMul(z);\n    return this.point(x, y);\n  }\n\n  solveX2(y) {\n    throw new Error('Not implemented.');\n  }\n\n  solveX(y) {\n    return this.solveX2(y).redSqrt();\n  }\n\n  solveY2(x) {\n    throw new Error('Not implemented.');\n  }\n\n  solveY(x) {\n    return this.solveY2(x).redSqrt();\n  }\n\n  validate(point) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromX(x, sign) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromY(y, sign) {\n    throw new Error('Not implemented.');\n  }\n\n  isIsomorphic(curve) {\n    throw new Error('Not implemented.');\n  }\n\n  isIsogenous(curve) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromShort(point) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromMont(point, sign) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromEdwards(point) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromUniform(u) {\n    throw new Error('Not implemented.');\n  }\n\n  pointToUniform(p) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromHash(bytes, pake = false) {\n    // [H2EC] \"Roadmap\".\n    assert(Buffer.isBuffer(bytes));\n    assert(typeof pake === 'boolean');\n    if (bytes.length !== this.fieldSize * 2) throw new Error('Invalid hash size.'); // Random oracle encoding.\n    // Ensure a proper distribution.\n\n    const s1 = bytes.slice(0, this.fieldSize);\n    const s2 = bytes.slice(this.fieldSize);\n    const u1 = this.decodeUniform(s1);\n    const u2 = this.decodeUniform(s2);\n    const p1 = this.pointFromUniform(u1);\n    const p2 = this.pointFromUniform(u2);\n    const p3 = p1.uadd(p2);\n    return pake ? p3.mulH() : p3;\n  }\n\n  pointToHash(p, subgroup, rng) {\n    // [SQUARED] Algorithm 1, Page 8, Section 3.3.\n    assert(p instanceof this.Point);\n    assert(subgroup >>> 0 === subgroup); // Add a random torsion component.\n\n    const i = subgroup % this.torsion.length;\n    const p0 = p.add(this.torsion[i]); // Average Cost (R = sqrt):\n    //\n    //   SSWU (~4 iterations) => 8I + 16R\n    //   SVDW (~4 iterations) => 12I + 28R\n    //   Elligator 1 (~2 iterations) => 6I + 10R\n    //   Elligator 2 (~2 iterations) => 4I + 6R\n    //   Ristretto (~1 iteration) => 1I + 2R + h*1R\n\n    for (;;) {\n      const u1 = this.randomField(rng);\n      const p1 = this.pointFromUniform(u1); // Avoid 2-torsion points:\n      //   Short Weierstrass: ((A / 3) / B, 0)\n      //   Montgomery: (0, 0)\n      //   Twisted Edwards: (0, -1)\n\n      if (p1.neg().eq(p1)) continue;\n      const p2 = p0.usub(p1);\n      const hint = randomInt(rng);\n      let u2;\n\n      try {\n        u2 = this.pointToUniform(p2, hint & 15);\n      } catch (e) {\n        if (e.message === 'Invalid point.') continue;\n        throw e;\n      }\n\n      const s1 = this.encodeUniform(u1, hint >>> 8);\n      const s2 = this.encodeUniform(u2, hint >>> 16);\n      return Buffer.concat([s1, s2]);\n    }\n  }\n\n  randomScalar(rng) {\n    const max = this.n.isZero() ? this.p : this.n;\n    return BN.random(rng, 1, max);\n  }\n\n  randomField(rng) {\n    return BN.random(rng, 1, this.p).toRed(this.red);\n  }\n\n  randomPoint(rng) {\n    let p;\n\n    for (;;) {\n      const x = this.randomField(rng);\n      const sign = (randomInt(rng) & 1) !== 0;\n\n      try {\n        p = this.pointFromX(x, sign);\n      } catch (e) {\n        continue;\n      }\n\n      assert(p.validate());\n      return p.mulH();\n    }\n  }\n\n  mulAll(points, coeffs) {\n    return this.jmulAll(points, coeffs);\n  }\n\n  mulAllSimple(points, coeffs) {\n    return this.jmulAllSimple(points, coeffs);\n  }\n\n  jmulAll(points, coeffs) {\n    assert(Array.isArray(points));\n    assert(points.length === 0 || points[0] instanceof Point); // Multiply with endomorphism if we're using affine points.\n\n    if (this.endo && points.length > 0 && points[0].type === types.AFFINE) return this._endoWnafMulAdd(points, coeffs); // Otherwise, a regular Shamir's trick.\n\n    return this._wnafMulAdd(5, points, coeffs);\n  }\n\n  jmulAllSimple(points, coeffs) {\n    return this._simpleMulAdd(points, coeffs);\n  }\n\n  mulH(k) {\n    assert(k instanceof BN);\n    return this.imulH(k.clone());\n  }\n\n  imulH(k) {\n    assert(k instanceof BN);\n    assert(!k.red);\n    const word = this.h.word(0); // Optimize for powers of two.\n\n    if ((word & word - 1) === 0) {\n      const bits = this.h.bitLength();\n      return k.iushln(bits - 1).imod(this.n);\n    }\n\n    return k.imuln(word).imod(this.n);\n  }\n\n  clamp(scalar) {\n    // [RFC7748] Page 8, Section 5.\n    // [RFC8032] Section 5.1.5 & 5.2.5.\n    assert(Buffer.isBuffer(scalar));\n    assert(scalar.length === this.scalarSize);\n    assert(this.scalarSize <= this.fieldSize);\n    let top = this.fieldBits & 7 || 8;\n    let lsb = 0;\n    let msb = this.scalarSize - 1; // Swap endianness.\n\n    if (this.endian === 'be') [lsb, msb] = [msb, lsb]; // Adjust for low order.\n\n    if (this.scalarSize < this.fieldSize) top = 8; // Ensure a multiple of the cofactor.\n\n    scalar[lsb] &= -this.h.word(0) & 0xff; // Clamp to the prime.\n\n    scalar[msb] &= (1 << top) - 1; // Set the high bit.\n\n    scalar[msb] |= 1 << top - 1;\n    return scalar;\n  }\n\n  splitHash(bytes) {\n    // [RFC8032] Section 5.1.6 & 5.2.6.\n    assert(Buffer.isBuffer(bytes));\n    assert(bytes.length === this.adjustedSize * 2);\n    assert(this.scalarSize <= this.adjustedSize);\n    let off = 0;\n    if (this.endian === 'be') off = this.adjustedSize - this.scalarSize;\n    const scalar = bytes.slice(off, off + this.scalarSize);\n    const prefix = bytes.slice(this.adjustedSize);\n    this.clamp(scalar);\n    return [scalar, prefix];\n  }\n\n  encodeField(x) {\n    // [SEC1] Page 12, Section 2.3.5.\n    assert(x instanceof BN);\n    assert(!x.red);\n    return x.encode(this.endian, this.fieldSize);\n  }\n\n  decodeField(bytes) {\n    // [SEC1] Page 13, Section 2.3.6.\n    assert(Buffer.isBuffer(bytes));\n    if (bytes.length !== this.fieldSize) throw new Error('Invalid field element size.');\n    return BN.decode(bytes, this.endian);\n  }\n\n  encodeAdjusted(x) {\n    assert(x instanceof BN);\n    assert(!x.red);\n    return x.encode(this.endian, this.adjustedSize);\n  }\n\n  decodeAdjusted(bytes) {\n    assert(Buffer.isBuffer(bytes));\n    if (bytes.length !== this.adjustedSize) throw new Error('Invalid field element size.');\n    return BN.decode(bytes, this.endian);\n  }\n\n  encodeScalar(k) {\n    // [SEC1] Page 13, Section 2.3.7.\n    assert(k instanceof BN);\n    assert(!k.red);\n    return k.encode(this.endian, this.scalarSize);\n  }\n\n  decodeScalar(bytes) {\n    // [SEC1] Page 14, Section 2.3.8.\n    assert(Buffer.isBuffer(bytes));\n    if (bytes.length !== this.scalarSize) throw new Error('Invalid scalar size.');\n    return BN.decode(bytes, this.endian);\n  }\n\n  encodeClamped(k) {\n    // [RFC7748] Page 8, Section 5.\n    // [RFC8032] Section 5.1.5 & 5.2.5.\n    return this.clamp(this.encodeScalar(k));\n  }\n\n  decodeClamped(bytes) {\n    // [RFC7748] Page 8, Section 5.\n    // [RFC8032] Section 5.1.5 & 5.2.5.\n    assert(Buffer.isBuffer(bytes));\n    if (bytes.length !== this.scalarSize) throw new Error('Invalid scalar size.');\n    const clamped = this.clamp(Buffer.from(bytes));\n    return BN.decode(clamped, this.endian);\n  }\n\n  encodeUniform(x, bits) {\n    assert(x instanceof BN);\n    assert(bits >>> 0 === bits);\n    const msb = this.endian === 'le' ? this.fieldSize - 1 : 0;\n    const bytes = x.fromRed().encode(this.endian, this.fieldSize);\n    bytes[msb] |= bits & ~this.mask & 0xff;\n    return bytes;\n  }\n\n  decodeUniform(bytes) {\n    assert(Buffer.isBuffer(bytes));\n    if (bytes.length !== this.fieldSize) throw new Error('Invalid field size.');\n    const x = BN.decode(bytes, this.endian);\n    x.iumaskn(this.fieldBits);\n    return x.toRed(this.red);\n  }\n\n  encodePoint(point, compact) {\n    assert(point instanceof Point);\n    return point.encode(compact);\n  }\n\n  decodePoint(bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  encodeX(point) {\n    throw new Error('Not implemented.');\n  }\n\n  decodeX(bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  decodeEven(bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  decodeSquare(bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  toShort() {\n    throw new Error('Not implemented.');\n  }\n\n  toMont(b0) {\n    throw new Error('Not implemented.');\n  }\n\n  toEdwards(a0) {\n    throw new Error('Not implemented.');\n  }\n\n  pointToJSON(point, pre) {\n    assert(point instanceof Point);\n    return point.toJSON(pre);\n  }\n\n  pointFromJSON(json) {\n    throw new Error('Not implemented.');\n  }\n\n  toJSON(pre) {\n    let prefix, context;\n    let n, z, endo;\n\n    if (this.type === 'edwards') {\n      prefix = this.prefix ? this.prefix.toString() : null;\n      context = this.context;\n    }\n\n    if (!this.n.isZero()) n = this.n.toJSON();\n\n    if (!this.z.isZero()) {\n      z = this.z.fromRed();\n      if (this.z.redIsHigh()) z.isub(this.p);\n      z = z.toString(16);\n    }\n\n    if (this.endo) endo = this.endo.toJSON();\n    return {\n      id: this.id,\n      ossl: this.ossl,\n      type: this.type,\n      endian: this.endian,\n      hash: this.hash,\n      prefix,\n      context,\n      prime: this.prime,\n      p: this.p.toJSON(),\n      a: undefined,\n      b: undefined,\n      d: undefined,\n      n,\n      h: this.h.toString(16),\n      s: undefined,\n      z,\n      c: undefined,\n      g: this.g.toJSON(pre),\n      endo\n    };\n  }\n\n  static fromJSON(json) {\n    return new this(json);\n  }\n\n}\n/**\n * Point\n */\n\n\nclass Point {\n  constructor(curve, type) {\n    assert(curve instanceof Curve);\n    assert(type >>> 0 === type);\n    this.curve = curve;\n    this.type = type;\n    this.pre = null;\n  }\n\n  _init() {\n    throw new Error('Not implemented.');\n  }\n\n  _getNAF(width) {\n    assert(width >>> 0 === width);\n    if (this.pre && this.pre.naf) return this.pre.naf;\n    if (width === 0) return null;\n    const size = 1 << width - 2;\n    const points = new Array(size);\n    const dbl = size === 1 ? null : this.dbl();\n    points[0] = this;\n\n    for (let i = 1; i < size; i++) points[i] = points[i - 1].add(dbl);\n\n    return new NAF(width, points);\n  }\n\n  _safeNAF(width) {\n    return this._getNAF(width);\n  }\n\n  _getWindows(width, bits) {\n    assert(width >>> 0 === width);\n    assert(bits >>> 0 === bits);\n    if (this.pre && this.pre.windows) return this.pre.windows;\n    if (width === 0) return null;\n    const size = 1 << width;\n    const steps = (bits + width - 1) / width >>> 0;\n    const points = new Array(steps * size);\n    let g = this.toP();\n\n    for (let i = 0; i < steps; i++) {\n      points[i * size] = this.curve.point();\n\n      for (let j = 1; j < size; j++) points[i * size + j] = points[i * size + j - 1].add(g);\n\n      g = g.dblp(width);\n    }\n\n    return new Windows(width, bits, points);\n  }\n\n  _getDoubles(step, power) {\n    assert(step >>> 0 === step);\n    assert(power >>> 0 === power);\n    if (this.pre && this.pre.doubles) return this.pre.doubles;\n    if (step === 0) return null;\n    const len = Math.ceil(power / step) + 1;\n    const points = new Array(len);\n    let acc = this;\n    let k = 0;\n    points[k++] = acc;\n\n    for (let i = 0; i < power; i += step) {\n      for (let j = 0; j < step; j++) acc = acc.dbl();\n\n      points[k++] = acc;\n    }\n\n    assert(k === len);\n    return new Doubles(step, points);\n  }\n\n  _getBeta() {\n    return null;\n  }\n\n  _getBlinding(rng) {\n    if (this.pre && this.pre.blinding) return this.pre.blinding;\n    if (!rng) return null;\n    if (this.curve.n.isZero()) return null; // Pregenerate a random blinding value:\n    //\n    //   blind = random integer in [1,n-1]\n    //   unblind = G * blind\n    //\n    // We intend to subtract the blinding value\n    // from scalars before multiplication. We\n    // can add the unblinding point once the\n    // multiplication is complete.\n\n    const blind = this.curve.randomScalar(rng);\n    const unblind = this.mul(blind);\n    return new Blinding(blind, unblind);\n  }\n\n  _hasWindows(k) {\n    assert(k instanceof BN);\n    if (!this.pre || !this.pre.windows) return false;\n    const {\n      bits\n    } = this.pre.windows;\n    return bits >= k.bitLength();\n  }\n\n  _hasDoubles(k) {\n    assert(k instanceof BN);\n    if (!this.pre || !this.pre.doubles) return false;\n    const {\n      step,\n      points\n    } = this.pre.doubles;\n    const power = k.bitLength() + 1;\n    return points.length >= Math.ceil(power / step) + 1;\n  }\n\n  _getJNAF(point) {\n    assert(point instanceof Point);\n    assert(point.type === this.type); // Create comb for JSF.\n\n    return [this, // 1\n    this.add(point), // 3\n    this.sub(point), // 5\n    point // 7\n    ];\n  }\n\n  _blind(k, rng) {\n    // [SIDE1] Page 5, Section 4.\n    // [BLIND] Page 20, Section 7.\n    assert(k instanceof BN);\n    assert(!k.red); // Scalar splitting (requires precomputation).\n    //\n    // Blind a multiplication by first subtracting\n    // a blinding value from the scalar. Example:\n    //\n    //   b = random integer in [1,n-1]\n    //   B = P * b (precomputed)\n    //   Q = P * (k - b) + B\n    //\n    // Note that Joye describes a different method\n    // (multiplier randomization) which computes:\n    //\n    //   B = random point in E\n    //   Q = (P + B) * k - B * k\n    //\n    // Our method is more similar to the \"scalar\n    // splitting\" technique described in the\n    // second source above.\n    //\n    // The blinding value and its corresponding\n    // point are randomly generated and computed\n    // on boot. As long as an attacker is not\n    // able to observe the boot, this should give\n    // a decent bit of protection against various\n    // channel attacks.\n\n    if (this.pre && this.pre.blinding) {\n      const {\n        blind,\n        unblind\n      } = this.pre.blinding;\n      const t = k.sub(blind);\n      return [this, t, unblind];\n    } // Randomization is not possible without\n    // an RNG. Do a normal multiplication.\n\n\n    if (!rng) return [this, k, null]; // If we have no precomputed blinding\n    // factor, there are two possibilities\n    // for randomization:\n    //\n    // 1. Randomize the multiplier by adding\n    //    a random multiple of `n`.\n    //\n    // 2. Re-scale the point itself by a\n    //    random factor.\n    //\n    // The first option can be accomplished\n    // with some like:\n    //\n    //   a = random integer in [1,n-1]\n    //   r = a * n\n    //   Q = P * (k + r)\n    //\n    // The second is accomplished with:\n    //\n    //   a = random element in F(p)\n    //   R = (x * a^2, y * a^3, z * a)\n    //   Q = R * k\n    //\n    // If we have precomputed doubles / naf\n    // points, we opt for the first method\n    // to avoid randomizing everything.\n\n    if (this.pre) {\n      if (this.curve.n.isZero()) return [this, k, null];\n      const a = this.curve.randomScalar(rng);\n      const r = a.mul(this.curve.n);\n      const t = r.iadd(k);\n      return [this, t, null];\n    } // If there is no precomputation _at all_,\n    // we opt for the second method.\n\n\n    const p = this.randomize(rng);\n    return [p, k, null];\n  }\n\n  clone() {\n    throw new Error('Not implemented.');\n  }\n\n  swap(point, flag) {\n    throw new Error('Not implemented.');\n  }\n\n  precompute(bits, rng) {\n    assert(bits >>> 0 === bits);\n    if (!this.pre) this.pre = new Precomp();\n    if (!this.pre.naf) this.pre.naf = this._getNAF(9);\n    if (USE_FIXED && !this.pre.windows) this.pre.windows = this._getWindows(4, bits);\n    if (!this.pre.doubles) this.pre.doubles = this._getDoubles(4, bits + 1);\n    if (!this.pre.beta) this.pre.beta = this._getBeta();\n    if (!this.pre.blinding) this.pre.blinding = this._getBlinding(rng);\n    return this;\n  }\n\n  validate() {\n    return this.curve.validate(this);\n  }\n\n  normalize() {\n    return this;\n  }\n\n  scale(a) {\n    throw new Error('Not implemented.');\n  }\n\n  randomize(rng) {\n    const z = this.curve.randomField(rng);\n    return this.scale(z);\n  }\n\n  neg() {\n    throw new Error('Not implemented.');\n  }\n\n  add(point) {\n    throw new Error('Not implemented.');\n  }\n\n  sub(point) {\n    assert(point instanceof Point);\n    return this.add(point.neg());\n  }\n\n  dbl() {\n    throw new Error('Not implemented.');\n  }\n\n  dblp(pow) {\n    // Repeated doubling. This can\n    // be optimized by child classes.\n    assert(pow >>> 0 === pow);\n    let r = this;\n\n    for (let i = 0; i < pow; i++) r = r.dbl();\n\n    return r;\n  }\n\n  uadd(point) {\n    throw new Error('Not implemented.');\n  }\n\n  usub(point) {\n    assert(point instanceof Point);\n    return this.uadd(point.neg());\n  }\n\n  udbl() {\n    throw new Error('Not implemented.');\n  }\n\n  zaddu(point) {\n    throw new Error('Not implemented.');\n  }\n\n  zaddc(point) {\n    throw new Error('Not implemented.');\n  }\n\n  zdblu() {\n    throw new Error('Not implemented.');\n  }\n\n  diffAdd(p, q) {\n    throw new Error('Not implemented.');\n  }\n\n  diffAddDbl(p, q) {\n    throw new Error('Not implemented.');\n  }\n\n  recover() {\n    throw new Error('Not implemented.');\n  }\n\n  getX() {\n    throw new Error('Not implemented.');\n  }\n\n  getY() {\n    throw new Error('Not implemented.');\n  }\n\n  eq(point) {\n    throw new Error('Not implemented.');\n  }\n\n  cmp(point) {\n    throw new Error('Not implemented.');\n  }\n\n  isInfinity() {\n    throw new Error('Not implemented.');\n  }\n\n  isOrder2() {\n    throw new Error('Not implemented.');\n  }\n\n  isOdd() {\n    throw new Error('Not implemented.');\n  }\n\n  isEven() {\n    throw new Error('Not implemented.');\n  }\n\n  isSquare() {\n    throw new Error('Not implemented.');\n  }\n\n  eqX(x) {\n    throw new Error('Not implemented.');\n  }\n\n  eqR(x) {\n    throw new Error('Not implemented.');\n  }\n\n  isSmall() {\n    // Test whether the point is of small order.\n    if (this.isInfinity()) return false; // P * h = O\n\n    return this.jmulH().isInfinity();\n  }\n\n  hasTorsion() {\n    // Test whether the point is in another subgroup.\n    if (this.isInfinity()) return false; // P * n != O\n\n    return !this.jmul(this.curve.n).isInfinity();\n  }\n\n  order() {\n    // Calculate point order.\n    const {\n      h,\n      n\n    } = this.curve;\n    let p = this.toJ();\n    let q = new BN(1);\n\n    while (!p.isInfinity()) {\n      q.iaddn(1);\n\n      if (q.cmp(h) > 0) {\n        q = n.clone();\n        break;\n      }\n\n      p = p.add(this);\n    }\n\n    return q;\n  }\n\n  mul(k) {\n    return this.jmul(k);\n  }\n\n  muln(k) {\n    return this.jmuln(k);\n  }\n\n  mulSimple(k) {\n    return this.jmulSimple(k);\n  }\n\n  mulBlind(k, rng) {\n    return this.jmulBlind(k, rng);\n  }\n\n  mulConst(k, rng) {\n    return this.jmulConst(k, rng);\n  }\n\n  mulAdd(k1, p2, k2) {\n    return this.jmulAdd(k1, p2, k2);\n  }\n\n  mulAddSimple(k1, p2, k2) {\n    return this.jmulAddSimple(k1, p2, k2);\n  }\n\n  mulH() {\n    return this.jmulH();\n  }\n\n  div(k) {\n    return this.jdiv(k);\n  }\n\n  divn(k) {\n    return this.jdivn(k);\n  }\n\n  divH() {\n    return this.jdivH();\n  }\n\n  jmul(k) {\n    if (USE_FIXED && this._hasWindows(k)) return this.curve._fixedMul(this, k);\n    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n    if (this.curve.endo && this.type === types.AFFINE) return this.curve._endoWnafMulAdd([this], [k]);\n    return this.curve._wnafMul(5, this, k);\n  }\n\n  jmuln(k) {\n    assert((k | 0) === k);\n    return this.jmulSimple(new BN(k));\n  }\n\n  jmulSimple(k) {\n    return this.curve._simpleMul(this, k);\n  }\n\n  jmulBlind(k, rng = null) {\n    const [p, t, unblind] = this._blind(k, rng);\n\n    const q = p.jmul(t);\n    if (unblind) return q.add(unblind);\n    return q;\n  }\n\n  jmulConst(k, rng = null) {\n    const [p, t, unblind] = this._blind(k, rng);\n\n    const q = this.curve._constMul(p, t, rng);\n\n    if (unblind) return q.uadd(unblind);\n    return q;\n  }\n\n  jmulAdd(k1, p2, k2) {\n    if (this.curve.endo && this.type === types.AFFINE) return this.curve._endoWnafMulAdd([this, p2], [k1, k2]);\n    return this.curve._wnafMulAdd(5, [this, p2], [k1, k2]);\n  }\n\n  jmulAddSimple(k1, p2, k2) {\n    return this.curve._simpleMulAdd([this, p2], [k1, k2]);\n  }\n\n  jmulH() {\n    const word = this.curve.h.word(0); // Optimize for powers of two.\n\n    if ((word & word - 1) === 0) {\n      const bits = this.curve.h.bitLength();\n      return this.toJ().dblp(bits - 1);\n    }\n\n    return this.jmulSimple(this.curve.h);\n  }\n\n  jdiv(k) {\n    assert(k instanceof BN);\n    assert(!k.red);\n    return this.jmul(k.invert(this.curve.n));\n  }\n\n  jdivn(k) {\n    assert(!this.curve.n.isZero());\n    if (this.curve.h.cmpn(k) === 0) return this.jdivH();\n    return this.jdiv(new BN(k));\n  }\n\n  jdivH() {\n    if (this.curve.n.isZero()) return this.toJ();\n    if (this.curve.h.cmpn(1) === 0) return this.toJ();\n    if (this.curve.hi === null) this.curve.hi = this.curve.h.invert(this.curve.n);\n    return this.jmul(this.curve.hi);\n  }\n\n  ladder(k) {\n    throw new Error('Not implemented.');\n  }\n\n  ladderSimple(k) {\n    throw new Error('Not implemented.');\n  }\n\n  ladderBlind(k, rng) {\n    throw new Error('Not implemented.');\n  }\n\n  ladderConst(k, rng) {\n    throw new Error('Not implemented.');\n  }\n\n  toP() {\n    return this.normalize();\n  }\n\n  toJ() {\n    return this;\n  }\n\n  toX() {\n    return this;\n  }\n\n  key() {\n    if (this.isInfinity()) return `${this.curve.uid}:oo`;\n    this.normalize();\n    const x = this.getX().toString(16);\n    const y = this.getY().toString(16);\n    return `${this.curve.uid}:${x},${y}`;\n  }\n\n  encode(compact) {\n    throw new Error('Not implemented.');\n  }\n\n  static decode(curve, bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  encodeX() {\n    throw new Error('Not implemented.');\n  }\n\n  static decodeX(curve, bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  static decodeEven(curve, bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  static decodeSquare(curve, bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  toJSON(pre) {\n    throw new Error('Not implemented.');\n  }\n\n  static fromJSON(curve, json) {\n    throw new Error('Not implemented.');\n  }\n\n  [custom]() {\n    return '<Point>';\n  }\n\n}\n/**\n * ShortCurve\n */\n\n\nclass ShortCurve extends Curve {\n  constructor(conf) {\n    super(ShortPoint, 'short', conf);\n    this.a = BN.fromJSON(conf.a).toRed(this.red);\n    this.b = BN.fromJSON(conf.b).toRed(this.red);\n    this.c = BN.fromJSON(conf.c || '0').toRed(this.red);\n    this.ai = this.a.isZero() ? this.zero : this.a.redInvert();\n    this.zi = this.z.isZero() ? this.zero : this.z.redInvert();\n    this.zeroA = this.a.isZero();\n    this.threeA = this.a.eq(this.three.redNeg());\n    this.redN = this.n.toRed(this.red);\n    this.pmodn = this.p.clone();\n    this.highOrder = this.n.cmp(this.p) >= 0;\n    this.smallGap = false;\n\n    this._finalize(conf);\n  }\n\n  _finalize(conf) {\n    super._finalize(conf); // Precalculate endomorphism.\n\n\n    if (conf.endo != null) this.endo = Endo.fromJSON(this, conf.endo);else this.endo = this._getEndomorphism();\n\n    if (!this.n.isZero()) {\n      this.pmodn = this.p.mod(this.n); // Check for Maxwell's trick (see eqR).\n\n      this.smallGap = this.p.div(this.n).cmpn(1) <= 0;\n    }\n\n    return this;\n  }\n\n  static _isomorphism(curveA, curveB, custom, odd) {\n    // Short Weierstrass Isomorphism.\n    //\n    // [GECC] Page 84, Section 3.1.5.\n    // [ARITH1] Page 274, Section 13.1.5.\n    // [ALT] Appendix F.3 (Isomorphic Mapping between Weierstrass Curves).\n    //\n    // Find `u` such that `a * u^4 = a'` and `b * u^6 = b'`.\n    //\n    // Transformation:\n    //\n    //   u4 = a' / a\n    //   u2 = +-sqrt(u4)\n    //   u6 = u4 * u2\n    //   a' = a * u4\n    //   b' = b * u6\n    //\n    // Where `u2` is any root that is square.\n    //\n    // If a = 0, we can do:\n    //\n    //   a' = 0\n    //   b' = b'\n    //\n    // Where (b' / b)^(1 / 3) is square.\n    //\n    // If b = 0, we can do:\n    //\n    //   a' = a'\n    //   b' = 0\n    //\n    // Where sqrt(a' / a) is square.\n    assert(curveA instanceof BN);\n    assert(curveB instanceof BN);\n    assert(custom instanceof BN);\n    assert(odd == null || typeof odd === 'boolean');\n    assert(!curveA.isZero() || !curveB.isZero());\n    if (custom.isZero()) throw new Error('Invalid coefficient.');\n\n    if (curveA.isZero()) {\n      const customB = custom;\n      const u6 = customB.redDiv(curveB); // Todo: allow index flag.\n\n      const u2 = uncube(u6); // Already checked in uncube().\n\n      assert(u2.redJacobi() === 1);\n      return [curveA.clone(), customB.clone()];\n    }\n\n    if (curveB.isZero()) {\n      const customA = custom;\n      const u4 = customA.redDiv(curveA);\n      const u2 = u4.redSqrt(); // Todo: allow odd flag.\n\n      if (u2.redJacobi() !== 1) u2.redINeg();\n      if (u2.redJacobi() !== 1) throw new Error('Invalid `a` coefficient.');\n      return [customA.clone(), curveB.clone()];\n    }\n\n    const customA = custom;\n    const u4 = customA.redDiv(curveA);\n    const u2 = u4.redSqrt();\n\n    if (odd != null) {\n      if (u2.redIsOdd() !== odd) u2.redINeg();\n    } else {\n      if (u2.redJacobi() !== 1) u2.redINeg();\n    }\n\n    if (u2.redJacobi() !== 1) throw new Error('Invalid `a` coefficient.');\n    const u6 = u4.redMul(u2);\n    const a = curveA.redMul(u4);\n    const b = curveB.redMul(u6);\n    assert(a.eq(customA));\n    return [a, b];\n  }\n\n  _short(a0, odd) {\n    return ShortCurve._isomorphism(this.a, this.b, a0, odd);\n  }\n\n  _mont(b0, odd) {\n    // Short Weierstrass->Montgomery Equivalence.\n    //\n    // [ARITH1] Page 286, Section 13.2.3.c.\n    // [SAFE] \"Ladders\".\n    //\n    // Transformation:\n    //\n    //   r = A / (3 * B)\n    //   s = +-sqrt(3 * r^2 + a)\n    //   A = 3 * r / s\n    //   B = 1 / s\n    const [r, s] = this._findRS(odd);\n\n    const b = s.redInvert();\n    const a = r.redMuln(3).redMul(b);\n    if (b0 != null) return MontCurve._isomorphism(a, b, b0);\n    return [a, b];\n  }\n\n  _edwards(a0, odd) {\n    // Short Weierstrass->Twisted Edwards Equivalence.\n    //\n    // [TWISTEQ] Section 1.\n    //\n    // Transformation:\n    //\n    //   r = (a' + d') / 6\n    //   s = +-sqrt(3 * r^2 + a)\n    //   a' = 3 * r + 2 * s\n    //   d' = 3 * r - 2 * s\n    const [r, s] = this._findRS(odd);\n\n    const r3 = r.redMuln(3);\n    const s2 = s.redMuln(2);\n    const a = r3.redAdd(s2);\n    const d = r3.redSub(s2);\n    if (a0 != null) return EdwardsCurve._isomorphism(a, d, a0);\n    return [a, d];\n  }\n\n  _findRS(sign) {\n    // Find `r` and `s` for equivalence.\n    //\n    // [ARITH1] Page 286, Section 13.2.3.c.\n    // [SAFE] \"Ladders\".\n    //\n    // Computation:\n    //\n    //   r = solve(r^3 + a * r + b == 0, r)\n    //   s = +-sqrt(3 * r^2 + a)\n    //\n    // Computing `r` is non-trivial. We need\n    // to solve `r^3 + a * r + b = 0`, but we\n    // don't have a polynomial solver, so we\n    // loop over random points until we find\n    // one with 2-torsion. Multiplying by the\n    // subgroup order should yield a point of\n    // ((A / 3) / B, 0) which is a solution.\n    assert(sign == null || typeof sign === 'boolean');\n    assert(this.h.word(0) >= 4);\n    assert(!this.n.isZero());\n    const x = this.one.redNeg();\n    let p;\n\n    for (;;) {\n      x.redIAdd(this.one);\n\n      try {\n        p = this.pointFromX(x.clone());\n      } catch (e) {\n        continue;\n      }\n\n      p = p.mul(this.n);\n      if (p.isInfinity()) continue;\n      if (!p.y.isZero()) continue;\n      break;\n    }\n\n    const r = p.x;\n    const r2 = r.redSqr();\n    const s = r2.redMuln(3).redIAdd(this.a).redSqrt();\n\n    if (sign != null) {\n      if (s.redIsOdd() !== sign) s.redINeg();\n    }\n\n    return [r, s];\n  }\n\n  _scale0(a, b) {\n    // We can extract the isomorphism factors with:\n    //\n    //   u4 = a' / a\n    //   u6 = b' / b\n    //   u2 = +-sqrt(u4)\n    //   u = +-sqrt(u2)\n    //   u3 = u2 * u\n    //\n    // `u2` should be picked such that `u4 * u2 = u6`.\n    //\n    // If a = 0, we can do:\n    //\n    //   u6 = b' / b\n    //   u2 = u6^(1 / 3)\n    //   u = +-sqrt(u2)\n    //   u3 = u2 * u\n    //\n    // Where `u2` is any root that is square.\n    //\n    // If b = 0, we can do:\n    //\n    //   u4 = a' / a\n    //   u2 = +-sqrt(u4)\n    //   u = +-sqrt(u2)\n    //   u3 = u2 * u\n    //\n    // Where `u2` is any root that is square.\n    assert(this.a.isZero() === a.isZero());\n    assert(this.b.isZero() === b.isZero());\n\n    if (this.a.isZero()) {\n      const u6 = this.b.redDiv(this.field(b)); // Todo: figure out how to check index.\n\n      const u2 = uncube(u6);\n      const u = u2.redSqrt();\n      const u3 = u2.redMul(u);\n      assert(u3.redSqr().eq(u6));\n      assert(!u.isZero());\n      return [u2, u3];\n    }\n\n    if (this.b.isZero()) {\n      const u4 = this.a.redDiv(this.field(a));\n      const u2 = u4.redSqrt(); // Todo: figure out how to check oddness.\n\n      if (u2.redJacobi() !== 1) u2.redINeg();\n      const u = u2.redSqrt();\n      const u3 = u2.redMul(u);\n      assert(u3.redMul(u).eq(u4));\n      assert(!u.isZero());\n      return [u2, u3];\n    }\n\n    const u4 = this.a.redDiv(this.field(a));\n    const u6 = this.b.redDiv(this.field(b));\n    const u2 = u4.redSqrt();\n    if (!u4.redMul(u2).eq(u6)) u2.redINeg();\n    assert(u4.redMul(u2).eq(u6));\n    const u = u2.redSqrt();\n    const u3 = u2.redMul(u);\n    assert(!u.isZero());\n    return [u2, u3];\n  }\n\n  _scale1(x, y) {\n    // If base points are available, it is much\n    // easier, with:\n    //\n    //   u2 = x' / x\n    //   u3 = y' / y\n    //   u = +-sqrt(u2)\n    //\n    // `u` should be picked such that `u2 * u = u3`.\n    const u2 = this.g.x.redDiv(this.field(x));\n    const u3 = this.g.y.redDiv(this.field(y));\n    const u = u2.redSqrt();\n    if (!u2.redMul(u).eq(u3)) u.redINeg();\n    assert(u2.redMul(u).eq(u3));\n    assert(!u.isZero());\n    return [u2, u3];\n  }\n\n  _scaleShort(curve) {\n    assert(curve instanceof ShortCurve);\n    if (this.g.isInfinity() || curve.g.isInfinity()) return this._scale0(curve.a, curve.b);\n    return this._scale1(curve.g.x, curve.g.y);\n  }\n\n  _scaleMont(curve) {\n    assert(curve instanceof MontCurve);\n\n    if (this.g.isInfinity() || curve.g.isInfinity()) {\n      const [a, b] = curve._short();\n\n      return this._scale0(a, b);\n    }\n\n    const {\n      x,\n      y\n    } = curve.g;\n    const nx = x.redAdd(curve.a3).redMul(curve.bi);\n    const ny = y.redMul(curve.bi);\n    return this._scale1(nx, ny);\n  }\n\n  _scaleEdwards(curve) {\n    assert(curve instanceof EdwardsCurve);\n\n    if (this.g.isInfinity() || curve.g.isInfinity()) {\n      const [a, b] = curve._short();\n\n      return this._scale0(a, b);\n    }\n\n    const {\n      x,\n      y,\n      z\n    } = curve.g;\n    const a5 = curve.a.redMuln(5);\n    const d5 = curve.d.redMuln(5);\n    const dma = curve.d.redSub(curve.a);\n    const d5a = d5.redSub(curve.a);\n    const da5 = curve.d.redSub(a5);\n    const ypz = y.redAdd(z);\n    const ymz = y.redSub(z);\n    const xx = d5a.redMul(y).redIAdd(da5.redMul(z));\n    const xz = ymz.redMuln(12);\n    const yy = dma.redMul(ypz).redMul(z);\n    const yz = ymz.redMul(x).redIMuln(4);\n    const zi = xz.redMul(yz).redInvert();\n    const nx = xx.redMul(yz).redMul(zi);\n    const ny = yy.redMul(xz).redMul(zi);\n    return this._scale1(nx, ny);\n  }\n\n  _getEndomorphism(index = 0) {\n    // Compute endomorphism.\n    //\n    // [GECC] Example 3.76, Page 128, Section 3.5.\n    // No curve params.\n    if (this.n.isZero() || this.g.isInfinity()) return null; // No efficient endomorphism.\n\n    if (!this.zeroA || this.p.modrn(3) !== 1 || this.n.modrn(3) !== 1) return null; // Solve beta^3 mod p = 1.\n\n    const [b1, b2] = this._getEndoRoots(this.p); // Choose the smallest beta by default.\n\n\n    const beta = [b1, b2][index & 1].toRed(this.red); // Solve lambda^3 mod n = 1.\n\n    const [l1, l2] = this._getEndoRoots(this.n); // Choose the lambda matching selected beta.\n    // Note that P * lambda = (x * beta, y).\n\n\n    const p = this.point(this.g.x.redMul(beta), this.g.y);\n    let lambda;\n\n    if (this.g.mul(l1).eq(p)) {\n      lambda = l1;\n    } else {\n      assert(this.g.mul(l2).eq(p));\n      lambda = l2;\n    } // Get basis vectors.\n\n\n    const basis = this._getEndoBasis(lambda); // Precompute `g1` and `g2`.\n\n\n    const pre = this._getEndoPrecomp(basis);\n\n    return new Endo(beta, lambda, basis, pre);\n  }\n\n  _getEndoRoots(num) {\n    // Find roots for x^2 + x + 1 in F.\n    //\n    // [GECC] Example 3.76, Page 128, Section 3.5.\n    // [GLV] Page 192, Section 2 (Endomorphisms).\n    //\n    // The above document doesn't fully explain how\n    // to derive these and only \"hints\" at it, as\n    // mentioned by Hal Finney[1], but we're basically\n    // computing two possible cube roots of 1 here.\n    //\n    // Note that we could also compute[2]:\n    //\n    //   beta = 2^((p - 1) / 3) mod p\n    //   lambda = 3^((n - 1) / 3) mod n\n    //\n    // As an extension of Fermat's little theorem:\n    //\n    //   g^(p - 1) mod p == 1\n    //\n    // It is suspected[3] this is how Hal Finney[4]\n    // computed his original endomorphism roots.\n    //\n    // @indutny's method for computing cube roots\n    // of unity[5] appears to be the method described\n    // on wikipedia[6][7].\n    //\n    // Sage produces the same solution:\n    //\n    //   sage: solve(x^2 + x + 1 == 0, x)\n    //   [x == -1/2*I*sqrt(3) - 1/2, x == 1/2*I*sqrt(3) - 1/2]\n    //\n    // This can be reduced to:\n    //\n    //   x = (+-sqrt(-3) - 1) / 2\n    //\n    // [1] https://bitcointalk.org/index.php?topic=3238.msg45565#msg45565\n    // [2] https://crypto.stackexchange.com/a/22739\n    // [3] https://bitcoin.stackexchange.com/a/35872\n    // [4] https://github.com/halfinney/bitcoin/commit/dc411b5\n    // [5] https://en.wikipedia.org/wiki/Cube_root_of_unity\n    // [6] https://en.wikipedia.org/wiki/Splitting_field#Cubic_example\n    // [7] http://mathworld.wolfram.com/SplittingField.html\n    const red = num === this.p ? this.red : BN.mont(num);\n    const two = new BN(2).toRed(red);\n    const three = new BN(3).toRed(red);\n    const i2 = two.redInvert(); // S1 = sqrt(-3) / 2\n\n    const s1 = three.redNeg().redSqrt().redMul(i2); // S2 = -S1\n\n    const s2 = s1.redNeg(); // R1 = S1 - 1 / 2\n\n    const r1 = s1.redSub(i2).fromRed(); // R2 = S2 - 1 / 2\n\n    const r2 = s2.redSub(i2).fromRed();\n    return [r1, r2].sort(BN.cmp);\n  }\n\n  _getEndoBasis(lambda) {\n    // Compute endomorphic basis.\n    //\n    // This essentially computes Cornacchia's algorithm\n    // for solving x^2 + d * y^2 = m (d = lambda, m = order).\n    //\n    // https://en.wikipedia.org/wiki/Cornacchia%27s_algorithm\n    //\n    // [GECC] Algorithm 3.74, Page 127, Section 3.5.\n    // [GLV] Page 196, Section 4 (Decomposing K).\n    //\n    // Balanced length-two representation of a multiplier.\n    //\n    // 1. Run the extended euclidean algorithm with inputs n\n    //    and lambda. The algorithm produces a sequence of\n    //    equations si*n + ti*lam = ri where s0=1, t0=0,\n    //    r0=n, s1=0, t1=1, r1=lam, and the remainders ri\n    //    and are non-negative and strictly decreasing. Let\n    //    l be the greatest index for which rl >= sqrt(n).\n    const [rl, tl, rl1, tl1, rl2, tl2] = this._egcdSqrt(lambda); // 2. Set (a1, b1) <- (rl+1, -tl+1).\n\n\n    const a1 = rl1;\n    const b1 = tl1.neg(); // 3. If (rl^2 + tl^2) <= (rl+2^2 + tl+2^2)\n    //    then set (a2, b2) <- (rl, -tl).\n    //    else set (a2, b2) <- (rl+2, -tl+2).\n\n    const lhs = rl.sqr().iadd(tl.sqr());\n    const rhs = rl2.sqr().iadd(tl2.sqr());\n    let a2, b2;\n\n    if (lhs.cmp(rhs) <= 0) {\n      a2 = rl;\n      b2 = tl.neg();\n    } else {\n      a2 = rl2;\n      b2 = tl2.neg();\n    }\n\n    return [new Vector(a1, b1), new Vector(a2, b2)];\n  }\n\n  _egcdSqrt(lambda) {\n    // Extended Euclidean algorithm for integers.\n    //\n    // [GECC] Algorithm 2.19, Page 40, Section 2.2.\n    // [GLV] Page 196, Section 4 (Decomposing K).\n    assert(lambda instanceof BN);\n    assert(!lambda.red);\n    assert(lambda.sign() > 0);\n    assert(this.n.sign() > 0); // Note that we insert the approximate square\n    // root checks as described in algorithm 3.74.\n    //\n    // Algorithm 2.19 is defined as:\n    //\n    // 1. u <- a\n    //    v <- b\n    //\n    // 2. x1 <- 1\n    //    y1 <- 0\n    //    x2 <- 0\n    //    y2 <- 1\n    //\n    // 3. while u != 0 do\n    //\n    // 3.1. q <- floor(v / u)\n    //      r <- v - q * u\n    //      x <- x2 - q * x1\n    //      y <- y2 - q * y1\n    //\n    // 3.2. v <- u\n    //      u <- r\n    //      x2 <- x1\n    //      x1 <- x\n    //      y2 <- y1\n    //      y1 <- y\n    //\n    // 4. d <- v\n    //    x <- x2\n    //    y <- y2\n    //\n    // 5. Return (d, x, y).\n    // Start with an approximate square root of n.\n\n    const sqrtn = this.n.ushrn(this.n.bitLength() >>> 1);\n    let u = lambda; // r1\n\n    let v = this.n.clone(); // r0\n\n    let x1 = new BN(1); // t1\n\n    let y1 = new BN(0); // t0\n\n    let x2 = new BN(0); // s1\n\n    let y2 = new BN(1); // s0\n    // All vectors are roots of: a + b * lambda = 0 (mod n).\n\n    let rl, tl; // First vector.\n\n    let rl1, tl1; // Inner.\n\n    let i = 0;\n    let j = 0;\n    let p; // Compute EGCD.\n\n    while (!u.isZero() && i < 2) {\n      const q = v.quo(u);\n      const r = v.sub(q.mul(u));\n      const x = x2.sub(q.mul(x1));\n      const y = y2.sub(q.mul(y1)); // Check for r < sqrt(n).\n\n      if (j === 0 && r.cmp(sqrtn) < 0) {\n        rl = p;\n        tl = x1;\n        rl1 = r;\n        tl1 = x;\n        j = 1; // 1 more round.\n      }\n\n      p = r;\n      v = u;\n      u = r;\n      x2 = x1;\n      x1 = x;\n      y2 = y1;\n      y1 = y;\n      i += j;\n    } // Should never happen.\n\n\n    assert(j !== 0, 'Could not find r < sqrt(n).'); // Second vector.\n\n    const rl2 = x2;\n    const tl2 = x1;\n    return [rl, tl, rl1, tl1, rl2, tl2];\n  }\n\n  _getEndoPrecomp(basis) {\n    // Precompute `g1` and `g2` to avoid round division.\n    //\n    // [JCEN12] Page 5, Section 4.3.\n    //\n    // Computation:\n    //\n    //   d = a1 * b2 - b1 * a2\n    //   t = ceil(log2(d+1)) + 16\n    //   g1 = round((2^t * b2) / d)\n    //   g2 = round((2^t * b1) / d)\n    //\n    // Where `d` is equal to `n`.\n    //\n    // As far as `t` goes, the paper above adds 2,\n    // whereas libsecp256k1 adds 16 (a total of 272).\n    assert(Array.isArray(basis));\n    assert(basis.length === 2);\n    assert(basis[0] instanceof Vector);\n    assert(basis[1] instanceof Vector);\n    const [v1, v2] = basis;\n    const d = v1.a.mul(v2.b).isub(v1.b.mul(v2.a));\n    const shift = d.bitLength() + 16;\n    const pow = BN.shift(1, shift);\n    const g1 = pow.mul(v2.b).divRound(d);\n    const g2 = pow.mul(v1.b).divRound(d);\n    assert(d.eq(this.n));\n    return [g1, g2];\n  }\n\n  _endoSplit(k) {\n    // Balanced length-two representation of a multiplier.\n    //\n    // [GECC] Algorithm 3.74, Page 127, Section 3.5.\n    //\n    // Also note that it is possible to precompute[1]\n    // values in order to avoid the division[2][3][4].\n    //\n    // This involves precomputing `g1` and `g2 (see\n    // above). `c1` and `c2` can then be computed as\n    // follows:\n    //\n    //   t = ceil(log2(n+1)) + 16\n    //   c1 = (k * g1) >> t\n    //   c2 = -((k * g2) >> t)\n    //\n    // Where `>>` is an _unsigned_ right shift. Also\n    // note that the last bit discarded in the shift\n    // must be stored. If it is 1, then add 1 to the\n    // scalar (absolute addition).\n    //\n    // It's worth noting that libsecp256k1 uses a\n    // different calculation along the lines of:\n    //\n    //   t = ceil(log2(n+1)) + 16\n    //   c1 = ((k * g1) >> t) * -b1\n    //   c2 = ((k * -g2) >> t) * -b2\n    //   k2 = c1 + c2\n    //   k1 = k2 * -lambda + k\n    //\n    // So, in the future, we can consider changing\n    // step 4 to:\n    //\n    //   4. Compute c1 = (k * g1) >> t\n    //          and c2 = -((k * g2) >> t).\n    //\n    //   const shift = this.scalarBits + 16;\n    //   const [g1, g2] = this.endo.pre;\n    //   const c1 = k.mulShift(g1, shift);\n    //   const c2 = k.mulShift(g2, shift).ineg();\n    //\n    // Once we're brave enough, that is.\n    //\n    // [1] [JCEN12] Page 5, Section 4.3.\n    // [2] https://github.com/bitcoin-core/secp256k1/blob/0b70241/src/scalar_impl.h#L259\n    // [3] https://github.com/bitcoin-core/secp256k1/pull/21\n    // [4] https://github.com/bitcoin-core/secp256k1/pull/127\n    assert(k instanceof BN);\n    assert(!k.red);\n    assert(!this.n.isZero());\n    const [v1, v2] = this.endo.basis; // 4. Compute c1 = round(b2 * k / n)\n    //        and c2 = round(-b1 * k / n).\n\n    const c1 = v2.b.mul(k).divRound(this.n);\n    const c2 = v1.b.neg().mul(k).divRound(this.n); // 5. Compute k1 = k - c1 * a1 - c2 * a2\n    //        and k2 = -c1 * b1 - c2 * b2.\n\n    const p1 = c1.mul(v1.a);\n    const p2 = c2.mul(v2.a);\n    const q1 = c1.ineg().mul(v1.b);\n    const q2 = c2.mul(v2.b); // Calculate answer.\n\n    const k1 = k.sub(p1).isub(p2);\n    const k2 = q1.isub(q2); // 6. Return (k1, k2).\n\n    return [k1, k2];\n  }\n\n  _endoBeta(point) {\n    assert(point instanceof ShortPoint);\n    return [point, point._getBeta()];\n  }\n\n  _endoWnafMulAdd(points, coeffs) {\n    // Point multiplication with efficiently computable endomorphisms.\n    //\n    // [GECC] Algorithm 3.77, Page 129, Section 3.5.\n    // [GLV] Page 193, Section 3 (Using Efficient Endomorphisms).\n    //\n    // Note it may be possible to do this 4-dimensionally [4GLV].\n    assert(Array.isArray(points));\n    assert(Array.isArray(coeffs));\n    assert(points.length === coeffs.length);\n    assert(this.endo != null);\n    const len = points.length;\n    const npoints = new Array(len * 2);\n    const ncoeffs = new Array(len * 2);\n\n    for (let i = 0; i < len; i++) {\n      const [p1, p2] = this._endoBeta(points[i]);\n\n      const [k1, k2] = this._endoSplit(coeffs[i]);\n\n      npoints[i * 2 + 0] = p1;\n      ncoeffs[i * 2 + 0] = k1;\n      npoints[i * 2 + 1] = p2;\n      ncoeffs[i * 2 + 1] = k2;\n    }\n\n    return this._wnafMulAdd(5, npoints, ncoeffs);\n  }\n\n  _icart(u0) {\n    // Icart's Method.\n    //\n    // Distribution: 5/8.\n    //\n    // [ICART] Page 4, Section 2.\n    // [H2EC] \"Icart Method\".\n    //\n    // Assumptions:\n    //\n    //   - p = 2 (mod 3).\n    //   - u != 0.\n    //\n    // Map:\n    //\n    //   u = 1, if u = 0\n    //   v = (3 * a - u^4) / (6 * u)\n    //   w = (2 * p - 1) / 3\n    //   x = (v^2 - b - u^6 / 27)^w + u^2 / 3\n    //   y = u * x + v\n    const {\n      a,\n      b,\n      i3,\n      one\n    } = this;\n    const i27 = i3.redSqr().redMul(i3);\n    const w = this.p.ushln(1).isubn(1).idivn(3);\n    const u = u0.clone();\n    u.cinject(one, u.czero());\n    const u2 = u.redSqr();\n    const u4 = u2.redSqr();\n    const u6 = u4.redMul(u2);\n    const u6i = u.redMuln(6).redFermat();\n    const v = a.redMuln(3).redISub(u4).redMul(u6i);\n    const v2 = v.redSqr();\n    const u6d27 = u6.redMul(i27);\n    const u2d3 = u2.redMul(i3);\n    const x = v2.redISub(b).redISub(u6d27).redPow(w).redIAdd(u2d3);\n    const y = u.redMul(x).redIAdd(v);\n    return this.point(x, y);\n  }\n\n  _sswu(u) {\n    // Simplified Shallue-Woestijne-Ulas Method.\n    //\n    // Distribution: 3/8.\n    //\n    // [SSWU1] Page 15-16, Section 7. Appendix G.\n    // [SSWU2] Page 5, Theorem 2.3.\n    // [H2EC] \"Simplified Shallue-van de Woestijne-Ulas Method\".\n    //\n    // Assumptions:\n    //\n    //   - a != 0, b != 0.\n    //   - Let z be a non-square in F(p).\n    //   - z != -1.\n    //   - The polynomial g(x) - z is irreducible over F(p).\n    //   - g(b / (z * a)) is square in F(p).\n    //   - u != 0, u != +-sqrt(-1 / z).\n    //\n    // Map:\n    //\n    //   g(x) = x^3 + a * x + b\n    //   t1 = 1 / (z^2 * u^4 + z * u^2)\n    //   x1 = (-b / a) * (1 + t1)\n    //   x1 = b / (z * a), if t1 = 0\n    //   x2 = z * u^2 * x1\n    //   x = x1, if g(x1) is square\n    //     = x2, otherwise\n    //   y = sign(u) * abs(sqrt(g(x)))\n    const {\n      b,\n      z,\n      ai,\n      zi,\n      one\n    } = this;\n    const e = this.p.subn(2);\n    const z2 = z.redSqr();\n    const ba = b.redNeg().redMul(ai);\n    const bza = b.redMul(zi).redMul(ai);\n    const u2 = u.redSqr();\n    const u4 = u2.redSqr();\n    const t1 = z2.redMul(u4).redIAdd(z.redMul(u2)).redPow(e);\n    const x1 = ba.redMul(one.redAdd(t1));\n    x1.cinject(bza, t1.czero());\n    const x2 = z.redMul(u2).redMul(x1);\n    const y1 = this.solveY2(x1);\n    const y2 = this.solveY2(x2);\n    const alpha = y1.redIsSquare() | 0;\n    const x = x1.cinject(x2, alpha ^ 1);\n    const y = y1.cinject(y2, alpha ^ 1).redSqrt();\n    y.cinject(y.redNeg(), y.redIsOdd() ^ u.redIsOdd());\n    return this.point(x, y);\n  }\n\n  _sswui(p, hint) {\n    // Inverting the Map (Simplified Shallue-Woestijne-Ulas).\n    //\n    // Assumptions:\n    //\n    //   - a^2 * x^2 - 2 * a * b * x - 3 * b^2 is square in F(p).\n    //   - If r < 3 then x != -b / a.\n    //\n    // Unlike SVDW, the preimages here are evenly\n    // distributed (more or less). SSWU covers ~3/8\n    // of the curve points. Each preimage has a 1/2\n    // chance of mapping to either x1 or x2.\n    //\n    // Assuming the point is within that set, each\n    // point has a 1/4 chance of inverting to any\n    // of the preimages. This means we can simply\n    // randomly select a preimage if one exists.\n    //\n    // However, the [SVDW2] sampling method seems\n    // slighly faster in practice for [SQUARED].\n    //\n    // Map:\n    //\n    //   c = sqrt(a^2 * x^2 - 2 * a * b * x - 3 * b^2)\n    //   u1 = -(a * x + b - c) / (2 * (a * x + b) * z)\n    //   u2 = -(a * x + b + c) / (2 * (a * x + b) * z)\n    //   u3 = -(a * x + b - c) / (2 * b * z)\n    //   u4 = -(a * x + b + c) / (2 * b * z)\n    //   r = random integer in [1,4]\n    //   u = sign(y) * abs(sqrt(ur))\n    const {\n      a,\n      b,\n      z\n    } = this;\n    const {\n      x,\n      y\n    } = p;\n    const r = hint & 3;\n    const a2x2 = a.redSqr().redMul(x.redSqr());\n    const abx2 = a.redMul(b).redMul(x).redIMuln(2);\n    const b23 = b.redSqr().redMuln(3);\n    const axb = a.redMul(x).redIAdd(b);\n    const [s0, c] = sqrt(a2x2.redISub(abx2).redISub(b23));\n    const n0 = axb.redSub(c).redINeg();\n    const n1 = axb.redAdd(c).redINeg();\n    const d0 = axb.redMul(z).redIMuln(2);\n    const d1 = b.redMul(z).redIMuln(2);\n    n0.cinject(n1, r & 1); // r = 1 or 3\n\n    d0.cinject(d1, r >>> 1); // r = 2 or 3\n\n    const [s1, u] = divSqrt(n0, d0);\n    u.cinject(u.redNeg(), u.redIsOdd() ^ y.redIsOdd());\n    if (!(s0 & s1)) throw new Error('Invalid point.');\n    return u;\n  }\n\n  _svdwf(u) {\n    // Shallue-van de Woestijne Method.\n    //\n    // Distribution: 9/16.\n    //\n    // [SVDW1] Section 5.\n    // [SVDW2] Page 8, Section 3.\n    //         Page 15, Section 6, Algorithm 1.\n    // [H2EC] \"Shallue-van de Woestijne Method\".\n    //\n    // Assumptions:\n    //\n    //   - p = 1 (mod 3).\n    //   - a = 0, b != 0.\n    //   - Let z be a unique element in F(p).\n    //   - g((sqrt(-3 * z^2) - z) / 2) is square in F(p).\n    //   - u != 0, u != +-sqrt(-g(z)).\n    //\n    // Map:\n    //\n    //   g(x) = x^3 + b\n    //   c = sqrt(-3 * z^2)\n    //   t1 = u^2 + g(z)\n    //   t2 = 1 / (u^2 * t1)\n    //   t3 = u^4 * t2 * c\n    //   x1 = (c - z) / 2 - t3\n    //   x2 = t3 - (c + z) / 2\n    //   x3 = z - t1^3 * t2 / (3 * z^2)\n    //   x = x1, if g(x1) is square\n    //     = x2, if g(x2) is square\n    //     = x3, otherwise\n    //   y = sign(u) * abs(sqrt(g(x)))\n    const {\n      c,\n      z,\n      zi,\n      i2,\n      i3\n    } = this;\n    const e = this.p.subn(2);\n    const gz = this.solveY2(z);\n    const z3 = i3.redMul(zi.redSqr());\n    const u2 = u.redSqr();\n    const u4 = u2.redSqr();\n    const t1 = u2.redAdd(gz);\n    const t2 = u2.redMul(t1).redPow(e);\n    const t3 = u4.redMul(t2).redMul(c);\n    const t4 = t1.redSqr().redMul(t1);\n    const x1 = c.redSub(z).redMul(i2).redISub(t3);\n    const x2 = t3.redSub(c.redAdd(z).redMul(i2));\n    const x3 = z.redSub(t4.redMul(t2).redMul(z3));\n    const y1 = this.solveY2(x1);\n    const y2 = this.solveY2(x2);\n    const y3 = this.solveY2(x3);\n    const alpha = y1.redIsSquare() | 0;\n    const beta = y2.redIsSquare() | 0;\n    x1.cinject(x2, (alpha ^ 1) & beta);\n    y1.cinject(y2, (alpha ^ 1) & beta);\n    x1.cinject(x3, (alpha ^ 1) & (beta ^ 1));\n    y1.cinject(y3, (alpha ^ 1) & (beta ^ 1));\n    return [x1, y1];\n  }\n\n  _svdw(u) {\n    const [x, yy] = this._svdwf(u);\n\n    const y = yy.redSqrt();\n    y.cinject(y.redNeg(), y.redIsOdd() ^ u.redIsOdd());\n    return this.point(x, y);\n  }\n\n  _svdwi(p, hint) {\n    // Inverting the Map (Shallue-van de Woestijne).\n    //\n    // [SQUARED] Algorithm 1, Page 8, Section 3.3.\n    // [SVDW2] Page 12, Section 5.\n    // [SVDW3] \"Inverting the map\".\n    //\n    // Assumptions:\n    //\n    //   - If r = 1 then x != -(c + z) / 2.\n    //   - If r = 2 then x != (c - z) / 2.\n    //   - If r > 2 then (t0 - t1 + t2) is square in F(p).\n    //   - f(f^-1(x)) = x where f is the map function.\n    //\n    // We use the sampling method from [SVDW2],\n    // _not_ [SQUARED]. This seems to have a\n    // better distribution in practice.\n    //\n    // Note that [SVDW3] also appears to be\n    // incorrect in terms of distribution.\n    //\n    // The distribution of f(u), assuming u is\n    // random, is (1/2, 1/4, 1/4).\n    //\n    // To mirror this, f^-1(x) should simply\n    // pick (1/2, 1/4, 1/8, 1/8).\n    //\n    // To anyone running the forward map, our\n    // strings will appear to be random.\n    //\n    // Map:\n    //\n    //   g(x) = x^3 + b\n    //   c = sqrt(-3 * z^2)\n    //   t0 = 9 * (x^2 * z^2 + z^4)\n    //   t1 = 18 * x * z^3\n    //   t2 = 12 * g(z) * (x - z)\n    //   t3 = sqrt(t0 - t1 + t2)\n    //   t4 = t3 * z\n    //   u1 = g(z) * (c - 2 * x - z) / (c + 2 * x + z)\n    //   u2 = g(z) * (c + 2 * x + z) / (c - 2 * x - z)\n    //   u3 = (3 * (z^3 - x * z^2) - 2 * g(z) + t4) / 2\n    //   u4 = (3 * (z^3 - x * z^2) - 2 * g(z) - t4) / 2\n    //   r = random integer in [1,4]\n    //   u = sign(y) * abs(sqrt(ur))\n    const {\n      b,\n      c,\n      z,\n      two\n    } = this;\n    const {\n      x,\n      y\n    } = p;\n    const r = hint & 3;\n    const z2 = z.redSqr();\n    const z3 = z2.redMul(z);\n    const z4 = z2.redSqr();\n    const gz = z3.redAdd(b);\n    const gz2 = gz.redMuln(2);\n    const xx = x.redSqr();\n    const x2z = x.redMuln(2).redIAdd(z);\n    const xz2 = x.redMul(z2);\n    const c0 = c.redSub(x2z);\n    const c1 = c.redAdd(x2z);\n    const t0 = xx.redMul(z2).redIAdd(z4).redIMuln(9);\n    const t1 = x.redMul(z3).redIMuln(18);\n    const t2 = gz.redMul(x.redSub(z)).redIMuln(12);\n    const [s0, t3] = sqrt(t0.redISub(t1).redIAdd(t2));\n    const s1 = r - 2 >>> 31 | s0;\n    const t4 = t3.redMul(z);\n    const t5 = z3.redISub(xz2).redIMuln(3).redISub(gz2);\n    const n0 = gz.redMul(c0);\n    const n1 = gz.redMul(c1);\n    const n2 = t5.redAdd(t4);\n    const n3 = t5.redSub(t4);\n    const d0 = two.clone();\n    n0.cinject(n1, (r ^ 1) - 1 >>> 31); // r = 1\n\n    n0.cinject(n2, (r ^ 2) - 1 >>> 31); // r = 2\n\n    n0.cinject(n3, (r ^ 3) - 1 >>> 31); // r = 3\n\n    d0.cinject(c1, (r ^ 0) - 1 >>> 31); // r = 0\n\n    d0.cinject(c0, (r ^ 1) - 1 >>> 31); // r = 1\n\n    const [s2, u] = divSqrt(n0, d0);\n\n    const [x0] = this._svdwf(u);\n\n    const s3 = x0.ceq(x);\n    u.cinject(u.redNeg(), u.redIsOdd() ^ y.redIsOdd());\n    if (!(s1 & s2 & s3)) throw new Error('Invalid point.');\n    return u;\n  }\n\n  isElliptic() {\n    const {\n      a,\n      b\n    } = this;\n    const a2 = a.redSqr();\n    const a3 = a2.redMul(a);\n    const b2 = b.redSqr();\n    const d = b2.redMuln(27).redIAdd(a3.redMuln(4)); // 4 * a^3 + 27 * b^2 != 0\n\n    return !d.isZero();\n  }\n\n  jinv() {\n    // [ARITH1] Page 71, Section 4.4.\n    // http://mathworld.wolfram.com/j-Invariant.html\n    const {\n      a,\n      b\n    } = this;\n    const a2 = a.redSqr();\n    const a3 = a2.redMul(a);\n    const b2 = b.redSqr();\n    const t0 = a3.redMuln(4);\n    const lhs = t0.redMuln(1728);\n    const rhs = b2.redMuln(27).redIAdd(t0);\n    if (rhs.isZero()) throw new Error('Curve is not elliptic.'); // (1728 * 4 * a^3) / (4 * a^3 + 27 * b^2)\n\n    return lhs.redDiv(rhs).fromRed();\n  }\n\n  point(x, y, inf = 0) {\n    return new ShortPoint(this, x, y, inf);\n  }\n\n  jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n  }\n\n  solveX(y) {\n    assert(y instanceof BN);\n    if (!this.a.isZero()) throw new Error('Not implemented.'); // x^3 = y^2 - b\n\n    const y2 = y.redSqr();\n    const x3 = y2.redSub(this.b);\n    return cubeRoots(x3);\n  }\n\n  solveY2(x) {\n    // [GECC] Page 89, Section 3.2.2.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw.html\n    assert(x instanceof BN); // y^2 = x^3 + a * x + b\n\n    const x3 = x.redSqr().redMul(x);\n    const y2 = x3.redIAdd(this.b);\n\n    if (!this.zeroA) {\n      // Save some cycles for a = -3.\n      if (this.threeA) y2.redIAdd(x.redMuln(-3));else y2.redIAdd(this.a.redMul(x));\n    }\n\n    return y2;\n  }\n\n  validate(point) {\n    assert(point instanceof ShortPoint);\n    if (point.inf) return true;\n    const {\n      x,\n      y\n    } = point;\n    const y2 = this.solveY2(x);\n    return y.redSqr().eq(y2);\n  }\n\n  pointFromX(x, sign = null) {\n    assert(x instanceof BN);\n    assert(sign == null || typeof sign === 'boolean');\n    if (!x.red) x = x.toRed(this.red);\n    const y = this.solveY(x);\n\n    if (sign != null) {\n      if (this.h.cmpn(1) > 0) {\n        if (y.isZero() && sign) throw new Error('Invalid point.');\n      }\n\n      if (y.redIsOdd() !== sign) y.redINeg();\n    }\n\n    return this.point(x, y);\n  }\n\n  pointFromY(y, index = 0) {\n    assert(y instanceof BN);\n    assert(index >>> 0 === index);\n    if (!y.red) y = y.toRed(this.red);\n    const coords = this.solveX(y);\n    if (index >= coords.length) throw new Error('Invalid X coordinate index.');\n    const x = coords[index];\n    return this.point(x, y);\n  }\n\n  isIsomorphic(curve) {\n    // [GECC] Page 84, Section 3.1.5.\n    // [ARITH1] Page 286, Section 13.2.3.c.\n    assert(curve instanceof Curve);\n    if (!curve.p.eq(this.p)) return false;\n    let u2, u3;\n\n    try {\n      [u2, u3] = this._scale(curve);\n    } catch (e) {\n      return false;\n    } // E(a,b) <-> E(au^4,bu^6)\n\n\n    if (curve.type === 'short') {\n      // a' = a * u^4, b' = b * u^6\n      const a = this.field(curve.a).redMul(u2.redSqr());\n      const b = this.field(curve.b).redMul(u3.redSqr());\n      return this.a.eq(a) && this.b.eq(b);\n    } // E(a,b) <-> M(A,B)\n\n\n    if (curve.type === 'mont') {\n      // (A / (3 * B))^3 + a * (A / (3 * B)) + b = 0\n      const {\n        a3,\n        bi\n      } = curve;\n      const x = this.field(a3.redMul(bi)).redMul(u2);\n      const y2 = this.solveY2(x);\n      return y2.isZero();\n    } // E(a,b) <-> E(a,d)\n\n\n    if (curve.type === 'edwards') {\n      // ((a' + d') / 6)^3 + a * ((a' + d') / 6) + b = 0\n      const x = this.field(curve.ad6).redMul(u2);\n      const y2 = this.solveY2(x);\n      return y2.isZero();\n    }\n\n    return false;\n  }\n\n  isIsogenous(curve) {\n    assert(curve instanceof Curve);\n    return false;\n  }\n\n  pointFromShort(point) {\n    // [GECC] Page 84, Section 3.1.5.\n    // [ALT] Appendix F.3 (Isomorphic Mapping between Weierstrass Curves).\n    assert(point instanceof ShortPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Isomorphic maps for E(a,b)<->E(au^4,bu^6):\n      //\n      //   x' = x * u^2\n      //   y' = y * u^3\n      //\n      // Where a * u^4 = a' and b * u^6 = b'.\n      if (point.isInfinity()) return this.point();\n\n      const [u2, u3] = this._scale(point.curve);\n\n      const x = this.field(point.x);\n      const y = this.field(point.y);\n      const nx = x.redMul(u2);\n      const ny = y.redMul(u3);\n      return this.point(nx, ny);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromMont(point) {\n    // [ALT] Appendix E.2 (Switching between Alternative Representations).\n    // [MONT2] \"Equivalence with Weierstrass curves\"\n    assert(point instanceof MontPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Equivalence for M(A,B)->E(a,b):\n      //\n      //   x = (u + A / 3) / B\n      //   y = v / B\n      //\n      // Undefined if ((u^3 + A * u^2 + u) / B) is not square.\n      if (point.isInfinity()) return this.point();\n      const {\n        a3,\n        bi\n      } = point.curve;\n\n      const [u2, u3] = this._scale(point.curve);\n\n      const nx = point.x.redAdd(a3).redMul(bi);\n      const ny = point.y.redMul(bi);\n      return this.point(this.field(nx).redMul(u2), this.field(ny).redMul(u3));\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromEdwards(point) {\n    // [TWISTEQ] Section 2.\n    assert(point instanceof EdwardsPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Equivalence for E(a,d)->E(a',b'):\n      //\n      //   x' = ((5 * d - a) * y + d - 5 * a) / (12 * (y - 1))\n      //   y' = (d - a) * (y + 1) / (4 * x * (y - 1))\n      //\n      // Undefined for x = 0 or y = 1.\n      //\n      // Exceptional Cases:\n      //   - (0, 1) -> O\n      //   - (0, -1) -> ((a + d) / 6, 0)\n      //\n      // Unexceptional Cases:\n      //   - (sqrt(1 / a), 0) -> ((5 * a - d) / 12, (a - d) / 4 * sqrt(a))\n      const {\n        a,\n        d,\n        ad6\n      } = point.curve;\n\n      const [u2, u3] = this._scale(point.curve);\n\n      if (point.isInfinity()) return this.point();\n\n      if (point.x.isZero()) {\n        const x = this.field(ad6).redMul(u2);\n        return this.point(x, this.zero);\n      }\n\n      const {\n        x,\n        y,\n        z\n      } = point;\n      const a5 = a.redMuln(5);\n      const d5 = d.redMuln(5);\n      const dma = d.redSub(a);\n      const d5a = d5.redSub(a);\n      const da5 = d.redSub(a5);\n      const ypz = y.redAdd(z);\n      const ymz = y.redSub(z);\n      const xx = d5a.redMul(y).redIAdd(da5.redMul(z));\n      const xz = ymz.redMuln(12);\n      const yy = dma.redMul(ypz).redMul(z);\n      const yz = ymz.redMul(x).redIMuln(4);\n      return this.cpoint(this.field(xx).redMul(u2), this.field(xz), this.field(yy).redMul(u3), this.field(yz));\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromUniform(u) {\n    assert(u instanceof BN); // z = 0 or b = 0\n\n    if (this.z.isZero() || this.b.isZero()) throw new Error('Not implemented.'); // a != 0, b != 0\n\n    if (!this.a.isZero()) return this._sswu(u); // p = 1 mod 3, a = 0, b != 0\n\n    if (!this.c.isZero()) return this._svdw(u);\n    throw new Error('Not implemented.');\n  }\n\n  pointToUniform(p, hint) {\n    assert(p instanceof ShortPoint);\n    assert(hint >>> 0 === hint); // z = 0 or b = 0\n\n    if (this.z.isZero() || this.b.isZero()) throw new Error('Not implemented.'); // P = O\n\n    if (p.isInfinity()) throw new Error('Invalid point.'); // Add a random torsion component.\n\n    const i = (hint >>> 4 & 15) % this.torsion.length;\n    const q = p.add(this.torsion[i]); // a != 0, b != 0\n\n    if (!this.a.isZero()) return this._sswui(q, hint); // p = 1 mod 3, a = 0, b != 0\n\n    if (!this.c.isZero()) return this._svdwi(q, hint);\n    throw new Error('Not implemented.');\n  }\n\n  mulAll(points, coeffs) {\n    return super.mulAll(points, coeffs).toP();\n  }\n\n  mulAllSimple(points, coeffs) {\n    return super.mulAllSimple(points, coeffs).toP();\n  }\n\n  decodePoint(bytes) {\n    return ShortPoint.decode(this, bytes);\n  }\n\n  encodeX(point) {\n    assert(point instanceof Point);\n    return point.encodeX();\n  }\n\n  decodeEven(bytes) {\n    return ShortPoint.decodeEven(this, bytes);\n  }\n\n  decodeSquare(bytes) {\n    return ShortPoint.decodeSquare(this, bytes);\n  }\n\n  toShort(a0, odd, sign = null) {\n    const [a, b] = this._short(a0, odd);\n\n    const curve = new ShortCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = curve._scale(this);\n\n      if (u3.redIsOdd() !== sign) u3.redINeg();\n    }\n\n    if (!this.g.isInfinity()) curve.g = curve.pointFromShort(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++) curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n\n    return curve;\n  }\n\n  toMont(b0, odd, sign = null) {\n    const [a, b] = this._mont(b0, odd);\n\n    const curve = new MontCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = this._scale(curve);\n\n      if (u3.redIsOdd() !== sign) u3.redINeg();\n    }\n\n    if (!this.g.isInfinity()) curve.g = curve.pointFromShort(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++) curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n\n    return curve;\n  }\n\n  toEdwards(a0, odd, sign = null) {\n    const [a, d] = this._edwards(a0, odd);\n\n    const curve = new EdwardsCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      d: d,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = this._scale(curve);\n\n      if (u3.redIsOdd() !== sign) u3.redINeg();\n    }\n\n    if (!this.g.isInfinity()) {\n      curve.g = curve.pointFromShort(this.g);\n      curve.g.normalize();\n    }\n\n    if (curve.isComplete()) {\n      for (let i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n        curve.torsion[i].normalize();\n      }\n    }\n\n    return curve;\n  }\n\n  pointFromJSON(json) {\n    return ShortPoint.fromJSON(this, json);\n  }\n\n  toJSON(pre) {\n    const json = super.toJSON(pre);\n    json.a = this.a.fromRed().toJSON();\n    json.b = this.b.fromRed().toJSON();\n    if (!this.c.isZero()) json.c = this.c.fromRed().toJSON();\n    return json;\n  }\n\n}\n/**\n * ShortPoint\n */\n\n\nclass ShortPoint extends Point {\n  constructor(curve, x, y, inf) {\n    assert(curve instanceof ShortCurve);\n    super(curve, types.AFFINE);\n    this.x = this.curve.zero;\n    this.y = this.curve.zero;\n    this.inf = 1;\n    if (x != null) this._init(x, y, inf);\n  }\n\n  _init(x, y, inf) {\n    assert(x instanceof BN);\n    assert(y instanceof BN);\n    this.x = x;\n    this.y = y;\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    this.inf = inf | 0;\n  }\n\n  _safeNAF(width) {\n    assert(width >>> 0 === width);\n    if (this.pre && this.pre.naf) return this.pre.naf; // Avoid inversions.\n\n    if (width > 1) return this.toJ()._getNAF(width);\n    return this._getNAF(width);\n  }\n\n  _getBeta() {\n    if (!this.curve.endo) return null;\n    if (this.pre && this.pre.beta) return this.pre.beta; // Augment the point with our beta value.\n    // This is the counterpart to `k2` after\n    // the endomorphism split of `k`.\n    //\n    // Note that if we have precomputation,\n    // we have to clone and update all of the\n    // precomputed points below.\n\n    const xb = this.x.redMul(this.curve.endo.beta);\n    const beta = this.curve.point(xb, this.y);\n\n    if (this.pre) {\n      beta.pre = this.pre.map(point => {\n        const xb = point.x.redMul(this.curve.endo.beta);\n        return this.curve.point(xb, point.y);\n      });\n      this.pre.beta = beta;\n    }\n\n    return beta;\n  }\n\n  _getJNAF(point) {\n    assert(point instanceof ShortPoint);\n    if (this.inf | point.inf) return super._getJNAF(point); // Create comb for JSF.\n\n    const comb = [this, // 1\n    null, // 3\n    null, // 5\n    point // 7\n    ]; // Try to avoid Jacobian points, if possible.\n\n    if (this.y.eq(point.y)) {\n      comb[1] = this.add(point);\n      comb[2] = this.toJ().sub(point);\n    } else if (this.y.eq(point.y.redNeg())) {\n      comb[1] = this.toJ().add(point);\n      comb[2] = this.sub(point);\n    } else {\n      comb[1] = this.toJ().add(point);\n      comb[2] = this.toJ().sub(point);\n    }\n\n    return comb;\n  }\n\n  clone() {\n    return this.curve.point(this.x.clone(), this.y.clone(), this.inf);\n  }\n\n  swap(point, flag) {\n    assert(point instanceof ShortPoint);\n    const cond = (flag >> 31 | -flag >> 31) & 1;\n    const inf1 = this.inf;\n    const inf2 = point.inf;\n    this.x.cswap(point.x, flag);\n    this.y.cswap(point.y, flag);\n    this.inf = inf1 & (cond ^ 1) | inf2 & cond;\n    point.inf = inf2 & (cond ^ 1) | inf1 & cond;\n    return this;\n  }\n\n  scale(a) {\n    return this.toJ().scale(a);\n  }\n\n  neg() {\n    // P = O\n    if (this.inf) return this; // -(X1, Y1) = (X1, -Y1)\n\n    return this.curve.point(this.x, this.y.redNeg());\n  }\n\n  add(p) {\n    // [GECC] Page 80, Section 3.1.2.\n    //\n    // Addition Law:\n    //\n    //   l = (y1 - y2) / (x1 - x2)\n    //   x3 = l^2 - x1 - x2\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // 1I + 2M + 1S + 6A\n    assert(p instanceof ShortPoint); // O + P = P\n\n    if (this.inf) return p; // P + O = P\n\n    if (p.inf) return this; // P + P, P + -P\n\n    if (this.x.eq(p.x)) {\n      // P + -P = O\n      if (!this.y.eq(p.y)) return this.curve.point(); // P + P = 2P\n\n      return this.dbl();\n    } // X1 != X2, Y1 = Y2\n\n\n    if (this.y.eq(p.y)) {\n      // X3 = -X1 - X2\n      const nx = this.x.redNeg().redISub(p.x); // Y3 = -Y1\n\n      const ny = this.y.redNeg(); // Skip the inverse.\n\n      return this.curve.point(nx, ny);\n    } // H = X1 - X2\n\n\n    const h = this.x.redSub(p.x); // R = Y1 - Y2\n\n    const r = this.y.redSub(p.y); // L = R / H\n\n    const l = r.redDiv(h); // X3 = L^2 - X1 - X2\n\n    const nx = l.redSqr().redISub(this.x).redISub(p.x); // Y3 = L * (X1 - X3) - Y1\n\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  }\n\n  dbl() {\n    // [GECC] Page 80, Section 3.1.2.\n    //\n    // Addition Law (doubling):\n    //\n    //   l = (3 * x1^2 + a) / (2 * y1)\n    //   x3 = l^2 - 2 * x1\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // 1I + 2M + 2S + 3A + 2*2 + 1*3\n    // P = O\n    if (this.inf) return this; // Y1 = 0\n\n    if (this.y.isZero()) return this.curve.point(); // XX = X1^2\n\n    const xx = this.x.redSqr(); // M = 3 * XX + a\n\n    const m = xx.redIMuln(3).redIAdd(this.curve.a); // Z = 2 * Y1\n\n    const z = this.y.redMuln(2); // L = M / Z\n\n    const l = m.redDiv(z); // X3 = L^2 - 2 * X1\n\n    const nx = l.redSqr().redISub(this.x).redISub(this.x); // Y3 = L * (X1 - X3) - Y1\n\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  }\n\n  dblp(pow) {\n    return this.toJ().dblp(pow).toP();\n  }\n\n  uadd(p) {\n    // [SIDE2] Page 5, Section 3.\n    // [SIDE3] Page 4, Section 3.\n    //\n    // Addition Law (unified):\n    //\n    //   l = ((x1 + x2)^2 - (x1 * x2) + a) / (y1 + y2)\n    //   x3 = l^2 - x1 - x2\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // If x1 != x2 and y1 = -y2, we switch\n    // back to the regular addition lambda:\n    //\n    //   l = (y1 - y2) / (x1 - x2)\n    //\n    // 1I + 3M + 2S + 10A\n    assert(p instanceof ShortPoint); // M = Y1 + Y2\n\n    const m = this.y.redAdd(p.y); // A = (X1 + X2)^2\n\n    const a = this.x.redAdd(p.x).redSqr(); // B = X1 * X2\n\n    const b = this.x.redMul(p.x); // R = A - B + a\n\n    const r = a.redISub(b).redIAdd(this.curve.a); // Check for degenerate case (X1 != X2, Y1 = -Y2).\n\n    const degenerate = m.czero() & r.czero(); // M = X1 - X2 (if degenerate)\n\n    m.cinject(this.x.redSub(p.x), degenerate); // R = Y1 - Y2 (if degenerate)\n\n    r.cinject(this.y.redSub(p.y), degenerate); // Check for negation (X1 = X2, Y1 = -Y2).\n\n    const negated = m.czero() & ((this.inf | p.inf) ^ 1); // M = 1 (if M = 0)\n\n    m.cinject(this.curve.one, m.czero()); // L = R / M\n\n    const l = r.redMul(m.redFermat()); // X3 = L^2 - X1 - X2\n\n    const nx = l.redSqr().redISub(this.x).redISub(p.x); // Y3 = L * (X1 - X3) - Y1\n\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y); // Check for infinity.\n\n    const inf = negated | this.inf & p.inf; // Case 1: O + P = P\n\n    nx.cinject(p.x, this.inf);\n    ny.cinject(p.y, this.inf); // Case 2: P + O = P\n\n    nx.cinject(this.x, p.inf);\n    ny.cinject(this.y, p.inf); // Case 3 & 4: P + -P = O, O + O = O\n\n    nx.cinject(this.curve.zero, inf);\n    ny.cinject(this.curve.zero, inf);\n    return this.curve.point(nx, ny, inf);\n  }\n\n  udbl() {\n    return this.uadd(this);\n  }\n\n  recover(x1, z1, x2, z2) {\n    // Brier-Joye Y-coordinate Recovery.\n    //\n    // [SIDE2] Proposition 3, Page 7, Section 4.\n    //\n    // 14M + 3S + 5A + 2*2 + 1*a + 1*b\n    assert(x1 instanceof BN);\n    assert(z1 instanceof BN);\n    assert(x2 instanceof BN);\n    assert(z2 instanceof BN); // P = O\n\n    if (this.inf) return this.curve.jpoint(); // Z = Z1 * Z2\n\n    const z = z1.redMul(z2); // ZZ = Z^2\n\n    const zz = z.redSqr(); // ZZZ = ZZ * Z\n\n    const zzz = zz.redMul(z); // U0 = X0 * Z\n\n    const u0 = this.x.redMul(z); // U1 = X1 * Z2\n\n    const u1 = x1.redMul(z2); // U2 = X2 * Z1\n\n    const u2 = x2.redMul(z1); // A = 2 * b * ZZZ\n\n    const a = this.curve.b.redMul(zzz).redIMuln(2); // B = a * ZZ + U0 * U1\n\n    const b = u0.redMul(u1).redIAdd(this.curve.a.redMul(zz)); // C = U0 + U1\n\n    const c = u0.redAdd(u1); // D = U0 - U1\n\n    const d = u0.redISub(u1); // E = A + B * C\n\n    const e = a.redIAdd(b.redMul(c)); // F = U2 * D^2\n\n    const f = u2.redMul(d.redSqr()); // G = E - F\n\n    const g = e.redISub(f); // H = 2 * Y0 * ZZZ\n\n    const h = this.y.redMul(zzz).redIMuln(2); // I = X1 * H\n\n    const i = x1.redMul(h); // J = G * Z1\n\n    const j = g.redMul(z1); // K = Z1 * H\n\n    const k = z1.redMul(h); // X3 = I * K\n\n    const nx = i.redMul(k); // Y3 = J * K^2\n\n    const ny = j.redMul(k.redSqr()); // Z3 = K\n\n    const nz = k;\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  getX() {\n    if (this.inf) throw new Error('Invalid point.');\n    return this.x.fromRed();\n  }\n\n  getY() {\n    if (this.inf) throw new Error('Invalid point.');\n    return this.y.fromRed();\n  }\n\n  eq(p) {\n    assert(p instanceof ShortPoint); // P = Q\n\n    if (this === p) return true; // P = O\n\n    if (this.inf) return p.inf !== 0; // Q = O\n\n    if (p.inf) return false; // X1 = X2, Y1 = Y2\n\n    return this.x.eq(p.x) && this.y.eq(p.y);\n  }\n\n  cmp(point) {\n    assert(point instanceof ShortPoint);\n    if (this.inf && !point.inf) return -1;\n    if (!this.inf && point.inf) return 1;\n    if (this.inf && point.inf) return 0;\n    return this.order().cmp(point.order()) || this.getX().cmp(point.getX()) || this.getY().cmp(point.getY());\n  }\n\n  isInfinity() {\n    // Infinity cannot be represented in\n    // the affine space, except by a flag.\n    return this.inf !== 0;\n  }\n\n  isOrder2() {\n    if (this.inf) return false;\n    return this.y.isZero();\n  }\n\n  isOdd() {\n    if (this.inf) return false;\n    return this.y.redIsOdd();\n  }\n\n  isEven() {\n    if (this.inf) return false;\n    return this.y.redIsEven();\n  }\n\n  isSquare() {\n    if (this.inf) return false;\n    return this.y.redJacobi() !== -1;\n  }\n\n  eqX(x) {\n    assert(x instanceof BN);\n    assert(!x.red);\n    if (this.inf) return false;\n    return this.getX().eq(x);\n  }\n\n  eqR(x) {\n    assert(x instanceof BN);\n    assert(!x.red);\n    assert(!this.curve.n.isZero());\n    if (this.inf) return false;\n    return this.getX().imod(this.curve.n).eq(x);\n  }\n\n  mul(k) {\n    return super.mul(k).toP();\n  }\n\n  muln(k) {\n    return super.muln(k).toP();\n  }\n\n  mulSimple(k) {\n    return super.mulSimple(k).toP();\n  }\n\n  mulBlind(k, rng) {\n    return super.mulBlind(k, rng).toP();\n  }\n\n  mulConst(k, rng) {\n    return super.mulConst(k, rng).toP();\n  }\n\n  mulAdd(k1, p2, k2) {\n    return super.mulAdd(k1, p2, k2).toP();\n  }\n\n  mulAddSimple(k1, p2, k2) {\n    return super.mulAddSimple(k1, p2, k2).toP();\n  }\n\n  mulH() {\n    return super.mulH().toP();\n  }\n\n  div(k) {\n    return super.div(k).toP();\n  }\n\n  divn(k) {\n    return super.divn(k).toP();\n  }\n\n  divH() {\n    return super.divH().toP();\n  }\n\n  toP() {\n    return this;\n  }\n\n  toJ() {\n    // (X3, Y3, Z3) = (1, 1, 0)\n    if (this.inf) return this.curve.jpoint(); // (X3, Y3, Z3) = (X1, Y1, 1)\n\n    return this.curve.jpoint(this.x, this.y, this.curve.one);\n  }\n\n  encode(compact) {\n    // [SEC1] Page 10, Section 2.3.3.\n    if (compact == null) compact = true;\n    assert(typeof compact === 'boolean');\n    const {\n      fieldSize\n    } = this.curve; // We do not serialize points at infinity.\n\n    if (this.inf) throw new Error('Invalid point.'); // Compressed form (0x02 = even, 0x03 = odd).\n\n    if (compact) {\n      const p = Buffer.alloc(1 + fieldSize);\n      const x = this.curve.encodeField(this.getX());\n      p[0] = 0x02 | this.y.redIsOdd();\n      x.copy(p, 1);\n      return p;\n    } // Uncompressed form (0x04).\n\n\n    const p = Buffer.alloc(1 + fieldSize * 2);\n    const x = this.curve.encodeField(this.getX());\n    const y = this.curve.encodeField(this.getY());\n    p[0] = 0x04;\n    x.copy(p, 1);\n    y.copy(p, 1 + fieldSize);\n    return p;\n  }\n\n  static decode(curve, bytes) {\n    // [SEC1] Page 11, Section 2.3.4.\n    assert(curve instanceof ShortCurve);\n    assert(Buffer.isBuffer(bytes));\n    const len = curve.fieldSize;\n    if (bytes.length < 1 + len) throw new Error('Not a point.'); // Point forms:\n    //\n    //   0x00 -> Infinity (openssl, unsupported)\n    //   0x02 -> Compressed Even\n    //   0x03 -> Compressed Odd\n    //   0x04 -> Uncompressed\n    //   0x06 -> Hybrid Even (openssl)\n    //   0x07 -> Hybrid Odd (openssl)\n    //\n    // Note that openssl supports serializing points\n    // at infinity as {0}. We choose not to support it\n    // because it's strange and not terribly useful.\n\n    const form = bytes[0];\n\n    switch (form) {\n      case 0x02:\n      case 0x03:\n        {\n          if (bytes.length !== 1 + len) throw new Error('Invalid point size for compressed.');\n          const x = curve.decodeField(bytes.slice(1, 1 + len));\n          if (x.cmp(curve.p) >= 0) throw new Error('Invalid point.');\n          const p = curve.pointFromX(x, form === 0x03);\n          assert(!p.isInfinity());\n          return p;\n        }\n\n      case 0x04:\n      case 0x06:\n      case 0x07:\n        {\n          if (bytes.length !== 1 + len * 2) throw new Error('Invalid point size for uncompressed.');\n          const x = curve.decodeField(bytes.slice(1, 1 + len));\n          const y = curve.decodeField(bytes.slice(1 + len, 1 + 2 * len)); // [GECC] Algorithm 4.3, Page 180, Section 4.\n\n          if (x.cmp(curve.p) >= 0 || y.cmp(curve.p) >= 0) throw new Error('Invalid point.'); // OpenSSL hybrid encoding.\n\n          if (form !== 0x04 && form !== (0x06 | y.isOdd())) throw new Error('Invalid hybrid encoding.');\n          const p = curve.point(x, y);\n          if (!p.validate()) throw new Error('Invalid point.');\n          assert(!p.isInfinity());\n          return p;\n        }\n\n      default:\n        {\n          throw new Error('Unknown point format.');\n        }\n    }\n  }\n\n  encodeX() {\n    // [SCHNORR] \"Specification\".\n    // [BIP340] \"Specification\".\n    return this.curve.encodeField(this.getX());\n  }\n\n  static decodeEven(curve, bytes) {\n    // [BIP340] \"Specification\".\n    assert(curve instanceof ShortCurve);\n    const x = curve.decodeField(bytes);\n    if (x.cmp(curve.p) >= 0) throw new Error('Invalid point.');\n    return curve.pointFromX(x, false);\n  }\n\n  static decodeSquare(curve, bytes) {\n    // [SCHNORR] \"Specification\".\n    // [BIP340] \"Specification\".\n    assert(curve instanceof ShortCurve);\n    const x = curve.decodeField(bytes);\n    if (x.cmp(curve.p) >= 0) throw new Error('Invalid point.');\n    return curve.pointFromX(x);\n  }\n\n  toJSON(pre) {\n    if (this.inf) return [];\n    const x = this.getX().toJSON();\n    const y = this.getY().toJSON();\n    if (pre === true && this.pre) return [x, y, this.pre.toJSON()];\n    return [x, y];\n  }\n\n  toPretty() {\n    if (this.inf) return [];\n    const size = this.curve.fieldSize * 2;\n    const x = toPretty(this.getX(), size);\n    const y = toPretty(this.getY(), size);\n    return [x, y];\n  }\n\n  static fromJSON(curve, json) {\n    assert(curve instanceof ShortCurve);\n    assert(Array.isArray(json));\n    assert(json.length === 0 || json.length === 2 || json.length === 3);\n    if (json.length === 0) return curve.point();\n    const x = BN.fromJSON(json[0]);\n    const y = BN.fromJSON(json[1]);\n    const point = curve.point(x, y);\n    if (json.length > 2 && json[2] != null) point.pre = Precomp.fromJSON(point, json[2]);\n    return point;\n  }\n\n  [custom]() {\n    if (this.inf) return '<ShortPoint: Infinity>';\n    return '<ShortPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + '>';\n  }\n\n}\n/**\n * JPoint\n */\n\n\nclass JPoint extends Point {\n  constructor(curve, x, y, z) {\n    assert(curve instanceof ShortCurve);\n    super(curve, types.JACOBIAN);\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = this.curve.zero;\n    this.zOne = 0;\n    if (x != null) this._init(x, y, z);\n  }\n\n  _init(x, y, z) {\n    assert(x instanceof BN);\n    assert(y instanceof BN);\n    assert(z == null || z instanceof BN);\n    this.x = x;\n    this.y = y;\n    this.z = z || this.curve.one;\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z.eq(this.curve.one) | 0;\n  }\n\n  clone() {\n    return this.curve.jpoint(this.x.clone(), this.y.clone(), this.z.clone());\n  }\n\n  swap(point, flag) {\n    assert(point instanceof JPoint);\n    const cond = (flag >> 31 | -flag >> 31) & 1;\n    const zOne1 = this.zOne;\n    const zOne2 = point.zOne;\n    this.x.cswap(point.x, flag);\n    this.y.cswap(point.y, flag);\n    this.z.cswap(point.z, flag);\n    this.zOne = zOne1 & (cond ^ 1) | zOne2 & cond;\n    point.zOne = zOne2 & (cond ^ 1) | zOne1 & cond;\n    return this;\n  }\n\n  validate() {\n    // [GECC] Example 3.20, Page 88, Section 3.\n    const {\n      a,\n      b\n    } = this.curve; // P = O\n\n    if (this.isInfinity()) return true; // Z1 = 1\n\n    if (this.zOne) return this.curve.validate(this.toP()); // y^2 = x^3 + a * x * z^4 + b * z^6\n\n    const lhs = this.y.redSqr();\n    const x3 = this.x.redSqr().redMul(this.x);\n    const z2 = this.z.redSqr();\n    const z4 = z2.redSqr();\n    const z6 = z4.redMul(z2);\n    const rhs = x3.redIAdd(b.redMul(z6));\n\n    if (!this.curve.zeroA) {\n      // Save some cycles for a = -3.\n      if (this.curve.threeA) rhs.redIAdd(z4.redIMuln(-3).redMul(this.x));else rhs.redIAdd(a.redMul(z4).redMul(this.x));\n    }\n\n    return lhs.eq(rhs);\n  }\n\n  normalize() {\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#scaling-z\n    // 1I + 3M + 1S\n    // Z = 1\n    if (this.zOne) return this; // P = O\n\n    if (this.isInfinity()) return this; // A = 1 / Z1\n\n    const a = this.z.redInvert(); // AA = A^2\n\n    const aa = a.redSqr(); // X3 = X1 * AA\n\n    this.x = this.x.redMul(aa); // Y3 = Y1 * AA * A\n\n    this.y = this.y.redMul(aa).redMul(a); // Z3 = 1\n\n    this.z = this.curve.one;\n    this.zOne = 1;\n    return this;\n  }\n\n  scale(a) {\n    assert(a instanceof BN); // P = O\n\n    if (this.isInfinity()) return this.curve.jpoint(); // AA = A^2\n\n    const aa = a.redSqr(); // X3 = X1 * AA\n\n    const nx = this.x.redMul(aa); // Y3 = Y1 * AA * A\n\n    const ny = this.y.redMul(aa).redMul(a); // Z3 = Z1 * A\n\n    const nz = this.z.redMul(a);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  neg() {\n    // -(X1, Y1, Z1) = (X1, -Y1, Z1)\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n  }\n\n  add(p) {\n    assert(p instanceof Point);\n    if (p.type === types.AFFINE) return this._mixedAdd(p);\n    return this._add(p);\n  }\n\n  _add(p) {\n    assert(p instanceof JPoint); // O + P = P\n\n    if (this.isInfinity()) return p; // P + O = P\n\n    if (p.isInfinity()) return this; // Z1 = 1, Z2 = 1\n\n    if (this.zOne && p.zOne) return this._addAA(p); // Z1 = 1\n\n    if (this.zOne) return p._addJA(this); // Z2 = 1\n\n    if (p.zOne) return this._addJA(p);\n    return this._addJJ(p);\n  }\n\n  _mixedAdd(p) {\n    assert(p instanceof ShortPoint); // O + P = P\n\n    if (this.isInfinity()) return p.toJ(); // P + O = P\n\n    if (p.isInfinity()) return this; // Z1 = 1, Z2 = 1\n\n    if (this.zOne) return this._addAA(p);\n    return this._addJA(p);\n  }\n\n  _addJJ(p) {\n    // No assumptions.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-add-1998-cmo-2\n    // 12M + 4S + 6A + 1*2 (implemented as: 12M + 4S + 7A)\n    // Z1Z1 = Z1^2\n    const z1z1 = this.z.redSqr(); // Z2Z2 = Z2^2\n\n    const z2z2 = p.z.redSqr(); // U1 = X1 * Z2Z2\n\n    const u1 = this.x.redMul(z2z2); // U2 = X2 * Z1Z1\n\n    const u2 = p.x.redMul(z1z1); // S1 = Y1 * Z2 * Z2Z2\n\n    const s1 = this.y.redMul(p.z).redMul(z2z2); // S2 = Y2 * Z1 * Z1Z1\n\n    const s2 = p.y.redMul(this.z).redMul(z1z1); // H = U2 - U1\n\n    const h = u2.redISub(u1); // r = S2 - S1\n\n    const r = s2.redISub(s1); // H = 0\n\n    if (h.isZero()) {\n      if (!r.isZero()) return this.curve.jpoint();\n      return this.dbl();\n    } // HH = H^2\n\n\n    const hh = h.redSqr(); // HHH = H * HH\n\n    const hhh = h.redMul(hh); // V = U1 * HH\n\n    const v = u1.redMul(hh); // X3 = r^2 - HHH - 2 * V\n\n    const nx = r.redSqr().redISub(hhh).redISub(v).redISub(v); // Y3 = r * (V - X3) - S1 * HHH\n\n    const ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(hhh)); // Z3 = Z1 * Z2 * H\n\n    const nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _addJA(p) {\n    // Assumes Z2 = 1.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-madd\n    // 8M + 3S + 6A + 5*2 (implemented as: 8M + 3S + 7A + 4*2)\n    // Z1Z1 = Z1^2\n    const z1z1 = this.z.redSqr(); // U2 = X2 * Z1Z1\n\n    const u2 = p.x.redMul(z1z1); // S2 = Y2 * Z1 * Z1Z1\n\n    const s2 = p.y.redMul(this.z).redMul(z1z1); // H = U2 - X1\n\n    const h = u2.redISub(this.x); // r = 2 * (S2 - Y1)\n\n    const r = s2.redISub(this.y).redIMuln(2); // H = 0\n\n    if (h.isZero()) {\n      if (!r.isZero()) return this.curve.jpoint();\n      return this.dbl();\n    } // I = (2 * H)^2\n\n\n    const i = h.redMuln(2).redSqr(); // J = H * I\n\n    const j = h.redMul(i); // V = X1 * I\n\n    const v = this.x.redMul(i); // X3 = r^2 - J - 2 * V\n\n    const nx = r.redSqr().redISub(j).redISub(v).redISub(v); // Y3 = r * (V - X3) - 2 * Y1 * J\n\n    const ny = r.redMul(v.redISub(nx)).redISub(this.y.redMul(j).redIMuln(2)); // Z3 = 2 * Z1 * H\n\n    const nz = this.z.redMul(h).redIMuln(2);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _addAA(p) {\n    // Assumes Z1 = 1, Z2 = 1.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-mmadd-2007-bl\n    // 4M + 2S + 6A + 4*2 + 1*4 (implemented as: 4M + 2S + 7A + 3*2 + 1*4)\n    // H = X2 - X1\n    const h = p.x.redSub(this.x); // r = 2 * (Y2 - Y1)\n\n    const r = p.y.redSub(this.y).redIMuln(2); // H = 0\n\n    if (h.isZero()) {\n      if (!r.isZero()) return this.curve.jpoint();\n      return this.dbl();\n    } // HH = H^2\n\n\n    const hh = h.redSqr(); // I = 4 * HH\n\n    const i = hh.redIMuln(4); // J = H * I\n\n    const j = h.redMul(i); // V = X1 * I\n\n    const v = this.x.redMul(i); // X3 = r^2 - J - 2 * V\n\n    const nx = r.redSqr().redISub(j).redISub(v).redISub(v); // Y3 = r * (V - X3) - 2 * Y1 * J\n\n    const ny = r.redMul(v.redISub(nx)).redISub(this.y.redMul(j).redIMuln(2)); // Z3 = 2 * H\n\n    const nz = h.redIMuln(2);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  dbl() {\n    // P = O\n    if (this.isInfinity()) return this; // Y1 = 0\n\n    if (this.y.isZero()) return this.curve.jpoint(); // Z1 = 1\n\n    if (this.zOne) return this._dblA(); // a = 0\n\n    if (this.curve.zeroA) return this._dbl0(); // a = -3\n\n    if (this.curve.threeA) return this._dbl3();\n    return this._dblJ();\n  }\n\n  _dblJ() {\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2\n    // 3M + 6S + 4A + 1*a + 2*2 + 1*3 + 1*4 + 1*8\n    // (implemented as: 3M + 6S + 5A + 1*a + 1*2 + 1*3 + 1*4 + 1*8)\n    // XX = X1^2\n    const xx = this.x.redSqr(); // YY = Y1^2\n\n    const yy = this.y.redSqr(); // ZZ = Z1^2\n\n    const zz = this.z.redSqr(); // S = 4 * X1 * YY\n\n    const s = this.x.redMul(yy).redIMuln(4); // M = 3 * XX + a * ZZ^2\n\n    const m = xx.redIMuln(3).redIAdd(this.curve.a.redMul(zz.redSqr())); // T = M^2 - 2 * S\n\n    const t = m.redSqr().redISub(s).redISub(s); // X3 = T\n\n    const nx = t; // Y3 = M * (S - T) - 8 * YY^2\n\n    const ny = m.redMul(s.redISub(t)).redISub(yy.redSqr().redIMuln(8)); // Z3 = 2 * Y1 * Z1\n\n    const nz = this.y.redMul(this.z).redIMuln(2);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _dblA() {\n    // Assumes Z = 1.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-mdbl-2007-bl\n    // 1M + 5S + 7A + 3*2 + 1*3 + 1*8\n    // (implemented as: 1M + 5S + 8A + 2*2 + 1*3 + 1*8)\n    // XX = X1^2\n    const xx = this.x.redSqr(); // YY = Y1^2\n\n    const yy = this.y.redSqr(); // YYYY = YY^2\n\n    const yyyy = yy.redSqr(); // + XYY2 = (X1 + YY)^2\n\n    const xyy2 = yy.redIAdd(this.x).redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n    const s = xyy2.redISub(xx).redISub(yyyy).redIMuln(2); // M = 3 * XX + a\n\n    const m = xx.redIMuln(3).redIAdd(this.curve.a); // T = M^2 - 2 * S\n\n    const t = m.redSqr().redISub(s).redISub(s); // X3 = T\n\n    const nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n    const ny = m.redMul(s.redISub(t)).redISub(yyyy.redIMuln(8)); // Z3 = 2 * Y1\n\n    const nz = this.y.redMuln(2);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _dbl0() {\n    // Assumes a = 0.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l\n    // 2M + 5S + 6A + 3*2 + 1*3 + 1*8\n    // (implemented as: 2M + 5S + 7A + 2*2 + 1*3 + 1*8)\n    // A = X1^2\n    const a = this.x.redSqr(); // B = Y1^2\n\n    const b = this.y.redSqr(); // C = B^2\n\n    const c = b.redSqr(); // + XB2 = (X1 + B)^2\n\n    const xb2 = b.redIAdd(this.x).redSqr(); // D = 2 * ((X1 + B)^2 - A - C)\n\n    const d = xb2.redISub(a).redISub(c).redIMuln(2); // E = 3 * A\n\n    const e = a.redIMuln(3); // F = E^2\n\n    const f = e.redSqr(); // X3 = F - 2 * D\n\n    const nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C\n\n    const ny = e.redMul(d.redISub(nx)).redISub(c.redIMuln(8)); // Z3 = 2 * Y1 * Z1\n\n    const nz = this.y.redMul(this.z).redIMuln(2);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _dbl3() {\n    // Assumes a = -3.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S + 8A + 1*3 + 1*4 + 2*8\n    // (implemented as: 3M + 5S + 8A + 1*2 + 1*3 + 1*4 + 1*8)\n    // delta = Z1^2\n    const delta = this.z.redSqr(); // gamma = Y1^2\n\n    const gamma = this.y.redSqr(); // beta = X1 * gamma\n\n    const beta = this.x.redMul(gamma); // + xmdelta = X1 - delta\n\n    const xmdelta = this.x.redSub(delta); // + xpdelta = X1 + delta\n\n    const xpdelta = this.x.redAdd(delta); // alpha = 3 * (X1 - delta) * (X1 + delta)\n\n    const alpha = xmdelta.redMul(xpdelta).redIMuln(3); // + beta4 = 4 * beta\n\n    const beta4 = beta.redIMuln(4); // + beta8 = 2 * beta4\n\n    const beta8 = beta4.redMuln(2); // + gamma28 = 8 * gamma^2\n\n    const gamma28 = gamma.redSqr().redIMuln(8); // X3 = alpha^2 - 8 * beta\n\n    const nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta\n\n    const nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n\n    const ny = alpha.redMul(beta4.redISub(nx)).redISub(gamma28);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  dblp(pow) {\n    assert(pow >>> 0 === pow); // a = 0 or a = -3\n\n    if (this.curve.zeroA || this.curve.threeA) return super.dblp(pow); // m = 0\n\n    if (pow === 0) return this; // P = O\n\n    if (this.isInfinity()) return this;\n    return this._dblp(pow);\n  }\n\n  _dblp(pow) {\n    // Repeated point doubling (Jacobian coordinates).\n    //\n    // [GECC] Algorithm 3.23, Page 93, Section 3.2.\n    //\n    // Modified version of:\n    //   https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2\n    //\n    // Divergences from the above formula are marked with diff notation.\n    //\n    // Implemented as:\n    //   1M + 2S + 1*2 + N * (4M + 4S + 4A + 1*a + 1*3 + 2*2)\n    //   e.g. N = 1 => 5M + 6S + 4A + 1*a + 1*3 + 3*2\n    //\n    // Repeated doubling also explained here:\n    //   https://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates\n    //\n    // Note that the above sources change:\n    //   M = 3 * XX + a * ZZZZ\n    // To:\n    //   M = 3 * (XX - ZZZZ)\n    //\n    // In order to assume a = -3.\n    const {\n      a,\n      i2\n    } = this.curve; // Reuse results (y is always y*2).\n\n    let x = this.x;\n    let z = this.z; // + Y1 = Y1 * 2\n\n    let y = this.y.redMuln(2); // + ZZZZ = Z1^4\n\n    let zzzz = z.redPown(4);\n\n    for (let i = 0; i < pow; i++) {\n      // Y1 = 0\n      if (y.isZero()) return this.curve.jpoint(); // XX = X1^2\n\n      const xx = x.redSqr(); // YY = Y1^2\n\n      const yy = y.redSqr(); // + YYYY = YY^2\n\n      const yyyy = yy.redSqr(); // - M = 3 * XX + a * ZZ^2\n      // + M = 3 * XX + a * ZZZZ\n\n      const m = xx.redIMuln(3).redIAdd(a.redMul(zzzz)); // - S = 4 * X1 * YY\n      // + S = X1 * YY\n\n      const s = x.redMul(yy); // T = M^2 - 2 * S\n\n      const t = m.redSqr().redISub(s).redISub(s); // X3 = T\n\n      const nx = t; // - Y3 = M * (S - T) - 8 * YY^2\n      // + Y3 = M * (S - T) * 2 - YYYY\n\n      const ny = m.redMul(s.redISub(t)).redIMuln(2).redISub(yyyy); // Z3 = 2 * Y1 * Z1\n\n      const nz = y.redMul(z); // + ZZZZ = ZZZZ * YYYY\n\n      if (i + 1 < pow) zzzz = zzzz.redMul(yyyy); // + X1 = X3\n\n      x = nx; // + Y1 = Y3\n\n      y = ny; // + Z1 = Z3\n\n      z = nz;\n    }\n\n    return this.curve.jpoint(x, y.redMul(i2), z);\n  }\n\n  uadd(p) {\n    assert(p instanceof Point);\n    if (p.type === types.AFFINE) return this._uadd(p.toJ());\n    return this._uadd(p);\n  }\n\n  _uadd(p) {\n    // Strongly unified Jacobian addition (Brier and Joye).\n    //\n    // [SIDE2] Page 6, Section 3.\n    // [SIDE3] Page 4, Section 3.\n    //\n    // The above documents use projective coordinates[1]\n    // and have been modified for jacobian coordinates. A\n    // further modification, taken from libsecp256k1[2],\n    // handles the degenerate case of: x1 != x2, y1 = -y2.\n    //\n    // [1] https://hyperelliptic.org/EFD/g1p/auto-shortw-projective.html#addition-add-2002-bj\n    // [2] https://github.com/bitcoin-core/secp256k1/blob/ee9e68c/src/group_impl.h#L525\n    //\n    // 11M + 8S + 7A + 1*a + 2*4 + 1*3 + 2*2 (a != 0)\n    // 11M + 6S + 6A + 2*4 + 1*3 + 2*2 (a = 0)\n    assert(p instanceof JPoint);\n    const {\n      zero,\n      one\n    } = this.curve; // Z1Z1 = Z1^2\n\n    const z1z1 = this.z.redSqr(); // Z2Z2 = Z2^2\n\n    const z2z2 = p.z.redSqr(); // U1 = X1 * Z2Z2\n\n    const u1 = this.x.redMul(z2z2); // U2 = X2 * Z1Z1\n\n    const u2 = p.x.redMul(z1z1); // S1 = Y1 * Z2Z2 * Z2\n\n    const s1 = this.y.redMul(z2z2).redMul(p.z); // S2 = Y2 * Z1Z1 * Z1\n\n    const s2 = p.y.redMul(z1z1).redMul(this.z); // Z = Z1 * Z2\n\n    const z = this.z.redMul(p.z); // T = U1 + U2\n\n    const t = u1.redAdd(u2); // M = S1 + S2\n\n    const m = s1.redAdd(s2); // R = T^2 - U1 * U2\n\n    const r = t.redSqr().redISub(u1.redMul(u2)); // R = R + a * Z^4 (if a != 0)\n\n    if (!this.curve.zeroA) {\n      const zzzz = z.redPown(4); // Save some cycles for a = -3.\n\n      if (this.curve.threeA) r.redIAdd(zzzz.redIMuln(-3));else r.redIAdd(this.curve.a.redMul(zzzz));\n    } // Check for degenerate case (X1 != X2, Y1 = -Y2).\n\n\n    const degenerate = m.czero() & r.czero(); // M = U1 - U2 (if degenerate)\n\n    m.cinject(u1.redSub(u2), degenerate); // R = S1 - S2 (if degenerate)\n\n    r.cinject(s1.redSub(s2), degenerate); // L = M^2\n\n    const l = m.redSqr(); // G = T * L\n\n    const g = t.redMul(l); // LL = L^2\n\n    const ll = l.redSqr(); // LL = 0 (if degenerate)\n\n    ll.cinject(zero, degenerate); // W = R^2\n\n    const w = r.redSqr(); // F = Z * M\n\n    const f = z.redMul(m); // H = 3 * G - 2 * W\n\n    const h = g.redMuln(3).redISub(w).redISub(w); // X3 = 4 * (W - G)\n\n    const nx = w.redISub(g).redIMuln(4); // Y3 = 4 * (R * H - LL)\n\n    const ny = r.redMul(h).redISub(ll).redIMuln(4); // Z3 = 2 * F\n\n    const nz = f.redIMuln(2); // Check for infinity.\n\n    const inf1 = this.z.czero();\n    const inf2 = p.z.czero();\n    const inf3 = nz.czero() & ((inf1 | inf2) ^ 1); // Case 1: O + P = P\n\n    nx.cinject(p.x, inf1);\n    ny.cinject(p.y, inf1);\n    nz.cinject(p.z, inf1); // Case 2: P + O = P\n\n    nx.cinject(this.x, inf2);\n    ny.cinject(this.y, inf2);\n    nz.cinject(this.z, inf2); // Case 3: P + -P = O\n\n    nx.cinject(one, inf3);\n    ny.cinject(one, inf3);\n    nz.cinject(zero, inf3);\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  udbl() {\n    const p = this._udbl();\n\n    const inf = this.z.czero() | this.y.czero(); // Case 1 & 2: 2 * O = O, 2 * (X, 0) = O\n\n    p.x.cinject(this.curve.one, inf);\n    p.y.cinject(this.curve.one, inf);\n    p.z.cinject(this.curve.zero, inf);\n    return p;\n  }\n\n  _udbl() {\n    // a = 0\n    if (this.curve.zeroA) return this._dbl0(); // a = -3\n\n    if (this.curve.threeA) return this._dbl3();\n    return this._dblJ();\n  }\n\n  zaddu(p) {\n    // Co-Z addition with update (ZADDU).\n    // [COZ] Algorithm 19, Page 15, Appendix C.\n    // 5M + 2S + 7A\n    assert(p instanceof JPoint); // H = X1 - X2\n\n    const h = this.x.redSub(p.x); // R = Y1 - Y2\n\n    const r = this.y.redSub(p.y); // HH = H^2\n\n    const hh = h.redSqr(); // V1 = X1 * HH\n\n    const v1 = this.x.redMul(hh); // V2 = X2 * HH\n\n    const v2 = p.x.redMul(hh); // X4 = V1\n\n    const x4 = v1; // X3 = R^2 - V1 - V2\n\n    const x3 = r.redSqr().redISub(v1).redISub(v2); // Y4 = Y1 * (V1 - V2)\n\n    const y4 = this.y.redMul(v1.redSub(v2)); // Y3 = R * (X4 - X3) - Y4\n\n    const y3 = r.redMul(x4.redSub(x3)).redISub(y4); // Z4 = Z1 * H\n\n    const z4 = this.z.redMul(h); // Z3 = Z4\n\n    const z3 = z4; // R = (X3, Y3, Z3)\n    // P = (X4, Y4, Z4)\n\n    return [this.curve.jpoint(x3, y3, z3), this.curve.jpoint(x4, y4, z4)];\n  }\n\n  zaddc(p) {\n    // Co-Z addition with conjugate (ZADDC).\n    // [COZ] Algorithm 20, Page 15, Appendix C.\n    // 6M + 3S + 14A + 1*2\n    assert(p instanceof JPoint); // H = X1 - X2\n\n    const h = this.x.redSub(p.x); // R = Y1 - Y2\n\n    const r = this.y.redSub(p.y); // M = Y1 + Y2\n\n    const m = this.y.redAdd(p.y); // HH = H^2\n\n    const hh = h.redSqr(); // V1 = X1 * HH\n\n    const v1 = this.x.redMul(hh); // V2 = X2 * HH\n\n    const v2 = p.x.redMul(hh); // X4 = (Y1 + Y2)^2 - V1 - V2\n\n    const x4 = m.redSqr().redISub(v1).redISub(v2); // X3 = R^2 - V1 - V2\n\n    const x3 = r.redSqr().redISub(v1).redISub(v2); // Y = Y1 * (V2 - V1)\n\n    const y = this.y.redMul(v2.redISub(v1)); // Z = R + 2 * Y2\n\n    const z = p.y.redMuln(2).redIAdd(r); // I = V1 - X4\n\n    const i = v1.redISub(x4); // J = X4 + I - X3\n\n    const j = x4.redAdd(i).redISub(x3); // Y4 = Z * I + Y\n\n    const y4 = z.redMul(i).redIAdd(y); // Y3 = R * J + Y\n\n    const y3 = r.redMul(j).redIAdd(y); // Z4 = Z1 * H\n\n    const z4 = this.z.redMul(h); // Z3 = Z4\n\n    const z3 = z4; // R = (X3, Y3, Z3)\n    // S = (X4, Y4, Z4)\n\n    return [this.curve.jpoint(x3, y3, z3), this.curve.jpoint(x4, y4, z4)];\n  }\n\n  zdblu() {\n    // Co-Z doubling with update (DBLU).\n    // [COZ] Algorithm 21, Page 15, Appendix C.\n    //\n    // 1M + 5S + 8A + 4*2 + 1*8\n    //\n    // Note that the original formula assumed Z1=1.\n    // We have modified it to allow for scaled points.\n    //\n    // New Cost: 2M + 5S + 8A + 1*a + 1*3 + 2*2 + 1*8\n    // XX = X1^2\n    const xx = this.x.redSqr(); // YY = Y1^2\n\n    const yy = this.y.redSqr(); // YYYY = YY^2\n\n    const yyyy = yy.redSqr(); // S = (X1 + YY)^2\n\n    const s = this.x.redAdd(yy).redSqr(); // M = 3 * XX\n\n    const m = xx.redMuln(3); // M = M + a * Z1^4 (if a != 0)\n\n    if (!this.curve.zeroA) {\n      const zzzz = this.z.redPown(4); // Save some cycles for a = -3.\n\n      if (this.curve.threeA) m.redIAdd(zzzz.redIMuln(-3));else m.redIAdd(this.curve.a.redMul(zzzz));\n    } // X4 = 2 * (S - XX - YYYY)\n\n\n    const x4 = s.redISub(xx).redISub(yyyy).redIMuln(2); // X3 = M^2 - X4 - X4\n\n    const x3 = m.redSqr().redISub(x4).redISub(x4); // Y4 = 8 * YYYY\n\n    const y4 = yyyy.redIMuln(8); // Y3 = (X4 - X3) * M - Y4\n\n    const y3 = x4.redSub(x3).redMul(m).redISub(y4); // Z4 = 2 * (Y1 * Z1)\n\n    const z4 = this.y.redMul(this.z).redIMuln(2); // Z3 = Z4\n\n    const z3 = z4; // R = (X3, Y3, Z3)\n    // P = (X4, Y4, Z4)\n\n    return [this.curve.jpoint(x3, y3, z3), this.curve.jpoint(x4, y4, z4)];\n  }\n\n  recover(x1, z1, x2, z2) {\n    return this.toP().recover(x1, z1, x2, z2);\n  }\n\n  getX() {\n    if (this.isInfinity()) throw new Error('Invalid point.');\n    this.normalize();\n    return this.x.fromRed();\n  }\n\n  getY() {\n    if (this.isInfinity()) throw new Error('Invalid point.');\n    this.normalize();\n    return this.y.fromRed();\n  }\n\n  eq(p) {\n    assert(p instanceof JPoint); // P = Q\n\n    if (this === p) return true; // P = O\n\n    if (this.isInfinity()) return p.isInfinity(); // Q = O\n\n    if (p.isInfinity()) return false; // Z1 = Z2\n\n    if (this.z.eq(p.z)) {\n      return this.x.eq(p.x) && this.y.eq(p.y);\n    } // X1 * Z2^2 == X2 * Z1^2\n\n\n    const zz1 = this.z.redSqr();\n    const zz2 = p.z.redSqr();\n    const x1 = this.x.redMul(zz2);\n    const x2 = p.x.redMul(zz1);\n    if (!x1.eq(x2)) return false; // Y1 * Z2^3 == Y2 * Z1^3\n\n    const zzz1 = zz1.redMul(this.z);\n    const zzz2 = zz2.redMul(p.z);\n    const y1 = this.y.redMul(zzz2);\n    const y2 = p.y.redMul(zzz1);\n    return y1.eq(y2);\n  }\n\n  cmp(point) {\n    assert(point instanceof JPoint);\n    const inf1 = this.isInfinity();\n    const inf2 = point.isInfinity();\n    if (inf1 && !inf2) return -1;\n    if (!inf1 && inf2) return 1;\n    if (inf1 && inf2) return 0;\n    return this.order().cmp(point.order()) || this.getX().cmp(point.getX()) || this.getY().cmp(point.getY());\n  }\n\n  isInfinity() {\n    // Z1 = 0\n    return this.z.isZero();\n  }\n\n  isOrder2() {\n    if (this.isInfinity()) return false;\n    return this.y.isZero();\n  }\n\n  isOdd() {\n    if (this.isInfinity()) return false;\n    this.normalize();\n    return this.y.redIsOdd();\n  }\n\n  isEven() {\n    if (this.isInfinity()) return false;\n    this.normalize();\n    return this.y.redIsEven();\n  }\n\n  isSquare() {\n    if (this.isInfinity()) return false;\n    return this.y.redMul(this.z).redJacobi() !== -1;\n  }\n\n  eqX(x) {\n    // Verify that integer `x` is equal to field\n    // element `x` by scaling it by our z coordinate.\n    // This optimization is mentioned in and used for\n    // bip-schnorr[1]. This avoids having to affinize\n    // the resulting point during verification.\n    //\n    // [1] [SCHNORR] \"Optimizations\".\n    assert(x instanceof BN);\n    assert(!x.red);\n    if (this.isInfinity()) return false;\n    const zz = this.z.redSqr();\n    const rx = x.toRed(this.curve.red).redMul(zz);\n    return this.x.eq(rx);\n  }\n\n  eqR(x) {\n    // Similar to the optimization above, this\n    // optimization, suggested by Maxwell[1],\n    // compares an integer to an X coordinate\n    // by scaling it.\n    //\n    // Since a signature's R value is modulo N\n    // in ECDSA, we may be dealing with an R\n    // value greater than N in actuality.\n    //\n    // If the equality check fails, we can\n    // scale N itself by Z and add it to the\n    // X field element (up until a certain\n    // limit) and repeat the check.\n    //\n    // If P is more than 100 times larger than\n    // N, we don't gain much here, so we just\n    // affinize and do the comparison.\n    //\n    // [1] https://github.com/bitcoin-core/secp256k1/commit/ce7eb6f\n    assert(x instanceof BN);\n    assert(!x.red);\n    if (!this.curve.smallGap) return this.toP().eqR(x);\n    if (this.isInfinity()) return false;\n    if (x.cmp(this.curve.p) >= 0) return false;\n    const zz = this.z.redSqr();\n    const rx = x.toRed(this.curve.red).redMul(zz);\n    if (this.x.eq(rx)) return true;\n    if (this.curve.highOrder) return false;\n    if (x.cmp(this.curve.pmodn) >= 0) return false;\n    const rn = this.curve.redN.redMul(zz);\n    rx.redIAdd(rn);\n    return this.x.eq(rx);\n  }\n\n  toP() {\n    // P = O\n    if (this.isInfinity()) return this.curve.point();\n    this.normalize(); // (X3, Y3) = (X1 / Z1^2, Y1 / Z1^3)\n\n    return this.curve.point(this.x, this.y);\n  }\n\n  toJ() {\n    return this;\n  }\n\n  encode(compact) {\n    return this.toP().encode(compact);\n  }\n\n  static decode(curve, bytes) {\n    return ShortPoint.decode(curve, bytes).toJ();\n  }\n\n  encodeX() {\n    return this.toP().encodeX();\n  }\n\n  static decodeEven(curve, bytes) {\n    return ShortPoint.decodeEven(curve, bytes).toJ();\n  }\n\n  static decodeSquare(curve, bytes) {\n    return ShortPoint.decodeSquare(curve, bytes).toJ();\n  }\n\n  toJSON(pre) {\n    return this.toP().toJSON(pre);\n  }\n\n  toPretty() {\n    return this.toP().toPretty();\n  }\n\n  static fromJSON(curve, json) {\n    return ShortPoint.fromJSON(curve, json).toJ();\n  }\n\n  [custom]() {\n    if (this.isInfinity()) return '<JPoint: Infinity>';\n    return '<JPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';\n  }\n\n}\n/**\n * MontCurve\n */\n\n\nclass MontCurve extends Curve {\n  constructor(conf) {\n    super(MontPoint, 'mont', conf);\n    this.a = BN.fromJSON(conf.a).toRed(this.red);\n    this.b = BN.fromJSON(conf.b).toRed(this.red);\n    this.bi = this.b.redInvert();\n    this.a2 = this.a.redAdd(this.two);\n    this.a24 = this.a2.redMul(this.i4);\n    this.a3 = this.a.redMul(this.i3);\n    this.a0 = this.a.redMul(this.bi);\n    this.b0 = this.bi.redSqr();\n\n    this._finalize(conf);\n  }\n\n  static _isomorphism(curveA, curveB, customB) {\n    // Montgomery Isomorphism.\n    //\n    // [MONT3] Page 3, Section 2.1.\n    //\n    // Transformation:\n    //\n    //   A' = A\n    //   B' = B'\n    //\n    // Where (B / B') is square.\n    assert(curveA instanceof BN);\n    assert(curveB instanceof BN);\n    assert(customB instanceof BN);\n    const a = curveA.clone();\n    const b = customB.clone();\n    const c = curveB.redDiv(customB);\n    if (c.redJacobi() !== 1) throw new Error('Invalid `b` coefficient.');\n    return [a, b];\n  }\n\n  _short(a0, odd) {\n    // Montgomery->Short Weierstrass Equivalence.\n    //\n    // [MONT2] \"Equivalence with Weierstrass curves\".\n    //\n    // Transformation:\n    //\n    //   a = (3 - A^2) / (3 * B^2)\n    //   b = (2 * A^3 - 9 * A) / (27 * B^3)\n    const {\n      a,\n      b,\n      three\n    } = this;\n    const a2 = a.redSqr();\n    const a3 = a2.redMul(a);\n    const b2 = b.redSqr();\n    const b3 = b2.redMul(b);\n    const n0 = three.redSub(a2);\n    const d0 = b2.redMuln(3);\n    const n1 = a3.redMuln(2).redISub(a.redMuln(9));\n    const d1 = b3.redMuln(27);\n    const wa = n0.redDiv(d0);\n    const wb = n1.redDiv(d1);\n    if (a0 != null) return ShortCurve._isomorphism(wa, wb, a0, odd);\n    return [wa, wb];\n  }\n\n  _mont(b0) {\n    return MontCurve._isomorphism(this.a, this.b, b0);\n  }\n\n  _edwards(a0, invert = false) {\n    // Montgomery->Twisted Edwards Transformation.\n    //\n    // [MONT1] Page 11, Section 4.3.5.\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    //\n    // Equivalence:\n    //\n    //   a = (A + 2) / B\n    //   d = (A - 2) / B\n    //\n    // Isomorphism:\n    //\n    //   a = a'\n    //   d = a' * (A - 2) / (A + 2)\n    //\n    // Where ((A + 2) / (B * a')) is square.\n    //\n    // If `d` is square, we can usually find\n    // a complete curve by using the `invert`\n    // option. This will create an isomorphism\n    // chain of: M(A,B)->E(a,d)->E(d,a).\n    //\n    // The equivalence between E(a,d) and\n    // E(d,a) is:\n    //\n    //   (x, y) = (x, 1 / y)\n    //\n    // Meaning our map to E(d,a) is:\n    //\n    //   x = u / v\n    //   y = 1 / ((u - 1) / (u + 1))\n    //     = (u + 1) / (u - 1)\n    assert(typeof invert === 'boolean');\n    const {\n      two,\n      bi\n    } = this;\n    const a = this.a.redAdd(two).redMul(bi);\n    const d = this.a.redSub(two).redMul(bi);\n    if (invert) a.swap(d);\n    if (a0 != null) return EdwardsCurve._isomorphism(a, d, a0);\n    return [a, d];\n  }\n\n  _scaleShort(curve) {\n    assert(curve instanceof ShortCurve);\n\n    const [u2, u3] = curve._scale(this);\n\n    return [this.field(u2.redInvert()), this.field(u3.redInvert())];\n  }\n\n  _scaleMont(curve) {\n    // We can extract the isomorphism factor with:\n    //\n    //   c = +-sqrt(B / B')\n    //\n    // If base points are available, we can do:\n    //\n    //   c = v' / v\n    assert(curve instanceof MontCurve);\n    if (this.g.isInfinity() || curve.g.isInfinity()) return this.field(curve.b).redDivSqrt(this.b);\n    return this.g.y.redDiv(this.field(curve.g.y));\n  }\n\n  _scaleEdwards(curve, invert) {\n    // We _could_ do something like:\n    //\n    //   B = 4 / (a - d)\n    //   c = +-sqrt(B / B')\n    //\n    // Which can be reduced to:\n    //\n    //   c = +-sqrt(4 / ((a - d) * B'))\n    //\n    // If base points are available:\n    //\n    //   v = u' / x\n    //   c = v' / v\n    //\n    // Which can be reduced to:\n    //\n    //   c = v' * x / u'\n    //\n    // However, the way our maps are\n    // written, we can re-use the Edwards\n    // isomorphism factor when going the\n    // other direction.\n    assert(curve instanceof EdwardsCurve);\n\n    const c = curve._scale(this, invert);\n\n    return this.field(c);\n  }\n\n  _solveY0(x) {\n    assert(x instanceof BN); // y^2 = x^3 + A * x^2 + B * x\n\n    const a = this.a0;\n    const b = this.b0;\n    const x2 = x.redSqr();\n    const x3 = x2.redMul(x);\n    const y2 = x3.redIAdd(a.redMul(x2)).redIAdd(b.redMul(x));\n    return y2;\n  }\n\n  _elligator2(u) {\n    // Elligator 2.\n    //\n    // Distribution: 1/2.\n    //\n    // [ELL2] Page 11, Section 5.2.\n    // [H2EC] \"Elligator 2 Method\".\n    //        \"Mappings for Montgomery curves\".\n    // [SAFE] \"Indistinguishability from uniform random strings\".\n    //\n    // Assumptions:\n    //\n    //   - y^2 = x^3 + A * x^2 + B * x.\n    //   - A != 0, B != 0.\n    //   - A^2 - 4 * B is non-zero and non-square in F(p).\n    //   - Let z be a non-square in F(p).\n    //   - u != +-sqrt(-1 / z).\n    //\n    // Note that Elligator 2 is defined over the form:\n    //\n    //   y'^2 = x'^3 + A' * x'^2 + B' * x'\n    //\n    // Instead of:\n    //\n    //   B * y^2 = x^3 + A * x^2 + x\n    //\n    // Where:\n    //\n    //   A' = A / B\n    //   B' = 1 / B^2\n    //   x' = x / B\n    //   y' = y / B\n    //\n    // And:\n    //\n    //   x = B * x'\n    //   y = B * y'\n    //\n    // This is presumably the result of Elligator 2\n    // being designed in long Weierstrass form. If\n    // we want to support B != 1, we need to do the\n    // conversion.\n    //\n    // Map:\n    //\n    //   g(x) = x^3 + A * x^2 + B * x\n    //   x1 = -A / (1 + z * u^2)\n    //   x1 = -A, if x1 = 0\n    //   x2 = -x1 - A\n    //   x = x1, if g(x1) is square\n    //     = x2, otherwise\n    //   y = sign(u) * abs(sqrt(g(x)))\n    const lhs = this.a0.redNeg();\n    const rhs = this.one.redAdd(this.z.redMul(u.redSqr()));\n    rhs.cinject(this.one, rhs.czero());\n    const x1 = lhs.redMul(rhs.redFermat());\n    const x2 = x1.redNeg().redISub(this.a0);\n\n    const y1 = this._solveY0(x1);\n\n    const y2 = this._solveY0(x2);\n\n    const alpha = y1.redIsSquare() | 0;\n    const x0 = x1.cinject(x2, alpha ^ 1);\n    const y0 = y1.cinject(y2, alpha ^ 1).redSqrt();\n    y0.cinject(y0.redNeg(), y0.redIsOdd() ^ u.redIsOdd());\n    const x = this.b.redMul(x0);\n    const y = this.b.redMul(y0);\n    return this.point(x, y);\n  }\n\n  _invert2(p, hint) {\n    // Inverting the Map (Elligator 2).\n    //\n    // [ELL2] Page 12, Section 5.3.\n    //\n    // Assumptions:\n    //\n    //   - -z * x * (x + A) is square in F(p).\n    //   - If r = 1 then x != 0.\n    //   - If r = 2 then x != -A.\n    //\n    // Map:\n    //\n    //   u1 = -(x + A) / (x * z)\n    //   u2 = -x / ((x + A) * z)\n    //   r = random integer in [1,2]\n    //   u = sign(y) * abs(sqrt(ur))\n    //\n    // Note that `0 / 0` can only occur if `A == 0`\n    // (this violates the assumptions of Elligator 2).\n    const {\n      x,\n      y\n    } = p;\n    const r = hint & 1;\n    const x0 = x.redMul(this.bi);\n    const y0 = y.redMul(this.bi);\n    const n = x0.redAdd(this.a0);\n    const d = x0;\n    n.cswap(d, r);\n    const lhs = n.redINeg();\n    const rhs = d.redMul(this.z);\n    const [sqr, u] = divSqrt(lhs, rhs);\n    u.cinject(u.redNeg(), u.redIsOdd() ^ y0.redIsOdd());\n    if (!sqr) throw new Error('Invalid point.');\n    return u;\n  }\n\n  _constMul(p, k, rng) {\n    // Use the single-coordinate ladder in\n    // combination with y-coordinate recovery\n    // to compute an affine point.\n    //\n    // There are a few edge cases here, some\n    // of them documented by Mike Hamburg[1].\n    //\n    // There are two primary edge cases here:\n    //\n    //   1. P * k = O where k = n - 1.\n    //   2. P * k = O where P is small order.\n    //\n    // The first occurs due to the fact that\n    // the Okeya-Sakurai formula requires\n    // one to compute both Q and Q+P. In the\n    // case of k=n-1, Q+P becomes infinity.\n    //\n    // In other words:\n    //\n    //   Q2 = P * (n - 1) + P = O\n    //\n    // The second edge case is a side effect\n    // of the differential addition used in\n    // the ladder. This covers the first two\n    // cases mentioned by Hamburg.\n    //\n    // [1] https://tinyurl.com/y4q2dey9\n    assert(p instanceof MontPoint);\n    const x = p.toX();\n    const [a, b] = x.ladderConst(k, rng);\n    const q = p.recover(a, b);\n    return k.isNeg() ? q.neg() : q;\n  }\n\n  isElliptic() {\n    const a2 = this.a.redSqr();\n    const d = this.b.redMul(a2.redSub(this.four)); // B * (A^2 - 4) != 0\n\n    return !d.isZero();\n  }\n\n  jinv() {\n    // [MONT3] Page 3, Section 2.\n    const {\n      a,\n      three,\n      four\n    } = this;\n    const a2 = a.redSqr();\n    const t0 = a2.redSub(three);\n    const lhs = t0.redPown(3).redIMuln(256);\n    const rhs = a2.redSub(four);\n    if (rhs.isZero()) throw new Error('Curve is not elliptic.'); // (256 * (A^2 - 3)^3) / (A^2 - 4)\n\n    return lhs.redDiv(rhs).fromRed();\n  }\n\n  point(x, y, inf = 0) {\n    return new MontPoint(this, x, y, inf);\n  }\n\n  jpoint(x, y, z) {\n    assert(x == null && y == null && z == null);\n    return this.point();\n  }\n\n  xpoint(x, z) {\n    return new XPoint(this, x, z);\n  }\n\n  solveY2(x) {\n    // [MONT3] Page 3, Section 2.\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom.html\n    assert(x instanceof BN); // B * y^2 = x^3 + A * x^2 + x\n\n    const x2 = x.redSqr();\n    const x3 = x2.redMul(x);\n    const by2 = x3.redIAdd(this.a.redMul(x2)).redIAdd(x);\n    const y2 = by2.redMul(this.bi);\n    return y2;\n  }\n\n  validate(point) {\n    assert(point instanceof MontPoint);\n    if (point.isInfinity()) return true;\n    const {\n      x,\n      y\n    } = point;\n    const y2 = this.solveY2(x);\n    return y.redSqr().eq(y2);\n  }\n\n  pointFromX(x, sign = null) {\n    assert(x instanceof BN);\n    assert(sign == null || typeof sign === 'boolean');\n    if (!x.red) x = x.toRed(this.red);\n    const y = this.solveY(x);\n\n    if (sign != null) {\n      if (y.isZero() && sign) throw new Error('Invalid point.');\n      if (y.redIsOdd() !== sign) y.redINeg();\n    }\n\n    return this.point(x, y);\n  }\n\n  isIsomorphic(curve, invert) {\n    // [MONT3] Page 3, Section 2.1.\n    assert(curve instanceof Curve);\n    if (!curve.p.eq(this.p)) return false; // M(A,B) <-> M(A,B')\n\n    if (curve.type === 'mont') {\n      const a = this.field(curve.a);\n      const b = this.field(curve.b); // A' = A\n\n      if (!this.a.eq(a)) return false; // B' != 0\n\n      if (this.b.isZero()) return false; // jacobi(B / B') = 1\n\n      const c = b.redDiv(this.b);\n      return c.redJacobi() === 1;\n    }\n\n    return curve.isIsomorphic(this, invert);\n  }\n\n  isIsogenous(curve) {\n    assert(curve instanceof Curve);\n    if (curve.type === 'mont') return false;\n    return curve.isIsogenous(this);\n  }\n\n  pointFromShort(point) {\n    // [ALT] Appendix E.2 (Switching between Alternative Representations).\n    // [MONT2] \"Equivalence with Weierstrass curves\"\n    assert(point instanceof ShortPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Equivalence for E(a,b)->M(A,B):\n      //\n      //   u = B * x - A / 3\n      //   v = B * y\n      //\n      // Undefined if ((u^3 + A * u^2 + u) / B) is not square.\n      if (point.isInfinity()) return this.point();\n      const {\n        a3,\n        b\n      } = this;\n\n      const [u2, u3] = this._scale(point.curve);\n\n      const x = this.field(point.x).redMul(u2);\n      const y = this.field(point.y).redMul(u3);\n      const u = b.redMul(x).redISub(a3);\n      const v = b.redMul(y);\n      return this.point(u, v);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromMont(point) {\n    // [MONT3] Page 3, Section 2.1.\n    assert(point instanceof MontPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Isomorphic maps for M(A,B)<->M(A,B'):\n      //\n      //   u' = u\n      //   v' = +-sqrt(B / B') * v\n      //\n      // Undefined if (B / B') is not square.\n      if (point.isInfinity()) return this.point();\n\n      const c = this._scale(point.curve);\n\n      const u = this.field(point.x);\n      const v = this.field(point.y);\n      const nu = u;\n      const nv = c.redMul(v);\n      return this.point(nu, nv);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromEdwards(point) {\n    // [RFC7748] Section 4.1 & 4.2.\n    // [MONT3] Page 6, Section 2.5.\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    assert(point instanceof EdwardsPoint);\n    assert(point.curve.p.eq(this.p)); // Edwards `x`, `y`, `z`.\n\n    const x = this.field(point.x);\n    const y = this.field(point.y);\n    const z = this.field(point.z);\n\n    if (this.isIsogenous(point.curve)) {\n      // 4-isogeny maps for E(1,d)->M(2-4d,1):\n      //\n      //   u = y^2 / x^2\n      //   v = (2 - x^2 - y^2) * y / x^3\n      //\n      // Undefined for x = 0.\n      //\n      // Exceptional Cases:\n      //   - (0, 1) -> O\n      //   - (0, -1) -> (0, 0)\n      //\n      // Unexceptional Cases:\n      //   - (+-1, 0) -> (0, 0)\n      if (point.isInfinity()) return this.point();\n      if (point.x.isZero()) return this.point(this.zero, this.zero);\n      const c = z.redSqr().redIMuln(2);\n      const uu = y.redSqr();\n      const uz = x.redSqr();\n      const vv = c.redISub(uz).redISub(uu).redMul(y);\n      const vz = uz.redMul(x);\n      return this.cpoint(uu, uz, vv, vz);\n    }\n\n    if (this.isIsomorphic(point.curve, true)) {\n      // Isomorphic maps for E(d,a)->M(A,B):\n      //\n      //   u = (y + 1) / (y - 1)\n      //   v = +-sqrt((A - 2) / (B * a)) * u / x\n      //\n      // Undefined for x = 0 or y = 1.\n      //\n      // Exceptional Cases:\n      //   - (0, 1) -> O\n      //   - (0, -1) -> (0, 0)\n      //\n      // Unexceptional Cases:\n      //   - (+-sqrt(1 / a), 0) -> (-1, +-sqrt((A - 2) / B))\n      if (point.isInfinity()) return this.point();\n      if (point.x.isZero()) return this.point(this.zero, this.zero);\n\n      const c = this._scale(point.curve, true);\n\n      const uu = y.redAdd(z);\n      const uz = y.redSub(z);\n      const vv = c.redMul(z).redMul(uu);\n      const vz = x.redMul(uz);\n      return this.cpoint(uu, uz, vv, vz);\n    }\n\n    if (this.isIsomorphic(point.curve, false)) {\n      // Isomorphic maps for E(a,d)->M(A,B):\n      //\n      //   u = (1 + y) / (1 - y)\n      //   v = +-sqrt((A + 2) / (B * a)) * u / x\n      //\n      // Undefined for x = 0 or y = 1.\n      //\n      // Exceptional Cases:\n      //   - (0, 1) -> O\n      //   - (0, -1) -> (0, 0)\n      //\n      // Unexceptional Cases:\n      //   - (+-sqrt(1 / a), 0) -> (1, +-sqrt((A + 2) / B))\n      if (point.isInfinity()) return this.point();\n      if (point.x.isZero()) return this.point(this.zero, this.zero);\n\n      const c = this._scale(point.curve, false);\n\n      const uu = z.redAdd(y);\n      const uz = z.redSub(y);\n      const vv = c.redMul(z).redMul(uu);\n      const vz = x.redMul(uz);\n      return this.cpoint(uu, uz, vv, vz);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromUniform(u) {\n    assert(u instanceof BN); // z = 0 or A = 0\n\n    if (this.z.isZero() || this.a.isZero()) throw new Error('Not implemented.');\n    return this._elligator2(u);\n  }\n\n  pointToUniform(p, hint) {\n    assert(p instanceof MontPoint);\n    assert(hint >>> 0 === hint); // z = 0 or A = 0\n\n    if (this.z.isZero() || this.a.isZero()) throw new Error('Not implemented.'); // P = O\n\n    if (p.isInfinity()) throw new Error('Invalid point.'); // Add a random torsion component.\n\n    const i = (hint >>> 4 & 15) % this.torsion.length;\n    const q = p.add(this.torsion[i]);\n    return this._invert2(q, hint);\n  }\n\n  decodePoint(bytes, sign) {\n    return MontPoint.decode(this, bytes, sign);\n  }\n\n  encodeX(point) {\n    assert(point instanceof XPoint);\n    return point.encode();\n  }\n\n  decodeX(bytes) {\n    return XPoint.decode(this, bytes);\n  }\n\n  toShort(a0, odd, sign = null) {\n    const [a, b] = this._short(a0, odd);\n\n    const curve = new ShortCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = curve._scale(this);\n\n      if (u3.redIsOdd() !== sign) u3.redINeg();\n    }\n\n    if (!this.g.isInfinity()) curve.g = curve.pointFromMont(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++) curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n\n    return curve;\n  }\n\n  toMont(b0, sign = null) {\n    const [a, b] = this._mont(b0);\n\n    const curve = new MontCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h,\n      z: this.z\n    });\n\n    if (sign != null) {\n      const c = curve._scale(this);\n\n      if (c.redIsOdd() !== sign) c.redINeg();\n    }\n\n    if (!this.g.isInfinity()) curve.g = curve.pointFromMont(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++) curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n\n    return curve;\n  }\n\n  toEdwards(a0, invert, sign = null) {\n    const [a, d] = this._edwards(a0, invert);\n\n    const curve = new EdwardsCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      d: d,\n      n: this.n,\n      h: this.h,\n      z: this.z\n    });\n\n    if (sign != null) {\n      const c = curve._scale(this, invert);\n\n      if (c.redIsOdd() !== sign) c.redINeg();\n    }\n\n    if (!this.g.isInfinity()) {\n      curve.g = curve.pointFromMont(this.g);\n      curve.g.normalize();\n    }\n\n    if (curve.isComplete()) {\n      for (let i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n        curve.torsion[i].normalize();\n      }\n    }\n\n    return curve;\n  }\n\n  pointFromJSON(json) {\n    return MontPoint.fromJSON(this, json);\n  }\n\n  toJSON(pre) {\n    const json = super.toJSON(pre);\n    json.a = this.a.fromRed().toJSON();\n    json.b = this.b.fromRed().toJSON();\n    return json;\n  }\n\n}\n/**\n * MontPoint\n */\n\n\nclass MontPoint extends Point {\n  constructor(curve, x, y, inf) {\n    assert(curve instanceof MontCurve);\n    super(curve, types.AFFINE);\n    this.x = this.curve.zero;\n    this.y = this.curve.zero;\n    this.inf = 1;\n    if (x != null) this._init(x, y, inf);\n  }\n\n  _init(x, y, inf) {\n    assert(x instanceof BN);\n    assert(y instanceof BN);\n    this.x = x;\n    this.y = y;\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    this.inf = inf | 0;\n  }\n\n  clone() {\n    return this.curve.point(this.x.clone(), this.y.clone(), this.inf);\n  }\n\n  swap(point, flag) {\n    assert(point instanceof MontPoint);\n    const cond = (flag >> 31 | -flag >> 31) & 1;\n    const inf1 = this.inf;\n    const inf2 = point.inf;\n    this.x.cswap(point.x, flag);\n    this.y.cswap(point.y, flag);\n    this.inf = inf1 & (cond ^ 1) | inf2 & cond;\n    point.inf = inf2 & (cond ^ 1) | inf1 & cond;\n    return this;\n  }\n\n  scale(a) {\n    return this.clone();\n  }\n\n  randomize(rng) {\n    return this.clone();\n  }\n\n  neg() {\n    // P = O\n    if (this.inf) return this; // -(X1, Y1) = (X1, -Y1)\n\n    return this.curve.point(this.x, this.y.redNeg());\n  }\n\n  add(p) {\n    // [MONT1] Page 8, Section 4.3.2.\n    //\n    // Addition Law:\n    //\n    //   l = (y2 - y1) / (x2 - x1)\n    //   x3 = b * l^2 - a - x1 - x2\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // 1I + 2M + 1S + 7A + 1*b\n    assert(p instanceof MontPoint); // O + P = P\n\n    if (this.inf) return p; // P + O = P\n\n    if (p.inf) return this; // P + P, P + -P\n\n    if (this.x.eq(p.x)) {\n      // P + -P = O\n      if (!this.y.eq(p.y)) return this.curve.point(); // P + P = 2P\n\n      return this.dbl();\n    } // H = X2 - X1\n\n\n    const h = p.x.redSub(this.x); // R = Y2 - Y1\n\n    const r = p.y.redSub(this.y); // L = R / H\n\n    const l = r.redDiv(h); // K = b * L^2\n\n    const k = this.curve.b.redMul(l.redSqr()); // X3 = K - a - X1 - X2\n\n    const nx = k.redISub(this.curve.a).redISub(this.x).redISub(p.x); // Y3 = L * (X1 - X3) - Y1\n\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  }\n\n  dbl() {\n    // [MONT1] Page 8, Section 4.3.2.\n    //\n    // Addition Law (doubling):\n    //\n    //   l = (3 * x1^2 + 2 * a * x1 + 1) / (2 * b * y1)\n    //   x3 = b * l^2 - a - 2 * x1\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // 1I + 3M + 2S + 7A + 1*a + 1*b + 1*b + 2*2 + 1*3\n    // P = O\n    if (this.inf) return this; // Y1 = 0\n\n    if (this.y.isZero()) return this.curve.point(); // M1 = 3 * X1^2\n\n    const m1 = this.x.redSqr().redIMuln(3); // M2 = 2 * a * X1\n\n    const m2 = this.curve.a.redMul(this.x).redIMuln(2); // M = M1 + M2 + 1\n\n    const m = m1.redIAdd(m2).redIAdd(this.curve.one); // Z = 2 * b * Y1\n\n    const z = this.curve.b.redMul(this.y).redIMuln(2); // L = M / Z\n\n    const l = m.redDiv(z); // K = b * L^2\n\n    const k = this.curve.b.redMul(l.redSqr()); // X3 = K - a - 2 * X1\n\n    const nx = k.redISub(this.curve.a).redISub(this.x).redISub(this.x); // Y3 = L * (X1 - X3) - Y1\n\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  }\n\n  uadd(p) {\n    // [MONT1] Page 8, Section 4.3.2.\n    // 1I + 3M + 2S + 9A + 1*a + 2*b + 2*2 + 1*3\n    assert(p instanceof MontPoint); // H = X2 - X1\n\n    const h = p.x.redSub(this.x); // R = Y2 - Y1\n\n    const r = p.y.redSub(this.y); // M1 = 3 * X1^2\n\n    const m1 = this.x.redSqr().redIMuln(3); // M2 = 2 * a * X1\n\n    const m2 = this.curve.a.redMul(this.x).redIMuln(2); // M = M1 + M2 + 1\n\n    const m = m1.redIAdd(m2).redIAdd(this.curve.one); // Z = 2 * b * Y1\n\n    const z = this.curve.b.redMul(this.y).redIMuln(2); // Check for doubling (X1 = X2, Y1 = Y2).\n\n    const double = h.czero() & r.czero(); // R = M (if double)\n\n    r.cinject(m, double); // H = Z (if double)\n\n    h.cinject(z, double); // Check for negation (X1 = X2, Y1 = -Y2).\n\n    const negated = h.czero() & ((this.inf | p.inf) ^ 1); // H = 1 (if H = 0)\n\n    h.cinject(this.curve.one, h.czero()); // L = R / H\n\n    const l = r.redMul(h.redFermat()); // K = b * L^2\n\n    const k = this.curve.b.redMul(l.redSqr()); // X3 = K - a - X1 - X2\n\n    const nx = k.redISub(this.curve.a).redISub(this.x).redISub(p.x); // Y3 = L * (X1 - X3) - Y1\n\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y); // Check for infinity.\n\n    const inf = negated | this.inf & p.inf; // Case 1: O + P = P\n\n    nx.cinject(p.x, this.inf);\n    ny.cinject(p.y, this.inf); // Case 2: P + O = P\n\n    nx.cinject(this.x, p.inf);\n    ny.cinject(this.y, p.inf); // Case 3 & 4: P + -P = O, O + O = O\n\n    nx.cinject(this.curve.zero, inf);\n    ny.cinject(this.curve.zero, inf);\n    return this.curve.point(nx, ny, inf);\n  }\n\n  udbl() {\n    return this.uadd(this);\n  }\n\n  recover(p1, p2) {\n    // Okeya-Sakurai Y-coordinate Recovery.\n    //\n    // [MONT3] Algorithm 5, Page 13, Section 4.3.\n    //         Algorithm 6, Page 14, Section 4.3.\n    //\n    // 1I + 12M + 1S + 6A + 1*a + 1*b + 2*2\n    assert(p1 instanceof XPoint);\n    assert(p2 instanceof XPoint); // P = O\n\n    if (this.inf) return this.curve.point(); // A = X0 * Z1\n\n    const a = this.x.redMul(p1.z); // B = X1 + A\n\n    const b = p1.x.redAdd(a); // C = (X1 - A)^2 * X2\n\n    const c = p1.x.redSub(a).redSqr().redMul(p2.x); // D = 2 * a * Z1\n\n    const d = this.curve.a.redMul(p1.z).redIMuln(2); // E = B + D\n\n    const e = b.redIAdd(d); // F = X0 * X1 + Z1\n\n    const f = this.x.redMul(p1.x).redIAdd(p1.z); // G = E * F\n\n    const g = e.redMul(f); // H = D * Z1\n\n    const h = d.redMul(p1.z); // I = (G - H) * Z2\n\n    const i = g.redISub(h).redMul(p2.z); // J = 2 * b * Y0\n\n    const j = this.curve.b.redMul(this.y).redIMuln(2); // K = J * Z1 * Z2\n\n    const k = j.redMul(p1.z).redMul(p2.z); // X = K * X1\n\n    const x = k.redMul(p1.x); // Y = I - C\n\n    const y = i.redISub(c); // Z = K * Z1\n\n    const z = k.redMul(p1.z); // Z = 0\n\n    if (z.isZero()) return this.curve.point(); // L = 1 / Z\n\n    const l = z.redInvert(); // X3 = X * L\n\n    const nx = x.redMul(l); // Y3 = Y * L\n\n    const ny = y.redMul(l);\n    return this.curve.point(nx, ny);\n  }\n\n  getX() {\n    if (this.inf) throw new Error('Invalid point.');\n    return this.x.fromRed();\n  }\n\n  getY() {\n    if (this.inf) throw new Error('Invalid point.');\n    return this.y.fromRed();\n  }\n\n  eq(p) {\n    assert(p instanceof MontPoint); // P = Q\n\n    if (this === p) return true; // P = O\n\n    if (this.inf) return p.inf !== 0; // Q = O\n\n    if (p.inf) return false; // X1 = X2, Y1 = Y2\n\n    return this.x.eq(p.x) && this.y.eq(p.y);\n  }\n\n  cmp(point) {\n    assert(point instanceof MontPoint);\n    if (this.inf && !point.inf) return -1;\n    if (!this.inf && point.inf) return 1;\n    if (this.inf && point.inf) return 0;\n    return this.order().cmp(point.order()) || this.getX().cmp(point.getX()) || this.getY().cmp(point.getY());\n  }\n\n  isInfinity() {\n    // Infinity cannot be represented in\n    // the affine space, except by a flag.\n    return this.inf !== 0;\n  }\n\n  isOrder2() {\n    if (this.inf) return false;\n    return this.y.isZero();\n  }\n\n  isOdd() {\n    if (this.inf) return false;\n    return this.y.redIsOdd();\n  }\n\n  isEven() {\n    if (this.inf) return false;\n    return this.y.redIsEven();\n  }\n\n  toP() {\n    return this;\n  }\n\n  toJ() {\n    return this;\n  }\n\n  toX() {\n    // (X3, Z3) = (1, 0)\n    if (this.inf) return this.curve.xpoint(); // (X3, Z3) = (X1, 1)\n\n    return this.curve.xpoint(this.x, this.curve.one);\n  }\n\n  encode() {\n    return this.toX().encode();\n  }\n\n  static decode(curve, bytes, sign) {\n    assert(curve instanceof MontCurve);\n    return curve.decodeX(bytes).toP(sign);\n  }\n\n  toJSON(pre) {\n    if (this.inf) return [];\n    const x = this.getX().toJSON();\n    const y = this.getY().toJSON();\n    return [x, y];\n  }\n\n  toPretty() {\n    if (this.inf) return [];\n    const size = this.curve.fieldSize * 2;\n    const x = toPretty(this.getX(), size);\n    const y = toPretty(this.getY(), size);\n    return [x, y];\n  }\n\n  static fromJSON(curve, json) {\n    assert(curve instanceof MontCurve);\n    assert(Array.isArray(json));\n    assert(json.length === 0 || json.length === 2 || json.length === 3);\n    if (json.length === 0) return curve.point();\n    const x = BN.fromJSON(json[0]);\n    const y = BN.fromJSON(json[1]);\n    return curve.point(x, y);\n  }\n\n  [custom]() {\n    if (this.inf) return '<MontPoint: Infinity>';\n    return '<MontPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + '>';\n  }\n\n}\n/**\n * XPoint\n */\n\n\nclass XPoint extends Point {\n  constructor(curve, x, z) {\n    assert(curve instanceof MontCurve);\n    super(curve, types.PROJECTIVE);\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n    if (x != null) this._init(x, z);\n  }\n\n  _init(x, z) {\n    assert(x instanceof BN);\n    assert(z == null || z instanceof BN);\n    this.x = x;\n    this.z = z || this.curve.one;\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n  }\n\n  clone() {\n    return this.curve.xpoint(this.x.clone(), this.z.clone());\n  }\n\n  swap(point, flag) {\n    assert(point instanceof XPoint);\n    this.x.cswap(point.x, flag);\n    this.z.cswap(point.z, flag);\n    return this;\n  }\n\n  precompute(power, rng) {\n    // No-op.\n    return this;\n  }\n\n  validate() {\n    if (this.isInfinity()) return true; // B * y^2 * z = x^3 + A * x^2 * z + x * z^2\n\n    const {\n      x,\n      z\n    } = this;\n    const x2 = x.redSqr();\n    const x3 = x2.redMul(x);\n    const z2 = z.redSqr();\n    const ax2 = this.curve.a.redMul(x2).redMul(z);\n    const by2 = x3.redIAdd(ax2).redIAdd(x.redMul(z2));\n    const y2 = by2.redMul(this.curve.bi); // sqrt(y^2 * z^4) = y * z^2\n\n    return y2.redMul(z).redJacobi() !== -1;\n  }\n\n  normalize() {\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#scaling-scale\n    // 1I + 1M\n    // P = O\n    if (this.isInfinity()) return this; // Z1 = 1\n\n    if (this.z.eq(this.curve.one)) return this; // X3 = X1 / Z1\n\n    this.x = this.x.redDiv(this.z); // Z3 = 1\n\n    this.z = this.curve.one;\n    return this;\n  }\n\n  scale(a) {\n    assert(a instanceof BN); // P = O\n\n    if (this.isInfinity()) return this.curve.xpoint(); // X3 = X1 * A\n\n    const nx = this.x.redMul(a); // Y3 = Y1 * A\n\n    const nz = this.z.redMul(a);\n    return this.curve.xpoint(nx, nz);\n  }\n\n  neg() {\n    // -(X1, Z1) = (X1, Z1)\n    return this;\n  }\n\n  dbl() {\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n    // 2M + 2S + 4A + 1*a24\n    // A = X1 + Z1\n    const a = this.x.redAdd(this.z); // AA = A^2\n\n    const aa = a.redSqr(); // B = X1 - Z1\n\n    const b = this.x.redSub(this.z); // BB = B^2\n\n    const bb = b.redSqr(); // C = AA - BB\n\n    const c = aa.redSub(bb); // X3 = AA * BB\n\n    const nx = aa.redMul(bb); // Z3 = C * (BB + a24 * C)\n\n    const nz = c.redMul(bb.redIAdd(this.curve.a24.redMul(c)));\n    return this.curve.xpoint(nx, nz);\n  }\n\n  diffAdd(p2, p3) {\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n    // 4M + 2S + 6A\n    assert(p2 instanceof XPoint);\n    assert(p3 instanceof XPoint); // A = X2 + Z2\n\n    const a = p2.x.redAdd(p2.z); // B = X2 - Z2\n\n    const b = p2.x.redSub(p2.z); // C = X3 + Z3\n\n    const c = p3.x.redAdd(p3.z); // D = X3 - Z3\n\n    const d = p3.x.redSub(p3.z); // DA = D * A\n\n    const da = d.redMul(a); // CB = C * B\n\n    const cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2\n\n    const x5 = this.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2\n\n    const z5 = this.x.redMul(da.redISub(cb).redSqr());\n    return this.curve.xpoint(x5, z5);\n  }\n\n  diffAddDbl(p2, p3) {\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#ladder-ladd-1987-m-3\n    // 6M + 4S + 8A + 1*a24\n    assert(p2 instanceof XPoint);\n    assert(p3 instanceof XPoint); // A = X2 + Z2\n\n    const a = p2.x.redAdd(p2.z); // AA = A^2\n\n    const aa = a.redSqr(); // B = X2 - Z2\n\n    const b = p2.x.redSub(p2.z); // BB = B^2\n\n    const bb = b.redSqr(); // E = AA - BB\n\n    const e = aa.redSub(bb); // C = X3 + Z3\n\n    const c = p3.x.redAdd(p3.z); // D = X3 - Z3\n\n    const d = p3.x.redSub(p3.z); // DA = D * A\n\n    const da = d.redMul(a); // CB = C * B\n\n    const cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2\n\n    const x5 = this.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2\n\n    const z5 = this.x.redMul(da.redISub(cb).redSqr()); // X4 = AA * BB\n\n    const x4 = aa.redMul(bb); // Z4 = E * (BB + a24 * E)\n\n    const z4 = e.redMul(bb.redIAdd(this.curve.a24.redMul(e)));\n    return [this.curve.xpoint(x4, z4), this.curve.xpoint(x5, z5)];\n  }\n\n  getX() {\n    if (this.isInfinity()) throw new Error('Invalid point.');\n    this.normalize();\n    return this.x.fromRed();\n  }\n\n  getY(sign) {\n    return this.toP(sign).getY();\n  }\n\n  eq(p) {\n    assert(p instanceof XPoint); // P = Q\n\n    if (this === p) return true; // P = O\n\n    if (this.isInfinity()) return p.isInfinity(); // Q = O\n\n    if (p.isInfinity()) return false; // Z1 = Z2\n\n    if (this.z.eq(p.z)) return this.x.eq(p.x); // X1 * Z2 == X2 * Z1\n\n    const x1 = this.x.redMul(p.z);\n    const x2 = p.x.redMul(this.z);\n    return x1.eq(x2);\n  }\n\n  cmp(point) {\n    assert(point instanceof XPoint);\n    const inf1 = this.isInfinity();\n    const inf2 = point.isInfinity();\n    if (inf1 && !inf2) return -1;\n    if (!inf1 && inf2) return 1;\n    if (inf1 && inf2) return 0;\n    return this.order().cmp(point.order()) || this.getX().cmp(point.getX());\n  }\n\n  isInfinity() {\n    // Z1 = 0\n    return this.z.isZero();\n  }\n\n  isOrder2() {\n    if (this.isInfinity()) return false;\n    return this.x.isZero();\n  }\n\n  isOdd() {\n    return false;\n  }\n\n  isEven() {\n    return false;\n  }\n\n  hasTorsion() {\n    if (this.isInfinity()) return false; // X1 = 0, Z1 != 0 (edge case)\n\n    if (this.x.isZero()) return true;\n    return super.hasTorsion();\n  }\n\n  order() {\n    try {\n      return this.toP().order();\n    } catch (e) {\n      return new BN(1);\n    }\n  }\n\n  jmul(k) {\n    return this.ladder(k)[0];\n  }\n\n  jmulSimple(k) {\n    return this.ladderSimple(k)[0];\n  }\n\n  jmulBlind(k, rng) {\n    return this.ladderBlind(k, rng)[0];\n  }\n\n  jmulConst(k, rng) {\n    return this.ladderConst(k, rng)[0];\n  }\n\n  jmulAdd(k1, p2, k2) {\n    throw new Error('Not implemented.');\n  }\n\n  jmulAddSimple(k1, p2, k2) {\n    throw new Error('Not implemented.');\n  }\n\n  ladder(k) {\n    // Multiply with the Montgomery Ladder.\n    //\n    // [MONT3] Algorithm 4, Page 12, Section 4.2.\n    //\n    // Note that any clamping is meant to\n    // be done _outside_ of this function.\n    assert(k instanceof BN);\n    assert(!k.red);\n    const bits = k.bitLength();\n    let a = this.curve.xpoint();\n    let b = this;\n\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = k.bit(i);\n      if (bit === 0) [a, b] = this.diffAddDbl(a, b);else [b, a] = this.diffAddDbl(b, a);\n    }\n\n    return [a, b];\n  }\n\n  ladderSimple(k) {\n    // Montgomery Ladder with explicit\n    // additions and doubling (testing).\n    assert(k instanceof BN);\n    assert(!k.red);\n    const bits = k.bitLength();\n    let a = this.curve.xpoint();\n    let b = this; // Climb the ladder.\n\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = k.bit(i);\n\n      if (bit === 0) {\n        b = this.diffAdd(b, a);\n        a = a.dbl();\n      } else {\n        a = this.diffAdd(a, b);\n        b = b.dbl();\n      }\n    }\n\n    return [a, b];\n  }\n\n  ladderBlind(k, rng) {\n    if (!rng) return this.ladder(k); // Randomize if available.\n\n    return this.randomize(rng).ladder(k);\n  }\n\n  ladderConst(k, rng) {\n    // Multiply with the Montgomery Ladder.\n    //\n    // [MONT3] Algorithm 7, Page 16, Section 5.3.\n    //         Algorithm 8, Page 16, Section 5.3.\n    //\n    // [RFC7748] Page 7, Section 5.\n    //\n    // Note that any clamping is meant to\n    // be done _outside_ of this function.\n    assert(k instanceof BN);\n    assert(!k.red);\n    const bits = Math.max(k.bitLength(), this.curve.fieldBits);\n    const bytes = bits + 7 >>> 3; // Recode scalar to base256.\n\n    const exp = k.toArray('le', bytes); // Randomize if available.\n\n    const point = rng ? this.randomize(rng) : this; // Clone points (for safe swapping).\n\n    let a = this.curve.xpoint().clone();\n    let b = point.clone();\n    let swap = 0; // Climb the ladder.\n\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = exp[i >> 3] >> (i & 7) & 1; // Maybe swap.\n\n      a.swap(b, swap ^ bit); // Single coordinate add+double.\n\n      [a, b] = point.diffAddDbl(a, b);\n      swap = bit;\n    } // Finalize loop.\n\n\n    a.swap(b, swap);\n    return [a, b];\n  }\n\n  toP(sign = null) {\n    assert(sign == null || typeof sign === 'boolean');\n    if (this.isInfinity()) return this.curve.point();\n    this.normalize();\n    return this.curve.pointFromX(this.x, sign);\n  }\n\n  toJ() {\n    return this;\n  }\n\n  toX() {\n    return this;\n  }\n\n  key() {\n    if (this.isInfinity()) return `${this.curve.uid}:oo`;\n    this.normalize();\n    const x = this.getX().toString(16);\n    return `${this.curve.uid}:${x}`;\n  }\n\n  encode() {\n    // [RFC7748] Section 5.\n    return this.curve.encodeField(this.getX());\n  }\n\n  static decode(curve, bytes) {\n    assert(curve instanceof MontCurve); // [RFC7748] Section 5.\n\n    const x = curve.decodeField(bytes); // We're supposed to ignore the hi bit\n    // on montgomery points... I think. If\n    // we don't, the X25519 test vectors\n    // break, which is pretty convincing\n    // evidence. This is a no-op for X448.\n\n    x.iumaskn(curve.fieldBits); // Note: montgomery points are meant to be\n    // reduced by the prime and do not have to\n    // be explicitly validated in order to do\n    // the montgomery ladder.\n\n    const p = curve.xpoint(x, curve.one);\n    assert(!p.isInfinity());\n    return p;\n  }\n\n  toJSON(pre) {\n    return this.toP().toJSON(pre);\n  }\n\n  toPretty() {\n    return this.toP().toPretty();\n  }\n\n  static fromJSON(curve, json) {\n    return MontPoint.fromJSON(curve, json).toX();\n  }\n\n  [custom]() {\n    if (this.isInfinity()) return '<XPoint: Infinity>';\n    return '<XPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';\n  }\n\n}\n/**\n * EdwardsCurve\n */\n\n\nclass EdwardsCurve extends Curve {\n  constructor(conf) {\n    super(EdwardsPoint, 'edwards', conf);\n    this.a = BN.fromJSON(conf.a).toRed(this.red);\n    this.d = BN.fromJSON(conf.d).toRed(this.red);\n    this.s = BN.fromJSON(conf.s || '0').toRed(this.red);\n    this.si = this.s.isZero() ? this.zero : this.s.redInvert();\n    this.k = this.d.redMuln(2);\n    this.smi = -this.d.redNeg().word(0);\n    this.ad6 = this.a.redAdd(this.d).redMul(this.i6);\n    this.twisted = !this.a.eq(this.one);\n    this.oneA = this.a.eq(this.one);\n    this.mOneA = this.a.eq(this.one.redNeg());\n    this.smallD = this.prime != null && this.d.redNeg().length === 1;\n    this.alt = null;\n\n    this._finalize(conf);\n  }\n\n  static _isomorphism(curveA, curveD, customA) {\n    // Twisted Edwards Isomorphism.\n    //\n    // [TWISTED] Definition 2.1, Page 3, Section 2.\n    //\n    // Transformation:\n    //\n    //   a' = a'\n    //   d' = a' * d / a\n    //\n    // Where (a / a') is square.\n    assert(curveA instanceof BN);\n    assert(curveD instanceof BN);\n    assert(customA instanceof BN);\n    const a = customA.clone();\n    const d = customA.redMul(curveD).redDiv(curveA);\n    const c = curveA.redDiv(customA);\n    if (c.redJacobi() !== 1) throw new Error('Invalid `a` coefficient.');\n    return [a, d];\n  }\n\n  _short(a0, odd) {\n    // Twisted Edwards->Short Weierstrass Equivalence.\n    //\n    // [TWISTEQ] Section 2.\n    //\n    // Transformation:\n    //\n    //   a' = -(a^2 + 14 * a * d + d^2) / 48\n    //   b' = (33 * (a^2 * d + a * d^2) - a^3 - d^3) / 864\n    const {\n      a,\n      d\n    } = this;\n    const a2 = a.redSqr();\n    const a3 = a2.redMul(a);\n    const d2 = d.redSqr();\n    const d3 = d2.redMul(d);\n    const ad14 = a.redMul(d).redIMuln(14);\n    const a2d = a2.redMul(d);\n    const ad2 = a.redMul(d2);\n    const t0 = a2d.redIAdd(ad2).redIMuln(33);\n    const wa = a2.redAdd(ad14).redIAdd(d2).redDivn(-48);\n    const wb = t0.redISub(a3).redISub(d3).redDivn(864);\n    if (a0 != null) return ShortCurve._isomorphism(wa, wb, a0, odd);\n    return [wa, wb];\n  }\n\n  _mont(b0, invert = false) {\n    // Twisted Edwards->Montgomery Transformation.\n    //\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    //\n    // Equivalence:\n    //\n    //   A = 2 * (a + d) / (a - d)\n    //   B = 4 / (a - d)\n    //\n    // Isomorphism:\n    //\n    //   A = 2 * (a + d) / (a - d)\n    //   B = B'\n    //\n    // Where ((4 / (a - d)) / B') is square.\n    //\n    // If `4 / (a - d)` is non-square, we can\n    // usually force B=1 by using the `invert`\n    // option. This will create an isomorphism\n    // chain of: E(a,d)->E(d,a)->M(-A,-B).\n    //\n    // The equivalence between E(a,d) and E(d,a)\n    // is:\n    //\n    //   (x, y) = (x, 1 / y)\n    //\n    // Meaning our map to M(-A,-B) is:\n    //\n    //   u = (1 + 1 / y) / (1 - 1 / y)\n    //     = (y + 1) / (y - 1)\n    //   v = u / x\n    assert(typeof invert === 'boolean');\n    let apd, amd;\n\n    if (invert) {\n      apd = this.d.redAdd(this.a);\n      amd = this.d.redSub(this.a);\n    } else {\n      apd = this.a.redAdd(this.d);\n      amd = this.a.redSub(this.d);\n    }\n\n    const z = amd.redInvert();\n    const a = apd.redMuln(2).redMul(z);\n    const b = z.redMuln(4);\n    if (b0 != null) return MontCurve._isomorphism(a, b, b0);\n    return [a, b];\n  }\n\n  _edwards(a0) {\n    return EdwardsCurve._isomorphism(this.a, this.d, a0);\n  }\n\n  _scaleShort(curve) {\n    assert(curve instanceof ShortCurve);\n\n    const [u2, u3] = curve._scale(this);\n\n    return [this.field(u2.redInvert()), this.field(u3.redInvert())];\n  }\n\n  _scaleMont(curve, invert = false) {\n    // Calculate isomorphism factor between\n    // Twisted Edwards and Montgomery with:\n    //\n    //   a = (A + 2) / B\n    //   c = +-sqrt(a / a')\n    //\n    // Which can be reduced to:\n    //\n    //   c = +-sqrt((A + 2) / (B * a'))\n    //\n    // If base points are available, we can do:\n    //\n    //   x = u / v\n    //   c = x' / x\n    //\n    // Which can be reduced to:\n    //\n    //   c = v * x' / u\n    //\n    // We can now calculate the Edwards `x` with:\n    //\n    //   x' = c * u / v\n    //\n    // And likewise, the Montgomery `v`:\n    //\n    //   v = c * u / x'\n    assert(curve instanceof MontCurve);\n    assert(typeof invert === 'boolean');\n\n    if (this.g.isInfinity() || curve.g.isInfinity()) {\n      const [a] = curve._edwards(null, invert);\n\n      return this.field(a).redDivSqrt(this.a);\n    }\n\n    const x = curve.g.x.redDiv(curve.g.y);\n    return this.g.x.redDiv(this.field(x));\n  }\n\n  _scaleEdwards(curve) {\n    // We can extract the isomorphism factor with:\n    //\n    //   c = +-sqrt(a / a')\n    //\n    // If base points are available, we can do:\n    //\n    //   c = x' / x\n    assert(curve instanceof EdwardsCurve);\n    if (this.g.isInfinity() || curve.g.isInfinity()) return this.field(curve.a).redDivSqrt(this.a);\n    return this.g.x.redDiv(this.field(curve.g.x));\n  }\n\n  _mulA(num) {\n    assert(num instanceof BN); // n * a = n\n\n    if (this.oneA) return num.clone(); // n * a = -n\n\n    if (this.mOneA) return num.redNeg();\n    return this.a.redMul(num);\n  }\n\n  _mulD(num) {\n    assert(num instanceof BN); // -d < 0x4000000\n\n    if (this.smallD) return num.redMuln(this.smi);\n    return this.d.redMul(num);\n  }\n\n  _elligator1(t) {\n    // Elligator 1.\n    //\n    // Distribution: 1/2.\n    //\n    // [ELL1] Page 6, Section 3.\n    //        Page 15, Appendix A.\n    // [ELL2] Page 7, Section 3.2.\n    //\n    // Assumptions:\n    //\n    //   - Let p be a prime power congruent to 3 mod 4.\n    //   - Let s be a nonzero element of F(p).\n    //   - Let c = 2 / s^2.\n    //   - Let r = c + 1 / c.\n    //   - Let d = -(c + 1)^2 / (c - 1)^2.\n    //   - (s^2 - 2) * (s^2 + 2) != 0.\n    //   - c * (c - 1) * (c + 1) != 0.\n    //   - r != 0.\n    //   - d is not square.\n    //   - x^2 + y^2 = 1 + d * x^2 * y^2.\n    //   - u * v * X * Y * x * (Y + 1) != 0.\n    //   - Y^2 = X^5 + (r^2 - 2) * X^3 + X.\n    //\n    // Elligator 1, as devised by Fouque et al,\n    // takes place on the hyperelliptic curve of:\n    //\n    //   y^2 = x^5 + (r^2 - 2) * x^3 + x\n    //\n    // Not only must our Edwards curve be complete,\n    // with a prime congruent to 3 mod 4, and a = 1,\n    // our curve must be isomorphic to a hyperelliptic\n    // curve of the above form. Roughly one half of\n    // all Edwards curves are isomorphic to a curve\n    // of said form.\n    //\n    // We can derive the isomorphism with:\n    //\n    //   c = (d +- 2 * sqrt(-d) - 1) / (d + 1)\n    //   s = +-sqrt(2 / c)\n    //   r = c + 1 / c\n    //\n    // Note that even if your curve is an Elligator 1\n    // curve, Elligator 2 is probably still preferable,\n    // as it has nearly the same properties (i.e. the\n    // same distribution), and is much less complex.\n    //\n    // Map:\n    //\n    //   f(a) = a^((p - 1) / 2)\n    //   u = (1 - t) / (1 + t)\n    //   v = u^5 + (r^2 - 2) * u^3 + u\n    //   X = f(v) * u\n    //   Y = (f(v) * v)^((p + 1) / 4) * f(v) * f(u^2 + 1 / c^2)\n    //   Y = 1, if u = 0\n    //   x = (c - 1) * s * X * (1 + X) / Y\n    //   y = (r * X - (1 + X)^2) / (r * X + (1 + X)^2)\n    //\n    // When t = +-1, we create the hyperelliptic\n    // 2-torsion point of (0, 0). This needs to be\n    // mapped to (0, -1) in Edwards form, but the x\n    // denominator becomes zero. As far as I can\n    // tell, this is the only exceptional case.\n    //\n    // The only other exceptional case initially\n    // appears to be when the y denominator sums to\n    // zero (when t = sqrt(4 / r + 1)), however, the\n    // hyperelliptic `X` is negated by the sign of\n    // `v`, making this impossible.\n    const {\n      s,\n      si,\n      i2,\n      one,\n      two\n    } = this;\n    const c = si.redSqr().redIMuln(2);\n    const ci = s.redSqr().redMul(i2);\n    const ci2 = ci.redSqr();\n    const r = c.redAdd(ci);\n    const r2 = r.redSqr().redISub(two);\n    const cm1 = c.redSub(one);\n    const e0 = this.p.subn(2);\n    const e1 = this.p.subn(1).iushrn(1);\n    const e2 = this.p.addn(1).iushrn(2);\n    const uu = one.redSub(t);\n    const uz = one.redAdd(t);\n    const u = uu.redMul(uz.redPow(e0));\n    const u2 = u.redSqr();\n    const u3 = u2.redMul(u);\n    const u5 = u3.redMul(u2);\n    const v = u5.redAdd(r2.redMul(u3)).redIAdd(u);\n    const f0 = v.redPow(e1);\n    const f1 = u2.redAdd(ci2).redPow(e1);\n    const f2 = f0.redMul(f1);\n    const X = f0.redMul(u);\n    const Y = f0.redMul(v).redPow(e2).redMul(f2);\n    const X1 = one.redAdd(X);\n    const rX = r.redMul(X);\n    const X12 = X1.redSqr();\n    const xx = cm1.redMul(s).redMul(X).redMul(X1);\n    const xz = Y.cinject(this.one, u.czero());\n    const yy = rX.redSub(X12);\n    const yz = rX.redAdd(X12);\n    return this.cpoint(xx, xz, yy, yz);\n  }\n\n  _invert1(p, hint) {\n    // Inverting the Map (Elligator 1).\n    //\n    // [ELL1] Page 6, Section 3.\n    //        Page 15, Appendix A.\n    // [ELL2] Page 7, Section 3.3.\n    //\n    // Assumptions:\n    //\n    //   - y + 1 != 0.\n    //   - (1 + n * r)^2 - 1 is square in F(p).\n    //   - If n * r = -2 then x = 2 * s * (c - 1) * f(c) / r.\n    //   - Y = (c - 1) * s * X * (1 + X) / x.\n    //\n    // Map:\n    //\n    //   f(a) = a^((p - 1) / 2)\n    //   n = (y - 1) / (2 * (y + 1))\n    //   X = -(1 + n * r) + ((1 + n * r)^2 - 1)^((p + 1) / 4)\n    //   z = f((c - 1) * s * X * (1 + X) * x * (X^2 + 1 / c^2))\n    //   u = z * X\n    //   t = (1 - u) / (1 + u)\n    const {\n      s,\n      si,\n      i2,\n      one\n    } = this;\n    const {\n      x,\n      y,\n      z\n    } = p;\n    const sign = hint & 1;\n    const c = si.redSqr().redIMuln(2);\n    const ci = s.redSqr().redMul(i2);\n    const ci2 = ci.redSqr();\n    const r = c.redAdd(ci);\n    const cm1 = c.redSub(one);\n    const e0 = this.p.subn(2);\n    const e1 = this.p.subn(1).iushrn(1);\n    const e2 = this.p.addn(1).iushrn(2);\n    const nn = y.redSub(z);\n    const nz = y.redAdd(z).redIMuln(2);\n    const n = nn.redMul(nz.redPow(e0));\n    const nr1 = one.redAdd(n.redMul(r));\n    const w2 = nr1.redSqr().redISub(one);\n    const w = w2.redPow(e2);\n    const sqr = w.redSqr().ceq(w2);\n    const X = w.redSub(nr1);\n    const X1 = one.redAdd(X);\n    const YY = cm1.redMul(s).redMul(X).redMul(X1);\n    const Y = YY.redMul(x.redMul(z));\n    const X2 = X.redSqr().redIAdd(ci2);\n    const Z = Y.redMul(X2).redPow(e1);\n    const u = Z.redMul(X);\n    const tt = one.redSub(u);\n    const tz = one.redAdd(u);\n    const t = tt.redMul(tz.redPow(e0));\n    t.cinject(t.redNeg(), t.redIsOdd() ^ sign);\n    if (!sqr) throw new Error('Invalid point.');\n    return t;\n  }\n\n  _alt() {\n    if (!this.alt) this.alt = this.toMont();\n    return this.alt;\n  }\n\n  isElliptic() {\n    const ad = this.a.redMul(this.d);\n    const amd = this.a.redSub(this.d); // a * d * (a - d) != 0\n\n    return !ad.redMul(amd).isZero();\n  }\n\n  jinv() {\n    // [TWISTED] Definition 2.1, Page 3, Section 2.\n    const {\n      a,\n      d\n    } = this;\n    const ad = a.redMul(d);\n    const amd4 = a.redSub(d).redPown(4);\n    const a2 = a.redSqr();\n    const d2 = d.redSqr();\n    const t0 = a2.redAdd(ad.redMuln(14)).redIAdd(d2);\n    const lhs = t0.redPown(3).redIMuln(16);\n    const rhs = ad.redMul(amd4);\n    if (rhs.isZero()) throw new Error('Curve is not elliptic.'); // 16 * (a^2 + 14 * a * d + d^2)^3 / (a * d * (a - d)^4)\n\n    return lhs.redDiv(rhs).fromRed();\n  }\n\n  isComplete() {\n    return this.a.redJacobi() === 1 && this.d.redJacobi() === -1;\n  }\n\n  point(x, y, z, t) {\n    return new EdwardsPoint(this, x, y, z, t);\n  }\n\n  jpoint(x, y, z) {\n    assert(x == null && y == null && z == null);\n    return this.point();\n  }\n\n  cpoint(xx, xz, yy, yz) {\n    assert(xx instanceof BN);\n    assert(xz instanceof BN);\n    assert(yy instanceof BN);\n    assert(yz instanceof BN);\n    const x = xx.redMul(yz);\n    const y = yy.redMul(xz);\n    const z = xz.redMul(yz);\n    const t = xx.redMul(yy);\n    return this.point(x, y, z, t);\n  }\n\n  solveX2(y) {\n    // [RFC8032] Section 5.1.3 & 5.2.3.\n    assert(y instanceof BN); // x^2 = (y^2 - 1) / (d * y^2 - a)\n\n    const y2 = y.redSqr();\n\n    const rhs = this._mulD(y2).redISub(this.a);\n\n    const lhs = y2.redISub(this.one);\n    const x2 = lhs.redDiv(rhs);\n    return x2;\n  }\n\n  solveX(y) {\n    // Optimize with inverse square root trick.\n    //\n    // Note that `0 / 0` can only occur if\n    // `a == d` (i.e. the curve is singular).\n    const y2 = y.redSqr();\n\n    const rhs = this._mulD(y2).redISub(this.a);\n\n    const lhs = y2.redISub(this.one);\n    return lhs.redDivSqrt(rhs);\n  }\n\n  solveY2(x) {\n    assert(x instanceof BN); // y^2 = (a * x^2 - 1) / (d * x^2 - 1)\n\n    const x2 = x.redSqr();\n\n    const lhs = this._mulA(x2).redISub(this.one);\n\n    const rhs = this._mulD(x2).redISub(this.one);\n\n    const y2 = lhs.redDiv(rhs);\n    return y2;\n  }\n\n  solveY(x) {\n    // Optimize with inverse square root trick.\n    //\n    // Note that `0 / 0` can only occur if\n    // `a == d` (i.e. the curve is singular).\n    const x2 = x.redSqr();\n\n    const lhs = this._mulA(x2).redISub(this.one);\n\n    const rhs = this._mulD(x2).redISub(this.one);\n\n    return lhs.redDivSqrt(rhs);\n  }\n\n  validate(point) {\n    // [TWISTED] Definition 2.1, Page 3, Section 2.\n    //           Page 11, Section 6.\n    assert(point instanceof EdwardsPoint); // Z1 = 1\n\n    if (point.zOne) {\n      // a * x^2 + y^2 = 1 + d * x^2 * y^2\n      const x2 = point.x.redSqr();\n      const y2 = point.y.redSqr();\n\n      const dxy = this._mulD(x2).redMul(y2);\n\n      const lhs = this._mulA(x2).redIAdd(y2);\n\n      const rhs = this.one.redAdd(dxy);\n      const tz = point.t;\n      const xy = point.x.redMul(point.y);\n      return lhs.eq(rhs) && tz.eq(xy);\n    } // (a * x^2 + y^2) * z^2 = z^4 + d * x^2 * y^2\n\n\n    const x2 = point.x.redSqr();\n    const y2 = point.y.redSqr();\n    const z2 = point.z.redSqr();\n    const z4 = z2.redSqr();\n\n    const dxy = this._mulD(x2).redMul(y2);\n\n    const lhs = this._mulA(x2).redIAdd(y2).redMul(z2);\n\n    const rhs = z4.redIAdd(dxy);\n    const tz = point.t.redMul(point.z);\n    const xy = point.x.redMul(point.y);\n    return lhs.eq(rhs) && tz.eq(xy);\n  }\n\n  pointFromX(x, sign = null) {\n    assert(x instanceof BN);\n    assert(sign == null || typeof sign === 'boolean');\n    if (!x.red) x = x.toRed(this.red);\n    const y = this.solveY(x);\n\n    if (sign != null) {\n      if (y.isZero() && sign) throw new Error('Invalid point.');\n      if (y.redIsOdd() !== sign) y.redINeg();\n    }\n\n    return this.point(x, y);\n  }\n\n  pointFromY(y, sign = null) {\n    assert(y instanceof BN);\n    assert(sign == null || typeof sign === 'boolean');\n    if (!y.red) y = y.toRed(this.red);\n    const x = this.solveX(y);\n\n    if (sign != null) {\n      if (x.isZero() && sign) throw new Error('Invalid point.');\n      if (x.redIsOdd() !== sign) x.redINeg();\n    }\n\n    return this.point(x, y);\n  }\n\n  isIsomorphic(curve, invert = false) {\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    //           Definition 2.1, Page 3, Section 2.\n    assert(curve instanceof Curve);\n    assert(typeof invert === 'boolean');\n    if (!curve.p.eq(this.p)) return false; // E(a,d) <-> E(a,b)\n\n    if (curve.type === 'short') return curve.isIsomorphic(this); // E(a,d) <-> M(A,B)\n    // E(a,d) <-> M(-A,-B)\n\n    if (curve.type === 'mont') {\n      // A * (a - d) = 2 * (a + d)\n      const a = this.field(curve.a);\n      let apd, amd;\n\n      if (invert) {\n        apd = this.d.redAdd(this.a);\n        amd = this.d.redSub(this.a);\n      } else {\n        apd = this.a.redAdd(this.d);\n        amd = this.a.redSub(this.d);\n      }\n\n      return a.redMul(amd).eq(apd.redIMuln(2));\n    } // E(a,d) <-> E(a',a'd/a)\n\n\n    if (curve.type === 'edwards') {\n      // a' * d = a * d'\n      const a = this.field(curve.a);\n      const d = this.field(curve.d);\n      return this.a.redMul(d).eq(a.redMul(this.d));\n    }\n\n    return false;\n  }\n\n  isIsogenous(curve) {\n    // Check for the 4-isogenies described by Hamburg:\n    // https://moderncrypto.org/mail-archive/curves/2016/000806.html\n    assert(curve instanceof Curve);\n    if (!curve.p.eq(this.p)) return false; // E(1,d) <-> M(2-4d,1)\n\n    if (curve.type === 'mont') {\n      if (!this.a.eq(this.one)) return false;\n      const a = this.field(curve.a);\n      const b = this.field(curve.b);\n      const d24 = this.two.redSub(this.d.redMuln(4));\n      return a.eq(d24) && b.eq(this.one);\n    } // E(a,d) <-> E(-a,d-a)\n\n\n    if (curve.type === 'edwards') {\n      const a = this.field(curve.a);\n      const d = this.field(curve.d);\n      return a.eq(this.a.redNeg()) && d.eq(this.d.redSub(this.a));\n    }\n\n    return false;\n  }\n\n  pointFromShort(point) {\n    // [TWISTEQ] Section 1.\n    assert(point instanceof ShortPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Equivalence for E(a,b)->E(a',d'):\n      //\n      //   x' = (6 * x - a' - d') / (6 * y)\n      //   y' = (12 * x - 5 * a' + d') / (12 * x + a' - 5 * d')\n      //\n      // Undefined for x = (5 * d' - a') / 12 or y = 0.\n      //\n      // Exceptional Cases:\n      //   - O -> (0, 1)\n      //   - ((a' + d') / 6, 0) -> (0, -1)\n      //   - ((5 * d' - a') / 12, (d' - a') / 4 * sqrt(d')) -> (sqrt(1/d'), oo)\n      //\n      // Unexceptional Cases:\n      //   - ((5 * a' - d') / 12, (a' - d') / 4 * sqrt(a')) -> (sqrt(1/a'), 0)\n      if (point.isInfinity()) return this.point();\n      if (point.y.isZero()) return this.point(this.zero, this.one.redNeg());\n      const {\n        a,\n        d\n      } = this;\n\n      const [u2, u3] = this._scale(point.curve);\n\n      const a5 = a.redMuln(5);\n      const d5 = d.redMuln(5);\n      const x = this.field(point.x).redMul(u2);\n      const y = this.field(point.y).redMul(u3);\n      const x6 = x.redMuln(6);\n      const x12 = x.redMuln(12);\n      const xx = x6.redSub(a).redISub(d);\n      const xz = y.redMuln(6);\n      const yy = x12.redSub(a5).redIAdd(d);\n      const yz = x12.redAdd(a).redISub(d5);\n      return this.cpoint(xx, xz, yy, yz);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromMont(point) {\n    // [RFC7748] Section 4.1 & 4.2.\n    // [MONT3] Page 6, Section 2.5.\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    assert(point instanceof MontPoint);\n    assert(point.curve.p.eq(this.p)); // Montgomery `u`, `v`.\n\n    const u = this.field(point.x);\n    const v = this.field(point.y);\n\n    if (this.isIsogenous(point.curve)) {\n      // 4-isogeny maps for M(2-4d,1)->E(1,d):\n      //\n      //   x = 4 * v * (u^2 - 1) / (u^4 - 2 * u^2 + 4 * v^2 + 1)\n      //   y = -(u^5 - 2 * u^3 - 4 * u * v^2 + u) /\n      //        (u^5 - 2 * u^2 * v^2 - 2 * u^3 - 2 * v^2 + u)\n      //\n      // Undefined for u = 0 and v = 0.\n      //\n      // Exceptional Cases:\n      //   - O -> (0, 1)\n      //   - (0, 0) -> (0, 1)\n      //\n      // Unexceptional Cases:\n      //   - (-1, +-sqrt(A - 2)) -> (0, 1)\n      //   - (1, +-sqrt(A + 2)) -> (0, -1)\n      //\n      // The point (1, v) is invalid on Curve448.\n      if (point.isInfinity()) return this.point();\n      if (point.x.isZero()) return this.point();\n      const u2 = u.redSqr();\n      const u3 = u2.redMul(u);\n      const u4 = u3.redMul(u);\n      const u5 = u4.redMul(u);\n      const v2 = v.redSqr();\n      const a = v.redMuln(4);\n      const b = u2.redSub(this.one);\n      const c = u2.redMuln(2);\n      const d = v2.redMuln(4);\n      const e = u3.redIMuln(2);\n      const f = u.redMul(v2).redIMuln(4);\n      const g = u2.redMul(v2).redIMuln(2);\n      const h = v2.redIMuln(2);\n      const xx = a.redMul(b);\n      const xz = u4.redISub(c).redIAdd(d).redIAdd(this.one);\n      const yy = u5.redSub(e).redISub(f).redIAdd(u).redINeg();\n      const yz = u5.redISub(g).redISub(e).redISub(h).redIAdd(u);\n      return this.cpoint(xx, xz, yy, yz).divn(4);\n    }\n\n    if (this.isIsomorphic(point.curve, true)) {\n      // Isomorphic maps for M(-A,-B)->E(a,d):\n      //\n      //   x = +-sqrt((A - 2) / (B * a)) * u / v\n      //   y = (u + 1) / (u - 1)\n      //\n      // Undefined for u = 1 or v = 0.\n      //\n      // Exceptional Cases:\n      //   - O -> (0, 1)\n      //   - (0, 0) -> (0, -1)\n      //   - (1, +-sqrt((A + 2) / B)) -> (+-sqrt(1 / d), oo)\n      //\n      // Unexceptional Cases:\n      //   - (-1, +-sqrt((A - 2) / B)) -> (+-sqrt(1 / a), 0)\n      //\n      // The point (1, v) is invalid on Curve448.\n      if (point.isInfinity()) return this.point();\n      if (point.x.isZero()) return this.point(this.zero, this.one.redNeg());\n\n      const c = this._scale(point.curve, true);\n\n      const xx = c.redMul(u);\n      const xz = v;\n      const yy = u.redAdd(this.one);\n      const yz = u.redSub(this.one);\n      return this.cpoint(xx, xz, yy, yz);\n    }\n\n    if (this.isIsomorphic(point.curve, false)) {\n      // Isomorphic maps for M(A,B)->E(a,d):\n      //\n      //   x = +-sqrt((A + 2) / (B * a)) * u / v\n      //   y = (u - 1) / (u + 1)\n      //\n      // Undefined for u = -1 or v = 0.\n      //\n      // Exceptional Cases:\n      //   - O -> (0, 1)\n      //   - (0, 0) -> (0, -1)\n      //   - (-1, +-sqrt((A - 2) / B)) -> (+-sqrt(1 / d), oo)\n      //\n      // Unexceptional Cases:\n      //   - (1, +-sqrt((A + 2) / B)) -> (+-sqrt(1 / a), 0)\n      //\n      // The point (-1, v) is invalid on Curve25519.\n      if (point.isInfinity()) return this.point();\n      if (point.x.isZero()) return this.point(this.zero, this.one.redNeg());\n\n      const c = this._scale(point.curve, false);\n\n      const xx = c.redMul(u);\n      const xz = v;\n      const yy = u.redSub(this.one);\n      const yz = u.redAdd(this.one);\n      return this.cpoint(xx, xz, yy, yz);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromEdwards(point) {\n    // [TWISTED] Definition 2.1, Page 3, Section 2.\n    // [ISOGENY] Page 2, Section 2.\n    assert(point instanceof EdwardsPoint);\n    assert(point.curve.p.eq(this.p)); // Edwards `x`, `y`, `z`, `t`.\n\n    const a = this.field(point.curve.a);\n    const x = this.field(point.x);\n    const y = this.field(point.y);\n    const z = this.field(point.z);\n    const t = this.field(point.t);\n\n    if (this.isIsogenous(point.curve)) {\n      // 4-isogeny maps for E(a,d)<->E(-a,d-a):\n      //\n      //   x' = (2 * x * y) / (y^2 - a * x^2)\n      //   y' = (y^2 + a * x^2) / (2 - y^2 - a * x^2)\n      //\n      // Undefined for y^2 - a * x^2 = 0\n      //            or y^2 + a * x^2 = 2.\n      const xy = x.redMul(y);\n      const x2 = x.redSqr();\n      const y2 = y.redSqr();\n      const z2 = z.redSqr();\n      const ax2 = a.redMul(x2);\n      const xx = xy.redIMuln(2);\n      const xz = y2.redSub(ax2);\n      const yy = y2.redAdd(ax2);\n      const yz = z2.redIMuln(2).redISub(yy);\n      const p = this.cpoint(xx, xz, yy, yz);\n      return !this.twisted ? p.divn(4) : p;\n    }\n\n    if (this.isIsomorphic(point.curve)) {\n      // Isomorphic maps for E(a,d)<->E(a',a'd/a):\n      //\n      //   x' = +-sqrt(a / a') * x\n      //   y' = y\n      //\n      // Undefined when (a / a') is not square.\n      const c = this._scale(point.curve);\n\n      const nx = c.redMul(x);\n      const ny = y;\n      const nz = z;\n      const nt = c.redMul(t);\n      return this.point(nx, ny, nz, nt);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromUniform(u, curve = null) {\n    assert(u instanceof BN);\n    assert(u.red === this.red);\n    assert(curve == null || curve instanceof MontCurve);\n    if (!curve) curve = this._alt();\n    const u0 = curve.field(u);\n    const p0 = curve.pointFromUniform(u0);\n    return this.pointFromMont(p0);\n  }\n\n  pointToUniform(p, hint, curve = null) {\n    assert(p instanceof EdwardsPoint);\n    assert(hint >>> 0 === hint);\n    assert(curve == null || curve instanceof MontCurve);\n    if (!curve) curve = this._alt(); // Add a random torsion component.\n\n    const i = (hint >> 4 & 15) % this.torsion.length;\n    const q = p.add(this.torsion[i]); // Convert and invert.\n\n    const p0 = curve.pointFromEdwards(q);\n    const u0 = curve.pointToUniform(p0, hint & 15);\n    return this.field(u0);\n  }\n\n  pointFromHash(bytes, pake, curve = null) {\n    assert(curve == null || curve instanceof MontCurve);\n    if (!curve) curve = this._alt();\n    const p0 = curve.pointFromHash(bytes, pake);\n    return this.pointFromMont(p0);\n  }\n\n  pointToHash(p, subgroup, rng, curve = null) {\n    assert(p instanceof EdwardsPoint);\n    assert(subgroup >>> 0 === subgroup);\n    assert(curve == null || curve instanceof MontCurve);\n    if (!curve) curve = this._alt(); // Add a random torsion component.\n\n    const i = subgroup % this.torsion.length;\n    const q = p.add(this.torsion[i]); // Convert and invert.\n\n    const p0 = curve.pointFromEdwards(q);\n    return curve.pointToHash(p0, 0, rng);\n  }\n\n  decodePoint(bytes) {\n    return EdwardsPoint.decode(this, bytes);\n  }\n\n  toShort(a0, odd, sign = null) {\n    const [a, b] = this._short(a0, odd);\n\n    const curve = new ShortCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = curve._scale(this);\n\n      if (u3.redIsOdd() !== sign) u3.redINeg();\n    }\n\n    if (!this.g.isInfinity()) curve.g = curve.pointFromEdwards(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++) curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n\n    return curve;\n  }\n\n  toMont(b0, invert, sign = null) {\n    const [a, b] = this._mont(b0, invert);\n\n    const curve = new MontCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h,\n      z: this.z\n    });\n\n    if (sign != null) {\n      const c = this._scale(curve, invert);\n\n      if (c.redIsOdd() !== sign) c.redINeg();\n    }\n\n    if (!this.g.isInfinity()) curve.g = curve.pointFromEdwards(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++) curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n\n    return curve;\n  }\n\n  toEdwards(a0, sign = null) {\n    const [a, d] = this._edwards(a0);\n\n    const curve = new EdwardsCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      d: d,\n      n: this.n,\n      h: this.h,\n      z: this.z\n    });\n\n    if (sign != null) {\n      const c = curve._scale(this);\n\n      if (c.redIsOdd() !== sign) c.redINeg();\n    }\n\n    if (!this.g.isInfinity()) {\n      curve.g = curve.pointFromEdwards(this.g);\n      curve.g.normalize();\n    }\n\n    if (curve.isComplete()) {\n      for (let i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n        curve.torsion[i].normalize();\n      }\n    }\n\n    return curve;\n  }\n\n  pointFromJSON(json) {\n    return EdwardsPoint.fromJSON(this, json);\n  }\n\n  toJSON(pre) {\n    const json = super.toJSON(pre);\n    json.a = this.a.fromRed().toJSON();\n    json.d = this.d.fromRed().toJSON();\n    if (!this.s.isZero()) json.s = this.s.fromRed().toJSON();\n    return json;\n  }\n\n}\n/**\n * EdwardsPoint\n */\n\n\nclass EdwardsPoint extends Point {\n  constructor(curve, x, y, z, t) {\n    assert(curve instanceof EdwardsCurve);\n    super(curve, types.EXTENDED);\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = 1;\n    if (x != null) this._init(x, y, z, t);\n  }\n\n  _init(x, y, z, t) {\n    assert(x instanceof BN);\n    assert(y instanceof BN);\n    assert(z == null || z instanceof BN);\n    assert(t == null || t instanceof BN);\n    this.x = x;\n    this.y = y;\n    this.z = z || this.curve.one;\n    this.t = t || null;\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z.eq(this.curve.one) | 0;\n\n    this._check();\n\n    if (!this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne) this.t = this.t.redDiv(this.z);\n    }\n  }\n\n  _check() {\n    // In order to achieve complete\n    // addition formulas, `a` must\n    // be a square (always the case\n    // for a=1), and `d` must be a\n    // non-square.\n    //\n    // If this is not the case, the\n    // addition formulas may have\n    // exceptional cases where Z3=0.\n    //\n    // In particular, this can occur\n    // when: Q*h = -P*h and Q != -P.\n    //\n    // This is assuming 4-torsion is\n    // involved (the 4-torsion point\n    // is _not_ representable when\n    // `d` is square).\n    if (this.z.isZero()) throw new Error('Invalid point.');\n  }\n\n  clone() {\n    return this.curve.point(this.x.clone(), this.y.clone(), this.z.clone(), this.t.clone());\n  }\n\n  swap(point, flag) {\n    assert(point instanceof EdwardsPoint);\n    const cond = (flag >> 31 | -flag >> 31) & 1;\n    const zOne1 = this.zOne;\n    const zOne2 = point.zOne;\n    this.x.cswap(point.x, flag);\n    this.y.cswap(point.y, flag);\n    this.z.cswap(point.z, flag);\n    this.t.cswap(point.t, flag);\n    this.zOne = zOne1 & (cond ^ 1) | zOne2 & cond;\n    point.zOne = zOne2 & (cond ^ 1) | zOne1 & cond;\n    return this;\n  }\n\n  normalize() {\n    // https://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#scaling-z\n    // 1I + 2M (+ 1M if extended)\n    // Z1 = 1\n    if (this.zOne) return this; // A = 1 / Z1\n\n    const a = this.z.redInvert(); // X3 = X1 * A\n\n    this.x = this.x.redMul(a); // Y3 = Y1 * A\n\n    this.y = this.y.redMul(a); // T3 = T1 * A\n\n    this.t = this.t.redMul(a); // Z3 = 1\n\n    this.z = this.curve.one;\n    this.zOne = 1;\n    return this;\n  }\n\n  scale(a) {\n    assert(a instanceof BN); // X3 = X1 * A\n\n    const nx = this.x.redMul(a); // Y3 = Y1 * A\n\n    const ny = this.y.redMul(a); // Z3 = Z1 * A\n\n    const nz = this.z.redMul(a); // T3 = T1 * A\n\n    const nt = this.t.redMul(a);\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  neg() {\n    // -(X1, Y1, Z1, T1) = (-X1, Y1, Z1, -T1)\n    const nx = this.x.redNeg();\n    const ny = this.y;\n    const nz = this.z;\n    const nt = this.t.redNeg();\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  add(p) {\n    assert(p instanceof EdwardsPoint); // P = O\n\n    if (this.isInfinity()) return p; // Q = O\n\n    if (p.isInfinity()) return this; // Z1 = 1\n\n    if (this.zOne) return p._add(this, 0);\n    return this._add(p, 0);\n  }\n\n  _add(p, flag) {\n    // a = -1\n    if (this.curve.mOneA) return this._addM1(p, flag);\n    return this._addA(p, flag);\n  }\n\n  _addM1(p, flag) {\n    // Assumes a = -1.\n    //\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n    // 8M + 8A + 1*k + 1*2\n    //\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-madd-2008-hwcd-3\n    // 7M + 8A + 1*k + 1*2\n    const zOne = p.zOne & (flag ^ 1); // A = (Y1 - X1) * (Y2 - X2)\n\n    const a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)\n\n    const b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2\n\n    const c = this.t.redMul(this.curve.k).redMul(p.t); // D = Z1 * 2 * Z2\n\n    const d = zOne ? this.z.redAdd(this.z) : this.z.redMul(p.z).redIMuln(2); // E = B - A\n\n    const e = b.redSub(a); // F = D - C\n\n    const f = d.redSub(c); // G = D + C\n\n    const g = d.redIAdd(c); // H = B + A\n\n    const h = b.redIAdd(a); // X3 = E * F\n\n    const nx = e.redMul(f); // Y3 = G * H\n\n    const ny = g.redMul(h); // T3 = E * H\n\n    const nt = e.redMul(h); // Z3 = F * G\n\n    const nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  _addA(p, flag) {\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // 9M + 7A + 1*a + 1*d\n    //\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-madd-2008-hwcd\n    // 8M + 7A + 1*a + 1*d\n    const zOne = p.zOne & (flag ^ 1); // A = X1 * X2\n\n    const a = this.x.redMul(p.x); // B = Y1 * Y2\n\n    const b = this.y.redMul(p.y); // C = T1 * d * T2\n\n    const c = this.curve._mulD(this.t).redMul(p.t); // D = Z1 * Z2\n\n\n    const d = zOne ? this.z.clone() : this.z.redMul(p.z); // + XYXY = (X1 + Y1) * (X2 + Y2)\n\n    const xyxy = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)); // E = (X1 + Y1) * (X2 + Y2) - A - B\n\n    const e = xyxy.redISub(a).redISub(b); // F = D - C\n\n    const f = d.redSub(c); // G = D + C\n\n    const g = d.redIAdd(c); // H = B - a * A\n\n    const h = b.redISub(this.curve._mulA(a)); // X3 = E * F\n\n    const nx = e.redMul(f); // Y3 = G * H\n\n    const ny = g.redMul(h); // T3 = E * H\n\n    const nt = e.redMul(h); // Z3 = F * G\n\n    const nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  dbl() {\n    // P = O\n    if (this.isInfinity()) return this;\n    return this._dbl(0);\n  }\n\n  _dbl(flag) {\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // 4M + 4S + 6A + 1*a + 1*2\n    //\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-mdbl-2008-hwcd\n    // 3M + 4S + 7A + 1*a + 1*2\n    const zOne = this.zOne & (flag ^ 1); // A = X1^2\n\n    const a = this.x.redSqr(); // B = Y1^2\n\n    const b = this.y.redSqr(); // C = 2 * Z1^2\n\n    const c = zOne ? this.curve.two : this.z.redSqr().redIMuln(2); // D = a * A\n\n    const d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B\n\n\n    const e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B\n\n    const g = d.redAdd(b); // F = G - C\n\n    const f = g.redSub(c); // H = D - B\n\n    const h = d.redISub(b); // X3 = E * F\n\n    const nx = e.redMul(f); // Y3 = G * H\n\n    const ny = g.redMul(h); // T3 = E * H\n\n    const nt = e.redMul(h); // Z3 = F * G\n\n    const nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  uadd(p) {\n    assert(p instanceof EdwardsPoint);\n    return this._add(p, 1);\n  }\n\n  udbl() {\n    return this._dbl(1);\n  }\n\n  getX() {\n    this.normalize();\n    return this.x.fromRed();\n  }\n\n  getY() {\n    this.normalize();\n    return this.y.fromRed();\n  }\n\n  eq(p) {\n    assert(p instanceof EdwardsPoint);\n    assert(!this.z.isZero());\n    assert(!p.z.isZero()); // P = Q\n\n    if (this === p) return true; // Z1 = Z2\n\n    if (this.z.eq(p.z)) {\n      return this.x.eq(p.x) && this.y.eq(p.y);\n    } // X1 * Z2 == X2 * Z1\n\n\n    const x1 = this.x.redMul(p.z);\n    const x2 = p.x.redMul(this.z);\n    if (!x1.eq(x2)) return false;\n    const y1 = this.y.redMul(p.z);\n    const y2 = p.y.redMul(this.z);\n    return y1.eq(y2);\n  }\n\n  cmp(point) {\n    assert(point instanceof EdwardsPoint);\n    return this.order().cmp(point.order()) || this.getY().cmp(point.getY()) || this.getX().cmp(point.getX());\n  }\n\n  isInfinity() {\n    assert(!this.z.isZero()); // X1 = 0\n\n    if (!this.x.isZero()) return false; // Y1 = Z1\n\n    return this.y.eq(this.z);\n  }\n\n  isOrder2() {\n    if (this.isInfinity()) return false;\n    return this.x.isZero();\n  }\n\n  isOdd() {\n    this.normalize();\n    return this.x.redIsOdd();\n  }\n\n  isEven() {\n    this.normalize();\n    return this.x.redIsEven();\n  }\n\n  toP() {\n    return this.normalize();\n  }\n\n  toJ() {\n    return this;\n  }\n\n  encode() {\n    // [RFC8032] Section 5.1.2.\n    const y = this.getY(); // Note: `x` normalized from `getY()` call.\n\n    y.setn(this.curve.signBit, this.x.redIsOdd());\n    return this.curve.encodeAdjusted(y);\n  }\n\n  static decode(curve, bytes) {\n    // [RFC8032] Section 5.1.3.\n    assert(curve instanceof EdwardsCurve);\n    const y = curve.decodeAdjusted(bytes);\n    const sign = y.testn(curve.signBit) !== 0;\n    y.setn(curve.signBit, 0);\n    if (y.cmp(curve.p) >= 0) throw new Error('Invalid point.');\n    return curve.pointFromY(y, sign);\n  }\n\n  toJSON(pre) {\n    if (this.isInfinity()) return [];\n    const x = this.getX().toJSON();\n    const y = this.getY().toJSON();\n    if (pre === true && this.pre) return [x, y, this.pre.toJSON()];\n    return [x, y];\n  }\n\n  toPretty() {\n    const size = this.curve.fieldSize * 2;\n    const x = toPretty(this.getX(), size);\n    const y = toPretty(this.getY(), size);\n    return [x, y];\n  }\n\n  static fromJSON(curve, json) {\n    assert(curve instanceof EdwardsCurve);\n    assert(Array.isArray(json));\n    assert(json.length === 0 || json.length === 2 || json.length === 3);\n    if (json.length === 0) return curve.point();\n    const x = BN.fromJSON(json[0]);\n    const y = BN.fromJSON(json[1]);\n    const point = curve.point(x, y);\n    if (json.length > 2 && json[2] != null) point.pre = Precomp.fromJSON(point, json[2]);\n    return point;\n  }\n\n  [custom]() {\n    if (this.isInfinity()) return '<EdwardsPoint: Infinity>';\n    return '<EdwardsPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';\n  }\n\n}\n/**\n * Precomp\n */\n\n\nclass Precomp {\n  constructor() {\n    this.naf = null;\n    this.windows = null;\n    this.doubles = null;\n    this.blinding = null;\n    this.beta = null;\n  }\n\n  map(func) {\n    assert(typeof func === 'function');\n    const out = new this.constructor();\n    if (this.naf) out.naf = this.naf.map(func);\n    if (this.doubles) out.doubles = this.doubles.map(func);\n    return out;\n  }\n\n  toJSON() {\n    return {\n      naf: this.naf ? this.naf.toJSON() : null,\n      windows: this.windows ? this.windows.toJSON() : null,\n      doubles: this.doubles ? this.doubles.toJSON() : null,\n      blinding: this.blinding ? this.blinding.toJSON() : undefined\n    };\n  }\n\n  fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n    if (json.naf != null) this.naf = NAF.fromJSON(point, json.naf);\n    if (json.windows != null) this.windows = Windows.fromJSON(point, json.windows);\n    if (json.doubles != null) this.doubles = Doubles.fromJSON(point, json.doubles);\n    if (json.blinding != null) this.blinding = Blinding.fromJSON(point, json.blinding);\n    return this;\n  }\n\n  static fromJSON(point, json) {\n    return new this().fromJSON(point, json);\n  }\n\n}\n/**\n * NAF\n */\n\n\nclass NAF {\n  constructor(width, points) {\n    this.width = width;\n    this.points = points;\n  }\n\n  map(func) {\n    assert(typeof func === 'function');\n    const {\n      width\n    } = this;\n    const points = [];\n\n    for (const point of this.points) points.push(func(point));\n\n    return new this.constructor(width, points);\n  }\n\n  toJSON() {\n    return {\n      width: this.width,\n      points: this.points.slice(1).map(point => {\n        return point.toJSON();\n      })\n    };\n  }\n\n  static fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n    assert(json.width >>> 0 === json.width);\n    assert(Array.isArray(json.points));\n    const {\n      curve\n    } = point;\n    const {\n      width\n    } = json;\n    const points = [point];\n\n    for (const item of json.points) points.push(curve.pointFromJSON(item));\n\n    return new this(width, points);\n  }\n\n}\n/**\n * Windows\n */\n\n\nclass Windows {\n  constructor(width, bits, points) {\n    this.width = width;\n    this.bits = bits;\n    this.points = points;\n  }\n\n  toJSON() {\n    return {\n      width: this.width,\n      bits: this.bits,\n      points: this.points.slice(1).map(point => {\n        return point.toJSON();\n      })\n    };\n  }\n\n  static fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n    assert(json.width >>> 0 === json.width);\n    assert(json.bits >>> 0 === json.bits);\n    assert(Array.isArray(json.points));\n    const {\n      curve\n    } = point;\n    const {\n      width,\n      bits\n    } = json;\n    const points = [point];\n\n    for (const item of json.points) points.push(curve.pointFromJSON(item));\n\n    return new this(width, bits, points);\n  }\n\n}\n/**\n * Doubles\n */\n\n\nclass Doubles {\n  constructor(step, points) {\n    this.step = step;\n    this.points = points;\n  }\n\n  map(func) {\n    assert(typeof func === 'function');\n    const {\n      step\n    } = this;\n    const points = [];\n\n    for (const point of this.points) points.push(func(point));\n\n    return new this.constructor(step, points);\n  }\n\n  toJSON() {\n    return {\n      step: this.step,\n      points: this.points.slice(1).map(point => {\n        return point.toJSON();\n      })\n    };\n  }\n\n  static fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n    assert(json.step >>> 0 === json.step);\n    assert(Array.isArray(json.points));\n    const {\n      curve\n    } = point;\n    const {\n      step\n    } = json;\n    const points = [point];\n\n    for (const item of json.points) points.push(curve.pointFromJSON(item));\n\n    return new this(step, points);\n  }\n\n}\n/**\n * Blinding\n */\n\n\nclass Blinding {\n  constructor(blind, unblind) {\n    this.blind = blind;\n    this.unblind = unblind;\n  }\n\n  toJSON() {\n    return {\n      blind: this.blind.toJSON(),\n      unblind: this.unblind.toJSON()\n    };\n  }\n\n  static fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n    const {\n      curve\n    } = point;\n    const blind = BN.fromJSON(json.blind);\n    const unblind = curve.pointFromJSON(json.unblind);\n    return new this(blind, unblind);\n  }\n\n}\n/**\n * Endo\n */\n\n\nclass Endo {\n  constructor(beta, lambda, basis, pre) {\n    this.beta = beta;\n    this.lambda = lambda;\n    this.basis = basis;\n    this.pre = pre;\n  }\n\n  toJSON() {\n    return {\n      beta: this.beta.fromRed().toJSON(),\n      lambda: this.lambda.toJSON(),\n      basis: [this.basis[0].toJSON(), this.basis[1].toJSON()],\n      pre: [this.pre[0].toJSON(), this.pre[1].toJSON()]\n    };\n  }\n\n  static fromJSON(curve, json) {\n    assert(curve instanceof Curve);\n    assert(json && typeof json === 'object');\n    assert(Array.isArray(json.basis));\n    assert(Array.isArray(json.pre));\n    assert(json.basis.length === 2);\n    assert(json.pre.length === 2);\n    const beta = BN.fromJSON(json.beta).toRed(curve.red);\n    const lambda = BN.fromJSON(json.lambda);\n    const basis = [Vector.fromJSON(json.basis[0]), Vector.fromJSON(json.basis[1])];\n    const pre = [BN.fromJSON(json.pre[0]), BN.fromJSON(json.pre[1])];\n    return new this(beta, lambda, basis, pre);\n  }\n\n}\n/**\n * Vector\n */\n\n\nclass Vector {\n  constructor(a, b) {\n    this.a = a;\n    this.b = b;\n  }\n\n  toJSON() {\n    return {\n      a: this.a.toJSON(),\n      b: this.b.toJSON()\n    };\n  }\n\n  static fromJSON(json) {\n    assert(json && typeof json === 'object');\n    const a = BN.fromJSON(json.a);\n    const b = BN.fromJSON(json.b);\n    return new this(a, b);\n  }\n\n}\n/**\n * P192\n * https://tinyurl.com/fips-186-2 (page 29)\n * https://tinyurl.com/fips-186-3 (page 88)\n */\n\n\nclass P192 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P192',\n      ossl: 'prime192v1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'p192',\n      // 2^192 - 2^64 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff fffffffe', 'ffffffff ffffffff'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff fffffffe', 'ffffffff fffffffc'],\n      b: ['64210519 e59c80e7 0fa7e9ab 72243049', 'feb8deec c146b9b1'],\n      n: ['ffffffff ffffffff ffffffff 99def836', '146bc9b1 b4d22831'],\n      h: '1',\n      // Icart\n      z: '-5',\n      g: [['188da80e b03090f6 7cbf20eb 43a18800', 'f4ff0afd 82ff1012'], ['07192b95 ffc8da78 631011ed 6b24cdd5', '73f977a1 1e794811'], pre]\n    });\n  }\n\n}\n/**\n * P224\n * https://tinyurl.com/fips-186-2 (page 30)\n * https://tinyurl.com/fips-186-3 (page 88)\n */\n\n\nclass P224 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P224',\n      ossl: 'secp224r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'p224',\n      // 2^224 - 2^96 + 1 (no congruence)\n      p: ['ffffffff ffffffff ffffffff ffffffff', '00000000 00000000 00000001'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff fffffffe', 'ffffffff ffffffff fffffffe'],\n      b: ['b4050a85 0c04b3ab f5413256 5044b0b7', 'd7bfd8ba 270b3943 2355ffb4'],\n      n: ['ffffffff ffffffff ffffffff ffff16a2', 'e0b8f03e 13dd2945 5c5c2a3d'],\n      h: '1',\n      // SSWU\n      z: '1f',\n      g: [['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3', '56c21122 343280d6 115c1d21'], ['bd376388 b5f723fb 4c22dfe6 cd4375a0', '5a074764 44d58199 85007e34'], pre]\n    });\n  }\n\n}\n/**\n * P256\n * https://tinyurl.com/fips-186-2 (page 31)\n * https://tinyurl.com/fips-186-3 (page 89)\n */\n\n\nclass P256 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P256',\n      ossl: 'prime256v1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: null,\n      // 2^256 - 2^224 + 2^192 + 2^96 - 1 (= 3 mod 4)\n      p: ['ffffffff 00000001 00000000 00000000', '00000000 ffffffff ffffffff ffffffff'],\n      // -3 mod p\n      a: ['ffffffff 00000001 00000000 00000000', '00000000 ffffffff ffffffff fffffffc'],\n      b: ['5ac635d8 aa3a93e7 b3ebbd55 769886bc', '651d06b0 cc53b0f6 3bce3c3e 27d2604b'],\n      n: ['ffffffff 00000000 ffffffff ffffffff', 'bce6faad a7179e84 f3b9cac2 fc632551'],\n      h: '1',\n      // SSWU\n      z: '-a',\n      g: [['6b17d1f2 e12c4247 f8bce6e5 63a440f2', '77037d81 2deb33a0 f4a13945 d898c296'], ['4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16', '2bce3357 6b315ece cbb64068 37bf51f5'], pre]\n    });\n  }\n\n}\n/**\n * P384\n * https://tinyurl.com/fips-186-2 (page 32)\n * https://tinyurl.com/fips-186-3 (page 89)\n */\n\n\nclass P384 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P384',\n      ossl: 'secp384r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA384',\n      prime: null,\n      // 2^384 - 2^128 - 2^96 + 2^32 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff fffffffe', 'ffffffff 00000000 00000000 ffffffff'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff fffffffe', 'ffffffff 00000000 00000000 fffffffc'],\n      b: ['b3312fa7 e23ee7e4 988e056b e3f82d19', '181d9c6e fe814112 0314088f 5013875a', 'c656398d 8a2ed19d 2a85c8ed d3ec2aef'],\n      n: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff c7634d81 f4372ddf', '581a0db2 48b0a77a ecec196a ccc52973'],\n      h: '1',\n      // Icart\n      z: '-c',\n      g: [['aa87ca22 be8b0537 8eb1c71e f320ad74', '6e1d3b62 8ba79b98 59f741e0 82542a38', '5502f25d bf55296c 3a545e38 72760ab7'], ['3617de4a 96262c6f 5d9e98bf 9292dc29', 'f8f41dbd 289a147c e9da3113 b5f0b8c0', '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'], pre]\n    });\n  }\n\n}\n/**\n * P521\n * https://tinyurl.com/fips-186-2 (page 33)\n * https://tinyurl.com/fips-186-3 (page 90)\n */\n\n\nclass P521 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P521',\n      ossl: 'secp521r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA512',\n      prime: 'p521',\n      // 2^521 - 1 (= 3 mod 4)\n      p: ['000001ff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff'],\n      // -3 mod p\n      a: ['000001ff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'fffffffc'],\n      b: ['00000051 953eb961 8e1c9a1f 929a21a0', 'b68540ee a2da725b 99b315f3 b8b48991', '8ef109e1 56193951 ec7e937b 1652c0bd', '3bb1bf07 3573df88 3d2c34f1 ef451fd4', '6b503f00'],\n      n: ['000001ff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'fffffffa 51868783 bf2f966b 7fcc0148', 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e', '91386409'],\n      h: '1',\n      // SSWU\n      z: '-4',\n      g: [['000000c6 858e06b7 0404e9cd 9e3ecb66', '2395b442 9c648139 053fb521 f828af60', '6b4d3dba a14b5e77 efe75928 fe1dc127', 'a2ffa8de 3348b3c1 856a429b f97e7e31', 'c2e5bd66'], ['00000118 39296a78 9a3bc004 5c8a5fb4', '2c7d1bd9 98f54449 579b4468 17afbd17', '273e662c 97ee7299 5ef42640 c550b901', '3fad0761 353c7086 a272c240 88be9476', '9fd16650'], pre]\n    });\n  }\n\n}\n/**\n * SECP256K1\n * https://www.secg.org/SEC2-Ver-1.0.pdf (page 15, section 2.7.1)\n * https://www.secg.org/sec2-v2.pdf (page 9, section 2.4.1)\n */\n\n\nclass SECP256K1 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'SECP256K1',\n      ossl: 'secp256k1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'k256',\n      // 2^256 - 2^32 - 977 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe fffffc2f'],\n      a: '0',\n      b: '7',\n      n: ['ffffffff ffffffff ffffffff fffffffe', 'baaedce6 af48a03b bfd25e8c d0364141'],\n      h: '1',\n      // SVDW\n      z: '1',\n      // sqrt(-3)\n      c: ['0a2d2ba9 3507f1df 233770c2 a797962c', 'c61f6d15 da14ecd4 7d8d27ae 1cd5f852'],\n      g: [['79be667e f9dcbbac 55a06295 ce870b07', '029bfcdb 2dce28d9 59f2815b 16f81798'], ['483ada77 26a3c465 5da4fbfc 0e1108a8', 'fd17b448 a6855419 9c47d08f fb10d4b8'], pre],\n      // Precomputed endomorphism.\n      endo: {\n        beta: ['7ae96a2b 657c0710 6e64479e ac3434e9', '9cf04975 12f58995 c1396c28 719501ee'],\n        lambda: ['5363ad4c c05c30e0 a5261c02 8812645a', '122e22ea 20816678 df02967c 1b23bd72'],\n        basis: [{\n          a: '3086d221a7d46bcde86c90e49284eb15',\n          b: '-e4437ed6010e88286f547fa90abfe4c3'\n        }, {\n          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n          b: '3086d221a7d46bcde86c90e49284eb15'\n        }],\n        pre: ['3086d221a7d46bcde86c90e49284eb153dab', '-e4437ed6010e88286f547fa90abfe4c42212']\n      }\n    });\n  }\n\n}\n/**\n * BRAINPOOLP256\n * https://tools.ietf.org/html/rfc5639#section-3.4\n */\n\n\nclass BRAINPOOLP256 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'BRAINPOOLP256',\n      ossl: 'brainpoolP256r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['a9fb57db a1eea9bc 3e660a90 9d838d72', '6e3bf623 d5262028 2013481d 1f6e5377'],\n      a: ['7d5a0975 fc2c3057 eef67530 417affe7', 'fb8055c1 26dc5c6c e94a4b44 f330b5d9'],\n      b: ['26dc5c6c e94a4b44 f330b5d9 bbd77cbf', '95841629 5cf7e1ce 6bccdc18 ff8c07b6'],\n      n: ['a9fb57db a1eea9bc 3e660a90 9d838d71', '8c397aa3 b561a6f7 901e0e82 974856a7'],\n      h: '1',\n      // Icart\n      z: '-2',\n      g: [['8bd2aeb9 cb7e57cb 2c4b482f fc81b7af', 'b9de27e1 e3bd23c2 3a4453bd 9ace3262'], ['547ef835 c3dac4fd 97f8461a 14611dc9', 'c2774513 2ded8e54 5c1d54c7 2f046997'], pre]\n    });\n  }\n\n}\n/**\n * BRAINPOOLP384\n * https://tools.ietf.org/html/rfc5639#section-3.6\n */\n\n\nclass BRAINPOOLP384 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'BRAINPOOLP384',\n      ossl: 'brainpoolP384r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA384',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['8cb91e82 a3386d28 0f5d6f7e 50e641df', '152f7109 ed5456b4 12b1da19 7fb71123', 'acd3a729 901d1a71 87470013 3107ec53'],\n      a: ['7bc382c6 3d8c150c 3c72080a ce05afa0', 'c2bea28e 4fb22787 139165ef ba91f90f', '8aa5814a 503ad4eb 04a8c7dd 22ce2826'],\n      b: ['04a8c7dd 22ce2826 8b39b554 16f0447c', '2fb77de1 07dcd2a6 2e880ea5 3eeb62d5', '7cb43902 95dbc994 3ab78696 fa504c11'],\n      n: ['8cb91e82 a3386d28 0f5d6f7e 50e641df', '152f7109 ed5456b3 1f166e6c ac0425a7', 'cf3ab6af 6b7fc310 3b883202 e9046565'],\n      h: '1',\n      // SSWU\n      z: '-5',\n      g: [['1d1c64f0 68cf45ff a2a63a81 b7c13f6b', '8847a3e7 7ef14fe3 db7fcafe 0cbd10e8', 'e826e034 36d646aa ef87b2e2 47d4af1e'], ['8abe1d75 20f9c2a4 5cb1eb8e 95cfd552', '62b70b29 feec5864 e19c054f f9912928', '0e464621 77918111 42820341 263c5315'], pre]\n    });\n  }\n\n}\n/**\n * BRAINPOOLP512\n * https://tools.ietf.org/html/rfc5639#section-3.7\n */\n\n\nclass BRAINPOOLP512 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'BRAINPOOLP512',\n      ossl: 'brainpoolP512r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA512',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['aadd9db8 dbe9c48b 3fd4e6ae 33c9fc07', 'cb308db3 b3c9d20e d6639cca 70330871', '7d4d9b00 9bc66842 aecda12a e6a380e6', '2881ff2f 2d82c685 28aa6056 583a48f3'],\n      a: ['7830a331 8b603b89 e2327145 ac234cc5', '94cbdd8d 3df91610 a83441ca ea9863bc', '2ded5d5a a8253aa1 0a2ef1c9 8b9ac8b5', '7f1117a7 2bf2c7b9 e7c1ac4d 77fc94ca'],\n      b: ['3df91610 a83441ca ea9863bc 2ded5d5a', 'a8253aa1 0a2ef1c9 8b9ac8b5 7f1117a7', '2bf2c7b9 e7c1ac4d 77fc94ca dc083e67', '984050b7 5ebae5dd 2809bd63 8016f723'],\n      n: ['aadd9db8 dbe9c48b 3fd4e6ae 33c9fc07', 'cb308db3 b3c9d20e d6639cca 70330870', '553e5c41 4ca92619 41866119 7fac1047', '1db1d381 085ddadd b5879682 9ca90069'],\n      h: '1',\n      // Icart\n      z: '7',\n      g: [['81aee4bd d82ed964 5a21322e 9c4c6a93', '85ed9f70 b5d916c1 b43b62ee f4d0098e', 'ff3b1f78 e2d0d48d 50d1687b 93b97d5f', '7c6d5047 406a5e68 8b352209 bcb9f822'], ['7dde385d 566332ec c0eabfa9 cf7822fd', 'f209f700 24a57b1a a000c55b 881f8111', 'b2dcde49 4a5f485e 5bca4bd8 8a2763ae', 'd1ca2b2f a8f05406 78cd1e0f 3ad80892'], pre]\n    });\n  }\n\n}\n/**\n * X25519\n * https://tools.ietf.org/html/rfc7748#section-4.1\n */\n\n\nclass X25519 extends MontCurve {\n  constructor() {\n    super({\n      id: 'X25519',\n      ossl: 'X25519',\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHA512',\n      prime: 'p25519',\n      // 2^255 - 19 (= 5 mod 8)\n      p: ['7fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffed'],\n      // 486662\n      a: '76d06',\n      b: '1',\n      n: ['10000000 00000000 00000000 00000000', '14def9de a2f79cd6 5812631a 5cf5d3ed'],\n      h: '8',\n      // Elligator 2\n      z: '2',\n      g: [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000009'], // See: https://www.rfc-editor.org/errata/eid4730\n      ['5f51e65e 475f794b 1fe122d3 88b72eb3', '6dc2b281 92839e4d d6163a5d 81312c14']],\n      torsion: [[], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000001'], ['6be4f497 f9a9c2af c21fa77a d7f4a6ef', '635a11c7 284a9363 e9a248ef 9c884415']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000001'], ['141b0b68 06563d50 3de05885 280b5910', '9ca5ee38 d7b56c9c 165db710 6377bbd8']], [['57119fd0 dd4e22d8 868e1c58 c45c4404', '5bef839c 55b1d0b1 248c50a3 bc959c5f'], ['68c59389 3d458e64 31c6ca00 45fb5015', '20a44346 8eaa68dd 0f103842 048065b7']], [['57119fd0 dd4e22d8 868e1c58 c45c4404', '5bef839c 55b1d0b1 248c50a3 bc959c5f'], ['173a6c76 c2ba719b ce3935ff ba04afea', 'df5bbcb9 71559722 f0efc7bd fb7f9a36']], [['00b8495f 16056286 fdb1329c eb8d09da', '6ac49ff1 fae35616 aeb8413b 7c7aebe0'], ['3931c129 569e83a5 29482c14 e628b457', '933bfc29 ed801b4d 68871483 92507b1a']], [['00b8495f 16056286 fdb1329c eb8d09da', '6ac49ff1 fae35616 aeb8413b 7c7aebe0'], ['46ce3ed6 a9617c5a d6b7d3eb 19d74ba8', '6cc403d6 127fe4b2 9778eb7c 6daf84d3']]]\n    });\n  }\n\n}\n/**\n * X448\n * https://tools.ietf.org/html/rfc7748#section-4.2\n */\n\n\nclass X448 extends MontCurve {\n  constructor() {\n    super({\n      id: 'X448',\n      ossl: 'X448',\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff'],\n      // 156326\n      a: '262a6',\n      b: '1',\n      n: ['3fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 7cca23e9', 'c44edb49 aed63690 216cc272 8dc58f55', '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000005'], ['7d235d12 95f5b1f6 6c98ab6e 58326fce', 'cbae5d34 f55545d0 60f75dc2 8df3f6ed', 'b8027e23 46430d21 1312c4b1 50677af7', '6fd7223d 457b5b1a']],\n      torsion: [[], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['ba4d3a08 29b6112f 8812e51b a0bb2abe', 'bc1cb08e b48e5569 36ba50fd d2e7d68a', 'f8cb3216 0522425b 3f990812 abbe635a', 'd37a21e1 7551b193']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['45b2c5f7 d649eed0 77ed1ae4 5f44d541', '43e34f71 4b71aa96 c945af01 2d182975', '0734cde9 faddbda4 c066f7ed 54419ca5', '2c85de1e 8aae4e6c']]]\n    });\n  }\n\n}\n/**\n * MONT448\n * Isomorphic to Ed448-Goldilocks.\n */\n\n\nclass MONT448 extends MontCurve {\n  constructor() {\n    super({\n      id: 'MONT448',\n      ossl: null,\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff'],\n      // -78160 / -39082 mod p\n      a: ['b2cf97d2 d43459a9 31ed36b1 fc4e3cb5', '5d93f8d2 22746997 60ccffc6 49961ed6', 'c5b05fca c24864ed 6fb59697 931b78da', '84ddecd8 ca2b5cfb'],\n      b: '1',\n      n: ['3fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 7cca23e9', 'c44edb49 aed63690 216cc272 8dc58f55', '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [['ac0d24cc c6c75cb0 eb71f81e 7a6edf51', '48e88aee 009a2a24 e795687e c28e125a', '3e6730a6 0d46367b aa7fe99d 152128dc', '41321bc7 7817f059'], ['5a4437f6 80c0d0db 9b061276 d5d0ffcc', 'e786ff33 b6a53d30 98746425 82e66f09', '4433dae7 7244a6e2 6b11e905 7228f483', '556c41a5 913f55fe']],\n      torsion: [[], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['bec92fd0 6da2acf2 b4e261e8 7cef0d34', '22e75c18 3c589857 b71924e5 73c2f9ce', 'e18da5f2 466e2f39 3c2eedf0 f105a60a', 'b40c717d 4f1e1fd7']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['4136d02f 925d530d 4b1d9e17 8310f2cb', 'dd18a3e7 c3a767a8 48e6db19 8c3d0631', '1e725a0d b991d0c6 c3d1120f 0efa59f5', '4bf38e82 b0e1e028']]]\n    });\n  }\n\n}\n/**\n * ED25519\n * https://tools.ietf.org/html/rfc8032#section-5.1\n */\n\n\nclass ED25519 extends EdwardsCurve {\n  constructor(pre) {\n    super({\n      id: 'ED25519',\n      ossl: 'ED25519',\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHA512',\n      prefix: 'SigEd25519 no Ed25519 collisions',\n      context: false,\n      prime: 'p25519',\n      // 2^255 - 19 (= 5 mod 8)\n      p: ['7fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffed'],\n      a: '-1',\n      // -121665 / 121666 mod p\n      d: ['52036cee 2b6ffe73 8cc74079 7779e898', '00700a4d 4141d8ab 75eb4dca 135978a3'],\n      n: ['10000000 00000000 00000000 00000000', '14def9de a2f79cd6 5812631a 5cf5d3ed'],\n      h: '8',\n      // Elligator 2\n      z: '2',\n      g: [['216936d3 cd6e53fe c0a4e231 fdd6dc5c', '692cc760 9525a7b2 c9562d60 8f25d51a'], // 4/5\n      ['66666666 66666666 66666666 66666666', '66666666 66666666 66666666 66666658'], pre],\n      torsion: [[['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000001']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000'], ['7fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffec']], [['2b832480 4fc1df0b 2b4d0099 3dfbd7a7', '2f431806 ad2fe478 c4ee1b27 4a0ea0b0'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000']], [['547cdb7f b03e20f4 d4b2ff66 c2042858', 'd0bce7f9 52d01b87 3b11e4d8 b5f15f3d'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000']], [['1fd5b9a0 06394a28 e9339932 38de4abb', '5c193c70 13e5e238 dea14646 c545d14a'], ['05fc536d 880238b1 3933c6d3 05acdfd5', 'f098eff2 89f4c345 b027b2c2 8f95e826']], [['602a465f f9c6b5d7 16cc66cd c721b544', 'a3e6c38f ec1a1dc7 215eb9b9 3aba2ea3'], ['05fc536d 880238b1 3933c6d3 05acdfd5', 'f098eff2 89f4c345 b027b2c2 8f95e826']], [['1fd5b9a0 06394a28 e9339932 38de4abb', '5c193c70 13e5e238 dea14646 c545d14a'], ['7a03ac92 77fdc74e c6cc392c fa53202a', '0f67100d 760b3cba 4fd84d3d 706a17c7']], [['602a465f f9c6b5d7 16cc66cd c721b544', 'a3e6c38f ec1a1dc7 215eb9b9 3aba2ea3'], ['7a03ac92 77fdc74e c6cc392c fa53202a', '0f67100d 760b3cba 4fd84d3d 706a17c7']]]\n    });\n  }\n\n}\n/**\n * ISO448\n * https://tools.ietf.org/html/rfc7748#section-4.2\n * https://git.zx2c4.com/goldilocks/tree/_aux/ristretto/ristretto.sage#n658\n */\n\n\nclass ISO448 extends EdwardsCurve {\n  constructor(pre) {\n    super({\n      id: 'ISO448',\n      ossl: null,\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prefix: 'SigEd448',\n      context: true,\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff'],\n      a: '1',\n      // 39082 / 39081 mod p\n      d: ['d78b4bdc 7f0daf19 f24f38c2 9373a2cc', 'ad461572 42a50f37 809b1da3 412a12e7', '9ccc9c81 264cfe9a d0809970 58fb61c4', '243cc32d baa156b9'],\n      n: ['3fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 7cca23e9', 'c44edb49 aed63690 216cc272 8dc58f55', '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [['79a70b2b 70400553 ae7c9df4 16c792c6', '1128751a c9296924 0c25a07d 728bdc93', 'e21f7787 ed697224 9de732f3 8496cd11', '69871309 3e9c04fc'], // Note: the RFC has this wrong.\n      ['7fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 80000000', '00000000 00000000 00000000 00000000', '00000000 00000001'], pre],\n      torsion: [[['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000001']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000001'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']]]\n    });\n  }\n\n}\n/**\n * ED448\n * https://tools.ietf.org/html/rfc8032#section-5.2\n */\n\n\nclass ED448 extends EdwardsCurve {\n  constructor(pre) {\n    super({\n      id: 'ED448',\n      ossl: 'ED448',\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prefix: 'SigEd448',\n      context: true,\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff'],\n      a: '1',\n      // -39081 mod p\n      d: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffff6756'],\n      n: ['3fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 7cca23e9', 'c44edb49 aed63690 216cc272 8dc58f55', '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [['4f1970c6 6bed0ded 221d15a6 22bf36da', '9e146570 470f1767 ea6de324 a3d3a464', '12ae1af7 2ab66511 433b80e1 8b00938e', '2626a82b c70cc05e'], ['693f4671 6eb6bc24 88762037 56c9c762', '4bea7373 6ca39840 87789c1e 05a0c2d7', '3ad3ff1c e67c39c4 fdbd132c 4ed7c8ad', '9808795b f230fa14'], pre],\n      torsion: [[['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000001']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000001'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']]]\n    });\n  }\n\n}\n/*\n * Curve Registry\n */\n\n\nconst curves = {\n  __proto__: null,\n  P192,\n  P224,\n  P256,\n  P384,\n  P521,\n  SECP256K1,\n  BRAINPOOLP256,\n  BRAINPOOLP384,\n  BRAINPOOLP512,\n  X25519,\n  X448,\n  MONT448,\n  ED25519,\n  ISO448,\n  ED448\n};\nconst cache = {\n  __proto__: null,\n  P192: null,\n  P224: null,\n  P256: null,\n  P384: null,\n  P521: null,\n  SECP256K1: null,\n  BRAINPOOLP256: null,\n  BRAINPOOLP384: null,\n  BRAINPOOLP512: null,\n  X25519: null,\n  X448: null,\n  MONT448: null,\n  ED25519: null,\n  ISO448: null,\n  ED448: null\n};\n\nfunction curve(name, ...args) {\n  assert(typeof name === 'string');\n  const key = name.toUpperCase();\n  let curve = cache[key];\n\n  if (!curve) {\n    const Curve = curves[key];\n    if (!Curve) throw new Error(`Curve not found: \"${name}\".`);\n    curve = new Curve(...args);\n    cache[key] = curve;\n  }\n\n  return curve;\n}\n\nfunction register(name, Curve) {\n  assert(typeof name === 'string');\n  assert(typeof Curve === 'function');\n  const key = name.toUpperCase();\n  if (curves[key]) throw new Error(`Curve already registered: \"${name}\".`);\n  curves[key] = Curve;\n  cache[key] = null;\n}\n/*\n * Scalar Recoding\n */\n\n\nfunction getNAF(k, width, max) {\n  // Computing the width-w NAF of a positive integer.\n  //\n  // [GECC] Algorithm 3.35, Page 100, Section 3.3.\n  //\n  // The above document describes a rather abstract\n  // method of recoding. The more optimal method\n  // below was ported from libsecp256k1.\n  assert(k instanceof BN);\n  assert(!k.red);\n  assert(width >>> 0 === width);\n  assert(max >>> 0 === max);\n  const naf = new Array(max);\n  const bits = k.bitLength() + 1;\n  const sign = k.sign() | 1;\n  assert(bits <= max);\n\n  for (let i = 0; i < max; i++) naf[i] = 0;\n\n  let i = 0;\n  let carry = 0;\n  let word;\n\n  while (i < bits) {\n    if (k.bit(i) === carry) {\n      i += 1;\n      continue;\n    }\n\n    word = k.bits(i, width) + carry;\n    carry = word >> width - 1 & 1;\n    word -= carry << width;\n    naf[i] = sign * word;\n    i += width;\n  }\n\n  assert(carry === 0);\n  return naf;\n}\n\nfunction getFixedNAF(k, width, max, step) {\n  assert(step >>> 0 === step); // Recode to NAF.\n\n  const naf = getNAF(k, width, max); // Translate into more windowed form.\n\n  const len = Math.ceil(naf.length / step);\n  const repr = new Array(len);\n  let i = 0;\n\n  for (let j = 0; j < naf.length; j += step) {\n    let nafW = 0;\n\n    for (let k = j + step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];\n\n    repr[i++] = nafW;\n  }\n\n  assert(i === len);\n  return repr;\n}\n\nfunction getJSF(k1, k2, max) {\n  // Joint sparse form.\n  //\n  // [GECC] Algorithm 3.50, Page 111, Section 3.3.\n  assert(k1 instanceof BN);\n  assert(k2 instanceof BN);\n  assert(!k1.red);\n  assert(!k2.red);\n  assert(max >>> 0 === max);\n  const jsf = [new Array(max), new Array(max)];\n  const bits = Math.max(k1.bitLength(), k2.bitLength()) + 1;\n  const s1 = k1.sign() | 1;\n  const s2 = k2.sign() | 1;\n  assert(bits <= max);\n  let d1 = 0;\n  let d2 = 0;\n\n  for (let i = 0; i < bits; i++) {\n    const b1 = k1.bits(i, 3);\n    const b2 = k2.bits(i, 3); // First phase.\n\n    let m14 = (b1 & 3) + d1 & 3;\n    let m24 = (b2 & 3) + d2 & 3;\n    let u1 = 0;\n    let u2 = 0;\n    if (m14 === 3) m14 = -1;\n    if (m24 === 3) m24 = -1;\n\n    if (m14 & 1) {\n      const m8 = (b1 & 7) + d1 & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n    }\n\n    if (m24 & 1) {\n      const m8 = (b2 & 7) + d2 & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n    }\n\n    jsf[0][i] = u1 * s1;\n    jsf[1][i] = u2 * s2; // Second phase.\n\n    if (2 * d1 === u1 + 1) d1 = 1 - d1;\n    if (2 * d2 === u2 + 1) d2 = 1 - d2;\n  }\n\n  for (let i = bits; i < max; i++) {\n    jsf[0][i] = 0;\n    jsf[1][i] = 0;\n  }\n\n  return jsf;\n}\n\nfunction getJNAF(c1, c2, max) {\n  const jsf = getJSF(c1, c2, max);\n  const naf = new Array(max); // JSF -> NAF conversion.\n\n  for (let i = 0; i < max; i++) {\n    const ja = jsf[0][i];\n    const jb = jsf[1][i];\n    naf[i] = jsfIndex[(ja + 1) * 3 + (jb + 1)];\n  }\n\n  return naf;\n}\n\nfunction getLadderBits(k, n) {\n  // [TIMING] Page 16, Section 6.\n  assert(k instanceof BN);\n  assert(n instanceof BN); // Ensure positive.\n\n  const k0 = k.abs(); // Inflate scalar.\n\n  const k1 = k0.add(n);\n  const k2 = k1.add(n); // Get bit lengths.\n\n  const kb = k1.bitLength();\n  const nb = n.bitLength(); // k' = k + 2 * n, if ceil(log2(k + n)) <= ceil(log2(n)),\n  //    = k + n, otherwise\n\n  k1.cinject(k2, kb - nb - 1 >>> 31); // Track sign.\n\n  const sign = k.isNeg() & 1; // Calculate the new scalar's length.\n\n  const bits = k1.bitLength(); // Recode scalar to base256.\n\n  const exp = k1.toArray('le');\n  return [sign, bits, exp];\n}\n\nfunction getCOZBits(k, n) {\n  assert(k instanceof BN);\n  assert(n instanceof BN); // Reduce.\n\n  const u = k.mod(n); // Negate scalar.\n\n  const v = n.sub(u); // Get bit lengths.\n\n  const ub = u.bitLength();\n  const vb = v.bitLength(); // Negate if ceil(log2(k)) < ceil(log2(-k)).\n\n  const sign = ub - vb >>> 31; // Possibly negate.\n\n  u.cinject(v, sign); // Calculate the new scalar's length.\n\n  const bits = u.bitLength(); // Recode scalar to base256.\n\n  const exp = u.toArray('le'); // Final edge case.\n\n  const m1 = u.ceq(n.subn(1));\n  return [sign, bits, exp, m1];\n}\n/*\n * Helpers\n */\n\n\nfunction assert(val, msg) {\n  if (!val) {\n    const err = new Error(msg || 'Assertion failed');\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert);\n    throw err;\n  }\n}\n\nfunction sqrt(a) {\n  assert(a instanceof BN);\n\n  try {\n    return [1, a.redSqrt()];\n  } catch (e) {\n    if (e.message === 'X is not a square mod P.') return [0, a.clone()];\n    throw e;\n  }\n}\n\nfunction divSqrt(u, v) {\n  assert(u instanceof BN);\n  assert(v instanceof BN);\n\n  try {\n    return [1, u.redDivSqrt(v)];\n  } catch (e) {\n    if (e.message === 'Not invertible.' || e.message === 'X is not a square mod P.') {\n      return [0, u.clone()];\n    }\n\n    throw e;\n  }\n}\n\nfunction cubeRoot(x) {\n  assert(x instanceof BN);\n  assert(x.red);\n  const p = x.red.m;\n  if (p.cmpn(3) <= 0) return x.clone(); // p = 2 mod 3\n\n  if (p.modrn(3) === 2) {\n    // e = (2 * p - 1) / 3\n    const e = p.ushln(1).isubn(1).idivn(3);\n    return x.redPow(e);\n  }\n\n  const mod9 = p.modrn(9); // p = 4 mod 9\n\n  if (mod9 === 4) {\n    // e = (2 * p + 1) / 9\n    const e = p.ushln(1).iaddn(1).idivn(9);\n    const r = x.redPow(e);\n    const c = r.redSqr().redMul(r);\n    if (!c.eq(x)) throw new Error('X is not a cube mod P.');\n    return r;\n  } // p = 7 mod 9\n\n\n  if (mod9 === 7) {\n    // e = (p + 2) / 9\n    const e = p.addn(2).idivn(9);\n    const r = x.redPow(e);\n    const c = r.redSqr().redMul(r);\n    if (!c.eq(x)) throw new Error('X is not a cube mod P.');\n    return r;\n  }\n\n  throw new Error('Not implemented.');\n}\n\nfunction cubeRoots(x) {\n  const r0 = cubeRoot(x); // p = 1 mod 3\n\n  if (x.red.m.modrn(3) === 1) {\n    // Multiply by roots of unity to find other roots.\n    const two = new BN(2).toRed(x.red);\n    const three = new BN(3).toRed(x.red);\n    const i2 = two.redInvert();\n    const s1 = three.redNeg().redSqrt().redMul(i2);\n    const s2 = s1.redNeg();\n    const u1 = s1.redSub(i2);\n    const u2 = s2.redSub(i2);\n    const r1 = r0.redMul(u1);\n    const r2 = r0.redMul(u2);\n    return [r0, r1, r2];\n  } // p = 2 mod 3 guarantees 1 cube root per element.\n\n\n  return [r0];\n}\n\nfunction uncube(x) {\n  // Find a cube root which is also a quadratic residue.\n  for (const root of cubeRoots(x)) {\n    if (root.redJacobi() >= 0) return root;\n  }\n\n  throw new Error('X^(1/3) is not a square mod P.');\n}\n\nfunction randomInt(rng) {\n  return BN.randomBits(rng, 32).toNumber();\n}\n\nfunction memoize(method, self) {\n  const cache = new WeakMap();\n  return function memoized(curve, invert) {\n    const i = invert & 1;\n    const item = cache.get(curve);\n    if (item && item[i] !== null) return item[i];\n    const result = method.call(self, curve, invert);\n    if (!cache.has(curve)) cache.set(curve, [null, null]);\n    cache.get(curve)[i] = result;\n    return result;\n  };\n}\n\nfunction toPretty(x, size) {\n  assert(x instanceof BN);\n  assert(size >>> 0 === size);\n  if (size & 7) size += 8 - (size & 7);\n  const str = x.toString(16, size);\n  const chunks = [];\n  const out = [];\n  assert((str.length & 7) === 0);\n\n  for (let i = 0; i < str.length; i += 8) chunks.push(str.slice(i, i + 8));\n\n  for (let i = 0; i < chunks.length; i += 4) out.push(chunks.slice(i, i + 4).join(' '));\n\n  return out;\n}\n/*\n * Expose\n */\n\n\nexports.Curve = Curve;\nexports.Point = Point;\nexports.ShortCurve = ShortCurve;\nexports.ShortPoint = ShortPoint;\nexports.JPoint = JPoint;\nexports.MontCurve = MontCurve;\nexports.MontPoint = MontPoint;\nexports.XPoint = XPoint;\nexports.EdwardsCurve = EdwardsCurve;\nexports.EdwardsPoint = EdwardsPoint;\nexports.curves = curves;\nexports.curve = curve;\nexports.register = register;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/bcrypto/lib/js/elliptic.js"],"names":["custom","require","BN","types","AFFINE","JACOBIAN","PROJECTIVE","EXTENDED","jsfIndex","USE_FIXED","uid","Curve","constructor","Point","type","conf","id","ossl","endian","hash","prefix","context","prime","p","red","fieldSize","fieldBits","adjustedSize","signBit","mask","n","h","q","z","g","nh","scalarSize","scalarBits","zero","one","two","three","four","i2","i3","i4","i6","torsion","endo","hi","_init","assert","Red","Array","isArray","Buffer","from","fromJSON","mont","precompute","byteLength","bitLength","mul","toRed","ushrn","redInvert","redSqr","redMul","word","i","length","point","_scale","memoize","isIsomorphic","isIsogenous","sign","isOdd","cmpn","_finalize","pointFromJSON","_findTorsion","isZero","x","redNeg","out","set","Set","len","redIAdd","pointFromX","clone","e","isInfinity","normalize","neg","key","has","push","add","sort","a","b","cmp","_simpleMul","k","bits","isNeg","acc","jpoint","bit","dbl","_simpleMulAdd","points","coeffs","npoints","ncoeffs","max","coeff","Error","Math","j","_constMul","rng","_coZLadderMul","_ladderMul","exp","getLadderBits","toJ","swap","uadd","udbl","c","m1","getCOZBits","zdblu","zaddc","zaddu","_fixedMul","pre","windows","width","_getWindows","size","steps","_fixedNafMul","doubles","step","_getDoubles","naf","getFixedNAF","I","nafW","sub","_windowMul","wnd","dblp","_slideMul","r","pos","_wnafMul","w","_safeNAF","getNAF","_wnafMulAdd","ppoint","pcoeff","_getNAF","_getJNAF","getJNAF","nafw","_endoWnafMulAdd","curve","invert","eq","_scaleShort","_scaleMont","_scaleEdwards","isElliptic","jinv","isComplete","scalar","num","base","imod","field","cast","forceRed","y","xpoint","cpoint","xx","xz","yy","yz","solveX2","solveX","redSqrt","solveY2","solveY","validate","pointFromY","pointFromShort","pointFromMont","pointFromEdwards","pointFromUniform","u","pointToUniform","pointFromHash","bytes","pake","isBuffer","s1","slice","s2","u1","decodeUniform","u2","p1","p2","p3","mulH","pointToHash","subgroup","p0","randomField","usub","hint","randomInt","message","encodeUniform","concat","randomScalar","random","randomPoint","mulAll","jmulAll","mulAllSimple","jmulAllSimple","imulH","iushln","imuln","clamp","top","lsb","msb","splitHash","off","encodeField","encode","decodeField","decode","encodeAdjusted","decodeAdjusted","encodeScalar","decodeScalar","encodeClamped","decodeClamped","clamped","fromRed","iumaskn","encodePoint","compact","decodePoint","encodeX","decodeX","decodeEven","decodeSquare","toShort","toMont","b0","toEdwards","a0","pointToJSON","toJSON","json","toString","redIsHigh","isub","undefined","d","s","NAF","toP","Windows","power","ceil","Doubles","_getBeta","_getBlinding","blinding","blind","unblind","Blinding","_hasWindows","_hasDoubles","_blind","t","iadd","randomize","flag","Precomp","beta","scale","pow","diffAdd","diffAddDbl","recover","getX","getY","isOrder2","isEven","isSquare","eqX","eqR","isSmall","jmulH","hasTorsion","jmul","order","iaddn","muln","jmuln","mulSimple","jmulSimple","mulBlind","jmulBlind","mulConst","jmulConst","mulAdd","k1","k2","jmulAdd","mulAddSimple","jmulAddSimple","div","jdiv","divn","jdivn","divH","jdivH","ladder","ladderSimple","ladderBlind","ladderConst","toX","ShortCurve","ShortPoint","ai","zi","zeroA","threeA","redN","pmodn","highOrder","smallGap","Endo","_getEndomorphism","mod","_isomorphism","curveA","curveB","odd","customB","u6","redDiv","uncube","redJacobi","customA","u4","redINeg","redIsOdd","_short","_mont","_findRS","redMuln","MontCurve","_edwards","r3","redAdd","redSub","EdwardsCurve","r2","_scale0","u3","_scale1","nx","a3","bi","ny","a5","d5","dma","d5a","da5","ypz","ymz","redIMuln","index","modrn","b1","b2","_getEndoRoots","l1","l2","lambda","basis","_getEndoBasis","_getEndoPrecomp","r1","rl","tl","rl1","tl1","rl2","tl2","_egcdSqrt","a1","lhs","sqr","rhs","a2","Vector","sqrtn","v","x1","y1","x2","y2","quo","v1","v2","shift","g1","divRound","g2","_endoSplit","c1","c2","q1","ineg","q2","_endoBeta","_icart","u0","i27","ushln","isubn","idivn","cinject","czero","u6i","redFermat","redISub","u6d27","u2d3","redPow","_sswu","subn","z2","ba","bza","t1","alpha","redIsSquare","_sswui","a2x2","abx2","b23","axb","s0","sqrt","n0","n1","d0","d1","divSqrt","_svdwf","gz","z3","t2","t3","t4","x3","y3","_svdw","_svdwi","z4","gz2","x2z","xz2","c0","t0","t5","n2","n3","x0","s3","ceq","inf","JPoint","cubeRoots","coords","ad6","MontPoint","EdwardsPoint","xb","map","comb","cond","inf1","inf2","cswap","l","m","degenerate","negated","z1","zz","zzz","f","nz","redIsEven","alloc","copy","form","toPretty","zOne","zOne1","zOne2","z6","aa","_mixedAdd","_add","_addAA","_addJA","_addJJ","z1z1","z2z2","hh","hhh","_dblA","_dbl0","_dbl3","_dblJ","yyyy","xyy2","xb2","delta","gamma","xmdelta","xpdelta","beta4","beta8","gamma28","_dblp","zzzz","redPown","_uadd","ll","inf3","_udbl","x4","y4","zz1","zz2","zzz1","zzz2","rx","rn","a24","b3","wa","wb","redDivSqrt","_solveY0","_elligator2","y0","_invert2","XPoint","by2","nu","nv","uu","uz","vv","vz","m2","double","ax2","bb","da","cb","x5","z5","toArray","si","smi","twisted","oneA","mOneA","smallD","alt","curveD","d2","d3","ad14","a2d","ad2","redDivn","apd","amd","_mulA","_mulD","_elligator1","ci","ci2","cm1","e0","e1","iushrn","e2","addn","u5","f0","f1","f2","X","Y","X1","rX","X12","_invert1","nn","nr1","w2","YY","X2","Z","tt","tz","_alt","ad","amd4","dxy","xy","d24","x6","x12","nt","_check","_addM1","_addA","xyxy","_dbl","setn","testn","func","item","P192","P224","P256","P384","P521","SECP256K1","BRAINPOOLP256","BRAINPOOLP384","BRAINPOOLP512","X25519","X448","MONT448","ED25519","ISO448","ED448","curves","__proto__","cache","name","args","toUpperCase","register","carry","repr","getJSF","jsf","m14","m24","m8","ja","jb","k0","abs","kb","nb","ub","vb","val","msg","err","captureStackTrace","cubeRoot","mod9","r0","root","randomBits","toNumber","method","self","WeakMap","memoized","get","result","call","str","chunks","join","exports"],"mappings":"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","sourcesContent":["/*!\n * elliptic.js - elliptic curves for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/elliptic:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/elliptic\n *\n * Formulas from DJB and Tanja Lange [EFD].\n *\n * References:\n *\n *   [GECC] Guide to Elliptic Curve Cryptography\n *     D. Hankerson, A. Menezes, and S. Vanstone\n *     https://tinyurl.com/guide-to-ecc\n *\n *   [GLV] Faster Point Multiplication on Elliptic Curves\n *     R. Gallant, R. Lambert, and S. Vanstone\n *     https://link.springer.com/content/pdf/10.1007/3-540-44647-8_11.pdf\n *\n *   [MONT1] Montgomery curves and the Montgomery ladder\n *     Daniel J. Bernstein, Tanja Lange\n *     https://eprint.iacr.org/2017/293.pdf\n *\n *   [COZ] Scalar Multiplication on Elliptic Curves from Co-Z Arithmetic\n *     R. Goundar, M. Joye, A. Miyaji, M. Rivain, A. Venelli\n *     https://www.matthieurivain.com/files/jcen11b.pdf\n *\n *   [SQUARED] Elligator Squared\n *     Mehdi Tibouchi\n *     https://eprint.iacr.org/2014/043.pdf\n *\n *   [SEC1] SEC 1 - Standards for Efficient Cryptography Group\n *     Certicom Research\n *     https://www.secg.org/sec1-v2.pdf\n *\n *   [SEC2] SEC 2: Recommended Elliptic Curve Domain Parameters\n *     Certicom Research\n *     https://www.secg.org/sec2-v2.pdf\n *\n *   [SIDE1] Elliptic Curves and Side-Channel Attacks\n *     Marc Joye\n *     https://pdfs.semanticscholar.org/8d69/9645033e25d74fcfd4cbf07a770d2e943e14.pdf\n *\n *   [BLIND] Side-Channel Analysis on Blinding Regular Scalar Multiplications\n *     B. Feix, M. Roussellet, A. Venelli\n *     https://eprint.iacr.org/2014/191.pdf\n *\n *   [ALT] Alternative Elliptic Curve Representations\n *     R. Struik\n *     https://tools.ietf.org/id/draft-ietf-lwig-curve-representations-02.html\n *\n *   [ARITH1] Arithmetic of Elliptic Curves\n *     Christophe Doche, Tanja Lange\n *     Handbook of Elliptic and Hyperelliptic Curve Cryptography\n *     Page 267, Section 13 (978-1-58488-518-4)\n *     https://hyperelliptic.org/HEHCC/index.html\n *\n *   [ARITH2] The Arithmetic of Elliptic Curves, 2nd Edition\n *     Joseph H. Silverman\n *     http://www.pdmi.ras.ru/~lowdimma/BSD/Silverman-Arithmetic_of_EC.pdf\n *\n *   [EFD] Explicit-Formulas Database\n *     Daniel J. Bernstein, Tanja Lange\n *     https://hyperelliptic.org/EFD/index.html\n *\n *   [SAFE] SafeCurves: choosing safe curves for elliptic-curve cryptography\n *     Daniel J. Bernstein\n *     https://safecurves.cr.yp.to/\n *\n *   [4GLV] Refinement of the Four-Dimensional GLV Method on Elliptic Curves\n *     Hairong Yi, Yuqing Zhu, and Dongdai Lin\n *     http://www.site.uottawa.ca/~cadams/papers/prepro/paper_19_slides.pdf\n *\n *   [ICART] How to Hash into Elliptic Curves\n *     Thomas Icart\n *     https://eprint.iacr.org/2009/226.pdf\n *\n *   [SSWU1] Efficient Indifferentiable Hashing into Ordinary Elliptic Curves\n *     E. Brier, J. Coron, T. Icart, D. Madore, H. Randriam, M. Tibouchi\n *     https://eprint.iacr.org/2009/340.pdf\n *\n *   [SSWU2] Rational points on certain hyperelliptic curves over finite fields\n *     Maciej Ulas\n *     https://arxiv.org/abs/0706.1448\n *\n *   [H2EC] Hashing to Elliptic Curves\n *     A. Faz-Hernandez, S. Scott, N. Sullivan, R. S. Wahby, C. A. Wood\n *     https://git.io/JeWz6\n *     https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve\n *\n *   [SVDW1] Construction of Rational Points on Elliptic Curves\n *     A. Shallue, C. E. van de Woestijne\n *     https://works.bepress.com/andrew_shallue/1/download/\n *\n *   [SVDW2] Indifferentiable Hashing to Barreto-Naehrig Curves\n *     Pierre-Alain Fouque, Mehdi Tibouchi\n *     https://www.di.ens.fr/~fouque/pub/latincrypt12.pdf\n *\n *   [SVDW3] Covert ECDH over secp256k1\n *     Pieter Wuille\n *     https://gist.github.com/sipa/29118d3fcfac69f9930d57433316c039\n *\n *   [MONT2] Montgomery Curve (wikipedia)\n *     https://en.wikipedia.org/wiki/Montgomery_curve\n *\n *   [SIDE2] Weierstrass Elliptic Curves and Side-Channel Attacks\n *     Eric Brier, Marc Joye\n *     http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.2.273&rep=rep1&type=pdf\n *\n *   [SIDE3] Unified Point Addition Formulae and Side-Channel Attacks\n *     Douglas Stebila, Nicolas Theriault\n *     https://eprint.iacr.org/2005/419.pdf\n *\n *   [MONT3] Montgomery Curves and their arithmetic\n *     C. Costello, B. Smith\n *     https://eprint.iacr.org/2017/212.pdf\n *\n *   [ELL2] Elliptic-curve points indistinguishable from uniform random strings\n *     D. Bernstein, M. Hamburg, A. Krasnova, T. Lange\n *     https://elligator.cr.yp.to/elligator-20130828.pdf\n *\n *   [RFC7748] Elliptic Curves for Security\n *     A. Langley, M. Hamburg, S. Turner\n *     https://tools.ietf.org/html/rfc7748\n *\n *   [TWISTED] Twisted Edwards Curves\n *     D. Bernstein, P. Birkner, M. Joye, T. Lange, C. Peters\n *     https://eprint.iacr.org/2008/013.pdf\n *\n *   [ELL1] Injective Encodings to Elliptic Curves\n *     P. Fouque, A. Joux, M. Tibouchi\n *     https://eprint.iacr.org/2013/373.pdf\n *\n *   [ISOGENY] Twisting Edwards curves with isogenies\n *     Mike Hamburg\n *     https://www.shiftleft.org/papers/isogeny/isogeny.pdf\n *\n *   [RFC8032] Edwards-Curve Digital Signature Algorithm (EdDSA)\n *     S. Josefsson, SJD AB, I. Liusvaara\n *     https://tools.ietf.org/html/rfc8032\n *\n *   [TIMING] Remote Timing Attacks are Still Practical\n *     B. Brumley, N. Tuveri\n *     https://eprint.iacr.org/2011/232.pdf\n *\n *   [SCHNORR] Schnorr Signatures for secp256k1\n *     Pieter Wuille\n *     https://github.com/sipa/bips/blob/d194620/bip-schnorr.mediawiki\n *\n *   [BIP340] Schnorr Signatures for secp256k1\n *     Pieter Wuille, Jonas Nick, Tim Ruffing\n *     https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n *\n *   [JCEN12] Efficient Software Implementation of Public-Key Cryptography\n *            on Sensor Networks Using the MSP430X Microcontroller\n *     C. P. L. Gouvea, L. B. Oliveira, J. Lopez\n *     http://conradoplg.cryptoland.net/files/2010/12/jcen12.pdf\n *\n *   [FIPS186] Federal Information Processing Standards Publication\n *     National Institute of Standards and Technology\n *     https://tinyurl.com/fips-186-3\n *\n *   [RFC5639] Elliptic Curve Cryptography (ECC) Brainpool\n *             Standard Curves and Curve Generation\n *     M. Lochter, BSI, J. Merkle\n *     https://tools.ietf.org/html/rfc5639\n *\n *   [TWISTEQ] Twisted Edwards & Short Weierstrass Equivalence\n *     Christopher Jeffrey\n *     https://gist.github.com/chjj/16ba7fa08d64e8dda269a9fe5b2a8bbc\n *\n *   [ECPM] Elliptic Curve Point Multiplication (wikipedia)\n *     https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication\n */\n\n'use strict';\n\nconst {custom} = require('../internal/custom');\nconst BN = require('../bn');\n\n/*\n * Constants\n */\n\nconst types = {\n  AFFINE: 0,\n  JACOBIAN: 1,\n  PROJECTIVE: 2,\n  EXTENDED: 3\n};\n\nconst jsfIndex = [\n  -3, // -1 -1\n  -1, // -1 0\n  -5, // -1 1\n  -7, // 0 -1\n  0, // 0 0\n  7, // 0 1\n  5, // 1 -1\n  1, // 1 0\n  3  // 1 1\n];\n\nconst USE_FIXED = false;\n\nlet uid = 0;\n\n/**\n * Curve\n */\n\nclass Curve {\n  constructor(Point, type, conf) {\n    this.Point = null;\n    this.id = null;\n    this.uid = uid++;\n    this.ossl = null;\n    this.type = 'base';\n    this.endian = 'be';\n    this.hash = null;\n    this.prefix = null;\n    this.context = false;\n    this.prime = null;\n    this.p = null;\n    this.red = null;\n    this.fieldSize = 0;\n    this.fieldBits = 0;\n    this.adjustedSize = 0;\n    this.signBit = 0;\n    this.mask = 0;\n    this.n = null;\n    this.h = null;\n    this.q = null;\n    this.z = null;\n    this.g = null;\n    this.nh = null;\n    this.scalarSize = 0;\n    this.scalarBits = 0;\n    this.zero = null;\n    this.one = null;\n    this.two = null;\n    this.three = null;\n    this.four = null;\n    this.i2 = null;\n    this.i3 = null;\n    this.i4 = null;\n    this.i6 = null;\n    this.torsion = null;\n    this.endo = null;\n    this.hi = null;\n    this._init(Point, type, conf);\n  }\n\n  _init(Point, type, conf) {\n    assert(typeof Point === 'function');\n    assert(typeof type === 'string');\n    assert(conf && typeof conf === 'object');\n    assert(conf.red == null || (conf.red instanceof BN.Red));\n    assert(conf.p != null, 'Must pass a prime.');\n    assert(conf.id == null || typeof conf.id === 'string');\n    assert(conf.ossl == null || typeof conf.ossl === 'string');\n    assert(conf.endian == null || typeof conf.endian === 'string');\n    assert(conf.hash == null || typeof conf.hash === 'string');\n    assert(conf.prefix == null || typeof conf.prefix === 'string');\n    assert(conf.context == null || typeof conf.context === 'boolean');\n    assert(conf.prime == null || typeof conf.prime === 'string');\n    assert(conf.torsion == null || Array.isArray(conf.torsion));\n\n    // Point class.\n    this.Point = Point;\n\n    // Meta.\n    this.id = conf.id || null;\n    this.ossl = conf.ossl || null;\n    this.type = type;\n    this.endian = conf.endian || (type === 'short' ? 'be' : 'le');\n    this.hash = conf.hash || null;\n    this.prefix = conf.prefix ? Buffer.from(conf.prefix, 'binary') : null;\n    this.context = conf.context || false;\n    this.prime = conf.prime || null;\n\n    // Prime.\n    this.p = BN.fromJSON(conf.p);\n\n    // Reduction.\n    if (conf.red) {\n      this.red = conf.red;\n    } else {\n      // Use Montgomery when there is no fast reduction for the prime.\n      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n      this.red.precompute();\n    }\n\n    // Precalculate encoding length.\n    this.fieldSize = this.p.byteLength();\n    this.fieldBits = this.p.bitLength();\n    this.adjustedSize = this.fieldSize + ((this.fieldBits & 7) === 0);\n    this.signBit = this.adjustedSize * 8 - 1;\n    this.mask = 0xff;\n\n    if ((this.fieldBits & 7) !== 0)\n      this.mask = (1 << (this.fieldBits & 7)) - 1;\n\n    // Curve configuration, optional.\n    this.n = BN.fromJSON(conf.n || '0');\n    this.h = BN.fromJSON(conf.h || '1');\n    this.q = this.n.mul(this.h);\n    this.z = BN.fromJSON(conf.z || '0').toRed(this.red);\n    this.g = null;\n    this.nh = this.n.ushrn(1);\n    this.scalarSize = this.n.byteLength();\n    this.scalarBits = this.n.bitLength();\n\n    // Useful for many curves.\n    this.zero = new BN(0).toRed(this.red);\n    this.one = new BN(1).toRed(this.red);\n    this.two = new BN(2).toRed(this.red);\n    this.three = new BN(3).toRed(this.red);\n    this.four = new BN(4).toRed(this.red);\n\n    // Inverses.\n    this.i2 = this.two.redInvert();\n    this.i3 = this.three.redInvert();\n    this.i4 = this.i2.redSqr();\n    this.i6 = this.i2.redMul(this.i3);\n\n    // Torsion.\n    this.torsion = new Array(this.h.word(0));\n\n    for (let i = 0; i < this.torsion.length; i++)\n      this.torsion[i] = this.point();\n\n    // Endomorphism.\n    this.endo = null;\n\n    // Cache.\n    this.hi = null;\n\n    // Memoize.\n    this._scale = memoize(this._scale, this);\n    this.isIsomorphic = memoize(this.isIsomorphic, this);\n    this.isIsogenous = memoize(this.isIsogenous, this);\n\n    // Sanity checks.\n    assert(this.p.sign() > 0 && this.p.isOdd());\n    assert(this.n.sign() >= 0);\n    assert(this.h.sign() > 0 && this.h.cmpn(255) <= 0);\n    assert(this.endian === 'be' || this.endian === 'le');\n\n    return this;\n  }\n\n  _finalize(conf) {\n    assert(conf && typeof conf === 'object');\n\n    // Create base point.\n    this.g = conf.g ? this.pointFromJSON(conf.g) : this.point();\n\n    // Parse small order points.\n    if (conf.torsion) {\n      assert(conf.torsion.length === this.torsion.length);\n\n      for (let i = 0; i < this.torsion.length; i++)\n        this.torsion[i] = this.pointFromJSON(conf.torsion[i]);\n    }\n\n    return this;\n  }\n\n  _findTorsion() {\n    // Find all torsion points by grinding.\n    assert(!this.n.isZero());\n\n    const h = this.h.word(0);\n    const x = this.one.redNeg();\n    const out = [this.point()];\n    const set = new Set();\n\n    let len = h;\n\n    while (out.length < len) {\n      let p;\n\n      x.redIAdd(this.one);\n\n      try {\n        p = this.pointFromX(x.clone());\n      } catch (e) {\n        continue;\n      }\n\n      try {\n        p = p.mul(this.n);\n      } catch (e) {\n        len = 2;\n        continue;\n      }\n\n      if (p.isInfinity())\n        continue;\n\n      p.normalize();\n\n      for (const point of [p, p.neg()]) {\n        const key = point.key();\n\n        if (!set.has(key)) {\n          out.push(point);\n          set.add(key);\n        }\n      }\n    }\n\n    out.sort((a, b) => a.cmp(b));\n\n    while (out.length < h)\n      out.push(this.point());\n\n    return out;\n  }\n\n  _simpleMul(p, k) {\n    // Left-to-right point multiplication.\n    //\n    // [GECC] Algorithm 3.27, Page 97, Section 3.3.\n    //        Algorithm 3.26, Page 96, Section 3.3.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    // We prefer left-to-right since it\n    // allows us to repeatedly add an\n    // affine point to the accumulator.\n    const bits = k.bitLength();\n\n    // Flip sign if necessary.\n    if (k.isNeg())\n      p = p.neg();\n\n    // Multiply.\n    let acc = this.jpoint();\n\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = k.bit(i);\n\n      acc = acc.dbl();\n\n      if (bit === 1)\n        acc = acc.add(p);\n    }\n\n    return acc;\n  }\n\n  _simpleMulAdd(points, coeffs) {\n    // Multiple point multiplication, also known\n    // as \"Shamir's trick\".\n    //\n    // [GECC] Algorithm 3.48, Page 109, Section 3.3.3.\n    assert(Array.isArray(points));\n    assert(Array.isArray(coeffs));\n    assert(points.length === coeffs.length);\n\n    const len = points.length;\n    const npoints = new Array(len);\n    const ncoeffs = coeffs;\n\n    // Check arrays and calculate size.\n    let max = 0;\n\n    for (let i = 0; i < len; i++) {\n      const point = points[i];\n      const coeff = coeffs[i];\n\n      assert(point instanceof Point);\n      assert(coeff instanceof BN);\n      assert(!coeff.red);\n\n      if (i > 0 && point.type !== points[i - 1].type)\n        throw new Error('Cannot mix points.');\n\n      // Flip signs if necessary.\n      npoints[i] = coeff.isNeg() ? point.neg() : point;\n\n      // Compute max scalar size.\n      max = Math.max(max, coeff.bitLength());\n    }\n\n    // Multiply and add.\n    let acc = this.jpoint();\n\n    for (let i = max - 1; i >= 0; i--) {\n      acc = acc.dbl();\n\n      for (let j = 0; j < len; j++) {\n        const point = npoints[j];\n        const coeff = ncoeffs[j];\n        const bit = coeff.bit(i);\n\n        if (bit === 1)\n          acc = acc.add(point);\n      }\n    }\n\n    return acc;\n  }\n\n  _constMul(p, k, rng) {\n    assert(p instanceof Point);\n\n    // Must have order.\n    if (this.n.isZero())\n      return this._simpleMul(p, k);\n\n    // Use Co-Z arithmetic for Weierstrass (h=1).\n    if (this.type === 'short' && this.h.cmpn(1) === 0)\n      return this._coZLadderMul(p, k);\n\n    // Otherwise, a regular ladder.\n    return this._ladderMul(p, k);\n  }\n\n  _ladderMul(p, k) {\n    // Generalized Montgomery Ladder.\n    //\n    // [MONT1] Page 24, Section 4.6.2.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    // Curve must expose some form of unified\n    // addition (this is easier said than done\n    // for Weierstrass curves). This ensures\n    // both branches of the ladder consume\n    // the same power and number of cycles.\n    //\n    // We implement the ladder as a branchless\n    // function with a constant time swap.\n    //\n    // Current cost:\n    //\n    //   N * (14M + 14S + 11A + 2*a + 1*8 + 3*4 + 2*3 + 4*2)\n    //\n    //   N=256 => 3584M + 3584S + 2816A + 512*a\n    //          + 256*8 + 768*4 + 512*3 + 1024*2\n    const [sign, bits, exp] = getLadderBits(k, this.q);\n\n    // Clone points (for safe swapping).\n    let a = p.toJ().clone();\n    let b = this.jpoint().clone();\n    let swap = 0;\n\n    // Climb the ladder.\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = (exp[i >> 3] >> (i & 7)) & 1;\n\n      // Maybe swap.\n      a.swap(b, swap ^ bit);\n\n      // Unified addition.\n      a = a.uadd(b);\n      b = b.udbl();\n\n      swap = bit;\n    }\n\n    // Finalize loop.\n    a.swap(b, swap);\n\n    // Flip sign retroactively.\n    b.swap(b.neg(), sign);\n\n    return b;\n  }\n\n  _coZLadderMul(p, k) {\n    // Co-Z Montgomery Ladder.\n    //\n    // [COZ] Algorithm 9, Page 6, Section 4.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    // Multiply with Co-Z arithmetic. This method is\n    // 2x faster than our regular unified addition\n    // ladder. However, there are some problems with\n    // leakage of the scalar length.\n    //\n    // There are three issues with this algorithm:\n    //\n    //   1. The amount of steps in the ladder is not\n    //      constant, since we must assume k[n-1]=1\n    //      (it follows that k[n]=0). A side effect\n    //      of this is that we cannot handle a point\n    //      at infinity (k[n-1]=0).\n    //\n    //   2. On the off chance we pass in a \"low\"\n    //      scalar (lacking several hi bits), there\n    //      will be a noticeable difference in cycles.\n    //\n    //   3. The algorithm cannot handle k = -1 mod n.\n    //      It will overflow to infinity.\n    //\n    // To avoid two of these issues, we _negate_ the\n    // scalar in the event that bits(k) < bits(-k). If\n    // we do end up negating a scalar, we negate the\n    // resulting point in constant time at the end.\n    //\n    // Doing this not only solves the point at infinity\n    // issue (i.e. N-0=N=0), but it also ensures a scalar\n    // is within at least 1 bit of the order (usually).\n    //\n    // The final edge case can be solved with a\n    // comparison and subsequent constant-time swap at\n    // the end.\n    //\n    // Note that our scalar recoding here disallows\n    // the possibility of curves with a cofactor > 1.\n    //\n    // A possibility for a perf improvement involves\n    // using the ZACAU method. This is faster assuming\n    // a cost of 1S < 1M, but our squaring impl. is\n    // identical to our multiplication impl., so we\n    // wouldn't get any real benefit.\n    //\n    // Current cost:\n    //\n    //   1M + 5S + 8A + 4*2 + 1*8\n    //   N * (11M + 3S + 21A + 1*2)\n    //\n    //   N=256 => 2817M + 773S + 5384A + 256*2 + 4*2 + 1*8\n    const c = p.toJ().clone();\n    const [sign, bits, exp, m1] = getCOZBits(k, this.n);\n\n    // Initial double (we assume k[n-1] == 1).\n    let [a, b] = c.zdblu();\n    let swap = 0;\n\n    // Climb the ladder.\n    for (let i = bits - 2; i >= 0; i--) {\n      const bit = (exp[i >> 3] >> (i & 7)) & 1;\n\n      // Maybe swap.\n      a.swap(b, swap ^ bit);\n\n      // Co-Z addition.\n      [a, b] = b.zaddc(a);\n      [b, a] = a.zaddu(b);\n\n      swap = bit;\n    }\n\n    // Finalize loop.\n    a.swap(b, swap);\n\n    // Final edge case.\n    b.swap(c.neg(), m1);\n\n    // Adjust sign.\n    b.swap(b.neg(), sign);\n\n    return b;\n  }\n\n  _fixedMul(p, k) {\n    // Fixed-base method for point multiplication.\n    //\n    // [ECPM] \"Windowed method\".\n    // [GECC] Page 95, Section 3.3.\n    //\n    // Windows are appropriately shifted to avoid any\n    // doublings. This reduces a 256 bit multiplication\n    // down to 64 additions with a window size of 4.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(p.pre && p.pre.windows);\n\n    // Get precomputed windows.\n    const {width, bits, points} = p._getWindows(0, 0);\n\n    // Recompute window size.\n    const size = 1 << width;\n\n    // Recompute steps.\n    const steps = ((bits + width - 1) / width) >>> 0;\n\n    // Multiply.\n    let acc = this.jpoint();\n\n    for (let i = 0; i < steps; i++) {\n      const bits = k.bits(i * width, width);\n\n      acc = acc.add(points[i * size + bits]);\n    }\n\n    // Adjust sign.\n    if (k.isNeg())\n      acc = acc.neg();\n\n    return acc;\n  }\n\n  _fixedNafMul(p, k) {\n    // Fixed-base NAF windowing method for point multiplication.\n    //\n    // [GECC] Algorithm 3.42, Page 105, Section 3.3.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n    assert(p.pre && p.pre.doubles);\n\n    // Get precomputed doubles.\n    const {step, points} = p._getDoubles(0, 0);\n\n    // Get fixed NAF (in a more windowed form).\n    const naf = getFixedNAF(k, 2, k.bitLength() + 1, step);\n\n    // Compute steps.\n    const I = ((1 << (step + 1)) - (step % 2 === 0 ? 2 : 1)) / 3;\n\n    // Multiply.\n    let a = this.jpoint();\n    let b = this.jpoint();\n\n    for (let i = I; i > 0; i--) {\n      for (let j = 0; j < naf.length; j++) {\n        const nafW = naf[j];\n\n        if (nafW === i)\n          b = b.add(points[j]);\n        else if (nafW === -i)\n          b = b.sub(points[j]);\n      }\n\n      a = a.add(b);\n    }\n\n    return a;\n  }\n\n  _windowMul(width, p, k) {\n    // Windowed method for point multiplication.\n    //\n    // [ECPM] \"Windowed method\".\n    // [GECC] Page 95, Section 3.3.\n    assert((width >>> 0) === width);\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n\n    const size = 1 << width;\n    const bits = Math.max(k.bitLength(), this.n.bitLength());\n    const steps = ((bits + width - 1) / width) >>> 0;\n    const wnd = new Array(size);\n    const point = p.toJ();\n\n    // Precompute.\n    wnd[0] = this.jpoint();\n    wnd[1] = point;\n\n    for (let i = 2; i < size; i += 2) {\n      wnd[i + 0] = wnd[i >> 1].dbl();\n      wnd[i + 1] = wnd[i].add(point);\n    }\n\n    // Multiply.\n    let acc = this.jpoint();\n\n    for (let i = steps - 1; i >= 0; i--) {\n      const bits = k.bits(i * width, width);\n\n      if (i === steps - 1) {\n        acc = wnd[bits];\n      } else {\n        acc = acc.dblp(width);\n        acc = acc.add(wnd[bits]);\n      }\n    }\n\n    // Adjust sign.\n    if (k.isNeg())\n      acc = acc.neg();\n\n    return acc;\n  }\n\n  _slideMul(width, p, k) {\n    // Sliding window method for point multiplication.\n    //\n    // [ECPM] \"Sliding-window method\".\n    // [GECC] Algorithm 3.38, Page 101, Section 3.3.\n    assert((width >>> 0) === width);\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n\n    const size = 1 << (width - 1);\n    const wnd = new Array(size);\n    const point = p.toJ();\n\n    // Precompute.\n    wnd[0] = point.dblp(width - 1);\n\n    for (let i = 1; i < size; i++)\n      wnd[i] = wnd[i - 1].add(point);\n\n    // Multiply.\n    let i = k.bitLength();\n    let r = this.jpoint();\n\n    while (i >= width) {\n      const pos = i - width;\n      const bits = k.bits(pos, width);\n\n      if (bits < size) {\n        r = r.dbl();\n        i -= 1;\n        continue;\n      }\n\n      r = r.dblp(width);\n      r = r.add(wnd[bits & ~size]);\n      i = pos;\n    }\n\n    // Finish.\n    if (i > 0) {\n      const bits = k.bits(0, i);\n\n      while (i--) {\n        r = r.dbl();\n\n        if ((bits >> i) & 1)\n          r = r.add(p);\n      }\n    }\n\n    // Adjust sign.\n    if (k.isNeg())\n      r = r.neg();\n\n    return r;\n  }\n\n  _wnafMul(w, p, k) {\n    // Window NAF method for point multiplication.\n    //\n    // [GECC] Algorithm 3.36, Page 100, Section 3.3.\n    assert(p instanceof Point);\n    assert(k instanceof BN);\n\n    // Precompute window.\n    const {width, points} = p._safeNAF(w);\n\n    // Get NAF form.\n    const naf = getNAF(k, width, k.bitLength() + 1);\n\n    // Add `this`*(N+1) for every w-NAF index.\n    let acc = this.jpoint();\n\n    for (let i = naf.length - 1; i >= 0; i--) {\n      const z = naf[i];\n\n      if (i !== naf.length - 1)\n        acc = acc.dbl();\n\n      if (z > 0)\n        acc = acc.add(points[(z - 1) >> 1]);\n      else if (z < 0)\n        acc = acc.sub(points[(-z - 1) >> 1]);\n    }\n\n    return acc;\n  }\n\n  _wnafMulAdd(w, points, coeffs) {\n    // Multiple point multiplication, also known\n    // as \"Shamir's trick\" (with interleaved NAFs).\n    //\n    // [GECC] Algorithm 3.48, Page 109, Section 3.3.3.\n    //        Algorithm 3.51, Page 112, Section 3.3.\n    //\n    // This is particularly useful for signature\n    // verifications and mutiplications after an\n    // endomorphism split.\n    assert((w >>> 0) === w);\n    assert(Array.isArray(points));\n    assert(Array.isArray(coeffs));\n    assert(points.length === coeffs.length);\n\n    const length = points.length;\n    const wnd = new Array(length);\n    const naf = new Array(length);\n\n    // Check arrays and calculate size.\n    let max = 0;\n\n    for (let i = 0; i < length; i++) {\n      const point = points[i];\n      const coeff = coeffs[i];\n\n      assert(point instanceof Point);\n      assert(coeff instanceof BN);\n\n      if (i > 0 && point.type !== points[i - 1].type)\n        throw new Error('Cannot mix points.');\n\n      // Avoid sparse arrays.\n      wnd[i] = null;\n      naf[i] = null;\n\n      // Compute max scalar size.\n      max = Math.max(max, coeff.bitLength() + 1);\n    }\n\n    // Compute NAFs.\n    let ppoint = null;\n    let pcoeff = null;\n    let len = 0;\n\n    for (let i = 0; i < length; i++) {\n      const point = points[i];\n      const coeff = coeffs[i];\n      const pre = point._getNAF(0);\n\n      // Use precomputation if available.\n      if (pre) {\n        wnd[len] = pre.points;\n        naf[len] = getNAF(coeff, pre.width, max);\n        len += 1;\n        continue;\n      }\n\n      // Save last non-precomputed point.\n      if (!ppoint) {\n        ppoint = point;\n        pcoeff = coeff;\n        continue;\n      }\n\n      // Compute JSF in NAF form.\n      wnd[len] = ppoint._getJNAF(point);\n      naf[len] = getJNAF(pcoeff, coeff, max);\n\n      ppoint = null;\n      pcoeff = null;\n\n      len += 1;\n    }\n\n    // Regular NAF for odd points.\n    if (ppoint) {\n      const nafw = ppoint._safeNAF(w);\n\n      wnd[len] = nafw.points;\n      naf[len] = getNAF(pcoeff, nafw.width, max);\n\n      len += 1;\n    }\n\n    // Multiply and add.\n    let acc = this.jpoint();\n\n    for (let i = max - 1; i >= 0; i--) {\n      if (i !== max - 1)\n        acc = acc.dbl();\n\n      for (let j = 0; j < len; j++) {\n        const z = naf[j][i];\n\n        if (z > 0)\n          acc = acc.add(wnd[j][(z - 1) >> 1]);\n        else if (z < 0)\n          acc = acc.sub(wnd[j][(-z - 1) >> 1]);\n      }\n    }\n\n    return acc;\n  }\n\n  _endoWnafMulAdd(points, coeffs) {\n    throw new Error('Not implemented.');\n  }\n\n  _scale(curve, invert) {\n    assert(curve instanceof Curve);\n    assert(curve.p.eq(this.p));\n\n    switch (curve.type) {\n      case 'short':\n        return this._scaleShort(curve, invert);\n      case 'mont':\n        return this._scaleMont(curve, invert);\n      case 'edwards':\n        return this._scaleEdwards(curve, invert);\n      default:\n        throw new Error('Not implemented.');\n    }\n  }\n\n  _scaleShort(curve, invert) {\n    throw new Error('Not implemented.');\n  }\n\n  _scaleMont(curve, invert) {\n    throw new Error('Not implemented.');\n  }\n\n  _scaleEdwards(curve, invert) {\n    throw new Error('Not implemented.');\n  }\n\n  isElliptic() {\n    throw new Error('Not implemented.');\n  }\n\n  jinv() {\n    throw new Error('Not implemented.');\n  }\n\n  isComplete() {\n    return false;\n  }\n\n  precompute(rng) {\n    assert(!this.g.isInfinity(), 'Must have base point.');\n    assert(!this.n.isZero(), 'Must have order.');\n\n    this.g.precompute(this.n.bitLength(), rng);\n\n    return this;\n  }\n\n  scalar(num, base, endian) {\n    const k = new BN(num, base, endian);\n\n    assert(!k.red);\n\n    if (this.n.isZero())\n      return k;\n\n    return k.imod(this.n);\n  }\n\n  field(num, base, endian) {\n    const x = BN.cast(num, base, endian);\n\n    if (x.red)\n      return x.forceRed(this.red);\n\n    return x.toRed(this.red);\n  }\n\n  point(x, y) {\n    throw new Error('Not implemented.');\n  }\n\n  jpoint(x, y, z) {\n    throw new Error('Not implemented.');\n  }\n\n  xpoint(x, z) {\n    throw new Error('Not implemented.');\n  }\n\n  cpoint(xx, xz, yy, yz) {\n    assert(xx instanceof BN);\n    assert(xz instanceof BN);\n    assert(yy instanceof BN);\n    assert(yz instanceof BN);\n\n    if (xz.isZero() || yz.isZero())\n      return this.point();\n\n    const z = xz.redMul(yz).redInvert();\n    const x = xx.redMul(yz).redMul(z);\n    const y = yy.redMul(xz).redMul(z);\n\n    return this.point(x, y);\n  }\n\n  solveX2(y) {\n    throw new Error('Not implemented.');\n  }\n\n  solveX(y) {\n    return this.solveX2(y).redSqrt();\n  }\n\n  solveY2(x) {\n    throw new Error('Not implemented.');\n  }\n\n  solveY(x) {\n    return this.solveY2(x).redSqrt();\n  }\n\n  validate(point) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromX(x, sign) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromY(y, sign) {\n    throw new Error('Not implemented.');\n  }\n\n  isIsomorphic(curve) {\n    throw new Error('Not implemented.');\n  }\n\n  isIsogenous(curve) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromShort(point) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromMont(point, sign) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromEdwards(point) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromUniform(u) {\n    throw new Error('Not implemented.');\n  }\n\n  pointToUniform(p) {\n    throw new Error('Not implemented.');\n  }\n\n  pointFromHash(bytes, pake = false) {\n    // [H2EC] \"Roadmap\".\n    assert(Buffer.isBuffer(bytes));\n    assert(typeof pake === 'boolean');\n\n    if (bytes.length !== this.fieldSize * 2)\n      throw new Error('Invalid hash size.');\n\n    // Random oracle encoding.\n    // Ensure a proper distribution.\n    const s1 = bytes.slice(0, this.fieldSize);\n    const s2 = bytes.slice(this.fieldSize);\n    const u1 = this.decodeUniform(s1);\n    const u2 = this.decodeUniform(s2);\n    const p1 = this.pointFromUniform(u1);\n    const p2 = this.pointFromUniform(u2);\n    const p3 = p1.uadd(p2);\n\n    return pake ? p3.mulH() : p3;\n  }\n\n  pointToHash(p, subgroup, rng) {\n    // [SQUARED] Algorithm 1, Page 8, Section 3.3.\n    assert(p instanceof this.Point);\n    assert((subgroup >>> 0) === subgroup);\n\n    // Add a random torsion component.\n    const i = subgroup % this.torsion.length;\n    const p0 = p.add(this.torsion[i]);\n\n    // Average Cost (R = sqrt):\n    //\n    //   SSWU (~4 iterations) => 8I + 16R\n    //   SVDW (~4 iterations) => 12I + 28R\n    //   Elligator 1 (~2 iterations) => 6I + 10R\n    //   Elligator 2 (~2 iterations) => 4I + 6R\n    //   Ristretto (~1 iteration) => 1I + 2R + h*1R\n    for (;;) {\n      const u1 = this.randomField(rng);\n      const p1 = this.pointFromUniform(u1);\n\n      // Avoid 2-torsion points:\n      //   Short Weierstrass: ((A / 3) / B, 0)\n      //   Montgomery: (0, 0)\n      //   Twisted Edwards: (0, -1)\n      if (p1.neg().eq(p1))\n        continue;\n\n      const p2 = p0.usub(p1);\n      const hint = randomInt(rng);\n\n      let u2;\n      try {\n        u2 = this.pointToUniform(p2, hint & 15);\n      } catch (e) {\n        if (e.message === 'Invalid point.')\n          continue;\n        throw e;\n      }\n\n      const s1 = this.encodeUniform(u1, hint >>> 8);\n      const s2 = this.encodeUniform(u2, hint >>> 16);\n\n      return Buffer.concat([s1, s2]);\n    }\n  }\n\n  randomScalar(rng) {\n    const max = this.n.isZero() ? this.p : this.n;\n    return BN.random(rng, 1, max);\n  }\n\n  randomField(rng) {\n    return BN.random(rng, 1, this.p).toRed(this.red);\n  }\n\n  randomPoint(rng) {\n    let p;\n\n    for (;;) {\n      const x = this.randomField(rng);\n      const sign = (randomInt(rng) & 1) !== 0;\n\n      try {\n        p = this.pointFromX(x, sign);\n      } catch (e) {\n        continue;\n      }\n\n      assert(p.validate());\n\n      return p.mulH();\n    }\n  }\n\n  mulAll(points, coeffs) {\n    return this.jmulAll(points, coeffs);\n  }\n\n  mulAllSimple(points, coeffs) {\n    return this.jmulAllSimple(points, coeffs);\n  }\n\n  jmulAll(points, coeffs) {\n    assert(Array.isArray(points));\n    assert(points.length === 0 || (points[0] instanceof Point));\n\n    // Multiply with endomorphism if we're using affine points.\n    if (this.endo && points.length > 0 && points[0].type === types.AFFINE)\n      return this._endoWnafMulAdd(points, coeffs);\n\n    // Otherwise, a regular Shamir's trick.\n    return this._wnafMulAdd(5, points, coeffs);\n  }\n\n  jmulAllSimple(points, coeffs) {\n    return this._simpleMulAdd(points, coeffs);\n  }\n\n  mulH(k) {\n    assert(k instanceof BN);\n    return this.imulH(k.clone());\n  }\n\n  imulH(k) {\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    const word = this.h.word(0);\n\n    // Optimize for powers of two.\n    if ((word & (word - 1)) === 0) {\n      const bits = this.h.bitLength();\n      return k.iushln(bits - 1).imod(this.n);\n    }\n\n    return k.imuln(word).imod(this.n);\n  }\n\n  clamp(scalar) {\n    // [RFC7748] Page 8, Section 5.\n    // [RFC8032] Section 5.1.5 & 5.2.5.\n    assert(Buffer.isBuffer(scalar));\n    assert(scalar.length === this.scalarSize);\n    assert(this.scalarSize <= this.fieldSize);\n\n    let top = (this.fieldBits & 7) || 8;\n    let lsb = 0;\n    let msb = this.scalarSize - 1;\n\n    // Swap endianness.\n    if (this.endian === 'be')\n      [lsb, msb] = [msb, lsb];\n\n    // Adjust for low order.\n    if (this.scalarSize < this.fieldSize)\n      top = 8;\n\n    // Ensure a multiple of the cofactor.\n    scalar[lsb] &= -this.h.word(0) & 0xff;\n\n    // Clamp to the prime.\n    scalar[msb] &= (1 << top) - 1;\n\n    // Set the high bit.\n    scalar[msb] |= 1 << (top - 1);\n\n    return scalar;\n  }\n\n  splitHash(bytes) {\n    // [RFC8032] Section 5.1.6 & 5.2.6.\n    assert(Buffer.isBuffer(bytes));\n    assert(bytes.length === this.adjustedSize * 2);\n    assert(this.scalarSize <= this.adjustedSize);\n\n    let off = 0;\n\n    if (this.endian === 'be')\n      off = this.adjustedSize - this.scalarSize;\n\n    const scalar = bytes.slice(off, off + this.scalarSize);\n    const prefix = bytes.slice(this.adjustedSize);\n\n    this.clamp(scalar);\n\n    return [scalar, prefix];\n  }\n\n  encodeField(x) {\n    // [SEC1] Page 12, Section 2.3.5.\n    assert(x instanceof BN);\n    assert(!x.red);\n\n    return x.encode(this.endian, this.fieldSize);\n  }\n\n  decodeField(bytes) {\n    // [SEC1] Page 13, Section 2.3.6.\n    assert(Buffer.isBuffer(bytes));\n\n    if (bytes.length !== this.fieldSize)\n      throw new Error('Invalid field element size.');\n\n    return BN.decode(bytes, this.endian);\n  }\n\n  encodeAdjusted(x) {\n    assert(x instanceof BN);\n    assert(!x.red);\n\n    return x.encode(this.endian, this.adjustedSize);\n  }\n\n  decodeAdjusted(bytes) {\n    assert(Buffer.isBuffer(bytes));\n\n    if (bytes.length !== this.adjustedSize)\n      throw new Error('Invalid field element size.');\n\n    return BN.decode(bytes, this.endian);\n  }\n\n  encodeScalar(k) {\n    // [SEC1] Page 13, Section 2.3.7.\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    return k.encode(this.endian, this.scalarSize);\n  }\n\n  decodeScalar(bytes) {\n    // [SEC1] Page 14, Section 2.3.8.\n    assert(Buffer.isBuffer(bytes));\n\n    if (bytes.length !== this.scalarSize)\n      throw new Error('Invalid scalar size.');\n\n    return BN.decode(bytes, this.endian);\n  }\n\n  encodeClamped(k) {\n    // [RFC7748] Page 8, Section 5.\n    // [RFC8032] Section 5.1.5 & 5.2.5.\n    return this.clamp(this.encodeScalar(k));\n  }\n\n  decodeClamped(bytes) {\n    // [RFC7748] Page 8, Section 5.\n    // [RFC8032] Section 5.1.5 & 5.2.5.\n    assert(Buffer.isBuffer(bytes));\n\n    if (bytes.length !== this.scalarSize)\n      throw new Error('Invalid scalar size.');\n\n    const clamped = this.clamp(Buffer.from(bytes));\n\n    return BN.decode(clamped, this.endian);\n  }\n\n  encodeUniform(x, bits) {\n    assert(x instanceof BN);\n    assert((bits >>> 0) === bits);\n\n    const msb = this.endian === 'le' ? this.fieldSize - 1 : 0;\n    const bytes = x.fromRed().encode(this.endian, this.fieldSize);\n\n    bytes[msb] |= (bits & ~this.mask) & 0xff;\n\n    return bytes;\n  }\n\n  decodeUniform(bytes) {\n    assert(Buffer.isBuffer(bytes));\n\n    if (bytes.length !== this.fieldSize)\n      throw new Error('Invalid field size.');\n\n    const x = BN.decode(bytes, this.endian);\n\n    x.iumaskn(this.fieldBits);\n\n    return x.toRed(this.red);\n  }\n\n  encodePoint(point, compact) {\n    assert(point instanceof Point);\n    return point.encode(compact);\n  }\n\n  decodePoint(bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  encodeX(point) {\n    throw new Error('Not implemented.');\n  }\n\n  decodeX(bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  decodeEven(bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  decodeSquare(bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  toShort() {\n    throw new Error('Not implemented.');\n  }\n\n  toMont(b0) {\n    throw new Error('Not implemented.');\n  }\n\n  toEdwards(a0) {\n    throw new Error('Not implemented.');\n  }\n\n  pointToJSON(point, pre) {\n    assert(point instanceof Point);\n    return point.toJSON(pre);\n  }\n\n  pointFromJSON(json) {\n    throw new Error('Not implemented.');\n  }\n\n  toJSON(pre) {\n    let prefix, context;\n    let n, z, endo;\n\n    if (this.type === 'edwards') {\n      prefix = this.prefix ? this.prefix.toString() : null;\n      context = this.context;\n    }\n\n    if (!this.n.isZero())\n      n = this.n.toJSON();\n\n    if (!this.z.isZero()) {\n      z = this.z.fromRed();\n\n      if (this.z.redIsHigh())\n        z.isub(this.p);\n\n      z = z.toString(16);\n    }\n\n    if (this.endo)\n      endo = this.endo.toJSON();\n\n    return {\n      id: this.id,\n      ossl: this.ossl,\n      type: this.type,\n      endian: this.endian,\n      hash: this.hash,\n      prefix,\n      context,\n      prime: this.prime,\n      p: this.p.toJSON(),\n      a: undefined,\n      b: undefined,\n      d: undefined,\n      n,\n      h: this.h.toString(16),\n      s: undefined,\n      z,\n      c: undefined,\n      g: this.g.toJSON(pre),\n      endo\n    };\n  }\n\n  static fromJSON(json) {\n    return new this(json);\n  }\n}\n\n/**\n * Point\n */\n\nclass Point {\n  constructor(curve, type) {\n    assert(curve instanceof Curve);\n    assert((type >>> 0) === type);\n\n    this.curve = curve;\n    this.type = type;\n    this.pre = null;\n  }\n\n  _init() {\n    throw new Error('Not implemented.');\n  }\n\n  _getNAF(width) {\n    assert((width >>> 0) === width);\n\n    if (this.pre && this.pre.naf)\n      return this.pre.naf;\n\n    if (width === 0)\n      return null;\n\n    const size = 1 << (width - 2);\n    const points = new Array(size);\n    const dbl = size === 1 ? null : this.dbl();\n\n    points[0] = this;\n\n    for (let i = 1; i < size; i++)\n      points[i] = points[i - 1].add(dbl);\n\n    return new NAF(width, points);\n  }\n\n  _safeNAF(width) {\n    return this._getNAF(width);\n  }\n\n  _getWindows(width, bits) {\n    assert((width >>> 0) === width);\n    assert((bits >>> 0) === bits);\n\n    if (this.pre && this.pre.windows)\n      return this.pre.windows;\n\n    if (width === 0)\n      return null;\n\n    const size = 1 << width;\n    const steps = ((bits + width - 1) / width) >>> 0;\n    const points = new Array(steps * size);\n\n    let g = this.toP();\n\n    for (let i = 0; i < steps; i++) {\n      points[i * size] = this.curve.point();\n\n      for (let j = 1; j < size; j++)\n        points[i * size + j] = points[i * size + j - 1].add(g);\n\n      g = g.dblp(width);\n    }\n\n    return new Windows(width, bits, points);\n  }\n\n  _getDoubles(step, power) {\n    assert((step >>> 0) === step);\n    assert((power >>> 0) === power);\n\n    if (this.pre && this.pre.doubles)\n      return this.pre.doubles;\n\n    if (step === 0)\n      return null;\n\n    const len = Math.ceil(power / step) + 1;\n    const points = new Array(len);\n\n    let acc = this;\n    let k = 0;\n\n    points[k++] = acc;\n\n    for (let i = 0; i < power; i += step) {\n      for (let j = 0; j < step; j++)\n        acc = acc.dbl();\n\n      points[k++] = acc;\n    }\n\n    assert(k === len);\n\n    return new Doubles(step, points);\n  }\n\n  _getBeta() {\n    return null;\n  }\n\n  _getBlinding(rng) {\n    if (this.pre && this.pre.blinding)\n      return this.pre.blinding;\n\n    if (!rng)\n      return null;\n\n    if (this.curve.n.isZero())\n      return null;\n\n    // Pregenerate a random blinding value:\n    //\n    //   blind = random integer in [1,n-1]\n    //   unblind = G * blind\n    //\n    // We intend to subtract the blinding value\n    // from scalars before multiplication. We\n    // can add the unblinding point once the\n    // multiplication is complete.\n    const blind = this.curve.randomScalar(rng);\n    const unblind = this.mul(blind);\n\n    return new Blinding(blind, unblind);\n  }\n\n  _hasWindows(k) {\n    assert(k instanceof BN);\n\n    if (!this.pre || !this.pre.windows)\n      return false;\n\n    const {bits} = this.pre.windows;\n\n    return bits >= k.bitLength();\n  }\n\n  _hasDoubles(k) {\n    assert(k instanceof BN);\n\n    if (!this.pre || !this.pre.doubles)\n      return false;\n\n    const {step, points} = this.pre.doubles;\n    const power = k.bitLength() + 1;\n\n    return points.length >= Math.ceil(power / step) + 1;\n  }\n\n  _getJNAF(point) {\n    assert(point instanceof Point);\n    assert(point.type === this.type);\n\n    // Create comb for JSF.\n    return [\n      this, // 1\n      this.add(point), // 3\n      this.sub(point), // 5\n      point // 7\n    ];\n  }\n\n  _blind(k, rng) {\n    // [SIDE1] Page 5, Section 4.\n    // [BLIND] Page 20, Section 7.\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    // Scalar splitting (requires precomputation).\n    //\n    // Blind a multiplication by first subtracting\n    // a blinding value from the scalar. Example:\n    //\n    //   b = random integer in [1,n-1]\n    //   B = P * b (precomputed)\n    //   Q = P * (k - b) + B\n    //\n    // Note that Joye describes a different method\n    // (multiplier randomization) which computes:\n    //\n    //   B = random point in E\n    //   Q = (P + B) * k - B * k\n    //\n    // Our method is more similar to the \"scalar\n    // splitting\" technique described in the\n    // second source above.\n    //\n    // The blinding value and its corresponding\n    // point are randomly generated and computed\n    // on boot. As long as an attacker is not\n    // able to observe the boot, this should give\n    // a decent bit of protection against various\n    // channel attacks.\n    if (this.pre && this.pre.blinding) {\n      const {blind, unblind} = this.pre.blinding;\n      const t = k.sub(blind);\n\n      return [this, t, unblind];\n    }\n\n    // Randomization is not possible without\n    // an RNG. Do a normal multiplication.\n    if (!rng)\n      return [this, k, null];\n\n    // If we have no precomputed blinding\n    // factor, there are two possibilities\n    // for randomization:\n    //\n    // 1. Randomize the multiplier by adding\n    //    a random multiple of `n`.\n    //\n    // 2. Re-scale the point itself by a\n    //    random factor.\n    //\n    // The first option can be accomplished\n    // with some like:\n    //\n    //   a = random integer in [1,n-1]\n    //   r = a * n\n    //   Q = P * (k + r)\n    //\n    // The second is accomplished with:\n    //\n    //   a = random element in F(p)\n    //   R = (x * a^2, y * a^3, z * a)\n    //   Q = R * k\n    //\n    // If we have precomputed doubles / naf\n    // points, we opt for the first method\n    // to avoid randomizing everything.\n    if (this.pre) {\n      if (this.curve.n.isZero())\n        return [this, k, null];\n\n      const a = this.curve.randomScalar(rng);\n      const r = a.mul(this.curve.n);\n      const t = r.iadd(k);\n\n      return [this, t, null];\n    }\n\n    // If there is no precomputation _at all_,\n    // we opt for the second method.\n    const p = this.randomize(rng);\n\n    return [p, k, null];\n  }\n\n  clone() {\n    throw new Error('Not implemented.');\n  }\n\n  swap(point, flag) {\n    throw new Error('Not implemented.');\n  }\n\n  precompute(bits, rng) {\n    assert((bits >>> 0) === bits);\n\n    if (!this.pre)\n      this.pre = new Precomp();\n\n    if (!this.pre.naf)\n      this.pre.naf = this._getNAF(9);\n\n    if (USE_FIXED && !this.pre.windows)\n      this.pre.windows = this._getWindows(4, bits);\n\n    if (!this.pre.doubles)\n      this.pre.doubles = this._getDoubles(4, bits + 1);\n\n    if (!this.pre.beta)\n      this.pre.beta = this._getBeta();\n\n    if (!this.pre.blinding)\n      this.pre.blinding = this._getBlinding(rng);\n\n    return this;\n  }\n\n  validate() {\n    return this.curve.validate(this);\n  }\n\n  normalize() {\n    return this;\n  }\n\n  scale(a) {\n    throw new Error('Not implemented.');\n  }\n\n  randomize(rng) {\n    const z = this.curve.randomField(rng);\n    return this.scale(z);\n  }\n\n  neg() {\n    throw new Error('Not implemented.');\n  }\n\n  add(point) {\n    throw new Error('Not implemented.');\n  }\n\n  sub(point) {\n    assert(point instanceof Point);\n    return this.add(point.neg());\n  }\n\n  dbl() {\n    throw new Error('Not implemented.');\n  }\n\n  dblp(pow) {\n    // Repeated doubling. This can\n    // be optimized by child classes.\n    assert((pow >>> 0) === pow);\n\n    let r = this;\n\n    for (let i = 0; i < pow; i++)\n      r = r.dbl();\n\n    return r;\n  }\n\n  uadd(point) {\n    throw new Error('Not implemented.');\n  }\n\n  usub(point) {\n    assert(point instanceof Point);\n    return this.uadd(point.neg());\n  }\n\n  udbl() {\n    throw new Error('Not implemented.');\n  }\n\n  zaddu(point) {\n    throw new Error('Not implemented.');\n  }\n\n  zaddc(point) {\n    throw new Error('Not implemented.');\n  }\n\n  zdblu() {\n    throw new Error('Not implemented.');\n  }\n\n  diffAdd(p, q) {\n    throw new Error('Not implemented.');\n  }\n\n  diffAddDbl(p, q) {\n    throw new Error('Not implemented.');\n  }\n\n  recover() {\n    throw new Error('Not implemented.');\n  }\n\n  getX() {\n    throw new Error('Not implemented.');\n  }\n\n  getY() {\n    throw new Error('Not implemented.');\n  }\n\n  eq(point) {\n    throw new Error('Not implemented.');\n  }\n\n  cmp(point) {\n    throw new Error('Not implemented.');\n  }\n\n  isInfinity() {\n    throw new Error('Not implemented.');\n  }\n\n  isOrder2() {\n    throw new Error('Not implemented.');\n  }\n\n  isOdd() {\n    throw new Error('Not implemented.');\n  }\n\n  isEven() {\n    throw new Error('Not implemented.');\n  }\n\n  isSquare() {\n    throw new Error('Not implemented.');\n  }\n\n  eqX(x) {\n    throw new Error('Not implemented.');\n  }\n\n  eqR(x) {\n    throw new Error('Not implemented.');\n  }\n\n  isSmall() {\n    // Test whether the point is of small order.\n    if (this.isInfinity())\n      return false;\n\n    // P * h = O\n    return this.jmulH().isInfinity();\n  }\n\n  hasTorsion() {\n    // Test whether the point is in another subgroup.\n    if (this.isInfinity())\n      return false;\n\n    // P * n != O\n    return !this.jmul(this.curve.n).isInfinity();\n  }\n\n  order() {\n    // Calculate point order.\n    const {h, n} = this.curve;\n\n    let p = this.toJ();\n    let q = new BN(1);\n\n    while (!p.isInfinity()) {\n      q.iaddn(1);\n\n      if (q.cmp(h) > 0) {\n        q = n.clone();\n        break;\n      }\n\n      p = p.add(this);\n    }\n\n    return q;\n  }\n\n  mul(k) {\n    return this.jmul(k);\n  }\n\n  muln(k) {\n    return this.jmuln(k);\n  }\n\n  mulSimple(k) {\n    return this.jmulSimple(k);\n  }\n\n  mulBlind(k, rng) {\n    return this.jmulBlind(k, rng);\n  }\n\n  mulConst(k, rng) {\n    return this.jmulConst(k, rng);\n  }\n\n  mulAdd(k1, p2, k2) {\n    return this.jmulAdd(k1, p2, k2);\n  }\n\n  mulAddSimple(k1, p2, k2) {\n    return this.jmulAddSimple(k1, p2, k2);\n  }\n\n  mulH() {\n    return this.jmulH();\n  }\n\n  div(k) {\n    return this.jdiv(k);\n  }\n\n  divn(k) {\n    return this.jdivn(k);\n  }\n\n  divH() {\n    return this.jdivH();\n  }\n\n  jmul(k) {\n    if (USE_FIXED && this._hasWindows(k))\n      return this.curve._fixedMul(this, k);\n\n    if (this._hasDoubles(k))\n      return this.curve._fixedNafMul(this, k);\n\n    if (this.curve.endo && this.type === types.AFFINE)\n      return this.curve._endoWnafMulAdd([this], [k]);\n\n    return this.curve._wnafMul(5, this, k);\n  }\n\n  jmuln(k) {\n    assert((k | 0) === k);\n    return this.jmulSimple(new BN(k));\n  }\n\n  jmulSimple(k) {\n    return this.curve._simpleMul(this, k);\n  }\n\n  jmulBlind(k, rng = null) {\n    const [p, t, unblind] = this._blind(k, rng);\n    const q = p.jmul(t);\n\n    if (unblind)\n      return q.add(unblind);\n\n    return q;\n  }\n\n  jmulConst(k, rng = null) {\n    const [p, t, unblind] = this._blind(k, rng);\n    const q = this.curve._constMul(p, t, rng);\n\n    if (unblind)\n      return q.uadd(unblind);\n\n    return q;\n  }\n\n  jmulAdd(k1, p2, k2) {\n    if (this.curve.endo && this.type === types.AFFINE)\n      return this.curve._endoWnafMulAdd([this, p2], [k1, k2]);\n\n    return this.curve._wnafMulAdd(5, [this, p2], [k1, k2]);\n  }\n\n  jmulAddSimple(k1, p2, k2) {\n    return this.curve._simpleMulAdd([this, p2], [k1, k2]);\n  }\n\n  jmulH() {\n    const word = this.curve.h.word(0);\n\n    // Optimize for powers of two.\n    if ((word & (word - 1)) === 0) {\n      const bits = this.curve.h.bitLength();\n      return this.toJ().dblp(bits - 1);\n    }\n\n    return this.jmulSimple(this.curve.h);\n  }\n\n  jdiv(k) {\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    return this.jmul(k.invert(this.curve.n));\n  }\n\n  jdivn(k) {\n    assert(!this.curve.n.isZero());\n\n    if (this.curve.h.cmpn(k) === 0)\n      return this.jdivH();\n\n    return this.jdiv(new BN(k));\n  }\n\n  jdivH() {\n    if (this.curve.n.isZero())\n      return this.toJ();\n\n    if (this.curve.h.cmpn(1) === 0)\n      return this.toJ();\n\n    if (this.curve.hi === null)\n      this.curve.hi = this.curve.h.invert(this.curve.n);\n\n    return this.jmul(this.curve.hi);\n  }\n\n  ladder(k) {\n    throw new Error('Not implemented.');\n  }\n\n  ladderSimple(k) {\n    throw new Error('Not implemented.');\n  }\n\n  ladderBlind(k, rng) {\n    throw new Error('Not implemented.');\n  }\n\n  ladderConst(k, rng) {\n    throw new Error('Not implemented.');\n  }\n\n  toP() {\n    return this.normalize();\n  }\n\n  toJ() {\n    return this;\n  }\n\n  toX() {\n    return this;\n  }\n\n  key() {\n    if (this.isInfinity())\n      return `${this.curve.uid}:oo`;\n\n    this.normalize();\n\n    const x = this.getX().toString(16);\n    const y = this.getY().toString(16);\n\n    return `${this.curve.uid}:${x},${y}`;\n  }\n\n  encode(compact) {\n    throw new Error('Not implemented.');\n  }\n\n  static decode(curve, bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  encodeX() {\n    throw new Error('Not implemented.');\n  }\n\n  static decodeX(curve, bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  static decodeEven(curve, bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  static decodeSquare(curve, bytes) {\n    throw new Error('Not implemented.');\n  }\n\n  toJSON(pre) {\n    throw new Error('Not implemented.');\n  }\n\n  static fromJSON(curve, json) {\n    throw new Error('Not implemented.');\n  }\n\n  [custom]() {\n    return '<Point>';\n  }\n}\n\n/**\n * ShortCurve\n */\n\nclass ShortCurve extends Curve {\n  constructor(conf) {\n    super(ShortPoint, 'short', conf);\n\n    this.a = BN.fromJSON(conf.a).toRed(this.red);\n    this.b = BN.fromJSON(conf.b).toRed(this.red);\n    this.c = BN.fromJSON(conf.c || '0').toRed(this.red);\n    this.ai = this.a.isZero() ? this.zero : this.a.redInvert();\n    this.zi = this.z.isZero() ? this.zero : this.z.redInvert();\n\n    this.zeroA = this.a.isZero();\n    this.threeA = this.a.eq(this.three.redNeg());\n    this.redN = this.n.toRed(this.red);\n    this.pmodn = this.p.clone();\n    this.highOrder = this.n.cmp(this.p) >= 0;\n    this.smallGap = false;\n\n    this._finalize(conf);\n  }\n\n  _finalize(conf) {\n    super._finalize(conf);\n\n    // Precalculate endomorphism.\n    if (conf.endo != null)\n      this.endo = Endo.fromJSON(this, conf.endo);\n    else\n      this.endo = this._getEndomorphism();\n\n    if (!this.n.isZero()) {\n      this.pmodn = this.p.mod(this.n);\n\n      // Check for Maxwell's trick (see eqR).\n      this.smallGap = this.p.div(this.n).cmpn(1) <= 0;\n    }\n\n    return this;\n  }\n\n  static _isomorphism(curveA, curveB, custom, odd) {\n    // Short Weierstrass Isomorphism.\n    //\n    // [GECC] Page 84, Section 3.1.5.\n    // [ARITH1] Page 274, Section 13.1.5.\n    // [ALT] Appendix F.3 (Isomorphic Mapping between Weierstrass Curves).\n    //\n    // Find `u` such that `a * u^4 = a'` and `b * u^6 = b'`.\n    //\n    // Transformation:\n    //\n    //   u4 = a' / a\n    //   u2 = +-sqrt(u4)\n    //   u6 = u4 * u2\n    //   a' = a * u4\n    //   b' = b * u6\n    //\n    // Where `u2` is any root that is square.\n    //\n    // If a = 0, we can do:\n    //\n    //   a' = 0\n    //   b' = b'\n    //\n    // Where (b' / b)^(1 / 3) is square.\n    //\n    // If b = 0, we can do:\n    //\n    //   a' = a'\n    //   b' = 0\n    //\n    // Where sqrt(a' / a) is square.\n    assert(curveA instanceof BN);\n    assert(curveB instanceof BN);\n    assert(custom instanceof BN);\n    assert(odd == null || typeof odd === 'boolean');\n    assert(!curveA.isZero() || !curveB.isZero());\n\n    if (custom.isZero())\n      throw new Error('Invalid coefficient.');\n\n    if (curveA.isZero()) {\n      const customB = custom;\n      const u6 = customB.redDiv(curveB);\n      // Todo: allow index flag.\n      const u2 = uncube(u6);\n\n      // Already checked in uncube().\n      assert(u2.redJacobi() === 1);\n\n      return [curveA.clone(), customB.clone()];\n    }\n\n    if (curveB.isZero()) {\n      const customA = custom;\n      const u4 = customA.redDiv(curveA);\n      const u2 = u4.redSqrt();\n\n      // Todo: allow odd flag.\n      if (u2.redJacobi() !== 1)\n        u2.redINeg();\n\n      if (u2.redJacobi() !== 1)\n        throw new Error('Invalid `a` coefficient.');\n\n      return [customA.clone(), curveB.clone()];\n    }\n\n    const customA = custom;\n    const u4 = customA.redDiv(curveA);\n    const u2 = u4.redSqrt();\n\n    if (odd != null) {\n      if (u2.redIsOdd() !== odd)\n        u2.redINeg();\n    } else {\n      if (u2.redJacobi() !== 1)\n        u2.redINeg();\n    }\n\n    if (u2.redJacobi() !== 1)\n      throw new Error('Invalid `a` coefficient.');\n\n    const u6 = u4.redMul(u2);\n    const a = curveA.redMul(u4);\n    const b = curveB.redMul(u6);\n\n    assert(a.eq(customA));\n\n    return [a, b];\n  }\n\n  _short(a0, odd) {\n    return ShortCurve._isomorphism(this.a, this.b, a0, odd);\n  }\n\n  _mont(b0, odd) {\n    // Short Weierstrass->Montgomery Equivalence.\n    //\n    // [ARITH1] Page 286, Section 13.2.3.c.\n    // [SAFE] \"Ladders\".\n    //\n    // Transformation:\n    //\n    //   r = A / (3 * B)\n    //   s = +-sqrt(3 * r^2 + a)\n    //   A = 3 * r / s\n    //   B = 1 / s\n    const [r, s] = this._findRS(odd);\n    const b = s.redInvert();\n    const a = r.redMuln(3).redMul(b);\n\n    if (b0 != null)\n      return MontCurve._isomorphism(a, b, b0);\n\n    return [a, b];\n  }\n\n  _edwards(a0, odd) {\n    // Short Weierstrass->Twisted Edwards Equivalence.\n    //\n    // [TWISTEQ] Section 1.\n    //\n    // Transformation:\n    //\n    //   r = (a' + d') / 6\n    //   s = +-sqrt(3 * r^2 + a)\n    //   a' = 3 * r + 2 * s\n    //   d' = 3 * r - 2 * s\n    const [r, s] = this._findRS(odd);\n    const r3 = r.redMuln(3);\n    const s2 = s.redMuln(2);\n    const a = r3.redAdd(s2);\n    const d = r3.redSub(s2);\n\n    if (a0 != null)\n      return EdwardsCurve._isomorphism(a, d, a0);\n\n    return [a, d];\n  }\n\n  _findRS(sign) {\n    // Find `r` and `s` for equivalence.\n    //\n    // [ARITH1] Page 286, Section 13.2.3.c.\n    // [SAFE] \"Ladders\".\n    //\n    // Computation:\n    //\n    //   r = solve(r^3 + a * r + b == 0, r)\n    //   s = +-sqrt(3 * r^2 + a)\n    //\n    // Computing `r` is non-trivial. We need\n    // to solve `r^3 + a * r + b = 0`, but we\n    // don't have a polynomial solver, so we\n    // loop over random points until we find\n    // one with 2-torsion. Multiplying by the\n    // subgroup order should yield a point of\n    // ((A / 3) / B, 0) which is a solution.\n    assert(sign == null || typeof sign === 'boolean');\n    assert(this.h.word(0) >= 4);\n    assert(!this.n.isZero());\n\n    const x = this.one.redNeg();\n\n    let p;\n\n    for (;;) {\n      x.redIAdd(this.one);\n\n      try {\n        p = this.pointFromX(x.clone());\n      } catch (e) {\n        continue;\n      }\n\n      p = p.mul(this.n);\n\n      if (p.isInfinity())\n        continue;\n\n      if (!p.y.isZero())\n        continue;\n\n      break;\n    }\n\n    const r = p.x;\n    const r2 = r.redSqr();\n    const s = r2.redMuln(3).redIAdd(this.a).redSqrt();\n\n    if (sign != null) {\n      if (s.redIsOdd() !== sign)\n        s.redINeg();\n    }\n\n    return [r, s];\n  }\n\n  _scale0(a, b) {\n    // We can extract the isomorphism factors with:\n    //\n    //   u4 = a' / a\n    //   u6 = b' / b\n    //   u2 = +-sqrt(u4)\n    //   u = +-sqrt(u2)\n    //   u3 = u2 * u\n    //\n    // `u2` should be picked such that `u4 * u2 = u6`.\n    //\n    // If a = 0, we can do:\n    //\n    //   u6 = b' / b\n    //   u2 = u6^(1 / 3)\n    //   u = +-sqrt(u2)\n    //   u3 = u2 * u\n    //\n    // Where `u2` is any root that is square.\n    //\n    // If b = 0, we can do:\n    //\n    //   u4 = a' / a\n    //   u2 = +-sqrt(u4)\n    //   u = +-sqrt(u2)\n    //   u3 = u2 * u\n    //\n    // Where `u2` is any root that is square.\n    assert(this.a.isZero() === a.isZero());\n    assert(this.b.isZero() === b.isZero());\n\n    if (this.a.isZero()) {\n      const u6 = this.b.redDiv(this.field(b));\n      // Todo: figure out how to check index.\n      const u2 = uncube(u6);\n      const u = u2.redSqrt();\n      const u3 = u2.redMul(u);\n\n      assert(u3.redSqr().eq(u6));\n      assert(!u.isZero());\n\n      return [u2, u3];\n    }\n\n    if (this.b.isZero()) {\n      const u4 = this.a.redDiv(this.field(a));\n      const u2 = u4.redSqrt();\n\n      // Todo: figure out how to check oddness.\n      if (u2.redJacobi() !== 1)\n        u2.redINeg();\n\n      const u = u2.redSqrt();\n      const u3 = u2.redMul(u);\n\n      assert(u3.redMul(u).eq(u4));\n      assert(!u.isZero());\n\n      return [u2, u3];\n    }\n\n    const u4 = this.a.redDiv(this.field(a));\n    const u6 = this.b.redDiv(this.field(b));\n    const u2 = u4.redSqrt();\n\n    if (!u4.redMul(u2).eq(u6))\n      u2.redINeg();\n\n    assert(u4.redMul(u2).eq(u6));\n\n    const u = u2.redSqrt();\n    const u3 = u2.redMul(u);\n\n    assert(!u.isZero());\n\n    return [u2, u3];\n  }\n\n  _scale1(x, y) {\n    // If base points are available, it is much\n    // easier, with:\n    //\n    //   u2 = x' / x\n    //   u3 = y' / y\n    //   u = +-sqrt(u2)\n    //\n    // `u` should be picked such that `u2 * u = u3`.\n    const u2 = this.g.x.redDiv(this.field(x));\n    const u3 = this.g.y.redDiv(this.field(y));\n    const u = u2.redSqrt();\n\n    if (!u2.redMul(u).eq(u3))\n      u.redINeg();\n\n    assert(u2.redMul(u).eq(u3));\n    assert(!u.isZero());\n\n    return [u2, u3];\n  }\n\n  _scaleShort(curve) {\n    assert(curve instanceof ShortCurve);\n\n    if (this.g.isInfinity() || curve.g.isInfinity())\n      return this._scale0(curve.a, curve.b);\n\n    return this._scale1(curve.g.x, curve.g.y);\n  }\n\n  _scaleMont(curve) {\n    assert(curve instanceof MontCurve);\n\n    if (this.g.isInfinity() || curve.g.isInfinity()) {\n      const [a, b] = curve._short();\n      return this._scale0(a, b);\n    }\n\n    const {x, y} = curve.g;\n    const nx = x.redAdd(curve.a3).redMul(curve.bi);\n    const ny = y.redMul(curve.bi);\n\n    return this._scale1(nx, ny);\n  }\n\n  _scaleEdwards(curve) {\n    assert(curve instanceof EdwardsCurve);\n\n    if (this.g.isInfinity() || curve.g.isInfinity()) {\n      const [a, b] = curve._short();\n      return this._scale0(a, b);\n    }\n\n    const {x, y, z} = curve.g;\n    const a5 = curve.a.redMuln(5);\n    const d5 = curve.d.redMuln(5);\n    const dma = curve.d.redSub(curve.a);\n    const d5a = d5.redSub(curve.a);\n    const da5 = curve.d.redSub(a5);\n    const ypz = y.redAdd(z);\n    const ymz = y.redSub(z);\n    const xx = d5a.redMul(y).redIAdd(da5.redMul(z));\n    const xz = ymz.redMuln(12);\n    const yy = dma.redMul(ypz).redMul(z);\n    const yz = ymz.redMul(x).redIMuln(4);\n    const zi = xz.redMul(yz).redInvert();\n    const nx = xx.redMul(yz).redMul(zi);\n    const ny = yy.redMul(xz).redMul(zi);\n\n    return this._scale1(nx, ny);\n  }\n\n  _getEndomorphism(index = 0) {\n    // Compute endomorphism.\n    //\n    // [GECC] Example 3.76, Page 128, Section 3.5.\n\n    // No curve params.\n    if (this.n.isZero() || this.g.isInfinity())\n      return null;\n\n    // No efficient endomorphism.\n    if (!this.zeroA || this.p.modrn(3) !== 1 || this.n.modrn(3) !== 1)\n      return null;\n\n    // Solve beta^3 mod p = 1.\n    const [b1, b2] = this._getEndoRoots(this.p);\n\n    // Choose the smallest beta by default.\n    const beta = [b1, b2][index & 1].toRed(this.red);\n\n    // Solve lambda^3 mod n = 1.\n    const [l1, l2] = this._getEndoRoots(this.n);\n\n    // Choose the lambda matching selected beta.\n    // Note that P * lambda = (x * beta, y).\n    const p = this.point(this.g.x.redMul(beta), this.g.y);\n\n    let lambda;\n\n    if (this.g.mul(l1).eq(p)) {\n      lambda = l1;\n    } else {\n      assert(this.g.mul(l2).eq(p));\n      lambda = l2;\n    }\n\n    // Get basis vectors.\n    const basis = this._getEndoBasis(lambda);\n\n    // Precompute `g1` and `g2`.\n    const pre = this._getEndoPrecomp(basis);\n\n    return new Endo(beta, lambda, basis, pre);\n  }\n\n  _getEndoRoots(num) {\n    // Find roots for x^2 + x + 1 in F.\n    //\n    // [GECC] Example 3.76, Page 128, Section 3.5.\n    // [GLV] Page 192, Section 2 (Endomorphisms).\n    //\n    // The above document doesn't fully explain how\n    // to derive these and only \"hints\" at it, as\n    // mentioned by Hal Finney[1], but we're basically\n    // computing two possible cube roots of 1 here.\n    //\n    // Note that we could also compute[2]:\n    //\n    //   beta = 2^((p - 1) / 3) mod p\n    //   lambda = 3^((n - 1) / 3) mod n\n    //\n    // As an extension of Fermat's little theorem:\n    //\n    //   g^(p - 1) mod p == 1\n    //\n    // It is suspected[3] this is how Hal Finney[4]\n    // computed his original endomorphism roots.\n    //\n    // @indutny's method for computing cube roots\n    // of unity[5] appears to be the method described\n    // on wikipedia[6][7].\n    //\n    // Sage produces the same solution:\n    //\n    //   sage: solve(x^2 + x + 1 == 0, x)\n    //   [x == -1/2*I*sqrt(3) - 1/2, x == 1/2*I*sqrt(3) - 1/2]\n    //\n    // This can be reduced to:\n    //\n    //   x = (+-sqrt(-3) - 1) / 2\n    //\n    // [1] https://bitcointalk.org/index.php?topic=3238.msg45565#msg45565\n    // [2] https://crypto.stackexchange.com/a/22739\n    // [3] https://bitcoin.stackexchange.com/a/35872\n    // [4] https://github.com/halfinney/bitcoin/commit/dc411b5\n    // [5] https://en.wikipedia.org/wiki/Cube_root_of_unity\n    // [6] https://en.wikipedia.org/wiki/Splitting_field#Cubic_example\n    // [7] http://mathworld.wolfram.com/SplittingField.html\n    const red = num === this.p ? this.red : BN.mont(num);\n    const two = new BN(2).toRed(red);\n    const three = new BN(3).toRed(red);\n    const i2 = two.redInvert();\n\n    // S1 = sqrt(-3) / 2\n    const s1 = three.redNeg().redSqrt().redMul(i2);\n\n    // S2 = -S1\n    const s2 = s1.redNeg();\n\n    // R1 = S1 - 1 / 2\n    const r1 = s1.redSub(i2).fromRed();\n\n    // R2 = S2 - 1 / 2\n    const r2 = s2.redSub(i2).fromRed();\n\n    return [r1, r2].sort(BN.cmp);\n  }\n\n  _getEndoBasis(lambda) {\n    // Compute endomorphic basis.\n    //\n    // This essentially computes Cornacchia's algorithm\n    // for solving x^2 + d * y^2 = m (d = lambda, m = order).\n    //\n    // https://en.wikipedia.org/wiki/Cornacchia%27s_algorithm\n    //\n    // [GECC] Algorithm 3.74, Page 127, Section 3.5.\n    // [GLV] Page 196, Section 4 (Decomposing K).\n    //\n    // Balanced length-two representation of a multiplier.\n    //\n    // 1. Run the extended euclidean algorithm with inputs n\n    //    and lambda. The algorithm produces a sequence of\n    //    equations si*n + ti*lam = ri where s0=1, t0=0,\n    //    r0=n, s1=0, t1=1, r1=lam, and the remainders ri\n    //    and are non-negative and strictly decreasing. Let\n    //    l be the greatest index for which rl >= sqrt(n).\n    const [rl, tl, rl1, tl1, rl2, tl2] = this._egcdSqrt(lambda);\n\n    // 2. Set (a1, b1) <- (rl+1, -tl+1).\n    const a1 = rl1;\n    const b1 = tl1.neg();\n\n    // 3. If (rl^2 + tl^2) <= (rl+2^2 + tl+2^2)\n    //    then set (a2, b2) <- (rl, -tl).\n    //    else set (a2, b2) <- (rl+2, -tl+2).\n    const lhs = rl.sqr().iadd(tl.sqr());\n    const rhs = rl2.sqr().iadd(tl2.sqr());\n\n    let a2, b2;\n\n    if (lhs.cmp(rhs) <= 0) {\n      a2 = rl;\n      b2 = tl.neg();\n    } else {\n      a2 = rl2;\n      b2 = tl2.neg();\n    }\n\n    return [\n      new Vector(a1, b1),\n      new Vector(a2, b2)\n    ];\n  }\n\n  _egcdSqrt(lambda) {\n    // Extended Euclidean algorithm for integers.\n    //\n    // [GECC] Algorithm 2.19, Page 40, Section 2.2.\n    // [GLV] Page 196, Section 4 (Decomposing K).\n    assert(lambda instanceof BN);\n    assert(!lambda.red);\n    assert(lambda.sign() > 0);\n    assert(this.n.sign() > 0);\n\n    // Note that we insert the approximate square\n    // root checks as described in algorithm 3.74.\n    //\n    // Algorithm 2.19 is defined as:\n    //\n    // 1. u <- a\n    //    v <- b\n    //\n    // 2. x1 <- 1\n    //    y1 <- 0\n    //    x2 <- 0\n    //    y2 <- 1\n    //\n    // 3. while u != 0 do\n    //\n    // 3.1. q <- floor(v / u)\n    //      r <- v - q * u\n    //      x <- x2 - q * x1\n    //      y <- y2 - q * y1\n    //\n    // 3.2. v <- u\n    //      u <- r\n    //      x2 <- x1\n    //      x1 <- x\n    //      y2 <- y1\n    //      y1 <- y\n    //\n    // 4. d <- v\n    //    x <- x2\n    //    y <- y2\n    //\n    // 5. Return (d, x, y).\n\n    // Start with an approximate square root of n.\n    const sqrtn = this.n.ushrn(this.n.bitLength() >>> 1);\n\n    let u = lambda; // r1\n    let v = this.n.clone(); // r0\n    let x1 = new BN(1); // t1\n    let y1 = new BN(0); // t0\n    let x2 = new BN(0); // s1\n    let y2 = new BN(1); // s0\n\n    // All vectors are roots of: a + b * lambda = 0 (mod n).\n    let rl, tl;\n\n    // First vector.\n    let rl1, tl1;\n\n    // Inner.\n    let i = 0;\n    let j = 0;\n    let p;\n\n    // Compute EGCD.\n    while (!u.isZero() && i < 2) {\n      const q = v.quo(u);\n      const r = v.sub(q.mul(u));\n      const x = x2.sub(q.mul(x1));\n      const y = y2.sub(q.mul(y1));\n\n      // Check for r < sqrt(n).\n      if (j === 0 && r.cmp(sqrtn) < 0) {\n        rl = p;\n        tl = x1;\n        rl1 = r;\n        tl1 = x;\n        j = 1; // 1 more round.\n      }\n\n      p = r;\n      v = u;\n      u = r;\n      x2 = x1;\n      x1 = x;\n      y2 = y1;\n      y1 = y;\n\n      i += j;\n    }\n\n    // Should never happen.\n    assert(j !== 0, 'Could not find r < sqrt(n).');\n\n    // Second vector.\n    const rl2 = x2;\n    const tl2 = x1;\n\n    return [\n      rl,\n      tl,\n      rl1,\n      tl1,\n      rl2,\n      tl2\n    ];\n  }\n\n  _getEndoPrecomp(basis) {\n    // Precompute `g1` and `g2` to avoid round division.\n    //\n    // [JCEN12] Page 5, Section 4.3.\n    //\n    // Computation:\n    //\n    //   d = a1 * b2 - b1 * a2\n    //   t = ceil(log2(d+1)) + 16\n    //   g1 = round((2^t * b2) / d)\n    //   g2 = round((2^t * b1) / d)\n    //\n    // Where `d` is equal to `n`.\n    //\n    // As far as `t` goes, the paper above adds 2,\n    // whereas libsecp256k1 adds 16 (a total of 272).\n    assert(Array.isArray(basis));\n    assert(basis.length === 2);\n    assert(basis[0] instanceof Vector);\n    assert(basis[1] instanceof Vector);\n\n    const [v1, v2] = basis;\n    const d = v1.a.mul(v2.b).isub(v1.b.mul(v2.a));\n    const shift = d.bitLength() + 16;\n    const pow = BN.shift(1, shift);\n    const g1 = pow.mul(v2.b).divRound(d);\n    const g2 = pow.mul(v1.b).divRound(d);\n\n    assert(d.eq(this.n));\n\n    return [g1, g2];\n  }\n\n  _endoSplit(k) {\n    // Balanced length-two representation of a multiplier.\n    //\n    // [GECC] Algorithm 3.74, Page 127, Section 3.5.\n    //\n    // Also note that it is possible to precompute[1]\n    // values in order to avoid the division[2][3][4].\n    //\n    // This involves precomputing `g1` and `g2 (see\n    // above). `c1` and `c2` can then be computed as\n    // follows:\n    //\n    //   t = ceil(log2(n+1)) + 16\n    //   c1 = (k * g1) >> t\n    //   c2 = -((k * g2) >> t)\n    //\n    // Where `>>` is an _unsigned_ right shift. Also\n    // note that the last bit discarded in the shift\n    // must be stored. If it is 1, then add 1 to the\n    // scalar (absolute addition).\n    //\n    // It's worth noting that libsecp256k1 uses a\n    // different calculation along the lines of:\n    //\n    //   t = ceil(log2(n+1)) + 16\n    //   c1 = ((k * g1) >> t) * -b1\n    //   c2 = ((k * -g2) >> t) * -b2\n    //   k2 = c1 + c2\n    //   k1 = k2 * -lambda + k\n    //\n    // So, in the future, we can consider changing\n    // step 4 to:\n    //\n    //   4. Compute c1 = (k * g1) >> t\n    //          and c2 = -((k * g2) >> t).\n    //\n    //   const shift = this.scalarBits + 16;\n    //   const [g1, g2] = this.endo.pre;\n    //   const c1 = k.mulShift(g1, shift);\n    //   const c2 = k.mulShift(g2, shift).ineg();\n    //\n    // Once we're brave enough, that is.\n    //\n    // [1] [JCEN12] Page 5, Section 4.3.\n    // [2] https://github.com/bitcoin-core/secp256k1/blob/0b70241/src/scalar_impl.h#L259\n    // [3] https://github.com/bitcoin-core/secp256k1/pull/21\n    // [4] https://github.com/bitcoin-core/secp256k1/pull/127\n    assert(k instanceof BN);\n    assert(!k.red);\n    assert(!this.n.isZero());\n\n    const [v1, v2] = this.endo.basis;\n\n    // 4. Compute c1 = round(b2 * k / n)\n    //        and c2 = round(-b1 * k / n).\n    const c1 = v2.b.mul(k).divRound(this.n);\n    const c2 = v1.b.neg().mul(k).divRound(this.n);\n\n    // 5. Compute k1 = k - c1 * a1 - c2 * a2\n    //        and k2 = -c1 * b1 - c2 * b2.\n    const p1 = c1.mul(v1.a);\n    const p2 = c2.mul(v2.a);\n    const q1 = c1.ineg().mul(v1.b);\n    const q2 = c2.mul(v2.b);\n\n    // Calculate answer.\n    const k1 = k.sub(p1).isub(p2);\n    const k2 = q1.isub(q2);\n\n    // 6. Return (k1, k2).\n    return [k1, k2];\n  }\n\n  _endoBeta(point) {\n    assert(point instanceof ShortPoint);\n    return [point, point._getBeta()];\n  }\n\n  _endoWnafMulAdd(points, coeffs) {\n    // Point multiplication with efficiently computable endomorphisms.\n    //\n    // [GECC] Algorithm 3.77, Page 129, Section 3.5.\n    // [GLV] Page 193, Section 3 (Using Efficient Endomorphisms).\n    //\n    // Note it may be possible to do this 4-dimensionally [4GLV].\n    assert(Array.isArray(points));\n    assert(Array.isArray(coeffs));\n    assert(points.length === coeffs.length);\n    assert(this.endo != null);\n\n    const len = points.length;\n    const npoints = new Array(len * 2);\n    const ncoeffs = new Array(len * 2);\n\n    for (let i = 0; i < len; i++) {\n      const [p1, p2] = this._endoBeta(points[i]);\n      const [k1, k2] = this._endoSplit(coeffs[i]);\n\n      npoints[i * 2 + 0] = p1;\n      ncoeffs[i * 2 + 0] = k1;\n      npoints[i * 2 + 1] = p2;\n      ncoeffs[i * 2 + 1] = k2;\n    }\n\n    return this._wnafMulAdd(5, npoints, ncoeffs);\n  }\n\n  _icart(u0) {\n    // Icart's Method.\n    //\n    // Distribution: 5/8.\n    //\n    // [ICART] Page 4, Section 2.\n    // [H2EC] \"Icart Method\".\n    //\n    // Assumptions:\n    //\n    //   - p = 2 (mod 3).\n    //   - u != 0.\n    //\n    // Map:\n    //\n    //   u = 1, if u = 0\n    //   v = (3 * a - u^4) / (6 * u)\n    //   w = (2 * p - 1) / 3\n    //   x = (v^2 - b - u^6 / 27)^w + u^2 / 3\n    //   y = u * x + v\n    const {a, b, i3, one} = this;\n    const i27 = i3.redSqr().redMul(i3);\n    const w = this.p.ushln(1).isubn(1).idivn(3);\n    const u = u0.clone();\n\n    u.cinject(one, u.czero());\n\n    const u2 = u.redSqr();\n    const u4 = u2.redSqr();\n    const u6 = u4.redMul(u2);\n    const u6i = u.redMuln(6).redFermat();\n    const v = a.redMuln(3).redISub(u4).redMul(u6i);\n    const v2 = v.redSqr();\n    const u6d27 = u6.redMul(i27);\n    const u2d3 = u2.redMul(i3);\n    const x = v2.redISub(b).redISub(u6d27).redPow(w).redIAdd(u2d3);\n    const y = u.redMul(x).redIAdd(v);\n\n    return this.point(x, y);\n  }\n\n  _sswu(u) {\n    // Simplified Shallue-Woestijne-Ulas Method.\n    //\n    // Distribution: 3/8.\n    //\n    // [SSWU1] Page 15-16, Section 7. Appendix G.\n    // [SSWU2] Page 5, Theorem 2.3.\n    // [H2EC] \"Simplified Shallue-van de Woestijne-Ulas Method\".\n    //\n    // Assumptions:\n    //\n    //   - a != 0, b != 0.\n    //   - Let z be a non-square in F(p).\n    //   - z != -1.\n    //   - The polynomial g(x) - z is irreducible over F(p).\n    //   - g(b / (z * a)) is square in F(p).\n    //   - u != 0, u != +-sqrt(-1 / z).\n    //\n    // Map:\n    //\n    //   g(x) = x^3 + a * x + b\n    //   t1 = 1 / (z^2 * u^4 + z * u^2)\n    //   x1 = (-b / a) * (1 + t1)\n    //   x1 = b / (z * a), if t1 = 0\n    //   x2 = z * u^2 * x1\n    //   x = x1, if g(x1) is square\n    //     = x2, otherwise\n    //   y = sign(u) * abs(sqrt(g(x)))\n    const {b, z, ai, zi, one} = this;\n    const e = this.p.subn(2);\n    const z2 = z.redSqr();\n    const ba = b.redNeg().redMul(ai);\n    const bza = b.redMul(zi).redMul(ai);\n    const u2 = u.redSqr();\n    const u4 = u2.redSqr();\n    const t1 = z2.redMul(u4).redIAdd(z.redMul(u2)).redPow(e);\n    const x1 = ba.redMul(one.redAdd(t1));\n\n    x1.cinject(bza, t1.czero());\n\n    const x2 = z.redMul(u2).redMul(x1);\n    const y1 = this.solveY2(x1);\n    const y2 = this.solveY2(x2);\n    const alpha = y1.redIsSquare() | 0;\n    const x = x1.cinject(x2, alpha ^ 1);\n    const y = y1.cinject(y2, alpha ^ 1).redSqrt();\n\n    y.cinject(y.redNeg(), y.redIsOdd() ^ u.redIsOdd());\n\n    return this.point(x, y);\n  }\n\n  _sswui(p, hint) {\n    // Inverting the Map (Simplified Shallue-Woestijne-Ulas).\n    //\n    // Assumptions:\n    //\n    //   - a^2 * x^2 - 2 * a * b * x - 3 * b^2 is square in F(p).\n    //   - If r < 3 then x != -b / a.\n    //\n    // Unlike SVDW, the preimages here are evenly\n    // distributed (more or less). SSWU covers ~3/8\n    // of the curve points. Each preimage has a 1/2\n    // chance of mapping to either x1 or x2.\n    //\n    // Assuming the point is within that set, each\n    // point has a 1/4 chance of inverting to any\n    // of the preimages. This means we can simply\n    // randomly select a preimage if one exists.\n    //\n    // However, the [SVDW2] sampling method seems\n    // slighly faster in practice for [SQUARED].\n    //\n    // Map:\n    //\n    //   c = sqrt(a^2 * x^2 - 2 * a * b * x - 3 * b^2)\n    //   u1 = -(a * x + b - c) / (2 * (a * x + b) * z)\n    //   u2 = -(a * x + b + c) / (2 * (a * x + b) * z)\n    //   u3 = -(a * x + b - c) / (2 * b * z)\n    //   u4 = -(a * x + b + c) / (2 * b * z)\n    //   r = random integer in [1,4]\n    //   u = sign(y) * abs(sqrt(ur))\n    const {a, b, z} = this;\n    const {x, y} = p;\n    const r = hint & 3;\n    const a2x2 = a.redSqr().redMul(x.redSqr());\n    const abx2 = a.redMul(b).redMul(x).redIMuln(2);\n    const b23 = b.redSqr().redMuln(3);\n    const axb = a.redMul(x).redIAdd(b);\n    const [s0, c] = sqrt(a2x2.redISub(abx2).redISub(b23));\n    const n0 = axb.redSub(c).redINeg();\n    const n1 = axb.redAdd(c).redINeg();\n    const d0 = axb.redMul(z).redIMuln(2);\n    const d1 = b.redMul(z).redIMuln(2);\n\n    n0.cinject(n1, r & 1); // r = 1 or 3\n    d0.cinject(d1, r >>> 1); // r = 2 or 3\n\n    const [s1, u] = divSqrt(n0, d0);\n\n    u.cinject(u.redNeg(), u.redIsOdd() ^ y.redIsOdd());\n\n    if (!(s0 & s1))\n      throw new Error('Invalid point.');\n\n    return u;\n  }\n\n  _svdwf(u) {\n    // Shallue-van de Woestijne Method.\n    //\n    // Distribution: 9/16.\n    //\n    // [SVDW1] Section 5.\n    // [SVDW2] Page 8, Section 3.\n    //         Page 15, Section 6, Algorithm 1.\n    // [H2EC] \"Shallue-van de Woestijne Method\".\n    //\n    // Assumptions:\n    //\n    //   - p = 1 (mod 3).\n    //   - a = 0, b != 0.\n    //   - Let z be a unique element in F(p).\n    //   - g((sqrt(-3 * z^2) - z) / 2) is square in F(p).\n    //   - u != 0, u != +-sqrt(-g(z)).\n    //\n    // Map:\n    //\n    //   g(x) = x^3 + b\n    //   c = sqrt(-3 * z^2)\n    //   t1 = u^2 + g(z)\n    //   t2 = 1 / (u^2 * t1)\n    //   t3 = u^4 * t2 * c\n    //   x1 = (c - z) / 2 - t3\n    //   x2 = t3 - (c + z) / 2\n    //   x3 = z - t1^3 * t2 / (3 * z^2)\n    //   x = x1, if g(x1) is square\n    //     = x2, if g(x2) is square\n    //     = x3, otherwise\n    //   y = sign(u) * abs(sqrt(g(x)))\n    const {c, z, zi, i2, i3} = this;\n    const e = this.p.subn(2);\n    const gz = this.solveY2(z);\n    const z3 = i3.redMul(zi.redSqr());\n    const u2 = u.redSqr();\n    const u4 = u2.redSqr();\n    const t1 = u2.redAdd(gz);\n    const t2 = u2.redMul(t1).redPow(e);\n    const t3 = u4.redMul(t2).redMul(c);\n    const t4 = t1.redSqr().redMul(t1);\n    const x1 = c.redSub(z).redMul(i2).redISub(t3);\n    const x2 = t3.redSub(c.redAdd(z).redMul(i2));\n    const x3 = z.redSub(t4.redMul(t2).redMul(z3));\n    const y1 = this.solveY2(x1);\n    const y2 = this.solveY2(x2);\n    const y3 = this.solveY2(x3);\n    const alpha = y1.redIsSquare() | 0;\n    const beta = y2.redIsSquare() | 0;\n\n    x1.cinject(x2, (alpha ^ 1) & beta);\n    y1.cinject(y2, (alpha ^ 1) & beta);\n    x1.cinject(x3, (alpha ^ 1) & (beta ^ 1));\n    y1.cinject(y3, (alpha ^ 1) & (beta ^ 1));\n\n    return [x1, y1];\n  }\n\n  _svdw(u) {\n    const [x, yy] = this._svdwf(u);\n    const y = yy.redSqrt();\n\n    y.cinject(y.redNeg(), y.redIsOdd() ^ u.redIsOdd());\n\n    return this.point(x, y);\n  }\n\n  _svdwi(p, hint) {\n    // Inverting the Map (Shallue-van de Woestijne).\n    //\n    // [SQUARED] Algorithm 1, Page 8, Section 3.3.\n    // [SVDW2] Page 12, Section 5.\n    // [SVDW3] \"Inverting the map\".\n    //\n    // Assumptions:\n    //\n    //   - If r = 1 then x != -(c + z) / 2.\n    //   - If r = 2 then x != (c - z) / 2.\n    //   - If r > 2 then (t0 - t1 + t2) is square in F(p).\n    //   - f(f^-1(x)) = x where f is the map function.\n    //\n    // We use the sampling method from [SVDW2],\n    // _not_ [SQUARED]. This seems to have a\n    // better distribution in practice.\n    //\n    // Note that [SVDW3] also appears to be\n    // incorrect in terms of distribution.\n    //\n    // The distribution of f(u), assuming u is\n    // random, is (1/2, 1/4, 1/4).\n    //\n    // To mirror this, f^-1(x) should simply\n    // pick (1/2, 1/4, 1/8, 1/8).\n    //\n    // To anyone running the forward map, our\n    // strings will appear to be random.\n    //\n    // Map:\n    //\n    //   g(x) = x^3 + b\n    //   c = sqrt(-3 * z^2)\n    //   t0 = 9 * (x^2 * z^2 + z^4)\n    //   t1 = 18 * x * z^3\n    //   t2 = 12 * g(z) * (x - z)\n    //   t3 = sqrt(t0 - t1 + t2)\n    //   t4 = t3 * z\n    //   u1 = g(z) * (c - 2 * x - z) / (c + 2 * x + z)\n    //   u2 = g(z) * (c + 2 * x + z) / (c - 2 * x - z)\n    //   u3 = (3 * (z^3 - x * z^2) - 2 * g(z) + t4) / 2\n    //   u4 = (3 * (z^3 - x * z^2) - 2 * g(z) - t4) / 2\n    //   r = random integer in [1,4]\n    //   u = sign(y) * abs(sqrt(ur))\n    const {b, c, z, two} = this;\n    const {x, y} = p;\n    const r = hint & 3;\n    const z2 = z.redSqr();\n    const z3 = z2.redMul(z);\n    const z4 = z2.redSqr();\n    const gz = z3.redAdd(b);\n    const gz2 = gz.redMuln(2);\n    const xx = x.redSqr();\n    const x2z = x.redMuln(2).redIAdd(z);\n    const xz2 = x.redMul(z2);\n    const c0 = c.redSub(x2z);\n    const c1 = c.redAdd(x2z);\n    const t0 = xx.redMul(z2).redIAdd(z4).redIMuln(9);\n    const t1 = x.redMul(z3).redIMuln(18);\n    const t2 = gz.redMul(x.redSub(z)).redIMuln(12);\n    const [s0, t3] = sqrt(t0.redISub(t1).redIAdd(t2));\n    const s1 = ((r - 2) >>> 31) | s0;\n    const t4 = t3.redMul(z);\n    const t5 = z3.redISub(xz2).redIMuln(3).redISub(gz2);\n    const n0 = gz.redMul(c0);\n    const n1 = gz.redMul(c1);\n    const n2 = t5.redAdd(t4);\n    const n3 = t5.redSub(t4);\n    const d0 = two.clone();\n\n    n0.cinject(n1, ((r ^ 1) - 1) >>> 31); // r = 1\n    n0.cinject(n2, ((r ^ 2) - 1) >>> 31); // r = 2\n    n0.cinject(n3, ((r ^ 3) - 1) >>> 31); // r = 3\n    d0.cinject(c1, ((r ^ 0) - 1) >>> 31); // r = 0\n    d0.cinject(c0, ((r ^ 1) - 1) >>> 31); // r = 1\n\n    const [s2, u] = divSqrt(n0, d0);\n    const [x0] = this._svdwf(u);\n    const s3 = x0.ceq(x);\n\n    u.cinject(u.redNeg(), u.redIsOdd() ^ y.redIsOdd());\n\n    if (!(s1 & s2 & s3))\n      throw new Error('Invalid point.');\n\n    return u;\n  }\n\n  isElliptic() {\n    const {a, b} = this;\n    const a2 = a.redSqr();\n    const a3 = a2.redMul(a);\n    const b2 = b.redSqr();\n    const d = b2.redMuln(27).redIAdd(a3.redMuln(4));\n\n    // 4 * a^3 + 27 * b^2 != 0\n    return !d.isZero();\n  }\n\n  jinv() {\n    // [ARITH1] Page 71, Section 4.4.\n    // http://mathworld.wolfram.com/j-Invariant.html\n    const {a, b} = this;\n    const a2 = a.redSqr();\n    const a3 = a2.redMul(a);\n    const b2 = b.redSqr();\n    const t0 = a3.redMuln(4);\n    const lhs = t0.redMuln(1728);\n    const rhs = b2.redMuln(27).redIAdd(t0);\n\n    if (rhs.isZero())\n      throw new Error('Curve is not elliptic.');\n\n    // (1728 * 4 * a^3) / (4 * a^3 + 27 * b^2)\n    return lhs.redDiv(rhs).fromRed();\n  }\n\n  point(x, y, inf = 0) {\n    return new ShortPoint(this, x, y, inf);\n  }\n\n  jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n  }\n\n  solveX(y) {\n    assert(y instanceof BN);\n\n    if (!this.a.isZero())\n      throw new Error('Not implemented.');\n\n    // x^3 = y^2 - b\n    const y2 = y.redSqr();\n    const x3 = y2.redSub(this.b);\n\n    return cubeRoots(x3);\n  }\n\n  solveY2(x) {\n    // [GECC] Page 89, Section 3.2.2.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw.html\n    assert(x instanceof BN);\n\n    // y^2 = x^3 + a * x + b\n    const x3 = x.redSqr().redMul(x);\n    const y2 = x3.redIAdd(this.b);\n\n    if (!this.zeroA) {\n      // Save some cycles for a = -3.\n      if (this.threeA)\n        y2.redIAdd(x.redMuln(-3));\n      else\n        y2.redIAdd(this.a.redMul(x));\n    }\n\n    return y2;\n  }\n\n  validate(point) {\n    assert(point instanceof ShortPoint);\n\n    if (point.inf)\n      return true;\n\n    const {x, y} = point;\n    const y2 = this.solveY2(x);\n\n    return y.redSqr().eq(y2);\n  }\n\n  pointFromX(x, sign = null) {\n    assert(x instanceof BN);\n    assert(sign == null || typeof sign === 'boolean');\n\n    if (!x.red)\n      x = x.toRed(this.red);\n\n    const y = this.solveY(x);\n\n    if (sign != null) {\n      if (this.h.cmpn(1) > 0) {\n        if (y.isZero() && sign)\n          throw new Error('Invalid point.');\n      }\n\n      if (y.redIsOdd() !== sign)\n        y.redINeg();\n    }\n\n    return this.point(x, y);\n  }\n\n  pointFromY(y, index = 0) {\n    assert(y instanceof BN);\n    assert((index >>> 0) === index);\n\n    if (!y.red)\n      y = y.toRed(this.red);\n\n    const coords = this.solveX(y);\n\n    if (index >= coords.length)\n      throw new Error('Invalid X coordinate index.');\n\n    const x = coords[index];\n\n    return this.point(x, y);\n  }\n\n  isIsomorphic(curve) {\n    // [GECC] Page 84, Section 3.1.5.\n    // [ARITH1] Page 286, Section 13.2.3.c.\n    assert(curve instanceof Curve);\n\n    if (!curve.p.eq(this.p))\n      return false;\n\n    let u2, u3;\n    try {\n      [u2, u3] = this._scale(curve);\n    } catch (e) {\n      return false;\n    }\n\n    // E(a,b) <-> E(au^4,bu^6)\n    if (curve.type === 'short') {\n      // a' = a * u^4, b' = b * u^6\n      const a = this.field(curve.a).redMul(u2.redSqr());\n      const b = this.field(curve.b).redMul(u3.redSqr());\n\n      return this.a.eq(a) && this.b.eq(b);\n    }\n\n    // E(a,b) <-> M(A,B)\n    if (curve.type === 'mont') {\n      // (A / (3 * B))^3 + a * (A / (3 * B)) + b = 0\n      const {a3, bi} = curve;\n      const x = this.field(a3.redMul(bi)).redMul(u2);\n      const y2 = this.solveY2(x);\n\n      return y2.isZero();\n    }\n\n    // E(a,b) <-> E(a,d)\n    if (curve.type === 'edwards') {\n      // ((a' + d') / 6)^3 + a * ((a' + d') / 6) + b = 0\n      const x = this.field(curve.ad6).redMul(u2);\n      const y2 = this.solveY2(x);\n\n      return y2.isZero();\n    }\n\n    return false;\n  }\n\n  isIsogenous(curve) {\n    assert(curve instanceof Curve);\n    return false;\n  }\n\n  pointFromShort(point) {\n    // [GECC] Page 84, Section 3.1.5.\n    // [ALT] Appendix F.3 (Isomorphic Mapping between Weierstrass Curves).\n    assert(point instanceof ShortPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Isomorphic maps for E(a,b)<->E(au^4,bu^6):\n      //\n      //   x' = x * u^2\n      //   y' = y * u^3\n      //\n      // Where a * u^4 = a' and b * u^6 = b'.\n      if (point.isInfinity())\n        return this.point();\n\n      const [u2, u3] = this._scale(point.curve);\n      const x = this.field(point.x);\n      const y = this.field(point.y);\n      const nx = x.redMul(u2);\n      const ny = y.redMul(u3);\n\n      return this.point(nx, ny);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromMont(point) {\n    // [ALT] Appendix E.2 (Switching between Alternative Representations).\n    // [MONT2] \"Equivalence with Weierstrass curves\"\n    assert(point instanceof MontPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Equivalence for M(A,B)->E(a,b):\n      //\n      //   x = (u + A / 3) / B\n      //   y = v / B\n      //\n      // Undefined if ((u^3 + A * u^2 + u) / B) is not square.\n      if (point.isInfinity())\n        return this.point();\n\n      const {a3, bi} = point.curve;\n      const [u2, u3] = this._scale(point.curve);\n      const nx = point.x.redAdd(a3).redMul(bi);\n      const ny = point.y.redMul(bi);\n\n      return this.point(this.field(nx).redMul(u2),\n                        this.field(ny).redMul(u3));\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromEdwards(point) {\n    // [TWISTEQ] Section 2.\n    assert(point instanceof EdwardsPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Equivalence for E(a,d)->E(a',b'):\n      //\n      //   x' = ((5 * d - a) * y + d - 5 * a) / (12 * (y - 1))\n      //   y' = (d - a) * (y + 1) / (4 * x * (y - 1))\n      //\n      // Undefined for x = 0 or y = 1.\n      //\n      // Exceptional Cases:\n      //   - (0, 1) -> O\n      //   - (0, -1) -> ((a + d) / 6, 0)\n      //\n      // Unexceptional Cases:\n      //   - (sqrt(1 / a), 0) -> ((5 * a - d) / 12, (a - d) / 4 * sqrt(a))\n      const {a, d, ad6} = point.curve;\n      const [u2, u3] = this._scale(point.curve);\n\n      if (point.isInfinity())\n        return this.point();\n\n      if (point.x.isZero()) {\n        const x = this.field(ad6).redMul(u2);\n        return this.point(x, this.zero);\n      }\n\n      const {x, y, z} = point;\n      const a5 = a.redMuln(5);\n      const d5 = d.redMuln(5);\n      const dma = d.redSub(a);\n      const d5a = d5.redSub(a);\n      const da5 = d.redSub(a5);\n      const ypz = y.redAdd(z);\n      const ymz = y.redSub(z);\n      const xx = d5a.redMul(y).redIAdd(da5.redMul(z));\n      const xz = ymz.redMuln(12);\n      const yy = dma.redMul(ypz).redMul(z);\n      const yz = ymz.redMul(x).redIMuln(4);\n\n      return this.cpoint(this.field(xx).redMul(u2),\n                         this.field(xz),\n                         this.field(yy).redMul(u3),\n                         this.field(yz));\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromUniform(u) {\n    assert(u instanceof BN);\n\n    // z = 0 or b = 0\n    if (this.z.isZero() || this.b.isZero())\n      throw new Error('Not implemented.');\n\n    // a != 0, b != 0\n    if (!this.a.isZero())\n      return this._sswu(u);\n\n    // p = 1 mod 3, a = 0, b != 0\n    if (!this.c.isZero())\n      return this._svdw(u);\n\n    throw new Error('Not implemented.');\n  }\n\n  pointToUniform(p, hint) {\n    assert(p instanceof ShortPoint);\n    assert((hint >>> 0) === hint);\n\n    // z = 0 or b = 0\n    if (this.z.isZero() || this.b.isZero())\n      throw new Error('Not implemented.');\n\n    // P = O\n    if (p.isInfinity())\n      throw new Error('Invalid point.');\n\n    // Add a random torsion component.\n    const i = ((hint >>> 4) & 15) % this.torsion.length;\n    const q = p.add(this.torsion[i]);\n\n    // a != 0, b != 0\n    if (!this.a.isZero())\n      return this._sswui(q, hint);\n\n    // p = 1 mod 3, a = 0, b != 0\n    if (!this.c.isZero())\n      return this._svdwi(q, hint);\n\n    throw new Error('Not implemented.');\n  }\n\n  mulAll(points, coeffs) {\n    return super.mulAll(points, coeffs).toP();\n  }\n\n  mulAllSimple(points, coeffs) {\n    return super.mulAllSimple(points, coeffs).toP();\n  }\n\n  decodePoint(bytes) {\n    return ShortPoint.decode(this, bytes);\n  }\n\n  encodeX(point) {\n    assert(point instanceof Point);\n    return point.encodeX();\n  }\n\n  decodeEven(bytes) {\n    return ShortPoint.decodeEven(this, bytes);\n  }\n\n  decodeSquare(bytes) {\n    return ShortPoint.decodeSquare(this, bytes);\n  }\n\n  toShort(a0, odd, sign = null) {\n    const [a, b] = this._short(a0, odd);\n\n    const curve = new ShortCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = curve._scale(this);\n\n      if (u3.redIsOdd() !== sign)\n        u3.redINeg();\n    }\n\n    if (!this.g.isInfinity())\n      curve.g = curve.pointFromShort(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++)\n      curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n\n    return curve;\n  }\n\n  toMont(b0, odd, sign = null) {\n    const [a, b] = this._mont(b0, odd);\n\n    const curve = new MontCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = this._scale(curve);\n\n      if (u3.redIsOdd() !== sign)\n        u3.redINeg();\n    }\n\n    if (!this.g.isInfinity())\n      curve.g = curve.pointFromShort(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++)\n      curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n\n    return curve;\n  }\n\n  toEdwards(a0, odd, sign = null) {\n    const [a, d] = this._edwards(a0, odd);\n\n    const curve = new EdwardsCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      d: d,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = this._scale(curve);\n\n      if (u3.redIsOdd() !== sign)\n        u3.redINeg();\n    }\n\n    if (!this.g.isInfinity()) {\n      curve.g = curve.pointFromShort(this.g);\n      curve.g.normalize();\n    }\n\n    if (curve.isComplete()) {\n      for (let i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n        curve.torsion[i].normalize();\n      }\n    }\n\n    return curve;\n  }\n\n  pointFromJSON(json) {\n    return ShortPoint.fromJSON(this, json);\n  }\n\n  toJSON(pre) {\n    const json = super.toJSON(pre);\n\n    json.a = this.a.fromRed().toJSON();\n    json.b = this.b.fromRed().toJSON();\n\n    if (!this.c.isZero())\n      json.c = this.c.fromRed().toJSON();\n\n    return json;\n  }\n}\n\n/**\n * ShortPoint\n */\n\nclass ShortPoint extends Point {\n  constructor(curve, x, y, inf) {\n    assert(curve instanceof ShortCurve);\n\n    super(curve, types.AFFINE);\n\n    this.x = this.curve.zero;\n    this.y = this.curve.zero;\n    this.inf = 1;\n\n    if (x != null)\n      this._init(x, y, inf);\n  }\n\n  _init(x, y, inf) {\n    assert(x instanceof BN);\n    assert(y instanceof BN);\n\n    this.x = x;\n    this.y = y;\n\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n\n    this.inf = inf | 0;\n  }\n\n  _safeNAF(width) {\n    assert((width >>> 0) === width);\n\n    if (this.pre && this.pre.naf)\n      return this.pre.naf;\n\n    // Avoid inversions.\n    if (width > 1)\n      return this.toJ()._getNAF(width);\n\n    return this._getNAF(width);\n  }\n\n  _getBeta() {\n    if (!this.curve.endo)\n      return null;\n\n    if (this.pre && this.pre.beta)\n      return this.pre.beta;\n\n    // Augment the point with our beta value.\n    // This is the counterpart to `k2` after\n    // the endomorphism split of `k`.\n    //\n    // Note that if we have precomputation,\n    // we have to clone and update all of the\n    // precomputed points below.\n    const xb = this.x.redMul(this.curve.endo.beta);\n    const beta = this.curve.point(xb, this.y);\n\n    if (this.pre) {\n      beta.pre = this.pre.map((point) => {\n        const xb = point.x.redMul(this.curve.endo.beta);\n        return this.curve.point(xb, point.y);\n      });\n\n      this.pre.beta = beta;\n    }\n\n    return beta;\n  }\n\n  _getJNAF(point) {\n    assert(point instanceof ShortPoint);\n\n    if (this.inf | point.inf)\n      return super._getJNAF(point);\n\n    // Create comb for JSF.\n    const comb = [\n      this, // 1\n      null, // 3\n      null, // 5\n      point // 7\n    ];\n\n    // Try to avoid Jacobian points, if possible.\n    if (this.y.eq(point.y)) {\n      comb[1] = this.add(point);\n      comb[2] = this.toJ().sub(point);\n    } else if (this.y.eq(point.y.redNeg())) {\n      comb[1] = this.toJ().add(point);\n      comb[2] = this.sub(point);\n    } else {\n      comb[1] = this.toJ().add(point);\n      comb[2] = this.toJ().sub(point);\n    }\n\n    return comb;\n  }\n\n  clone() {\n    return this.curve.point(this.x.clone(),\n                            this.y.clone(),\n                            this.inf);\n  }\n\n  swap(point, flag) {\n    assert(point instanceof ShortPoint);\n\n    const cond = ((flag >> 31) | (-flag >> 31)) & 1;\n    const inf1 = this.inf;\n    const inf2 = point.inf;\n\n    this.x.cswap(point.x, flag);\n    this.y.cswap(point.y, flag);\n\n    this.inf = (inf1 & (cond ^ 1)) | (inf2 & cond);\n    point.inf = (inf2 & (cond ^ 1)) | (inf1 & cond);\n\n    return this;\n  }\n\n  scale(a) {\n    return this.toJ().scale(a);\n  }\n\n  neg() {\n    // P = O\n    if (this.inf)\n      return this;\n\n    // -(X1, Y1) = (X1, -Y1)\n    return this.curve.point(this.x, this.y.redNeg());\n  }\n\n  add(p) {\n    // [GECC] Page 80, Section 3.1.2.\n    //\n    // Addition Law:\n    //\n    //   l = (y1 - y2) / (x1 - x2)\n    //   x3 = l^2 - x1 - x2\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // 1I + 2M + 1S + 6A\n    assert(p instanceof ShortPoint);\n\n    // O + P = P\n    if (this.inf)\n      return p;\n\n    // P + O = P\n    if (p.inf)\n      return this;\n\n    // P + P, P + -P\n    if (this.x.eq(p.x)) {\n      // P + -P = O\n      if (!this.y.eq(p.y))\n        return this.curve.point();\n\n      // P + P = 2P\n      return this.dbl();\n    }\n\n    // X1 != X2, Y1 = Y2\n    if (this.y.eq(p.y)) {\n      // X3 = -X1 - X2\n      const nx = this.x.redNeg().redISub(p.x);\n\n      // Y3 = -Y1\n      const ny = this.y.redNeg();\n\n      // Skip the inverse.\n      return this.curve.point(nx, ny);\n    }\n\n    // H = X1 - X2\n    const h = this.x.redSub(p.x);\n\n    // R = Y1 - Y2\n    const r = this.y.redSub(p.y);\n\n    // L = R / H\n    const l = r.redDiv(h);\n\n    // X3 = L^2 - X1 - X2\n    const nx = l.redSqr().redISub(this.x).redISub(p.x);\n\n    // Y3 = L * (X1 - X3) - Y1\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n\n    return this.curve.point(nx, ny);\n  }\n\n  dbl() {\n    // [GECC] Page 80, Section 3.1.2.\n    //\n    // Addition Law (doubling):\n    //\n    //   l = (3 * x1^2 + a) / (2 * y1)\n    //   x3 = l^2 - 2 * x1\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // 1I + 2M + 2S + 3A + 2*2 + 1*3\n\n    // P = O\n    if (this.inf)\n      return this;\n\n    // Y1 = 0\n    if (this.y.isZero())\n      return this.curve.point();\n\n    // XX = X1^2\n    const xx = this.x.redSqr();\n\n    // M = 3 * XX + a\n    const m = xx.redIMuln(3).redIAdd(this.curve.a);\n\n    // Z = 2 * Y1\n    const z = this.y.redMuln(2);\n\n    // L = M / Z\n    const l = m.redDiv(z);\n\n    // X3 = L^2 - 2 * X1\n    const nx = l.redSqr().redISub(this.x).redISub(this.x);\n\n    // Y3 = L * (X1 - X3) - Y1\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n\n    return this.curve.point(nx, ny);\n  }\n\n  dblp(pow) {\n    return this.toJ().dblp(pow).toP();\n  }\n\n  uadd(p) {\n    // [SIDE2] Page 5, Section 3.\n    // [SIDE3] Page 4, Section 3.\n    //\n    // Addition Law (unified):\n    //\n    //   l = ((x1 + x2)^2 - (x1 * x2) + a) / (y1 + y2)\n    //   x3 = l^2 - x1 - x2\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // If x1 != x2 and y1 = -y2, we switch\n    // back to the regular addition lambda:\n    //\n    //   l = (y1 - y2) / (x1 - x2)\n    //\n    // 1I + 3M + 2S + 10A\n    assert(p instanceof ShortPoint);\n\n    // M = Y1 + Y2\n    const m = this.y.redAdd(p.y);\n\n    // A = (X1 + X2)^2\n    const a = this.x.redAdd(p.x).redSqr();\n\n    // B = X1 * X2\n    const b = this.x.redMul(p.x);\n\n    // R = A - B + a\n    const r = a.redISub(b).redIAdd(this.curve.a);\n\n    // Check for degenerate case (X1 != X2, Y1 = -Y2).\n    const degenerate = m.czero() & r.czero();\n\n    // M = X1 - X2 (if degenerate)\n    m.cinject(this.x.redSub(p.x), degenerate);\n\n    // R = Y1 - Y2 (if degenerate)\n    r.cinject(this.y.redSub(p.y), degenerate);\n\n    // Check for negation (X1 = X2, Y1 = -Y2).\n    const negated = m.czero() & ((this.inf | p.inf) ^ 1);\n\n    // M = 1 (if M = 0)\n    m.cinject(this.curve.one, m.czero());\n\n    // L = R / M\n    const l = r.redMul(m.redFermat());\n\n    // X3 = L^2 - X1 - X2\n    const nx = l.redSqr().redISub(this.x).redISub(p.x);\n\n    // Y3 = L * (X1 - X3) - Y1\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n\n    // Check for infinity.\n    const inf = negated | (this.inf & p.inf);\n\n    // Case 1: O + P = P\n    nx.cinject(p.x, this.inf);\n    ny.cinject(p.y, this.inf);\n\n    // Case 2: P + O = P\n    nx.cinject(this.x, p.inf);\n    ny.cinject(this.y, p.inf);\n\n    // Case 3 & 4: P + -P = O, O + O = O\n    nx.cinject(this.curve.zero, inf);\n    ny.cinject(this.curve.zero, inf);\n\n    return this.curve.point(nx, ny, inf);\n  }\n\n  udbl() {\n    return this.uadd(this);\n  }\n\n  recover(x1, z1, x2, z2) {\n    // Brier-Joye Y-coordinate Recovery.\n    //\n    // [SIDE2] Proposition 3, Page 7, Section 4.\n    //\n    // 14M + 3S + 5A + 2*2 + 1*a + 1*b\n    assert(x1 instanceof BN);\n    assert(z1 instanceof BN);\n    assert(x2 instanceof BN);\n    assert(z2 instanceof BN);\n\n    // P = O\n    if (this.inf)\n      return this.curve.jpoint();\n\n    // Z = Z1 * Z2\n    const z = z1.redMul(z2);\n\n    // ZZ = Z^2\n    const zz = z.redSqr();\n\n    // ZZZ = ZZ * Z\n    const zzz = zz.redMul(z);\n\n    // U0 = X0 * Z\n    const u0 = this.x.redMul(z);\n\n    // U1 = X1 * Z2\n    const u1 = x1.redMul(z2);\n\n    // U2 = X2 * Z1\n    const u2 = x2.redMul(z1);\n\n    // A = 2 * b * ZZZ\n    const a = this.curve.b.redMul(zzz).redIMuln(2);\n\n    // B = a * ZZ + U0 * U1\n    const b = u0.redMul(u1).redIAdd(this.curve.a.redMul(zz));\n\n    // C = U0 + U1\n    const c = u0.redAdd(u1);\n\n    // D = U0 - U1\n    const d = u0.redISub(u1);\n\n    // E = A + B * C\n    const e = a.redIAdd(b.redMul(c));\n\n    // F = U2 * D^2\n    const f = u2.redMul(d.redSqr());\n\n    // G = E - F\n    const g = e.redISub(f);\n\n    // H = 2 * Y0 * ZZZ\n    const h = this.y.redMul(zzz).redIMuln(2);\n\n    // I = X1 * H\n    const i = x1.redMul(h);\n\n    // J = G * Z1\n    const j = g.redMul(z1);\n\n    // K = Z1 * H\n    const k = z1.redMul(h);\n\n    // X3 = I * K\n    const nx = i.redMul(k);\n\n    // Y3 = J * K^2\n    const ny = j.redMul(k.redSqr());\n\n    // Z3 = K\n    const nz = k;\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  getX() {\n    if (this.inf)\n      throw new Error('Invalid point.');\n\n    return this.x.fromRed();\n  }\n\n  getY() {\n    if (this.inf)\n      throw new Error('Invalid point.');\n\n    return this.y.fromRed();\n  }\n\n  eq(p) {\n    assert(p instanceof ShortPoint);\n\n    // P = Q\n    if (this === p)\n      return true;\n\n    // P = O\n    if (this.inf)\n      return p.inf !== 0;\n\n    // Q = O\n    if (p.inf)\n      return false;\n\n    // X1 = X2, Y1 = Y2\n    return this.x.eq(p.x)\n        && this.y.eq(p.y);\n  }\n\n  cmp(point) {\n    assert(point instanceof ShortPoint);\n\n    if (this.inf && !point.inf)\n      return -1;\n\n    if (!this.inf && point.inf)\n      return 1;\n\n    if (this.inf && point.inf)\n      return 0;\n\n    return this.order().cmp(point.order())\n        || this.getX().cmp(point.getX())\n        || this.getY().cmp(point.getY());\n  }\n\n  isInfinity() {\n    // Infinity cannot be represented in\n    // the affine space, except by a flag.\n    return this.inf !== 0;\n  }\n\n  isOrder2() {\n    if (this.inf)\n      return false;\n\n    return this.y.isZero();\n  }\n\n  isOdd() {\n    if (this.inf)\n      return false;\n\n    return this.y.redIsOdd();\n  }\n\n  isEven() {\n    if (this.inf)\n      return false;\n\n    return this.y.redIsEven();\n  }\n\n  isSquare() {\n    if (this.inf)\n      return false;\n\n    return this.y.redJacobi() !== -1;\n  }\n\n  eqX(x) {\n    assert(x instanceof BN);\n    assert(!x.red);\n\n    if (this.inf)\n      return false;\n\n    return this.getX().eq(x);\n  }\n\n  eqR(x) {\n    assert(x instanceof BN);\n    assert(!x.red);\n    assert(!this.curve.n.isZero());\n\n    if (this.inf)\n      return false;\n\n    return this.getX().imod(this.curve.n).eq(x);\n  }\n\n  mul(k) {\n    return super.mul(k).toP();\n  }\n\n  muln(k) {\n    return super.muln(k).toP();\n  }\n\n  mulSimple(k) {\n    return super.mulSimple(k).toP();\n  }\n\n  mulBlind(k, rng) {\n    return super.mulBlind(k, rng).toP();\n  }\n\n  mulConst(k, rng) {\n    return super.mulConst(k, rng).toP();\n  }\n\n  mulAdd(k1, p2, k2) {\n    return super.mulAdd(k1, p2, k2).toP();\n  }\n\n  mulAddSimple(k1, p2, k2) {\n    return super.mulAddSimple(k1, p2, k2).toP();\n  }\n\n  mulH() {\n    return super.mulH().toP();\n  }\n\n  div(k) {\n    return super.div(k).toP();\n  }\n\n  divn(k) {\n    return super.divn(k).toP();\n  }\n\n  divH() {\n    return super.divH().toP();\n  }\n\n  toP() {\n    return this;\n  }\n\n  toJ() {\n    // (X3, Y3, Z3) = (1, 1, 0)\n    if (this.inf)\n      return this.curve.jpoint();\n\n    // (X3, Y3, Z3) = (X1, Y1, 1)\n    return this.curve.jpoint(this.x, this.y, this.curve.one);\n  }\n\n  encode(compact) {\n    // [SEC1] Page 10, Section 2.3.3.\n    if (compact == null)\n      compact = true;\n\n    assert(typeof compact === 'boolean');\n\n    const {fieldSize} = this.curve;\n\n    // We do not serialize points at infinity.\n    if (this.inf)\n      throw new Error('Invalid point.');\n\n    // Compressed form (0x02 = even, 0x03 = odd).\n    if (compact) {\n      const p = Buffer.alloc(1 + fieldSize);\n      const x = this.curve.encodeField(this.getX());\n\n      p[0] = 0x02 | this.y.redIsOdd();\n      x.copy(p, 1);\n\n      return p;\n    }\n\n    // Uncompressed form (0x04).\n    const p = Buffer.alloc(1 + fieldSize * 2);\n    const x = this.curve.encodeField(this.getX());\n    const y = this.curve.encodeField(this.getY());\n\n    p[0] = 0x04;\n    x.copy(p, 1);\n    y.copy(p, 1 + fieldSize);\n\n    return p;\n  }\n\n  static decode(curve, bytes) {\n    // [SEC1] Page 11, Section 2.3.4.\n    assert(curve instanceof ShortCurve);\n    assert(Buffer.isBuffer(bytes));\n\n    const len = curve.fieldSize;\n\n    if (bytes.length < 1 + len)\n      throw new Error('Not a point.');\n\n    // Point forms:\n    //\n    //   0x00 -> Infinity (openssl, unsupported)\n    //   0x02 -> Compressed Even\n    //   0x03 -> Compressed Odd\n    //   0x04 -> Uncompressed\n    //   0x06 -> Hybrid Even (openssl)\n    //   0x07 -> Hybrid Odd (openssl)\n    //\n    // Note that openssl supports serializing points\n    // at infinity as {0}. We choose not to support it\n    // because it's strange and not terribly useful.\n    const form = bytes[0];\n\n    switch (form) {\n      case 0x02:\n      case 0x03: {\n        if (bytes.length !== 1 + len)\n          throw new Error('Invalid point size for compressed.');\n\n        const x = curve.decodeField(bytes.slice(1, 1 + len));\n\n        if (x.cmp(curve.p) >= 0)\n          throw new Error('Invalid point.');\n\n        const p = curve.pointFromX(x, form === 0x03);\n\n        assert(!p.isInfinity());\n\n        return p;\n      }\n\n      case 0x04:\n      case 0x06:\n      case 0x07: {\n        if (bytes.length !== 1 + len * 2)\n          throw new Error('Invalid point size for uncompressed.');\n\n        const x = curve.decodeField(bytes.slice(1, 1 + len));\n        const y = curve.decodeField(bytes.slice(1 + len, 1 + 2 * len));\n\n        // [GECC] Algorithm 4.3, Page 180, Section 4.\n        if (x.cmp(curve.p) >= 0 || y.cmp(curve.p) >= 0)\n          throw new Error('Invalid point.');\n\n        // OpenSSL hybrid encoding.\n        if (form !== 0x04 && form !== (0x06 | y.isOdd()))\n          throw new Error('Invalid hybrid encoding.');\n\n        const p = curve.point(x, y);\n\n        if (!p.validate())\n          throw new Error('Invalid point.');\n\n        assert(!p.isInfinity());\n\n        return p;\n      }\n\n      default: {\n        throw new Error('Unknown point format.');\n      }\n    }\n  }\n\n  encodeX() {\n    // [SCHNORR] \"Specification\".\n    // [BIP340] \"Specification\".\n    return this.curve.encodeField(this.getX());\n  }\n\n  static decodeEven(curve, bytes) {\n    // [BIP340] \"Specification\".\n    assert(curve instanceof ShortCurve);\n\n    const x = curve.decodeField(bytes);\n\n    if (x.cmp(curve.p) >= 0)\n      throw new Error('Invalid point.');\n\n    return curve.pointFromX(x, false);\n  }\n\n  static decodeSquare(curve, bytes) {\n    // [SCHNORR] \"Specification\".\n    // [BIP340] \"Specification\".\n    assert(curve instanceof ShortCurve);\n\n    const x = curve.decodeField(bytes);\n\n    if (x.cmp(curve.p) >= 0)\n      throw new Error('Invalid point.');\n\n    return curve.pointFromX(x);\n  }\n\n  toJSON(pre) {\n    if (this.inf)\n      return [];\n\n    const x = this.getX().toJSON();\n    const y = this.getY().toJSON();\n\n    if (pre === true && this.pre)\n      return [x, y, this.pre.toJSON()];\n\n    return [x, y];\n  }\n\n  toPretty() {\n    if (this.inf)\n      return [];\n\n    const size = this.curve.fieldSize * 2;\n    const x = toPretty(this.getX(), size);\n    const y = toPretty(this.getY(), size);\n\n    return [x, y];\n  }\n\n  static fromJSON(curve, json) {\n    assert(curve instanceof ShortCurve);\n    assert(Array.isArray(json));\n    assert(json.length === 0\n        || json.length === 2\n        || json.length === 3);\n\n    if (json.length === 0)\n      return curve.point();\n\n    const x = BN.fromJSON(json[0]);\n    const y = BN.fromJSON(json[1]);\n    const point = curve.point(x, y);\n\n    if (json.length > 2 && json[2] != null)\n      point.pre = Precomp.fromJSON(point, json[2]);\n\n    return point;\n  }\n\n  [custom]() {\n    if (this.inf)\n      return '<ShortPoint: Infinity>';\n\n    return '<ShortPoint:'\n         + ' x=' + this.x.fromRed().toString(16, 2)\n         + ' y=' + this.y.fromRed().toString(16, 2)\n         + '>';\n  }\n}\n\n/**\n * JPoint\n */\n\nclass JPoint extends Point {\n  constructor(curve, x, y, z) {\n    assert(curve instanceof ShortCurve);\n\n    super(curve, types.JACOBIAN);\n\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = this.curve.zero;\n    this.zOne = 0;\n\n    if (x != null)\n      this._init(x, y, z);\n  }\n\n  _init(x, y, z) {\n    assert(x instanceof BN);\n    assert(y instanceof BN);\n    assert(z == null || (z instanceof BN));\n\n    this.x = x;\n    this.y = y;\n    this.z = z || this.curve.one;\n\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n\n    this.zOne = this.z.eq(this.curve.one) | 0;\n  }\n\n  clone() {\n    return this.curve.jpoint(this.x.clone(),\n                             this.y.clone(),\n                             this.z.clone());\n  }\n\n  swap(point, flag) {\n    assert(point instanceof JPoint);\n\n    const cond = ((flag >> 31) | (-flag >> 31)) & 1;\n    const zOne1 = this.zOne;\n    const zOne2 = point.zOne;\n\n    this.x.cswap(point.x, flag);\n    this.y.cswap(point.y, flag);\n    this.z.cswap(point.z, flag);\n\n    this.zOne = (zOne1 & (cond ^ 1)) | (zOne2 & cond);\n    point.zOne = (zOne2 & (cond ^ 1)) | (zOne1 & cond);\n\n    return this;\n  }\n\n  validate() {\n    // [GECC] Example 3.20, Page 88, Section 3.\n    const {a, b} = this.curve;\n\n    // P = O\n    if (this.isInfinity())\n      return true;\n\n    // Z1 = 1\n    if (this.zOne)\n      return this.curve.validate(this.toP());\n\n    // y^2 = x^3 + a * x * z^4 + b * z^6\n    const lhs = this.y.redSqr();\n    const x3 = this.x.redSqr().redMul(this.x);\n    const z2 = this.z.redSqr();\n    const z4 = z2.redSqr();\n    const z6 = z4.redMul(z2);\n    const rhs = x3.redIAdd(b.redMul(z6));\n\n    if (!this.curve.zeroA) {\n      // Save some cycles for a = -3.\n      if (this.curve.threeA)\n        rhs.redIAdd(z4.redIMuln(-3).redMul(this.x));\n      else\n        rhs.redIAdd(a.redMul(z4).redMul(this.x));\n    }\n\n    return lhs.eq(rhs);\n  }\n\n  normalize() {\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#scaling-z\n    // 1I + 3M + 1S\n\n    // Z = 1\n    if (this.zOne)\n      return this;\n\n    // P = O\n    if (this.isInfinity())\n      return this;\n\n    // A = 1 / Z1\n    const a = this.z.redInvert();\n\n    // AA = A^2\n    const aa = a.redSqr();\n\n    // X3 = X1 * AA\n    this.x = this.x.redMul(aa);\n\n    // Y3 = Y1 * AA * A\n    this.y = this.y.redMul(aa).redMul(a);\n\n    // Z3 = 1\n    this.z = this.curve.one;\n    this.zOne = 1;\n\n    return this;\n  }\n\n  scale(a) {\n    assert(a instanceof BN);\n\n    // P = O\n    if (this.isInfinity())\n      return this.curve.jpoint();\n\n    // AA = A^2\n    const aa = a.redSqr();\n\n    // X3 = X1 * AA\n    const nx = this.x.redMul(aa);\n\n    // Y3 = Y1 * AA * A\n    const ny = this.y.redMul(aa).redMul(a);\n\n    // Z3 = Z1 * A\n    const nz = this.z.redMul(a);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  neg() {\n    // -(X1, Y1, Z1) = (X1, -Y1, Z1)\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n  }\n\n  add(p) {\n    assert(p instanceof Point);\n\n    if (p.type === types.AFFINE)\n      return this._mixedAdd(p);\n\n    return this._add(p);\n  }\n\n  _add(p) {\n    assert(p instanceof JPoint);\n\n    // O + P = P\n    if (this.isInfinity())\n      return p;\n\n    // P + O = P\n    if (p.isInfinity())\n      return this;\n\n    // Z1 = 1, Z2 = 1\n    if (this.zOne && p.zOne)\n      return this._addAA(p);\n\n    // Z1 = 1\n    if (this.zOne)\n      return p._addJA(this);\n\n    // Z2 = 1\n    if (p.zOne)\n      return this._addJA(p);\n\n    return this._addJJ(p);\n  }\n\n  _mixedAdd(p) {\n    assert(p instanceof ShortPoint);\n\n    // O + P = P\n    if (this.isInfinity())\n      return p.toJ();\n\n    // P + O = P\n    if (p.isInfinity())\n      return this;\n\n    // Z1 = 1, Z2 = 1\n    if (this.zOne)\n      return this._addAA(p);\n\n    return this._addJA(p);\n  }\n\n  _addJJ(p) {\n    // No assumptions.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-add-1998-cmo-2\n    // 12M + 4S + 6A + 1*2 (implemented as: 12M + 4S + 7A)\n\n    // Z1Z1 = Z1^2\n    const z1z1 = this.z.redSqr();\n\n    // Z2Z2 = Z2^2\n    const z2z2 = p.z.redSqr();\n\n    // U1 = X1 * Z2Z2\n    const u1 = this.x.redMul(z2z2);\n\n    // U2 = X2 * Z1Z1\n    const u2 = p.x.redMul(z1z1);\n\n    // S1 = Y1 * Z2 * Z2Z2\n    const s1 = this.y.redMul(p.z).redMul(z2z2);\n\n    // S2 = Y2 * Z1 * Z1Z1\n    const s2 = p.y.redMul(this.z).redMul(z1z1);\n\n    // H = U2 - U1\n    const h = u2.redISub(u1);\n\n    // r = S2 - S1\n    const r = s2.redISub(s1);\n\n    // H = 0\n    if (h.isZero()) {\n      if (!r.isZero())\n        return this.curve.jpoint();\n\n      return this.dbl();\n    }\n\n    // HH = H^2\n    const hh = h.redSqr();\n\n    // HHH = H * HH\n    const hhh = h.redMul(hh);\n\n    // V = U1 * HH\n    const v = u1.redMul(hh);\n\n    // X3 = r^2 - HHH - 2 * V\n    const nx = r.redSqr().redISub(hhh).redISub(v).redISub(v);\n\n    // Y3 = r * (V - X3) - S1 * HHH\n    const ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(hhh));\n\n    // Z3 = Z1 * Z2 * H\n    const nz = this.z.redMul(p.z).redMul(h);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _addJA(p) {\n    // Assumes Z2 = 1.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-madd\n    // 8M + 3S + 6A + 5*2 (implemented as: 8M + 3S + 7A + 4*2)\n\n    // Z1Z1 = Z1^2\n    const z1z1 = this.z.redSqr();\n\n    // U2 = X2 * Z1Z1\n    const u2 = p.x.redMul(z1z1);\n\n    // S2 = Y2 * Z1 * Z1Z1\n    const s2 = p.y.redMul(this.z).redMul(z1z1);\n\n    // H = U2 - X1\n    const h = u2.redISub(this.x);\n\n    // r = 2 * (S2 - Y1)\n    const r = s2.redISub(this.y).redIMuln(2);\n\n    // H = 0\n    if (h.isZero()) {\n      if (!r.isZero())\n        return this.curve.jpoint();\n\n      return this.dbl();\n    }\n\n    // I = (2 * H)^2\n    const i = h.redMuln(2).redSqr();\n\n    // J = H * I\n    const j = h.redMul(i);\n\n    // V = X1 * I\n    const v = this.x.redMul(i);\n\n    // X3 = r^2 - J - 2 * V\n    const nx = r.redSqr().redISub(j).redISub(v).redISub(v);\n\n    // Y3 = r * (V - X3) - 2 * Y1 * J\n    const ny = r.redMul(v.redISub(nx)).redISub(this.y.redMul(j).redIMuln(2));\n\n    // Z3 = 2 * Z1 * H\n    const nz = this.z.redMul(h).redIMuln(2);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _addAA(p) {\n    // Assumes Z1 = 1, Z2 = 1.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-mmadd-2007-bl\n    // 4M + 2S + 6A + 4*2 + 1*4 (implemented as: 4M + 2S + 7A + 3*2 + 1*4)\n\n    // H = X2 - X1\n    const h = p.x.redSub(this.x);\n\n    // r = 2 * (Y2 - Y1)\n    const r = p.y.redSub(this.y).redIMuln(2);\n\n    // H = 0\n    if (h.isZero()) {\n      if (!r.isZero())\n        return this.curve.jpoint();\n\n      return this.dbl();\n    }\n\n    // HH = H^2\n    const hh = h.redSqr();\n\n    // I = 4 * HH\n    const i = hh.redIMuln(4);\n\n    // J = H * I\n    const j = h.redMul(i);\n\n    // V = X1 * I\n    const v = this.x.redMul(i);\n\n    // X3 = r^2 - J - 2 * V\n    const nx = r.redSqr().redISub(j).redISub(v).redISub(v);\n\n    // Y3 = r * (V - X3) - 2 * Y1 * J\n    const ny = r.redMul(v.redISub(nx)).redISub(this.y.redMul(j).redIMuln(2));\n\n    // Z3 = 2 * H\n    const nz = h.redIMuln(2);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  dbl() {\n    // P = O\n    if (this.isInfinity())\n      return this;\n\n    // Y1 = 0\n    if (this.y.isZero())\n      return this.curve.jpoint();\n\n    // Z1 = 1\n    if (this.zOne)\n      return this._dblA();\n\n    // a = 0\n    if (this.curve.zeroA)\n      return this._dbl0();\n\n    // a = -3\n    if (this.curve.threeA)\n      return this._dbl3();\n\n    return this._dblJ();\n  }\n\n  _dblJ() {\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2\n    // 3M + 6S + 4A + 1*a + 2*2 + 1*3 + 1*4 + 1*8\n    // (implemented as: 3M + 6S + 5A + 1*a + 1*2 + 1*3 + 1*4 + 1*8)\n\n    // XX = X1^2\n    const xx = this.x.redSqr();\n\n    // YY = Y1^2\n    const yy = this.y.redSqr();\n\n    // ZZ = Z1^2\n    const zz = this.z.redSqr();\n\n    // S = 4 * X1 * YY\n    const s = this.x.redMul(yy).redIMuln(4);\n\n    // M = 3 * XX + a * ZZ^2\n    const m = xx.redIMuln(3).redIAdd(this.curve.a.redMul(zz.redSqr()));\n\n    // T = M^2 - 2 * S\n    const t = m.redSqr().redISub(s).redISub(s);\n\n    // X3 = T\n    const nx = t;\n\n    // Y3 = M * (S - T) - 8 * YY^2\n    const ny = m.redMul(s.redISub(t)).redISub(yy.redSqr().redIMuln(8));\n\n    // Z3 = 2 * Y1 * Z1\n    const nz = this.y.redMul(this.z).redIMuln(2);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _dblA() {\n    // Assumes Z = 1.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-mdbl-2007-bl\n    // 1M + 5S + 7A + 3*2 + 1*3 + 1*8\n    // (implemented as: 1M + 5S + 8A + 2*2 + 1*3 + 1*8)\n\n    // XX = X1^2\n    const xx = this.x.redSqr();\n\n    // YY = Y1^2\n    const yy = this.y.redSqr();\n\n    // YYYY = YY^2\n    const yyyy = yy.redSqr();\n\n    // + XYY2 = (X1 + YY)^2\n    const xyy2 = yy.redIAdd(this.x).redSqr();\n\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    const s = xyy2.redISub(xx).redISub(yyyy).redIMuln(2);\n\n    // M = 3 * XX + a\n    const m = xx.redIMuln(3).redIAdd(this.curve.a);\n\n    // T = M^2 - 2 * S\n    const t = m.redSqr().redISub(s).redISub(s);\n\n    // X3 = T\n    const nx = t;\n\n    // Y3 = M * (S - T) - 8 * YYYY\n    const ny = m.redMul(s.redISub(t)).redISub(yyyy.redIMuln(8));\n\n    // Z3 = 2 * Y1\n    const nz = this.y.redMuln(2);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _dbl0() {\n    // Assumes a = 0.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l\n    // 2M + 5S + 6A + 3*2 + 1*3 + 1*8\n    // (implemented as: 2M + 5S + 7A + 2*2 + 1*3 + 1*8)\n\n    // A = X1^2\n    const a = this.x.redSqr();\n\n    // B = Y1^2\n    const b = this.y.redSqr();\n\n    // C = B^2\n    const c = b.redSqr();\n\n    // + XB2 = (X1 + B)^2\n    const xb2 = b.redIAdd(this.x).redSqr();\n\n    // D = 2 * ((X1 + B)^2 - A - C)\n    const d = xb2.redISub(a).redISub(c).redIMuln(2);\n\n    // E = 3 * A\n    const e = a.redIMuln(3);\n\n    // F = E^2\n    const f = e.redSqr();\n\n    // X3 = F - 2 * D\n    const nx = f.redISub(d).redISub(d);\n\n    // Y3 = E * (D - X3) - 8 * C\n    const ny = e.redMul(d.redISub(nx)).redISub(c.redIMuln(8));\n\n    // Z3 = 2 * Y1 * Z1\n    const nz = this.y.redMul(this.z).redIMuln(2);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  _dbl3() {\n    // Assumes a = -3.\n    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S + 8A + 1*3 + 1*4 + 2*8\n    // (implemented as: 3M + 5S + 8A + 1*2 + 1*3 + 1*4 + 1*8)\n\n    // delta = Z1^2\n    const delta = this.z.redSqr();\n\n    // gamma = Y1^2\n    const gamma = this.y.redSqr();\n\n    // beta = X1 * gamma\n    const beta = this.x.redMul(gamma);\n\n    // + xmdelta = X1 - delta\n    const xmdelta = this.x.redSub(delta);\n\n    // + xpdelta = X1 + delta\n    const xpdelta = this.x.redAdd(delta);\n\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    const alpha = xmdelta.redMul(xpdelta).redIMuln(3);\n\n    // + beta4 = 4 * beta\n    const beta4 = beta.redIMuln(4);\n\n    // + beta8 = 2 * beta4\n    const beta8 = beta4.redMuln(2);\n\n    // + gamma28 = 8 * gamma^2\n    const gamma28 = gamma.redSqr().redIMuln(8);\n\n    // X3 = alpha^2 - 8 * beta\n    const nx = alpha.redSqr().redISub(beta8);\n\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    const nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    const ny = alpha.redMul(beta4.redISub(nx)).redISub(gamma28);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  dblp(pow) {\n    assert((pow >>> 0) === pow);\n\n    // a = 0 or a = -3\n    if (this.curve.zeroA || this.curve.threeA)\n      return super.dblp(pow);\n\n    // m = 0\n    if (pow === 0)\n      return this;\n\n    // P = O\n    if (this.isInfinity())\n      return this;\n\n    return this._dblp(pow);\n  }\n\n  _dblp(pow) {\n    // Repeated point doubling (Jacobian coordinates).\n    //\n    // [GECC] Algorithm 3.23, Page 93, Section 3.2.\n    //\n    // Modified version of:\n    //   https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2\n    //\n    // Divergences from the above formula are marked with diff notation.\n    //\n    // Implemented as:\n    //   1M + 2S + 1*2 + N * (4M + 4S + 4A + 1*a + 1*3 + 2*2)\n    //   e.g. N = 1 => 5M + 6S + 4A + 1*a + 1*3 + 3*2\n    //\n    // Repeated doubling also explained here:\n    //   https://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates\n    //\n    // Note that the above sources change:\n    //   M = 3 * XX + a * ZZZZ\n    // To:\n    //   M = 3 * (XX - ZZZZ)\n    //\n    // In order to assume a = -3.\n    const {a, i2} = this.curve;\n\n    // Reuse results (y is always y*2).\n    let x = this.x;\n    let z = this.z;\n\n    // + Y1 = Y1 * 2\n    let y = this.y.redMuln(2);\n\n    // + ZZZZ = Z1^4\n    let zzzz = z.redPown(4);\n\n    for (let i = 0; i < pow; i++) {\n      // Y1 = 0\n      if (y.isZero())\n        return this.curve.jpoint();\n\n      // XX = X1^2\n      const xx = x.redSqr();\n\n      // YY = Y1^2\n      const yy = y.redSqr();\n\n      // + YYYY = YY^2\n      const yyyy = yy.redSqr();\n\n      // - M = 3 * XX + a * ZZ^2\n      // + M = 3 * XX + a * ZZZZ\n      const m = xx.redIMuln(3).redIAdd(a.redMul(zzzz));\n\n      // - S = 4 * X1 * YY\n      // + S = X1 * YY\n      const s = x.redMul(yy);\n\n      // T = M^2 - 2 * S\n      const t = m.redSqr().redISub(s).redISub(s);\n\n      // X3 = T\n      const nx = t;\n\n      // - Y3 = M * (S - T) - 8 * YY^2\n      // + Y3 = M * (S - T) * 2 - YYYY\n      const ny = m.redMul(s.redISub(t)).redIMuln(2).redISub(yyyy);\n\n      // Z3 = 2 * Y1 * Z1\n      const nz = y.redMul(z);\n\n      // + ZZZZ = ZZZZ * YYYY\n      if (i + 1 < pow)\n        zzzz = zzzz.redMul(yyyy);\n\n      // + X1 = X3\n      x = nx;\n\n      // + Y1 = Y3\n      y = ny;\n\n      // + Z1 = Z3\n      z = nz;\n    }\n\n    return this.curve.jpoint(x, y.redMul(i2), z);\n  }\n\n  uadd(p) {\n    assert(p instanceof Point);\n\n    if (p.type === types.AFFINE)\n      return this._uadd(p.toJ());\n\n    return this._uadd(p);\n  }\n\n  _uadd(p) {\n    // Strongly unified Jacobian addition (Brier and Joye).\n    //\n    // [SIDE2] Page 6, Section 3.\n    // [SIDE3] Page 4, Section 3.\n    //\n    // The above documents use projective coordinates[1]\n    // and have been modified for jacobian coordinates. A\n    // further modification, taken from libsecp256k1[2],\n    // handles the degenerate case of: x1 != x2, y1 = -y2.\n    //\n    // [1] https://hyperelliptic.org/EFD/g1p/auto-shortw-projective.html#addition-add-2002-bj\n    // [2] https://github.com/bitcoin-core/secp256k1/blob/ee9e68c/src/group_impl.h#L525\n    //\n    // 11M + 8S + 7A + 1*a + 2*4 + 1*3 + 2*2 (a != 0)\n    // 11M + 6S + 6A + 2*4 + 1*3 + 2*2 (a = 0)\n    assert(p instanceof JPoint);\n\n    const {zero, one} = this.curve;\n\n    // Z1Z1 = Z1^2\n    const z1z1 = this.z.redSqr();\n\n    // Z2Z2 = Z2^2\n    const z2z2 = p.z.redSqr();\n\n    // U1 = X1 * Z2Z2\n    const u1 = this.x.redMul(z2z2);\n\n    // U2 = X2 * Z1Z1\n    const u2 = p.x.redMul(z1z1);\n\n    // S1 = Y1 * Z2Z2 * Z2\n    const s1 = this.y.redMul(z2z2).redMul(p.z);\n\n    // S2 = Y2 * Z1Z1 * Z1\n    const s2 = p.y.redMul(z1z1).redMul(this.z);\n\n    // Z = Z1 * Z2\n    const z = this.z.redMul(p.z);\n\n    // T = U1 + U2\n    const t = u1.redAdd(u2);\n\n    // M = S1 + S2\n    const m = s1.redAdd(s2);\n\n    // R = T^2 - U1 * U2\n    const r = t.redSqr().redISub(u1.redMul(u2));\n\n    // R = R + a * Z^4 (if a != 0)\n    if (!this.curve.zeroA) {\n      const zzzz = z.redPown(4);\n\n      // Save some cycles for a = -3.\n      if (this.curve.threeA)\n        r.redIAdd(zzzz.redIMuln(-3));\n      else\n        r.redIAdd(this.curve.a.redMul(zzzz));\n    }\n\n    // Check for degenerate case (X1 != X2, Y1 = -Y2).\n    const degenerate = m.czero() & r.czero();\n\n    // M = U1 - U2 (if degenerate)\n    m.cinject(u1.redSub(u2), degenerate);\n\n    // R = S1 - S2 (if degenerate)\n    r.cinject(s1.redSub(s2), degenerate);\n\n    // L = M^2\n    const l = m.redSqr();\n\n    // G = T * L\n    const g = t.redMul(l);\n\n    // LL = L^2\n    const ll = l.redSqr();\n\n    // LL = 0 (if degenerate)\n    ll.cinject(zero, degenerate);\n\n    // W = R^2\n    const w = r.redSqr();\n\n    // F = Z * M\n    const f = z.redMul(m);\n\n    // H = 3 * G - 2 * W\n    const h = g.redMuln(3).redISub(w).redISub(w);\n\n    // X3 = 4 * (W - G)\n    const nx = w.redISub(g).redIMuln(4);\n\n    // Y3 = 4 * (R * H - LL)\n    const ny = r.redMul(h).redISub(ll).redIMuln(4);\n\n    // Z3 = 2 * F\n    const nz = f.redIMuln(2);\n\n    // Check for infinity.\n    const inf1 = this.z.czero();\n    const inf2 = p.z.czero();\n    const inf3 = nz.czero() & ((inf1 | inf2) ^ 1);\n\n    // Case 1: O + P = P\n    nx.cinject(p.x, inf1);\n    ny.cinject(p.y, inf1);\n    nz.cinject(p.z, inf1);\n\n    // Case 2: P + O = P\n    nx.cinject(this.x, inf2);\n    ny.cinject(this.y, inf2);\n    nz.cinject(this.z, inf2);\n\n    // Case 3: P + -P = O\n    nx.cinject(one, inf3);\n    ny.cinject(one, inf3);\n    nz.cinject(zero, inf3);\n\n    return this.curve.jpoint(nx, ny, nz);\n  }\n\n  udbl() {\n    const p = this._udbl();\n    const inf = this.z.czero() | this.y.czero();\n\n    // Case 1 & 2: 2 * O = O, 2 * (X, 0) = O\n    p.x.cinject(this.curve.one, inf);\n    p.y.cinject(this.curve.one, inf);\n    p.z.cinject(this.curve.zero, inf);\n\n    return p;\n  }\n\n  _udbl() {\n    // a = 0\n    if (this.curve.zeroA)\n      return this._dbl0();\n\n    // a = -3\n    if (this.curve.threeA)\n      return this._dbl3();\n\n    return this._dblJ();\n  }\n\n  zaddu(p) {\n    // Co-Z addition with update (ZADDU).\n    // [COZ] Algorithm 19, Page 15, Appendix C.\n    // 5M + 2S + 7A\n    assert(p instanceof JPoint);\n\n    // H = X1 - X2\n    const h = this.x.redSub(p.x);\n\n    // R = Y1 - Y2\n    const r = this.y.redSub(p.y);\n\n    // HH = H^2\n    const hh = h.redSqr();\n\n    // V1 = X1 * HH\n    const v1 = this.x.redMul(hh);\n\n    // V2 = X2 * HH\n    const v2 = p.x.redMul(hh);\n\n    // X4 = V1\n    const x4 = v1;\n\n    // X3 = R^2 - V1 - V2\n    const x3 = r.redSqr().redISub(v1).redISub(v2);\n\n    // Y4 = Y1 * (V1 - V2)\n    const y4 = this.y.redMul(v1.redSub(v2));\n\n    // Y3 = R * (X4 - X3) - Y4\n    const y3 = r.redMul(x4.redSub(x3)).redISub(y4);\n\n    // Z4 = Z1 * H\n    const z4 = this.z.redMul(h);\n\n    // Z3 = Z4\n    const z3 = z4;\n\n    // R = (X3, Y3, Z3)\n    // P = (X4, Y4, Z4)\n    return [\n      this.curve.jpoint(x3, y3, z3),\n      this.curve.jpoint(x4, y4, z4)\n    ];\n  }\n\n  zaddc(p) {\n    // Co-Z addition with conjugate (ZADDC).\n    // [COZ] Algorithm 20, Page 15, Appendix C.\n    // 6M + 3S + 14A + 1*2\n    assert(p instanceof JPoint);\n\n    // H = X1 - X2\n    const h = this.x.redSub(p.x);\n\n    // R = Y1 - Y2\n    const r = this.y.redSub(p.y);\n\n    // M = Y1 + Y2\n    const m = this.y.redAdd(p.y);\n\n    // HH = H^2\n    const hh = h.redSqr();\n\n    // V1 = X1 * HH\n    const v1 = this.x.redMul(hh);\n\n    // V2 = X2 * HH\n    const v2 = p.x.redMul(hh);\n\n    // X4 = (Y1 + Y2)^2 - V1 - V2\n    const x4 = m.redSqr().redISub(v1).redISub(v2);\n\n    // X3 = R^2 - V1 - V2\n    const x3 = r.redSqr().redISub(v1).redISub(v2);\n\n    // Y = Y1 * (V2 - V1)\n    const y = this.y.redMul(v2.redISub(v1));\n\n    // Z = R + 2 * Y2\n    const z = p.y.redMuln(2).redIAdd(r);\n\n    // I = V1 - X4\n    const i = v1.redISub(x4);\n\n    // J = X4 + I - X3\n    const j = x4.redAdd(i).redISub(x3);\n\n    // Y4 = Z * I + Y\n    const y4 = z.redMul(i).redIAdd(y);\n\n    // Y3 = R * J + Y\n    const y3 = r.redMul(j).redIAdd(y);\n\n    // Z4 = Z1 * H\n    const z4 = this.z.redMul(h);\n\n    // Z3 = Z4\n    const z3 = z4;\n\n    // R = (X3, Y3, Z3)\n    // S = (X4, Y4, Z4)\n    return [\n      this.curve.jpoint(x3, y3, z3),\n      this.curve.jpoint(x4, y4, z4)\n    ];\n  }\n\n  zdblu() {\n    // Co-Z doubling with update (DBLU).\n    // [COZ] Algorithm 21, Page 15, Appendix C.\n    //\n    // 1M + 5S + 8A + 4*2 + 1*8\n    //\n    // Note that the original formula assumed Z1=1.\n    // We have modified it to allow for scaled points.\n    //\n    // New Cost: 2M + 5S + 8A + 1*a + 1*3 + 2*2 + 1*8\n\n    // XX = X1^2\n    const xx = this.x.redSqr();\n\n    // YY = Y1^2\n    const yy = this.y.redSqr();\n\n    // YYYY = YY^2\n    const yyyy = yy.redSqr();\n\n    // S = (X1 + YY)^2\n    const s = this.x.redAdd(yy).redSqr();\n\n    // M = 3 * XX\n    const m = xx.redMuln(3);\n\n    // M = M + a * Z1^4 (if a != 0)\n    if (!this.curve.zeroA) {\n      const zzzz = this.z.redPown(4);\n\n      // Save some cycles for a = -3.\n      if (this.curve.threeA)\n        m.redIAdd(zzzz.redIMuln(-3));\n      else\n        m.redIAdd(this.curve.a.redMul(zzzz));\n    }\n\n    // X4 = 2 * (S - XX - YYYY)\n    const x4 = s.redISub(xx).redISub(yyyy).redIMuln(2);\n\n    // X3 = M^2 - X4 - X4\n    const x3 = m.redSqr().redISub(x4).redISub(x4);\n\n    // Y4 = 8 * YYYY\n    const y4 = yyyy.redIMuln(8);\n\n    // Y3 = (X4 - X3) * M - Y4\n    const y3 = x4.redSub(x3).redMul(m).redISub(y4);\n\n    // Z4 = 2 * (Y1 * Z1)\n    const z4 = this.y.redMul(this.z).redIMuln(2);\n\n    // Z3 = Z4\n    const z3 = z4;\n\n    // R = (X3, Y3, Z3)\n    // P = (X4, Y4, Z4)\n    return [\n      this.curve.jpoint(x3, y3, z3),\n      this.curve.jpoint(x4, y4, z4)\n    ];\n  }\n\n  recover(x1, z1, x2, z2) {\n    return this.toP().recover(x1, z1, x2, z2);\n  }\n\n  getX() {\n    if (this.isInfinity())\n      throw new Error('Invalid point.');\n\n    this.normalize();\n\n    return this.x.fromRed();\n  }\n\n  getY() {\n    if (this.isInfinity())\n      throw new Error('Invalid point.');\n\n    this.normalize();\n\n    return this.y.fromRed();\n  }\n\n  eq(p) {\n    assert(p instanceof JPoint);\n\n    // P = Q\n    if (this === p)\n      return true;\n\n    // P = O\n    if (this.isInfinity())\n      return p.isInfinity();\n\n    // Q = O\n    if (p.isInfinity())\n      return false;\n\n    // Z1 = Z2\n    if (this.z.eq(p.z)) {\n      return this.x.eq(p.x)\n          && this.y.eq(p.y);\n    }\n\n    // X1 * Z2^2 == X2 * Z1^2\n    const zz1 = this.z.redSqr();\n    const zz2 = p.z.redSqr();\n    const x1 = this.x.redMul(zz2);\n    const x2 = p.x.redMul(zz1);\n\n    if (!x1.eq(x2))\n      return false;\n\n    // Y1 * Z2^3 == Y2 * Z1^3\n    const zzz1 = zz1.redMul(this.z);\n    const zzz2 = zz2.redMul(p.z);\n    const y1 = this.y.redMul(zzz2);\n    const y2 = p.y.redMul(zzz1);\n\n    return y1.eq(y2);\n  }\n\n  cmp(point) {\n    assert(point instanceof JPoint);\n\n    const inf1 = this.isInfinity();\n    const inf2 = point.isInfinity();\n\n    if (inf1 && !inf2)\n      return -1;\n\n    if (!inf1 && inf2)\n      return 1;\n\n    if (inf1 && inf2)\n      return 0;\n\n    return this.order().cmp(point.order())\n        || this.getX().cmp(point.getX())\n        || this.getY().cmp(point.getY());\n  }\n\n  isInfinity() {\n    // Z1 = 0\n    return this.z.isZero();\n  }\n\n  isOrder2() {\n    if (this.isInfinity())\n      return false;\n\n    return this.y.isZero();\n  }\n\n  isOdd() {\n    if (this.isInfinity())\n      return false;\n\n    this.normalize();\n\n    return this.y.redIsOdd();\n  }\n\n  isEven() {\n    if (this.isInfinity())\n      return false;\n\n    this.normalize();\n\n    return this.y.redIsEven();\n  }\n\n  isSquare() {\n    if (this.isInfinity())\n      return false;\n\n    return this.y.redMul(this.z).redJacobi() !== -1;\n  }\n\n  eqX(x) {\n    // Verify that integer `x` is equal to field\n    // element `x` by scaling it by our z coordinate.\n    // This optimization is mentioned in and used for\n    // bip-schnorr[1]. This avoids having to affinize\n    // the resulting point during verification.\n    //\n    // [1] [SCHNORR] \"Optimizations\".\n    assert(x instanceof BN);\n    assert(!x.red);\n\n    if (this.isInfinity())\n      return false;\n\n    const zz = this.z.redSqr();\n    const rx = x.toRed(this.curve.red).redMul(zz);\n\n    return this.x.eq(rx);\n  }\n\n  eqR(x) {\n    // Similar to the optimization above, this\n    // optimization, suggested by Maxwell[1],\n    // compares an integer to an X coordinate\n    // by scaling it.\n    //\n    // Since a signature's R value is modulo N\n    // in ECDSA, we may be dealing with an R\n    // value greater than N in actuality.\n    //\n    // If the equality check fails, we can\n    // scale N itself by Z and add it to the\n    // X field element (up until a certain\n    // limit) and repeat the check.\n    //\n    // If P is more than 100 times larger than\n    // N, we don't gain much here, so we just\n    // affinize and do the comparison.\n    //\n    // [1] https://github.com/bitcoin-core/secp256k1/commit/ce7eb6f\n    assert(x instanceof BN);\n    assert(!x.red);\n\n    if (!this.curve.smallGap)\n      return this.toP().eqR(x);\n\n    if (this.isInfinity())\n      return false;\n\n    if (x.cmp(this.curve.p) >= 0)\n      return false;\n\n    const zz = this.z.redSqr();\n    const rx = x.toRed(this.curve.red).redMul(zz);\n\n    if (this.x.eq(rx))\n      return true;\n\n    if (this.curve.highOrder)\n      return false;\n\n    if (x.cmp(this.curve.pmodn) >= 0)\n      return false;\n\n    const rn = this.curve.redN.redMul(zz);\n\n    rx.redIAdd(rn);\n\n    return this.x.eq(rx);\n  }\n\n  toP() {\n    // P = O\n    if (this.isInfinity())\n      return this.curve.point();\n\n    this.normalize();\n\n    // (X3, Y3) = (X1 / Z1^2, Y1 / Z1^3)\n    return this.curve.point(this.x, this.y);\n  }\n\n  toJ() {\n    return this;\n  }\n\n  encode(compact) {\n    return this.toP().encode(compact);\n  }\n\n  static decode(curve, bytes) {\n    return ShortPoint.decode(curve, bytes).toJ();\n  }\n\n  encodeX() {\n    return this.toP().encodeX();\n  }\n\n  static decodeEven(curve, bytes) {\n    return ShortPoint.decodeEven(curve, bytes).toJ();\n  }\n\n  static decodeSquare(curve, bytes) {\n    return ShortPoint.decodeSquare(curve, bytes).toJ();\n  }\n\n  toJSON(pre) {\n    return this.toP().toJSON(pre);\n  }\n\n  toPretty() {\n    return this.toP().toPretty();\n  }\n\n  static fromJSON(curve, json) {\n    return ShortPoint.fromJSON(curve, json).toJ();\n  }\n\n  [custom]() {\n    if (this.isInfinity())\n      return '<JPoint: Infinity>';\n\n    return '<JPoint:'\n         + ' x=' + this.x.fromRed().toString(16, 2)\n         + ' y=' + this.y.fromRed().toString(16, 2)\n         + ' z=' + this.z.fromRed().toString(16, 2)\n         + '>';\n  }\n}\n\n/**\n * MontCurve\n */\n\nclass MontCurve extends Curve {\n  constructor(conf) {\n    super(MontPoint, 'mont', conf);\n\n    this.a = BN.fromJSON(conf.a).toRed(this.red);\n    this.b = BN.fromJSON(conf.b).toRed(this.red);\n\n    this.bi = this.b.redInvert();\n    this.a2 = this.a.redAdd(this.two);\n    this.a24 = this.a2.redMul(this.i4);\n    this.a3 = this.a.redMul(this.i3);\n    this.a0 = this.a.redMul(this.bi);\n    this.b0 = this.bi.redSqr();\n\n    this._finalize(conf);\n  }\n\n  static _isomorphism(curveA, curveB, customB) {\n    // Montgomery Isomorphism.\n    //\n    // [MONT3] Page 3, Section 2.1.\n    //\n    // Transformation:\n    //\n    //   A' = A\n    //   B' = B'\n    //\n    // Where (B / B') is square.\n    assert(curveA instanceof BN);\n    assert(curveB instanceof BN);\n    assert(customB instanceof BN);\n\n    const a = curveA.clone();\n    const b = customB.clone();\n    const c = curveB.redDiv(customB);\n\n    if (c.redJacobi() !== 1)\n      throw new Error('Invalid `b` coefficient.');\n\n    return [a, b];\n  }\n\n  _short(a0, odd) {\n    // Montgomery->Short Weierstrass Equivalence.\n    //\n    // [MONT2] \"Equivalence with Weierstrass curves\".\n    //\n    // Transformation:\n    //\n    //   a = (3 - A^2) / (3 * B^2)\n    //   b = (2 * A^3 - 9 * A) / (27 * B^3)\n    const {a, b, three} = this;\n    const a2 = a.redSqr();\n    const a3 = a2.redMul(a);\n    const b2 = b.redSqr();\n    const b3 = b2.redMul(b);\n    const n0 = three.redSub(a2);\n    const d0 = b2.redMuln(3);\n    const n1 = a3.redMuln(2).redISub(a.redMuln(9));\n    const d1 = b3.redMuln(27);\n    const wa = n0.redDiv(d0);\n    const wb = n1.redDiv(d1);\n\n    if (a0 != null)\n      return ShortCurve._isomorphism(wa, wb, a0, odd);\n\n    return [wa, wb];\n  }\n\n  _mont(b0) {\n    return MontCurve._isomorphism(this.a, this.b, b0);\n  }\n\n  _edwards(a0, invert = false) {\n    // Montgomery->Twisted Edwards Transformation.\n    //\n    // [MONT1] Page 11, Section 4.3.5.\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    //\n    // Equivalence:\n    //\n    //   a = (A + 2) / B\n    //   d = (A - 2) / B\n    //\n    // Isomorphism:\n    //\n    //   a = a'\n    //   d = a' * (A - 2) / (A + 2)\n    //\n    // Where ((A + 2) / (B * a')) is square.\n    //\n    // If `d` is square, we can usually find\n    // a complete curve by using the `invert`\n    // option. This will create an isomorphism\n    // chain of: M(A,B)->E(a,d)->E(d,a).\n    //\n    // The equivalence between E(a,d) and\n    // E(d,a) is:\n    //\n    //   (x, y) = (x, 1 / y)\n    //\n    // Meaning our map to E(d,a) is:\n    //\n    //   x = u / v\n    //   y = 1 / ((u - 1) / (u + 1))\n    //     = (u + 1) / (u - 1)\n    assert(typeof invert === 'boolean');\n\n    const {two, bi} = this;\n    const a = this.a.redAdd(two).redMul(bi);\n    const d = this.a.redSub(two).redMul(bi);\n\n    if (invert)\n      a.swap(d);\n\n    if (a0 != null)\n      return EdwardsCurve._isomorphism(a, d, a0);\n\n    return [a, d];\n  }\n\n  _scaleShort(curve) {\n    assert(curve instanceof ShortCurve);\n\n    const [u2, u3] = curve._scale(this);\n\n    return [this.field(u2.redInvert()),\n            this.field(u3.redInvert())];\n  }\n\n  _scaleMont(curve) {\n    // We can extract the isomorphism factor with:\n    //\n    //   c = +-sqrt(B / B')\n    //\n    // If base points are available, we can do:\n    //\n    //   c = v' / v\n    assert(curve instanceof MontCurve);\n\n    if (this.g.isInfinity() || curve.g.isInfinity())\n      return this.field(curve.b).redDivSqrt(this.b);\n\n    return this.g.y.redDiv(this.field(curve.g.y));\n  }\n\n  _scaleEdwards(curve, invert) {\n    // We _could_ do something like:\n    //\n    //   B = 4 / (a - d)\n    //   c = +-sqrt(B / B')\n    //\n    // Which can be reduced to:\n    //\n    //   c = +-sqrt(4 / ((a - d) * B'))\n    //\n    // If base points are available:\n    //\n    //   v = u' / x\n    //   c = v' / v\n    //\n    // Which can be reduced to:\n    //\n    //   c = v' * x / u'\n    //\n    // However, the way our maps are\n    // written, we can re-use the Edwards\n    // isomorphism factor when going the\n    // other direction.\n    assert(curve instanceof EdwardsCurve);\n\n    const c = curve._scale(this, invert);\n\n    return this.field(c);\n  }\n\n  _solveY0(x) {\n    assert(x instanceof BN);\n\n    // y^2 = x^3 + A * x^2 + B * x\n    const a = this.a0;\n    const b = this.b0;\n    const x2 = x.redSqr();\n    const x3 = x2.redMul(x);\n    const y2 = x3.redIAdd(a.redMul(x2)).redIAdd(b.redMul(x));\n\n    return y2;\n  }\n\n  _elligator2(u) {\n    // Elligator 2.\n    //\n    // Distribution: 1/2.\n    //\n    // [ELL2] Page 11, Section 5.2.\n    // [H2EC] \"Elligator 2 Method\".\n    //        \"Mappings for Montgomery curves\".\n    // [SAFE] \"Indistinguishability from uniform random strings\".\n    //\n    // Assumptions:\n    //\n    //   - y^2 = x^3 + A * x^2 + B * x.\n    //   - A != 0, B != 0.\n    //   - A^2 - 4 * B is non-zero and non-square in F(p).\n    //   - Let z be a non-square in F(p).\n    //   - u != +-sqrt(-1 / z).\n    //\n    // Note that Elligator 2 is defined over the form:\n    //\n    //   y'^2 = x'^3 + A' * x'^2 + B' * x'\n    //\n    // Instead of:\n    //\n    //   B * y^2 = x^3 + A * x^2 + x\n    //\n    // Where:\n    //\n    //   A' = A / B\n    //   B' = 1 / B^2\n    //   x' = x / B\n    //   y' = y / B\n    //\n    // And:\n    //\n    //   x = B * x'\n    //   y = B * y'\n    //\n    // This is presumably the result of Elligator 2\n    // being designed in long Weierstrass form. If\n    // we want to support B != 1, we need to do the\n    // conversion.\n    //\n    // Map:\n    //\n    //   g(x) = x^3 + A * x^2 + B * x\n    //   x1 = -A / (1 + z * u^2)\n    //   x1 = -A, if x1 = 0\n    //   x2 = -x1 - A\n    //   x = x1, if g(x1) is square\n    //     = x2, otherwise\n    //   y = sign(u) * abs(sqrt(g(x)))\n    const lhs = this.a0.redNeg();\n    const rhs = this.one.redAdd(this.z.redMul(u.redSqr()));\n\n    rhs.cinject(this.one, rhs.czero());\n\n    const x1 = lhs.redMul(rhs.redFermat());\n    const x2 = x1.redNeg().redISub(this.a0);\n    const y1 = this._solveY0(x1);\n    const y2 = this._solveY0(x2);\n    const alpha = y1.redIsSquare() | 0;\n    const x0 = x1.cinject(x2, alpha ^ 1);\n    const y0 = y1.cinject(y2, alpha ^ 1).redSqrt();\n\n    y0.cinject(y0.redNeg(), y0.redIsOdd() ^ u.redIsOdd());\n\n    const x = this.b.redMul(x0);\n    const y = this.b.redMul(y0);\n\n    return this.point(x, y);\n  }\n\n  _invert2(p, hint) {\n    // Inverting the Map (Elligator 2).\n    //\n    // [ELL2] Page 12, Section 5.3.\n    //\n    // Assumptions:\n    //\n    //   - -z * x * (x + A) is square in F(p).\n    //   - If r = 1 then x != 0.\n    //   - If r = 2 then x != -A.\n    //\n    // Map:\n    //\n    //   u1 = -(x + A) / (x * z)\n    //   u2 = -x / ((x + A) * z)\n    //   r = random integer in [1,2]\n    //   u = sign(y) * abs(sqrt(ur))\n    //\n    // Note that `0 / 0` can only occur if `A == 0`\n    // (this violates the assumptions of Elligator 2).\n    const {x, y} = p;\n    const r = hint & 1;\n    const x0 = x.redMul(this.bi);\n    const y0 = y.redMul(this.bi);\n    const n = x0.redAdd(this.a0);\n    const d = x0;\n\n    n.cswap(d, r);\n\n    const lhs = n.redINeg();\n    const rhs = d.redMul(this.z);\n    const [sqr, u] = divSqrt(lhs, rhs);\n\n    u.cinject(u.redNeg(), u.redIsOdd() ^ y0.redIsOdd());\n\n    if (!sqr)\n      throw new Error('Invalid point.');\n\n    return u;\n  }\n\n  _constMul(p, k, rng) {\n    // Use the single-coordinate ladder in\n    // combination with y-coordinate recovery\n    // to compute an affine point.\n    //\n    // There are a few edge cases here, some\n    // of them documented by Mike Hamburg[1].\n    //\n    // There are two primary edge cases here:\n    //\n    //   1. P * k = O where k = n - 1.\n    //   2. P * k = O where P is small order.\n    //\n    // The first occurs due to the fact that\n    // the Okeya-Sakurai formula requires\n    // one to compute both Q and Q+P. In the\n    // case of k=n-1, Q+P becomes infinity.\n    //\n    // In other words:\n    //\n    //   Q2 = P * (n - 1) + P = O\n    //\n    // The second edge case is a side effect\n    // of the differential addition used in\n    // the ladder. This covers the first two\n    // cases mentioned by Hamburg.\n    //\n    // [1] https://tinyurl.com/y4q2dey9\n    assert(p instanceof MontPoint);\n\n    const x = p.toX();\n    const [a, b] = x.ladderConst(k, rng);\n    const q = p.recover(a, b);\n\n    return k.isNeg() ? q.neg() : q;\n  }\n\n  isElliptic() {\n    const a2 = this.a.redSqr();\n    const d = this.b.redMul(a2.redSub(this.four));\n\n    // B * (A^2 - 4) != 0\n    return !d.isZero();\n  }\n\n  jinv() {\n    // [MONT3] Page 3, Section 2.\n    const {a, three, four} = this;\n    const a2 = a.redSqr();\n    const t0 = a2.redSub(three);\n    const lhs = t0.redPown(3).redIMuln(256);\n    const rhs = a2.redSub(four);\n\n    if (rhs.isZero())\n      throw new Error('Curve is not elliptic.');\n\n    // (256 * (A^2 - 3)^3) / (A^2 - 4)\n    return lhs.redDiv(rhs).fromRed();\n  }\n\n  point(x, y, inf = 0) {\n    return new MontPoint(this, x, y, inf);\n  }\n\n  jpoint(x, y, z) {\n    assert(x == null && y == null && z == null);\n    return this.point();\n  }\n\n  xpoint(x, z) {\n    return new XPoint(this, x, z);\n  }\n\n  solveY2(x) {\n    // [MONT3] Page 3, Section 2.\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom.html\n    assert(x instanceof BN);\n\n    // B * y^2 = x^3 + A * x^2 + x\n    const x2 = x.redSqr();\n    const x3 = x2.redMul(x);\n    const by2 = x3.redIAdd(this.a.redMul(x2)).redIAdd(x);\n    const y2 = by2.redMul(this.bi);\n\n    return y2;\n  }\n\n  validate(point) {\n    assert(point instanceof MontPoint);\n\n    if (point.isInfinity())\n      return true;\n\n    const {x, y} = point;\n    const y2 = this.solveY2(x);\n\n    return y.redSqr().eq(y2);\n  }\n\n  pointFromX(x, sign = null) {\n    assert(x instanceof BN);\n    assert(sign == null || typeof sign === 'boolean');\n\n    if (!x.red)\n      x = x.toRed(this.red);\n\n    const y = this.solveY(x);\n\n    if (sign != null) {\n      if (y.isZero() && sign)\n        throw new Error('Invalid point.');\n\n      if (y.redIsOdd() !== sign)\n        y.redINeg();\n    }\n\n    return this.point(x, y);\n  }\n\n  isIsomorphic(curve, invert) {\n    // [MONT3] Page 3, Section 2.1.\n    assert(curve instanceof Curve);\n\n    if (!curve.p.eq(this.p))\n      return false;\n\n    // M(A,B) <-> M(A,B')\n    if (curve.type === 'mont') {\n      const a = this.field(curve.a);\n      const b = this.field(curve.b);\n\n      // A' = A\n      if (!this.a.eq(a))\n        return false;\n\n      // B' != 0\n      if (this.b.isZero())\n        return false;\n\n      // jacobi(B / B') = 1\n      const c = b.redDiv(this.b);\n\n      return c.redJacobi() === 1;\n    }\n\n    return curve.isIsomorphic(this, invert);\n  }\n\n  isIsogenous(curve) {\n    assert(curve instanceof Curve);\n\n    if (curve.type === 'mont')\n      return false;\n\n    return curve.isIsogenous(this);\n  }\n\n  pointFromShort(point) {\n    // [ALT] Appendix E.2 (Switching between Alternative Representations).\n    // [MONT2] \"Equivalence with Weierstrass curves\"\n    assert(point instanceof ShortPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Equivalence for E(a,b)->M(A,B):\n      //\n      //   u = B * x - A / 3\n      //   v = B * y\n      //\n      // Undefined if ((u^3 + A * u^2 + u) / B) is not square.\n      if (point.isInfinity())\n        return this.point();\n\n      const {a3, b} = this;\n      const [u2, u3] = this._scale(point.curve);\n      const x = this.field(point.x).redMul(u2);\n      const y = this.field(point.y).redMul(u3);\n      const u = b.redMul(x).redISub(a3);\n      const v = b.redMul(y);\n\n      return this.point(u, v);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromMont(point) {\n    // [MONT3] Page 3, Section 2.1.\n    assert(point instanceof MontPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Isomorphic maps for M(A,B)<->M(A,B'):\n      //\n      //   u' = u\n      //   v' = +-sqrt(B / B') * v\n      //\n      // Undefined if (B / B') is not square.\n      if (point.isInfinity())\n        return this.point();\n\n      const c = this._scale(point.curve);\n      const u = this.field(point.x);\n      const v = this.field(point.y);\n      const nu = u;\n      const nv = c.redMul(v);\n\n      return this.point(nu, nv);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromEdwards(point) {\n    // [RFC7748] Section 4.1 & 4.2.\n    // [MONT3] Page 6, Section 2.5.\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    assert(point instanceof EdwardsPoint);\n    assert(point.curve.p.eq(this.p));\n\n    // Edwards `x`, `y`, `z`.\n    const x = this.field(point.x);\n    const y = this.field(point.y);\n    const z = this.field(point.z);\n\n    if (this.isIsogenous(point.curve)) {\n      // 4-isogeny maps for E(1,d)->M(2-4d,1):\n      //\n      //   u = y^2 / x^2\n      //   v = (2 - x^2 - y^2) * y / x^3\n      //\n      // Undefined for x = 0.\n      //\n      // Exceptional Cases:\n      //   - (0, 1) -> O\n      //   - (0, -1) -> (0, 0)\n      //\n      // Unexceptional Cases:\n      //   - (+-1, 0) -> (0, 0)\n      if (point.isInfinity())\n        return this.point();\n\n      if (point.x.isZero())\n        return this.point(this.zero, this.zero);\n\n      const c = z.redSqr().redIMuln(2);\n      const uu = y.redSqr();\n      const uz = x.redSqr();\n      const vv = c.redISub(uz).redISub(uu).redMul(y);\n      const vz = uz.redMul(x);\n\n      return this.cpoint(uu, uz, vv, vz);\n    }\n\n    if (this.isIsomorphic(point.curve, true)) {\n      // Isomorphic maps for E(d,a)->M(A,B):\n      //\n      //   u = (y + 1) / (y - 1)\n      //   v = +-sqrt((A - 2) / (B * a)) * u / x\n      //\n      // Undefined for x = 0 or y = 1.\n      //\n      // Exceptional Cases:\n      //   - (0, 1) -> O\n      //   - (0, -1) -> (0, 0)\n      //\n      // Unexceptional Cases:\n      //   - (+-sqrt(1 / a), 0) -> (-1, +-sqrt((A - 2) / B))\n      if (point.isInfinity())\n        return this.point();\n\n      if (point.x.isZero())\n        return this.point(this.zero, this.zero);\n\n      const c = this._scale(point.curve, true);\n      const uu = y.redAdd(z);\n      const uz = y.redSub(z);\n      const vv = c.redMul(z).redMul(uu);\n      const vz = x.redMul(uz);\n\n      return this.cpoint(uu, uz, vv, vz);\n    }\n\n    if (this.isIsomorphic(point.curve, false)) {\n      // Isomorphic maps for E(a,d)->M(A,B):\n      //\n      //   u = (1 + y) / (1 - y)\n      //   v = +-sqrt((A + 2) / (B * a)) * u / x\n      //\n      // Undefined for x = 0 or y = 1.\n      //\n      // Exceptional Cases:\n      //   - (0, 1) -> O\n      //   - (0, -1) -> (0, 0)\n      //\n      // Unexceptional Cases:\n      //   - (+-sqrt(1 / a), 0) -> (1, +-sqrt((A + 2) / B))\n      if (point.isInfinity())\n        return this.point();\n\n      if (point.x.isZero())\n        return this.point(this.zero, this.zero);\n\n      const c = this._scale(point.curve, false);\n      const uu = z.redAdd(y);\n      const uz = z.redSub(y);\n      const vv = c.redMul(z).redMul(uu);\n      const vz = x.redMul(uz);\n\n      return this.cpoint(uu, uz, vv, vz);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromUniform(u) {\n    assert(u instanceof BN);\n\n    // z = 0 or A = 0\n    if (this.z.isZero() || this.a.isZero())\n      throw new Error('Not implemented.');\n\n    return this._elligator2(u);\n  }\n\n  pointToUniform(p, hint) {\n    assert(p instanceof MontPoint);\n    assert((hint >>> 0) === hint);\n\n    // z = 0 or A = 0\n    if (this.z.isZero() || this.a.isZero())\n      throw new Error('Not implemented.');\n\n    // P = O\n    if (p.isInfinity())\n      throw new Error('Invalid point.');\n\n    // Add a random torsion component.\n    const i = ((hint >>> 4) & 15) % this.torsion.length;\n    const q = p.add(this.torsion[i]);\n\n    return this._invert2(q, hint);\n  }\n\n  decodePoint(bytes, sign) {\n    return MontPoint.decode(this, bytes, sign);\n  }\n\n  encodeX(point) {\n    assert(point instanceof XPoint);\n    return point.encode();\n  }\n\n  decodeX(bytes) {\n    return XPoint.decode(this, bytes);\n  }\n\n  toShort(a0, odd, sign = null) {\n    const [a, b] = this._short(a0, odd);\n\n    const curve = new ShortCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = curve._scale(this);\n\n      if (u3.redIsOdd() !== sign)\n        u3.redINeg();\n    }\n\n    if (!this.g.isInfinity())\n      curve.g = curve.pointFromMont(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++)\n      curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n\n    return curve;\n  }\n\n  toMont(b0, sign = null) {\n    const [a, b] = this._mont(b0);\n\n    const curve = new MontCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h,\n      z: this.z\n    });\n\n    if (sign != null) {\n      const c = curve._scale(this);\n\n      if (c.redIsOdd() !== sign)\n        c.redINeg();\n    }\n\n    if (!this.g.isInfinity())\n      curve.g = curve.pointFromMont(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++)\n      curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n\n    return curve;\n  }\n\n  toEdwards(a0, invert, sign = null) {\n    const [a, d] = this._edwards(a0, invert);\n\n    const curve = new EdwardsCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      d: d,\n      n: this.n,\n      h: this.h,\n      z: this.z\n    });\n\n    if (sign != null) {\n      const c = curve._scale(this, invert);\n\n      if (c.redIsOdd() !== sign)\n        c.redINeg();\n    }\n\n    if (!this.g.isInfinity()) {\n      curve.g = curve.pointFromMont(this.g);\n      curve.g.normalize();\n    }\n\n    if (curve.isComplete()) {\n      for (let i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n        curve.torsion[i].normalize();\n      }\n    }\n\n    return curve;\n  }\n\n  pointFromJSON(json) {\n    return MontPoint.fromJSON(this, json);\n  }\n\n  toJSON(pre) {\n    const json = super.toJSON(pre);\n    json.a = this.a.fromRed().toJSON();\n    json.b = this.b.fromRed().toJSON();\n    return json;\n  }\n}\n\n/**\n * MontPoint\n */\n\nclass MontPoint extends Point {\n  constructor(curve, x, y, inf) {\n    assert(curve instanceof MontCurve);\n\n    super(curve, types.AFFINE);\n\n    this.x = this.curve.zero;\n    this.y = this.curve.zero;\n    this.inf = 1;\n\n    if (x != null)\n      this._init(x, y, inf);\n  }\n\n  _init(x, y, inf) {\n    assert(x instanceof BN);\n    assert(y instanceof BN);\n\n    this.x = x;\n    this.y = y;\n\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n\n    this.inf = inf | 0;\n  }\n\n  clone() {\n    return this.curve.point(this.x.clone(),\n                            this.y.clone(),\n                            this.inf);\n  }\n\n  swap(point, flag) {\n    assert(point instanceof MontPoint);\n\n    const cond = ((flag >> 31) | (-flag >> 31)) & 1;\n    const inf1 = this.inf;\n    const inf2 = point.inf;\n\n    this.x.cswap(point.x, flag);\n    this.y.cswap(point.y, flag);\n\n    this.inf = (inf1 & (cond ^ 1)) | (inf2 & cond);\n    point.inf = (inf2 & (cond ^ 1)) | (inf1 & cond);\n\n    return this;\n  }\n\n  scale(a) {\n    return this.clone();\n  }\n\n  randomize(rng) {\n    return this.clone();\n  }\n\n  neg() {\n    // P = O\n    if (this.inf)\n      return this;\n\n    // -(X1, Y1) = (X1, -Y1)\n    return this.curve.point(this.x, this.y.redNeg());\n  }\n\n  add(p) {\n    // [MONT1] Page 8, Section 4.3.2.\n    //\n    // Addition Law:\n    //\n    //   l = (y2 - y1) / (x2 - x1)\n    //   x3 = b * l^2 - a - x1 - x2\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // 1I + 2M + 1S + 7A + 1*b\n    assert(p instanceof MontPoint);\n\n    // O + P = P\n    if (this.inf)\n      return p;\n\n    // P + O = P\n    if (p.inf)\n      return this;\n\n    // P + P, P + -P\n    if (this.x.eq(p.x)) {\n      // P + -P = O\n      if (!this.y.eq(p.y))\n        return this.curve.point();\n\n      // P + P = 2P\n      return this.dbl();\n    }\n\n    // H = X2 - X1\n    const h = p.x.redSub(this.x);\n\n    // R = Y2 - Y1\n    const r = p.y.redSub(this.y);\n\n    // L = R / H\n    const l = r.redDiv(h);\n\n    // K = b * L^2\n    const k = this.curve.b.redMul(l.redSqr());\n\n    // X3 = K - a - X1 - X2\n    const nx = k.redISub(this.curve.a).redISub(this.x).redISub(p.x);\n\n    // Y3 = L * (X1 - X3) - Y1\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n\n    return this.curve.point(nx, ny);\n  }\n\n  dbl() {\n    // [MONT1] Page 8, Section 4.3.2.\n    //\n    // Addition Law (doubling):\n    //\n    //   l = (3 * x1^2 + 2 * a * x1 + 1) / (2 * b * y1)\n    //   x3 = b * l^2 - a - 2 * x1\n    //   y3 = l * (x1 - x3) - y1\n    //\n    // 1I + 3M + 2S + 7A + 1*a + 1*b + 1*b + 2*2 + 1*3\n\n    // P = O\n    if (this.inf)\n      return this;\n\n    // Y1 = 0\n    if (this.y.isZero())\n      return this.curve.point();\n\n    // M1 = 3 * X1^2\n    const m1 = this.x.redSqr().redIMuln(3);\n\n    // M2 = 2 * a * X1\n    const m2 = this.curve.a.redMul(this.x).redIMuln(2);\n\n    // M = M1 + M2 + 1\n    const m = m1.redIAdd(m2).redIAdd(this.curve.one);\n\n    // Z = 2 * b * Y1\n    const z = this.curve.b.redMul(this.y).redIMuln(2);\n\n    // L = M / Z\n    const l = m.redDiv(z);\n\n    // K = b * L^2\n    const k = this.curve.b.redMul(l.redSqr());\n\n    // X3 = K - a - 2 * X1\n    const nx = k.redISub(this.curve.a).redISub(this.x).redISub(this.x);\n\n    // Y3 = L * (X1 - X3) - Y1\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n\n    return this.curve.point(nx, ny);\n  }\n\n  uadd(p) {\n    // [MONT1] Page 8, Section 4.3.2.\n    // 1I + 3M + 2S + 9A + 1*a + 2*b + 2*2 + 1*3\n    assert(p instanceof MontPoint);\n\n    // H = X2 - X1\n    const h = p.x.redSub(this.x);\n\n    // R = Y2 - Y1\n    const r = p.y.redSub(this.y);\n\n    // M1 = 3 * X1^2\n    const m1 = this.x.redSqr().redIMuln(3);\n\n    // M2 = 2 * a * X1\n    const m2 = this.curve.a.redMul(this.x).redIMuln(2);\n\n    // M = M1 + M2 + 1\n    const m = m1.redIAdd(m2).redIAdd(this.curve.one);\n\n    // Z = 2 * b * Y1\n    const z = this.curve.b.redMul(this.y).redIMuln(2);\n\n    // Check for doubling (X1 = X2, Y1 = Y2).\n    const double = h.czero() & r.czero();\n\n    // R = M (if double)\n    r.cinject(m, double);\n\n    // H = Z (if double)\n    h.cinject(z, double);\n\n    // Check for negation (X1 = X2, Y1 = -Y2).\n    const negated = h.czero() & ((this.inf | p.inf) ^ 1);\n\n    // H = 1 (if H = 0)\n    h.cinject(this.curve.one, h.czero());\n\n    // L = R / H\n    const l = r.redMul(h.redFermat());\n\n    // K = b * L^2\n    const k = this.curve.b.redMul(l.redSqr());\n\n    // X3 = K - a - X1 - X2\n    const nx = k.redISub(this.curve.a).redISub(this.x).redISub(p.x);\n\n    // Y3 = L * (X1 - X3) - Y1\n    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n\n    // Check for infinity.\n    const inf = negated | (this.inf & p.inf);\n\n    // Case 1: O + P = P\n    nx.cinject(p.x, this.inf);\n    ny.cinject(p.y, this.inf);\n\n    // Case 2: P + O = P\n    nx.cinject(this.x, p.inf);\n    ny.cinject(this.y, p.inf);\n\n    // Case 3 & 4: P + -P = O, O + O = O\n    nx.cinject(this.curve.zero, inf);\n    ny.cinject(this.curve.zero, inf);\n\n    return this.curve.point(nx, ny, inf);\n  }\n\n  udbl() {\n    return this.uadd(this);\n  }\n\n  recover(p1, p2) {\n    // Okeya-Sakurai Y-coordinate Recovery.\n    //\n    // [MONT3] Algorithm 5, Page 13, Section 4.3.\n    //         Algorithm 6, Page 14, Section 4.3.\n    //\n    // 1I + 12M + 1S + 6A + 1*a + 1*b + 2*2\n    assert(p1 instanceof XPoint);\n    assert(p2 instanceof XPoint);\n\n    // P = O\n    if (this.inf)\n      return this.curve.point();\n\n    // A = X0 * Z1\n    const a = this.x.redMul(p1.z);\n\n    // B = X1 + A\n    const b = p1.x.redAdd(a);\n\n    // C = (X1 - A)^2 * X2\n    const c = p1.x.redSub(a).redSqr().redMul(p2.x);\n\n    // D = 2 * a * Z1\n    const d = this.curve.a.redMul(p1.z).redIMuln(2);\n\n    // E = B + D\n    const e = b.redIAdd(d);\n\n    // F = X0 * X1 + Z1\n    const f = this.x.redMul(p1.x).redIAdd(p1.z);\n\n    // G = E * F\n    const g = e.redMul(f);\n\n    // H = D * Z1\n    const h = d.redMul(p1.z);\n\n    // I = (G - H) * Z2\n    const i = g.redISub(h).redMul(p2.z);\n\n    // J = 2 * b * Y0\n    const j = this.curve.b.redMul(this.y).redIMuln(2);\n\n    // K = J * Z1 * Z2\n    const k = j.redMul(p1.z).redMul(p2.z);\n\n    // X = K * X1\n    const x = k.redMul(p1.x);\n\n    // Y = I - C\n    const y = i.redISub(c);\n\n    // Z = K * Z1\n    const z = k.redMul(p1.z);\n\n    // Z = 0\n    if (z.isZero())\n      return this.curve.point();\n\n    // L = 1 / Z\n    const l = z.redInvert();\n\n    // X3 = X * L\n    const nx = x.redMul(l);\n\n    // Y3 = Y * L\n    const ny = y.redMul(l);\n\n    return this.curve.point(nx, ny);\n  }\n\n  getX() {\n    if (this.inf)\n      throw new Error('Invalid point.');\n\n    return this.x.fromRed();\n  }\n\n  getY() {\n    if (this.inf)\n      throw new Error('Invalid point.');\n\n    return this.y.fromRed();\n  }\n\n  eq(p) {\n    assert(p instanceof MontPoint);\n\n    // P = Q\n    if (this === p)\n      return true;\n\n    // P = O\n    if (this.inf)\n      return p.inf !== 0;\n\n    // Q = O\n    if (p.inf)\n      return false;\n\n    // X1 = X2, Y1 = Y2\n    return this.x.eq(p.x)\n        && this.y.eq(p.y);\n  }\n\n  cmp(point) {\n    assert(point instanceof MontPoint);\n\n    if (this.inf && !point.inf)\n      return -1;\n\n    if (!this.inf && point.inf)\n      return 1;\n\n    if (this.inf && point.inf)\n      return 0;\n\n    return this.order().cmp(point.order())\n        || this.getX().cmp(point.getX())\n        || this.getY().cmp(point.getY());\n  }\n\n  isInfinity() {\n    // Infinity cannot be represented in\n    // the affine space, except by a flag.\n    return this.inf !== 0;\n  }\n\n  isOrder2() {\n    if (this.inf)\n      return false;\n\n    return this.y.isZero();\n  }\n\n  isOdd() {\n    if (this.inf)\n      return false;\n\n    return this.y.redIsOdd();\n  }\n\n  isEven() {\n    if (this.inf)\n      return false;\n\n    return this.y.redIsEven();\n  }\n\n  toP() {\n    return this;\n  }\n\n  toJ() {\n    return this;\n  }\n\n  toX() {\n    // (X3, Z3) = (1, 0)\n    if (this.inf)\n      return this.curve.xpoint();\n\n    // (X3, Z3) = (X1, 1)\n    return this.curve.xpoint(this.x, this.curve.one);\n  }\n\n  encode() {\n    return this.toX().encode();\n  }\n\n  static decode(curve, bytes, sign) {\n    assert(curve instanceof MontCurve);\n    return curve.decodeX(bytes).toP(sign);\n  }\n\n  toJSON(pre) {\n    if (this.inf)\n      return [];\n\n    const x = this.getX().toJSON();\n    const y = this.getY().toJSON();\n\n    return [x, y];\n  }\n\n  toPretty() {\n    if (this.inf)\n      return [];\n\n    const size = this.curve.fieldSize * 2;\n    const x = toPretty(this.getX(), size);\n    const y = toPretty(this.getY(), size);\n\n    return [x, y];\n  }\n\n  static fromJSON(curve, json) {\n    assert(curve instanceof MontCurve);\n    assert(Array.isArray(json));\n    assert(json.length === 0\n        || json.length === 2\n        || json.length === 3);\n\n    if (json.length === 0)\n      return curve.point();\n\n    const x = BN.fromJSON(json[0]);\n    const y = BN.fromJSON(json[1]);\n\n    return curve.point(x, y);\n  }\n\n  [custom]() {\n    if (this.inf)\n      return '<MontPoint: Infinity>';\n\n    return '<MontPoint:'\n         + ' x=' + this.x.fromRed().toString(16, 2)\n         + ' y=' + this.y.fromRed().toString(16, 2)\n         + '>';\n  }\n}\n\n/**\n * XPoint\n */\n\nclass XPoint extends Point {\n  constructor(curve, x, z) {\n    assert(curve instanceof MontCurve);\n\n    super(curve, types.PROJECTIVE);\n\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n\n    if (x != null)\n      this._init(x, z);\n  }\n\n  _init(x, z) {\n    assert(x instanceof BN);\n    assert(z == null || (z instanceof BN));\n\n    this.x = x;\n    this.z = z || this.curve.one;\n\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n\n  clone() {\n    return this.curve.xpoint(this.x.clone(),\n                             this.z.clone());\n  }\n\n  swap(point, flag) {\n    assert(point instanceof XPoint);\n\n    this.x.cswap(point.x, flag);\n    this.z.cswap(point.z, flag);\n\n    return this;\n  }\n\n  precompute(power, rng) {\n    // No-op.\n    return this;\n  }\n\n  validate() {\n    if (this.isInfinity())\n      return true;\n\n    // B * y^2 * z = x^3 + A * x^2 * z + x * z^2\n    const {x, z} = this;\n    const x2 = x.redSqr();\n    const x3 = x2.redMul(x);\n    const z2 = z.redSqr();\n    const ax2 = this.curve.a.redMul(x2).redMul(z);\n    const by2 = x3.redIAdd(ax2).redIAdd(x.redMul(z2));\n    const y2 = by2.redMul(this.curve.bi);\n\n    // sqrt(y^2 * z^4) = y * z^2\n    return y2.redMul(z).redJacobi() !== -1;\n  }\n\n  normalize() {\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#scaling-scale\n    // 1I + 1M\n\n    // P = O\n    if (this.isInfinity())\n      return this;\n\n    // Z1 = 1\n    if (this.z.eq(this.curve.one))\n      return this;\n\n    // X3 = X1 / Z1\n    this.x = this.x.redDiv(this.z);\n\n    // Z3 = 1\n    this.z = this.curve.one;\n\n    return this;\n  }\n\n  scale(a) {\n    assert(a instanceof BN);\n\n    // P = O\n    if (this.isInfinity())\n      return this.curve.xpoint();\n\n    // X3 = X1 * A\n    const nx = this.x.redMul(a);\n\n    // Y3 = Y1 * A\n    const nz = this.z.redMul(a);\n\n    return this.curve.xpoint(nx, nz);\n  }\n\n  neg() {\n    // -(X1, Z1) = (X1, Z1)\n    return this;\n  }\n\n  dbl() {\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n    // 2M + 2S + 4A + 1*a24\n\n    // A = X1 + Z1\n    const a = this.x.redAdd(this.z);\n\n    // AA = A^2\n    const aa = a.redSqr();\n\n    // B = X1 - Z1\n    const b = this.x.redSub(this.z);\n\n    // BB = B^2\n    const bb = b.redSqr();\n\n    // C = AA - BB\n    const c = aa.redSub(bb);\n\n    // X3 = AA * BB\n    const nx = aa.redMul(bb);\n\n    // Z3 = C * (BB + a24 * C)\n    const nz = c.redMul(bb.redIAdd(this.curve.a24.redMul(c)));\n\n    return this.curve.xpoint(nx, nz);\n  }\n\n  diffAdd(p2, p3) {\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n    // 4M + 2S + 6A\n    assert(p2 instanceof XPoint);\n    assert(p3 instanceof XPoint);\n\n    // A = X2 + Z2\n    const a = p2.x.redAdd(p2.z);\n\n    // B = X2 - Z2\n    const b = p2.x.redSub(p2.z);\n\n    // C = X3 + Z3\n    const c = p3.x.redAdd(p3.z);\n\n    // D = X3 - Z3\n    const d = p3.x.redSub(p3.z);\n\n    // DA = D * A\n    const da = d.redMul(a);\n\n    // CB = C * B\n    const cb = c.redMul(b);\n\n    // X5 = Z1 * (DA + CB)^2\n    const x5 = this.z.redMul(da.redAdd(cb).redSqr());\n\n    // Z5 = X1 * (DA - CB)^2\n    const z5 = this.x.redMul(da.redISub(cb).redSqr());\n\n    return this.curve.xpoint(x5, z5);\n  }\n\n  diffAddDbl(p2, p3) {\n    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#ladder-ladd-1987-m-3\n    // 6M + 4S + 8A + 1*a24\n    assert(p2 instanceof XPoint);\n    assert(p3 instanceof XPoint);\n\n    // A = X2 + Z2\n    const a = p2.x.redAdd(p2.z);\n\n    // AA = A^2\n    const aa = a.redSqr();\n\n    // B = X2 - Z2\n    const b = p2.x.redSub(p2.z);\n\n    // BB = B^2\n    const bb = b.redSqr();\n\n    // E = AA - BB\n    const e = aa.redSub(bb);\n\n    // C = X3 + Z3\n    const c = p3.x.redAdd(p3.z);\n\n    // D = X3 - Z3\n    const d = p3.x.redSub(p3.z);\n\n    // DA = D * A\n    const da = d.redMul(a);\n\n    // CB = C * B\n    const cb = c.redMul(b);\n\n    // X5 = Z1 * (DA + CB)^2\n    const x5 = this.z.redMul(da.redAdd(cb).redSqr());\n\n    // Z5 = X1 * (DA - CB)^2\n    const z5 = this.x.redMul(da.redISub(cb).redSqr());\n\n    // X4 = AA * BB\n    const x4 = aa.redMul(bb);\n\n    // Z4 = E * (BB + a24 * E)\n    const z4 = e.redMul(bb.redIAdd(this.curve.a24.redMul(e)));\n\n    return [\n      this.curve.xpoint(x4, z4),\n      this.curve.xpoint(x5, z5)\n    ];\n  }\n\n  getX() {\n    if (this.isInfinity())\n      throw new Error('Invalid point.');\n\n    this.normalize();\n\n    return this.x.fromRed();\n  }\n\n  getY(sign) {\n    return this.toP(sign).getY();\n  }\n\n  eq(p) {\n    assert(p instanceof XPoint);\n\n    // P = Q\n    if (this === p)\n      return true;\n\n    // P = O\n    if (this.isInfinity())\n      return p.isInfinity();\n\n    // Q = O\n    if (p.isInfinity())\n      return false;\n\n    // Z1 = Z2\n    if (this.z.eq(p.z))\n      return this.x.eq(p.x);\n\n    // X1 * Z2 == X2 * Z1\n    const x1 = this.x.redMul(p.z);\n    const x2 = p.x.redMul(this.z);\n\n    return x1.eq(x2);\n  }\n\n  cmp(point) {\n    assert(point instanceof XPoint);\n\n    const inf1 = this.isInfinity();\n    const inf2 = point.isInfinity();\n\n    if (inf1 && !inf2)\n      return -1;\n\n    if (!inf1 && inf2)\n      return 1;\n\n    if (inf1 && inf2)\n      return 0;\n\n    return this.order().cmp(point.order())\n        || this.getX().cmp(point.getX());\n  }\n\n  isInfinity() {\n    // Z1 = 0\n    return this.z.isZero();\n  }\n\n  isOrder2() {\n    if (this.isInfinity())\n      return false;\n\n    return this.x.isZero();\n  }\n\n  isOdd() {\n    return false;\n  }\n\n  isEven() {\n    return false;\n  }\n\n  hasTorsion() {\n    if (this.isInfinity())\n      return false;\n\n    // X1 = 0, Z1 != 0 (edge case)\n    if (this.x.isZero())\n      return true;\n\n    return super.hasTorsion();\n  }\n\n  order() {\n    try {\n      return this.toP().order();\n    } catch (e) {\n      return new BN(1);\n    }\n  }\n\n  jmul(k) {\n    return this.ladder(k)[0];\n  }\n\n  jmulSimple(k) {\n    return this.ladderSimple(k)[0];\n  }\n\n  jmulBlind(k, rng) {\n    return this.ladderBlind(k, rng)[0];\n  }\n\n  jmulConst(k, rng) {\n    return this.ladderConst(k, rng)[0];\n  }\n\n  jmulAdd(k1, p2, k2) {\n    throw new Error('Not implemented.');\n  }\n\n  jmulAddSimple(k1, p2, k2) {\n    throw new Error('Not implemented.');\n  }\n\n  ladder(k) {\n    // Multiply with the Montgomery Ladder.\n    //\n    // [MONT3] Algorithm 4, Page 12, Section 4.2.\n    //\n    // Note that any clamping is meant to\n    // be done _outside_ of this function.\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    const bits = k.bitLength();\n\n    let a = this.curve.xpoint();\n    let b = this;\n\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = k.bit(i);\n\n      if (bit === 0)\n        [a, b] = this.diffAddDbl(a, b);\n      else\n        [b, a] = this.diffAddDbl(b, a);\n    }\n\n    return [a, b];\n  }\n\n  ladderSimple(k) {\n    // Montgomery Ladder with explicit\n    // additions and doubling (testing).\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    const bits = k.bitLength();\n\n    let a = this.curve.xpoint();\n    let b = this;\n\n    // Climb the ladder.\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = k.bit(i);\n\n      if (bit === 0) {\n        b = this.diffAdd(b, a);\n        a = a.dbl();\n      } else {\n        a = this.diffAdd(a, b);\n        b = b.dbl();\n      }\n    }\n\n    return [a, b];\n  }\n\n  ladderBlind(k, rng) {\n    if (!rng)\n      return this.ladder(k);\n\n    // Randomize if available.\n    return this.randomize(rng).ladder(k);\n  }\n\n  ladderConst(k, rng) {\n    // Multiply with the Montgomery Ladder.\n    //\n    // [MONT3] Algorithm 7, Page 16, Section 5.3.\n    //         Algorithm 8, Page 16, Section 5.3.\n    //\n    // [RFC7748] Page 7, Section 5.\n    //\n    // Note that any clamping is meant to\n    // be done _outside_ of this function.\n    assert(k instanceof BN);\n    assert(!k.red);\n\n    const bits = Math.max(k.bitLength(), this.curve.fieldBits);\n    const bytes = (bits + 7) >>> 3;\n\n    // Recode scalar to base256.\n    const exp = k.toArray('le', bytes);\n\n    // Randomize if available.\n    const point = rng ? this.randomize(rng) : this;\n\n    // Clone points (for safe swapping).\n    let a = this.curve.xpoint().clone();\n    let b = point.clone();\n    let swap = 0;\n\n    // Climb the ladder.\n    for (let i = bits - 1; i >= 0; i--) {\n      const bit = (exp[i >> 3] >> (i & 7)) & 1;\n\n      // Maybe swap.\n      a.swap(b, swap ^ bit);\n\n      // Single coordinate add+double.\n      [a, b] = point.diffAddDbl(a, b);\n\n      swap = bit;\n    }\n\n    // Finalize loop.\n    a.swap(b, swap);\n\n    return [a, b];\n  }\n\n  toP(sign = null) {\n    assert(sign == null || typeof sign === 'boolean');\n\n    if (this.isInfinity())\n      return this.curve.point();\n\n    this.normalize();\n\n    return this.curve.pointFromX(this.x, sign);\n  }\n\n  toJ() {\n    return this;\n  }\n\n  toX() {\n    return this;\n  }\n\n  key() {\n    if (this.isInfinity())\n      return `${this.curve.uid}:oo`;\n\n    this.normalize();\n\n    const x = this.getX().toString(16);\n\n    return `${this.curve.uid}:${x}`;\n  }\n\n  encode() {\n    // [RFC7748] Section 5.\n    return this.curve.encodeField(this.getX());\n  }\n\n  static decode(curve, bytes) {\n    assert(curve instanceof MontCurve);\n\n    // [RFC7748] Section 5.\n    const x = curve.decodeField(bytes);\n\n    // We're supposed to ignore the hi bit\n    // on montgomery points... I think. If\n    // we don't, the X25519 test vectors\n    // break, which is pretty convincing\n    // evidence. This is a no-op for X448.\n    x.iumaskn(curve.fieldBits);\n\n    // Note: montgomery points are meant to be\n    // reduced by the prime and do not have to\n    // be explicitly validated in order to do\n    // the montgomery ladder.\n    const p = curve.xpoint(x, curve.one);\n\n    assert(!p.isInfinity());\n\n    return p;\n  }\n\n  toJSON(pre) {\n    return this.toP().toJSON(pre);\n  }\n\n  toPretty() {\n    return this.toP().toPretty();\n  }\n\n  static fromJSON(curve, json) {\n    return MontPoint.fromJSON(curve, json).toX();\n  }\n\n  [custom]() {\n    if (this.isInfinity())\n      return '<XPoint: Infinity>';\n\n    return '<XPoint:'\n        + ' x=' + this.x.fromRed().toString(16, 2)\n        + ' z=' + this.z.fromRed().toString(16, 2)\n        + '>';\n  }\n}\n\n/**\n * EdwardsCurve\n */\n\nclass EdwardsCurve extends Curve {\n  constructor(conf) {\n    super(EdwardsPoint, 'edwards', conf);\n\n    this.a = BN.fromJSON(conf.a).toRed(this.red);\n    this.d = BN.fromJSON(conf.d).toRed(this.red);\n    this.s = BN.fromJSON(conf.s || '0').toRed(this.red);\n    this.si = this.s.isZero() ? this.zero : this.s.redInvert();\n\n    this.k = this.d.redMuln(2);\n    this.smi = -this.d.redNeg().word(0);\n    this.ad6 = this.a.redAdd(this.d).redMul(this.i6);\n\n    this.twisted = !this.a.eq(this.one);\n    this.oneA = this.a.eq(this.one);\n    this.mOneA = this.a.eq(this.one.redNeg());\n    this.smallD = this.prime != null && this.d.redNeg().length === 1;\n    this.alt = null;\n\n    this._finalize(conf);\n  }\n\n  static _isomorphism(curveA, curveD, customA) {\n    // Twisted Edwards Isomorphism.\n    //\n    // [TWISTED] Definition 2.1, Page 3, Section 2.\n    //\n    // Transformation:\n    //\n    //   a' = a'\n    //   d' = a' * d / a\n    //\n    // Where (a / a') is square.\n    assert(curveA instanceof BN);\n    assert(curveD instanceof BN);\n    assert(customA instanceof BN);\n\n    const a = customA.clone();\n    const d = customA.redMul(curveD).redDiv(curveA);\n    const c = curveA.redDiv(customA);\n\n    if (c.redJacobi() !== 1)\n      throw new Error('Invalid `a` coefficient.');\n\n    return [a, d];\n  }\n\n  _short(a0, odd) {\n    // Twisted Edwards->Short Weierstrass Equivalence.\n    //\n    // [TWISTEQ] Section 2.\n    //\n    // Transformation:\n    //\n    //   a' = -(a^2 + 14 * a * d + d^2) / 48\n    //   b' = (33 * (a^2 * d + a * d^2) - a^3 - d^3) / 864\n    const {a, d} = this;\n    const a2 = a.redSqr();\n    const a3 = a2.redMul(a);\n    const d2 = d.redSqr();\n    const d3 = d2.redMul(d);\n    const ad14 = a.redMul(d).redIMuln(14);\n    const a2d = a2.redMul(d);\n    const ad2 = a.redMul(d2);\n    const t0 = a2d.redIAdd(ad2).redIMuln(33);\n    const wa = a2.redAdd(ad14).redIAdd(d2).redDivn(-48);\n    const wb = t0.redISub(a3).redISub(d3).redDivn(864);\n\n    if (a0 != null)\n      return ShortCurve._isomorphism(wa, wb, a0, odd);\n\n    return [wa, wb];\n  }\n\n  _mont(b0, invert = false) {\n    // Twisted Edwards->Montgomery Transformation.\n    //\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    //\n    // Equivalence:\n    //\n    //   A = 2 * (a + d) / (a - d)\n    //   B = 4 / (a - d)\n    //\n    // Isomorphism:\n    //\n    //   A = 2 * (a + d) / (a - d)\n    //   B = B'\n    //\n    // Where ((4 / (a - d)) / B') is square.\n    //\n    // If `4 / (a - d)` is non-square, we can\n    // usually force B=1 by using the `invert`\n    // option. This will create an isomorphism\n    // chain of: E(a,d)->E(d,a)->M(-A,-B).\n    //\n    // The equivalence between E(a,d) and E(d,a)\n    // is:\n    //\n    //   (x, y) = (x, 1 / y)\n    //\n    // Meaning our map to M(-A,-B) is:\n    //\n    //   u = (1 + 1 / y) / (1 - 1 / y)\n    //     = (y + 1) / (y - 1)\n    //   v = u / x\n    assert(typeof invert === 'boolean');\n\n    let apd, amd;\n\n    if (invert) {\n      apd = this.d.redAdd(this.a);\n      amd = this.d.redSub(this.a);\n    } else {\n      apd = this.a.redAdd(this.d);\n      amd = this.a.redSub(this.d);\n    }\n\n    const z = amd.redInvert();\n    const a = apd.redMuln(2).redMul(z);\n    const b = z.redMuln(4);\n\n    if (b0 != null)\n      return MontCurve._isomorphism(a, b, b0);\n\n    return [a, b];\n  }\n\n  _edwards(a0) {\n    return EdwardsCurve._isomorphism(this.a, this.d, a0);\n  }\n\n  _scaleShort(curve) {\n    assert(curve instanceof ShortCurve);\n\n    const [u2, u3] = curve._scale(this);\n\n    return [this.field(u2.redInvert()),\n            this.field(u3.redInvert())];\n  }\n\n  _scaleMont(curve, invert = false) {\n    // Calculate isomorphism factor between\n    // Twisted Edwards and Montgomery with:\n    //\n    //   a = (A + 2) / B\n    //   c = +-sqrt(a / a')\n    //\n    // Which can be reduced to:\n    //\n    //   c = +-sqrt((A + 2) / (B * a'))\n    //\n    // If base points are available, we can do:\n    //\n    //   x = u / v\n    //   c = x' / x\n    //\n    // Which can be reduced to:\n    //\n    //   c = v * x' / u\n    //\n    // We can now calculate the Edwards `x` with:\n    //\n    //   x' = c * u / v\n    //\n    // And likewise, the Montgomery `v`:\n    //\n    //   v = c * u / x'\n    assert(curve instanceof MontCurve);\n    assert(typeof invert === 'boolean');\n\n    if (this.g.isInfinity() || curve.g.isInfinity()) {\n      const [a] = curve._edwards(null, invert);\n\n      return this.field(a).redDivSqrt(this.a);\n    }\n\n    const x = curve.g.x.redDiv(curve.g.y);\n\n    return this.g.x.redDiv(this.field(x));\n  }\n\n  _scaleEdwards(curve) {\n    // We can extract the isomorphism factor with:\n    //\n    //   c = +-sqrt(a / a')\n    //\n    // If base points are available, we can do:\n    //\n    //   c = x' / x\n    assert(curve instanceof EdwardsCurve);\n\n    if (this.g.isInfinity() || curve.g.isInfinity())\n      return this.field(curve.a).redDivSqrt(this.a);\n\n    return this.g.x.redDiv(this.field(curve.g.x));\n  }\n\n  _mulA(num) {\n    assert(num instanceof BN);\n\n    // n * a = n\n    if (this.oneA)\n      return num.clone();\n\n    // n * a = -n\n    if (this.mOneA)\n      return num.redNeg();\n\n    return this.a.redMul(num);\n  }\n\n  _mulD(num) {\n    assert(num instanceof BN);\n\n    // -d < 0x4000000\n    if (this.smallD)\n      return num.redMuln(this.smi);\n\n    return this.d.redMul(num);\n  }\n\n  _elligator1(t) {\n    // Elligator 1.\n    //\n    // Distribution: 1/2.\n    //\n    // [ELL1] Page 6, Section 3.\n    //        Page 15, Appendix A.\n    // [ELL2] Page 7, Section 3.2.\n    //\n    // Assumptions:\n    //\n    //   - Let p be a prime power congruent to 3 mod 4.\n    //   - Let s be a nonzero element of F(p).\n    //   - Let c = 2 / s^2.\n    //   - Let r = c + 1 / c.\n    //   - Let d = -(c + 1)^2 / (c - 1)^2.\n    //   - (s^2 - 2) * (s^2 + 2) != 0.\n    //   - c * (c - 1) * (c + 1) != 0.\n    //   - r != 0.\n    //   - d is not square.\n    //   - x^2 + y^2 = 1 + d * x^2 * y^2.\n    //   - u * v * X * Y * x * (Y + 1) != 0.\n    //   - Y^2 = X^5 + (r^2 - 2) * X^3 + X.\n    //\n    // Elligator 1, as devised by Fouque et al,\n    // takes place on the hyperelliptic curve of:\n    //\n    //   y^2 = x^5 + (r^2 - 2) * x^3 + x\n    //\n    // Not only must our Edwards curve be complete,\n    // with a prime congruent to 3 mod 4, and a = 1,\n    // our curve must be isomorphic to a hyperelliptic\n    // curve of the above form. Roughly one half of\n    // all Edwards curves are isomorphic to a curve\n    // of said form.\n    //\n    // We can derive the isomorphism with:\n    //\n    //   c = (d +- 2 * sqrt(-d) - 1) / (d + 1)\n    //   s = +-sqrt(2 / c)\n    //   r = c + 1 / c\n    //\n    // Note that even if your curve is an Elligator 1\n    // curve, Elligator 2 is probably still preferable,\n    // as it has nearly the same properties (i.e. the\n    // same distribution), and is much less complex.\n    //\n    // Map:\n    //\n    //   f(a) = a^((p - 1) / 2)\n    //   u = (1 - t) / (1 + t)\n    //   v = u^5 + (r^2 - 2) * u^3 + u\n    //   X = f(v) * u\n    //   Y = (f(v) * v)^((p + 1) / 4) * f(v) * f(u^2 + 1 / c^2)\n    //   Y = 1, if u = 0\n    //   x = (c - 1) * s * X * (1 + X) / Y\n    //   y = (r * X - (1 + X)^2) / (r * X + (1 + X)^2)\n    //\n    // When t = +-1, we create the hyperelliptic\n    // 2-torsion point of (0, 0). This needs to be\n    // mapped to (0, -1) in Edwards form, but the x\n    // denominator becomes zero. As far as I can\n    // tell, this is the only exceptional case.\n    //\n    // The only other exceptional case initially\n    // appears to be when the y denominator sums to\n    // zero (when t = sqrt(4 / r + 1)), however, the\n    // hyperelliptic `X` is negated by the sign of\n    // `v`, making this impossible.\n    const {s, si, i2, one, two} = this;\n    const c = si.redSqr().redIMuln(2);\n    const ci = s.redSqr().redMul(i2);\n    const ci2 = ci.redSqr();\n    const r = c.redAdd(ci);\n    const r2 = r.redSqr().redISub(two);\n    const cm1 = c.redSub(one);\n    const e0 = this.p.subn(2);\n    const e1 = this.p.subn(1).iushrn(1);\n    const e2 = this.p.addn(1).iushrn(2);\n    const uu = one.redSub(t);\n    const uz = one.redAdd(t);\n    const u = uu.redMul(uz.redPow(e0));\n    const u2 = u.redSqr();\n    const u3 = u2.redMul(u);\n    const u5 = u3.redMul(u2);\n    const v = u5.redAdd(r2.redMul(u3)).redIAdd(u);\n    const f0 = v.redPow(e1);\n    const f1 = u2.redAdd(ci2).redPow(e1);\n    const f2 = f0.redMul(f1);\n    const X = f0.redMul(u);\n    const Y = f0.redMul(v).redPow(e2).redMul(f2);\n    const X1 = one.redAdd(X);\n    const rX = r.redMul(X);\n    const X12 = X1.redSqr();\n    const xx = cm1.redMul(s).redMul(X).redMul(X1);\n    const xz = Y.cinject(this.one, u.czero());\n    const yy = rX.redSub(X12);\n    const yz = rX.redAdd(X12);\n\n    return this.cpoint(xx, xz, yy, yz);\n  }\n\n  _invert1(p, hint) {\n    // Inverting the Map (Elligator 1).\n    //\n    // [ELL1] Page 6, Section 3.\n    //        Page 15, Appendix A.\n    // [ELL2] Page 7, Section 3.3.\n    //\n    // Assumptions:\n    //\n    //   - y + 1 != 0.\n    //   - (1 + n * r)^2 - 1 is square in F(p).\n    //   - If n * r = -2 then x = 2 * s * (c - 1) * f(c) / r.\n    //   - Y = (c - 1) * s * X * (1 + X) / x.\n    //\n    // Map:\n    //\n    //   f(a) = a^((p - 1) / 2)\n    //   n = (y - 1) / (2 * (y + 1))\n    //   X = -(1 + n * r) + ((1 + n * r)^2 - 1)^((p + 1) / 4)\n    //   z = f((c - 1) * s * X * (1 + X) * x * (X^2 + 1 / c^2))\n    //   u = z * X\n    //   t = (1 - u) / (1 + u)\n    const {s, si, i2, one} = this;\n    const {x, y, z} = p;\n    const sign = hint & 1;\n    const c = si.redSqr().redIMuln(2);\n    const ci = s.redSqr().redMul(i2);\n    const ci2 = ci.redSqr();\n    const r = c.redAdd(ci);\n    const cm1 = c.redSub(one);\n    const e0 = this.p.subn(2);\n    const e1 = this.p.subn(1).iushrn(1);\n    const e2 = this.p.addn(1).iushrn(2);\n    const nn = y.redSub(z);\n    const nz = y.redAdd(z).redIMuln(2);\n    const n = nn.redMul(nz.redPow(e0));\n    const nr1 = one.redAdd(n.redMul(r));\n    const w2 = nr1.redSqr().redISub(one);\n    const w = w2.redPow(e2);\n    const sqr = w.redSqr().ceq(w2);\n    const X = w.redSub(nr1);\n    const X1 = one.redAdd(X);\n    const YY = cm1.redMul(s).redMul(X).redMul(X1);\n    const Y = YY.redMul(x.redMul(z));\n    const X2 = X.redSqr().redIAdd(ci2);\n    const Z = Y.redMul(X2).redPow(e1);\n    const u = Z.redMul(X);\n    const tt = one.redSub(u);\n    const tz = one.redAdd(u);\n    const t = tt.redMul(tz.redPow(e0));\n\n    t.cinject(t.redNeg(), t.redIsOdd() ^ sign);\n\n    if (!sqr)\n      throw new Error('Invalid point.');\n\n    return t;\n  }\n\n  _alt() {\n    if (!this.alt)\n      this.alt = this.toMont();\n\n    return this.alt;\n  }\n\n  isElliptic() {\n    const ad = this.a.redMul(this.d);\n    const amd = this.a.redSub(this.d);\n\n    // a * d * (a - d) != 0\n    return !ad.redMul(amd).isZero();\n  }\n\n  jinv() {\n    // [TWISTED] Definition 2.1, Page 3, Section 2.\n    const {a, d} = this;\n    const ad = a.redMul(d);\n    const amd4 = a.redSub(d).redPown(4);\n    const a2 = a.redSqr();\n    const d2 = d.redSqr();\n    const t0 = a2.redAdd(ad.redMuln(14)).redIAdd(d2);\n    const lhs = t0.redPown(3).redIMuln(16);\n    const rhs = ad.redMul(amd4);\n\n    if (rhs.isZero())\n      throw new Error('Curve is not elliptic.');\n\n    // 16 * (a^2 + 14 * a * d + d^2)^3 / (a * d * (a - d)^4)\n    return lhs.redDiv(rhs).fromRed();\n  }\n\n  isComplete() {\n    return this.a.redJacobi() === 1\n        && this.d.redJacobi() === -1;\n  }\n\n  point(x, y, z, t) {\n    return new EdwardsPoint(this, x, y, z, t);\n  }\n\n  jpoint(x, y, z) {\n    assert(x == null && y == null && z == null);\n    return this.point();\n  }\n\n  cpoint(xx, xz, yy, yz) {\n    assert(xx instanceof BN);\n    assert(xz instanceof BN);\n    assert(yy instanceof BN);\n    assert(yz instanceof BN);\n\n    const x = xx.redMul(yz);\n    const y = yy.redMul(xz);\n    const z = xz.redMul(yz);\n    const t = xx.redMul(yy);\n\n    return this.point(x, y, z, t);\n  }\n\n  solveX2(y) {\n    // [RFC8032] Section 5.1.3 & 5.2.3.\n    assert(y instanceof BN);\n\n    // x^2 = (y^2 - 1) / (d * y^2 - a)\n    const y2 = y.redSqr();\n    const rhs = this._mulD(y2).redISub(this.a);\n    const lhs = y2.redISub(this.one);\n    const x2 = lhs.redDiv(rhs);\n\n    return x2;\n  }\n\n  solveX(y) {\n    // Optimize with inverse square root trick.\n    //\n    // Note that `0 / 0` can only occur if\n    // `a == d` (i.e. the curve is singular).\n    const y2 = y.redSqr();\n    const rhs = this._mulD(y2).redISub(this.a);\n    const lhs = y2.redISub(this.one);\n\n    return lhs.redDivSqrt(rhs);\n  }\n\n  solveY2(x) {\n    assert(x instanceof BN);\n\n    // y^2 = (a * x^2 - 1) / (d * x^2 - 1)\n    const x2 = x.redSqr();\n    const lhs = this._mulA(x2).redISub(this.one);\n    const rhs = this._mulD(x2).redISub(this.one);\n    const y2 = lhs.redDiv(rhs);\n\n    return y2;\n  }\n\n  solveY(x) {\n    // Optimize with inverse square root trick.\n    //\n    // Note that `0 / 0` can only occur if\n    // `a == d` (i.e. the curve is singular).\n    const x2 = x.redSqr();\n    const lhs = this._mulA(x2).redISub(this.one);\n    const rhs = this._mulD(x2).redISub(this.one);\n\n    return lhs.redDivSqrt(rhs);\n  }\n\n  validate(point) {\n    // [TWISTED] Definition 2.1, Page 3, Section 2.\n    //           Page 11, Section 6.\n    assert(point instanceof EdwardsPoint);\n\n    // Z1 = 1\n    if (point.zOne) {\n      // a * x^2 + y^2 = 1 + d * x^2 * y^2\n      const x2 = point.x.redSqr();\n      const y2 = point.y.redSqr();\n      const dxy = this._mulD(x2).redMul(y2);\n      const lhs = this._mulA(x2).redIAdd(y2);\n      const rhs = this.one.redAdd(dxy);\n      const tz = point.t;\n      const xy = point.x.redMul(point.y);\n\n      return lhs.eq(rhs) && tz.eq(xy);\n    }\n\n    // (a * x^2 + y^2) * z^2 = z^4 + d * x^2 * y^2\n    const x2 = point.x.redSqr();\n    const y2 = point.y.redSqr();\n    const z2 = point.z.redSqr();\n    const z4 = z2.redSqr();\n    const dxy = this._mulD(x2).redMul(y2);\n    const lhs = this._mulA(x2).redIAdd(y2).redMul(z2);\n    const rhs = z4.redIAdd(dxy);\n    const tz = point.t.redMul(point.z);\n    const xy = point.x.redMul(point.y);\n\n    return lhs.eq(rhs) && tz.eq(xy);\n  }\n\n  pointFromX(x, sign = null) {\n    assert(x instanceof BN);\n    assert(sign == null || typeof sign === 'boolean');\n\n    if (!x.red)\n      x = x.toRed(this.red);\n\n    const y = this.solveY(x);\n\n    if (sign != null) {\n      if (y.isZero() && sign)\n        throw new Error('Invalid point.');\n\n      if (y.redIsOdd() !== sign)\n        y.redINeg();\n    }\n\n    return this.point(x, y);\n  }\n\n  pointFromY(y, sign = null) {\n    assert(y instanceof BN);\n    assert(sign == null || typeof sign === 'boolean');\n\n    if (!y.red)\n      y = y.toRed(this.red);\n\n    const x = this.solveX(y);\n\n    if (sign != null) {\n      if (x.isZero() && sign)\n        throw new Error('Invalid point.');\n\n      if (x.redIsOdd() !== sign)\n        x.redINeg();\n    }\n\n    return this.point(x, y);\n  }\n\n  isIsomorphic(curve, invert = false) {\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    //           Definition 2.1, Page 3, Section 2.\n    assert(curve instanceof Curve);\n    assert(typeof invert === 'boolean');\n\n    if (!curve.p.eq(this.p))\n      return false;\n\n    // E(a,d) <-> E(a,b)\n    if (curve.type === 'short')\n      return curve.isIsomorphic(this);\n\n    // E(a,d) <-> M(A,B)\n    // E(a,d) <-> M(-A,-B)\n    if (curve.type === 'mont') {\n      // A * (a - d) = 2 * (a + d)\n      const a = this.field(curve.a);\n\n      let apd, amd;\n\n      if (invert) {\n        apd = this.d.redAdd(this.a);\n        amd = this.d.redSub(this.a);\n      } else {\n        apd = this.a.redAdd(this.d);\n        amd = this.a.redSub(this.d);\n      }\n\n      return a.redMul(amd).eq(apd.redIMuln(2));\n    }\n\n    // E(a,d) <-> E(a',a'd/a)\n    if (curve.type === 'edwards') {\n      // a' * d = a * d'\n      const a = this.field(curve.a);\n      const d = this.field(curve.d);\n\n      return this.a.redMul(d).eq(a.redMul(this.d));\n    }\n\n    return false;\n  }\n\n  isIsogenous(curve) {\n    // Check for the 4-isogenies described by Hamburg:\n    // https://moderncrypto.org/mail-archive/curves/2016/000806.html\n    assert(curve instanceof Curve);\n\n    if (!curve.p.eq(this.p))\n      return false;\n\n    // E(1,d) <-> M(2-4d,1)\n    if (curve.type === 'mont') {\n      if (!this.a.eq(this.one))\n        return false;\n\n      const a = this.field(curve.a);\n      const b = this.field(curve.b);\n      const d24 = this.two.redSub(this.d.redMuln(4));\n\n      return a.eq(d24) && b.eq(this.one);\n    }\n\n    // E(a,d) <-> E(-a,d-a)\n    if (curve.type === 'edwards') {\n      const a = this.field(curve.a);\n      const d = this.field(curve.d);\n\n      return a.eq(this.a.redNeg())\n          && d.eq(this.d.redSub(this.a));\n    }\n\n    return false;\n  }\n\n  pointFromShort(point) {\n    // [TWISTEQ] Section 1.\n    assert(point instanceof ShortPoint);\n\n    if (this.isIsomorphic(point.curve)) {\n      // Equivalence for E(a,b)->E(a',d'):\n      //\n      //   x' = (6 * x - a' - d') / (6 * y)\n      //   y' = (12 * x - 5 * a' + d') / (12 * x + a' - 5 * d')\n      //\n      // Undefined for x = (5 * d' - a') / 12 or y = 0.\n      //\n      // Exceptional Cases:\n      //   - O -> (0, 1)\n      //   - ((a' + d') / 6, 0) -> (0, -1)\n      //   - ((5 * d' - a') / 12, (d' - a') / 4 * sqrt(d')) -> (sqrt(1/d'), oo)\n      //\n      // Unexceptional Cases:\n      //   - ((5 * a' - d') / 12, (a' - d') / 4 * sqrt(a')) -> (sqrt(1/a'), 0)\n      if (point.isInfinity())\n        return this.point();\n\n      if (point.y.isZero())\n        return this.point(this.zero, this.one.redNeg());\n\n      const {a, d} = this;\n      const [u2, u3] = this._scale(point.curve);\n      const a5 = a.redMuln(5);\n      const d5 = d.redMuln(5);\n      const x = this.field(point.x).redMul(u2);\n      const y = this.field(point.y).redMul(u3);\n      const x6 = x.redMuln(6);\n      const x12 = x.redMuln(12);\n      const xx = x6.redSub(a).redISub(d);\n      const xz = y.redMuln(6);\n      const yy = x12.redSub(a5).redIAdd(d);\n      const yz = x12.redAdd(a).redISub(d5);\n\n      return this.cpoint(xx, xz, yy, yz);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromMont(point) {\n    // [RFC7748] Section 4.1 & 4.2.\n    // [MONT3] Page 6, Section 2.5.\n    // [TWISTED] Theorem 3.2, Page 4, Section 3.\n    assert(point instanceof MontPoint);\n    assert(point.curve.p.eq(this.p));\n\n    // Montgomery `u`, `v`.\n    const u = this.field(point.x);\n    const v = this.field(point.y);\n\n    if (this.isIsogenous(point.curve)) {\n      // 4-isogeny maps for M(2-4d,1)->E(1,d):\n      //\n      //   x = 4 * v * (u^2 - 1) / (u^4 - 2 * u^2 + 4 * v^2 + 1)\n      //   y = -(u^5 - 2 * u^3 - 4 * u * v^2 + u) /\n      //        (u^5 - 2 * u^2 * v^2 - 2 * u^3 - 2 * v^2 + u)\n      //\n      // Undefined for u = 0 and v = 0.\n      //\n      // Exceptional Cases:\n      //   - O -> (0, 1)\n      //   - (0, 0) -> (0, 1)\n      //\n      // Unexceptional Cases:\n      //   - (-1, +-sqrt(A - 2)) -> (0, 1)\n      //   - (1, +-sqrt(A + 2)) -> (0, -1)\n      //\n      // The point (1, v) is invalid on Curve448.\n      if (point.isInfinity())\n        return this.point();\n\n      if (point.x.isZero())\n        return this.point();\n\n      const u2 = u.redSqr();\n      const u3 = u2.redMul(u);\n      const u4 = u3.redMul(u);\n      const u5 = u4.redMul(u);\n      const v2 = v.redSqr();\n      const a = v.redMuln(4);\n      const b = u2.redSub(this.one);\n      const c = u2.redMuln(2);\n      const d = v2.redMuln(4);\n      const e = u3.redIMuln(2);\n      const f = u.redMul(v2).redIMuln(4);\n      const g = u2.redMul(v2).redIMuln(2);\n      const h = v2.redIMuln(2);\n      const xx = a.redMul(b);\n      const xz = u4.redISub(c).redIAdd(d).redIAdd(this.one);\n      const yy = u5.redSub(e).redISub(f).redIAdd(u).redINeg();\n      const yz = u5.redISub(g).redISub(e).redISub(h).redIAdd(u);\n\n      return this.cpoint(xx, xz, yy, yz).divn(4);\n    }\n\n    if (this.isIsomorphic(point.curve, true)) {\n      // Isomorphic maps for M(-A,-B)->E(a,d):\n      //\n      //   x = +-sqrt((A - 2) / (B * a)) * u / v\n      //   y = (u + 1) / (u - 1)\n      //\n      // Undefined for u = 1 or v = 0.\n      //\n      // Exceptional Cases:\n      //   - O -> (0, 1)\n      //   - (0, 0) -> (0, -1)\n      //   - (1, +-sqrt((A + 2) / B)) -> (+-sqrt(1 / d), oo)\n      //\n      // Unexceptional Cases:\n      //   - (-1, +-sqrt((A - 2) / B)) -> (+-sqrt(1 / a), 0)\n      //\n      // The point (1, v) is invalid on Curve448.\n      if (point.isInfinity())\n        return this.point();\n\n      if (point.x.isZero())\n        return this.point(this.zero, this.one.redNeg());\n\n      const c = this._scale(point.curve, true);\n      const xx = c.redMul(u);\n      const xz = v;\n      const yy = u.redAdd(this.one);\n      const yz = u.redSub(this.one);\n\n      return this.cpoint(xx, xz, yy, yz);\n    }\n\n    if (this.isIsomorphic(point.curve, false)) {\n      // Isomorphic maps for M(A,B)->E(a,d):\n      //\n      //   x = +-sqrt((A + 2) / (B * a)) * u / v\n      //   y = (u - 1) / (u + 1)\n      //\n      // Undefined for u = -1 or v = 0.\n      //\n      // Exceptional Cases:\n      //   - O -> (0, 1)\n      //   - (0, 0) -> (0, -1)\n      //   - (-1, +-sqrt((A - 2) / B)) -> (+-sqrt(1 / d), oo)\n      //\n      // Unexceptional Cases:\n      //   - (1, +-sqrt((A + 2) / B)) -> (+-sqrt(1 / a), 0)\n      //\n      // The point (-1, v) is invalid on Curve25519.\n      if (point.isInfinity())\n        return this.point();\n\n      if (point.x.isZero())\n        return this.point(this.zero, this.one.redNeg());\n\n      const c = this._scale(point.curve, false);\n      const xx = c.redMul(u);\n      const xz = v;\n      const yy = u.redSub(this.one);\n      const yz = u.redAdd(this.one);\n\n      return this.cpoint(xx, xz, yy, yz);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromEdwards(point) {\n    // [TWISTED] Definition 2.1, Page 3, Section 2.\n    // [ISOGENY] Page 2, Section 2.\n    assert(point instanceof EdwardsPoint);\n    assert(point.curve.p.eq(this.p));\n\n    // Edwards `x`, `y`, `z`, `t`.\n    const a = this.field(point.curve.a);\n    const x = this.field(point.x);\n    const y = this.field(point.y);\n    const z = this.field(point.z);\n    const t = this.field(point.t);\n\n    if (this.isIsogenous(point.curve)) {\n      // 4-isogeny maps for E(a,d)<->E(-a,d-a):\n      //\n      //   x' = (2 * x * y) / (y^2 - a * x^2)\n      //   y' = (y^2 + a * x^2) / (2 - y^2 - a * x^2)\n      //\n      // Undefined for y^2 - a * x^2 = 0\n      //            or y^2 + a * x^2 = 2.\n      const xy = x.redMul(y);\n      const x2 = x.redSqr();\n      const y2 = y.redSqr();\n      const z2 = z.redSqr();\n      const ax2 = a.redMul(x2);\n      const xx = xy.redIMuln(2);\n      const xz = y2.redSub(ax2);\n      const yy = y2.redAdd(ax2);\n      const yz = z2.redIMuln(2).redISub(yy);\n      const p = this.cpoint(xx, xz, yy, yz);\n\n      return !this.twisted ? p.divn(4) : p;\n    }\n\n    if (this.isIsomorphic(point.curve)) {\n      // Isomorphic maps for E(a,d)<->E(a',a'd/a):\n      //\n      //   x' = +-sqrt(a / a') * x\n      //   y' = y\n      //\n      // Undefined when (a / a') is not square.\n      const c = this._scale(point.curve);\n      const nx = c.redMul(x);\n      const ny = y;\n      const nz = z;\n      const nt = c.redMul(t);\n\n      return this.point(nx, ny, nz, nt);\n    }\n\n    throw new Error('Not implemented.');\n  }\n\n  pointFromUniform(u, curve = null) {\n    assert(u instanceof BN);\n    assert(u.red === this.red);\n    assert(curve == null || (curve instanceof MontCurve));\n\n    if (!curve)\n      curve = this._alt();\n\n    const u0 = curve.field(u);\n    const p0 = curve.pointFromUniform(u0);\n\n    return this.pointFromMont(p0);\n  }\n\n  pointToUniform(p, hint, curve = null) {\n    assert(p instanceof EdwardsPoint);\n    assert((hint >>> 0) === hint);\n    assert(curve == null || (curve instanceof MontCurve));\n\n    if (!curve)\n      curve = this._alt();\n\n    // Add a random torsion component.\n    const i = ((hint >> 4) & 15) % this.torsion.length;\n    const q = p.add(this.torsion[i]);\n\n    // Convert and invert.\n    const p0 = curve.pointFromEdwards(q);\n    const u0 = curve.pointToUniform(p0, hint & 15);\n\n    return this.field(u0);\n  }\n\n  pointFromHash(bytes, pake, curve = null) {\n    assert(curve == null || (curve instanceof MontCurve));\n\n    if (!curve)\n      curve = this._alt();\n\n    const p0 = curve.pointFromHash(bytes, pake);\n\n    return this.pointFromMont(p0);\n  }\n\n  pointToHash(p, subgroup, rng, curve = null) {\n    assert(p instanceof EdwardsPoint);\n    assert((subgroup >>> 0) === subgroup);\n    assert(curve == null || (curve instanceof MontCurve));\n\n    if (!curve)\n      curve = this._alt();\n\n    // Add a random torsion component.\n    const i = subgroup % this.torsion.length;\n    const q = p.add(this.torsion[i]);\n\n    // Convert and invert.\n    const p0 = curve.pointFromEdwards(q);\n\n    return curve.pointToHash(p0, 0, rng);\n  }\n\n  decodePoint(bytes) {\n    return EdwardsPoint.decode(this, bytes);\n  }\n\n  toShort(a0, odd, sign = null) {\n    const [a, b] = this._short(a0, odd);\n\n    const curve = new ShortCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h\n    });\n\n    if (sign != null) {\n      const [, u3] = curve._scale(this);\n\n      if (u3.redIsOdd() !== sign)\n        u3.redINeg();\n    }\n\n    if (!this.g.isInfinity())\n      curve.g = curve.pointFromEdwards(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++)\n      curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n\n    return curve;\n  }\n\n  toMont(b0, invert, sign = null) {\n    const [a, b] = this._mont(b0, invert);\n\n    const curve = new MontCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      b: b,\n      n: this.n,\n      h: this.h,\n      z: this.z\n    });\n\n    if (sign != null) {\n      const c = this._scale(curve, invert);\n\n      if (c.redIsOdd() !== sign)\n        c.redINeg();\n    }\n\n    if (!this.g.isInfinity())\n      curve.g = curve.pointFromEdwards(this.g);\n\n    for (let i = 0; i < this.h.word(0); i++)\n      curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n\n    return curve;\n  }\n\n  toEdwards(a0, sign = null) {\n    const [a, d] = this._edwards(a0);\n\n    const curve = new EdwardsCurve({\n      red: this.red,\n      prime: this.prime,\n      p: this.p,\n      a: a,\n      d: d,\n      n: this.n,\n      h: this.h,\n      z: this.z\n    });\n\n    if (sign != null) {\n      const c = curve._scale(this);\n\n      if (c.redIsOdd() !== sign)\n        c.redINeg();\n    }\n\n    if (!this.g.isInfinity()) {\n      curve.g = curve.pointFromEdwards(this.g);\n      curve.g.normalize();\n    }\n\n    if (curve.isComplete()) {\n      for (let i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n        curve.torsion[i].normalize();\n      }\n    }\n\n    return curve;\n  }\n\n  pointFromJSON(json) {\n    return EdwardsPoint.fromJSON(this, json);\n  }\n\n  toJSON(pre) {\n    const json = super.toJSON(pre);\n\n    json.a = this.a.fromRed().toJSON();\n    json.d = this.d.fromRed().toJSON();\n\n    if (!this.s.isZero())\n      json.s = this.s.fromRed().toJSON();\n\n    return json;\n  }\n}\n\n/**\n * EdwardsPoint\n */\n\nclass EdwardsPoint extends Point {\n  constructor(curve, x, y, z, t) {\n    assert(curve instanceof EdwardsCurve);\n\n    super(curve, types.EXTENDED);\n\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = 1;\n\n    if (x != null)\n      this._init(x, y, z, t);\n  }\n\n  _init(x, y, z, t) {\n    assert(x instanceof BN);\n    assert(y instanceof BN);\n    assert(z == null || (z instanceof BN));\n    assert(t == null || (t instanceof BN));\n\n    this.x = x;\n    this.y = y;\n    this.z = z || this.curve.one;\n    this.t = t || null;\n\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n\n    this.zOne = this.z.eq(this.curve.one) | 0;\n\n    this._check();\n\n    if (!this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redDiv(this.z);\n    }\n  }\n\n  _check() {\n    // In order to achieve complete\n    // addition formulas, `a` must\n    // be a square (always the case\n    // for a=1), and `d` must be a\n    // non-square.\n    //\n    // If this is not the case, the\n    // addition formulas may have\n    // exceptional cases where Z3=0.\n    //\n    // In particular, this can occur\n    // when: Q*h = -P*h and Q != -P.\n    //\n    // This is assuming 4-torsion is\n    // involved (the 4-torsion point\n    // is _not_ representable when\n    // `d` is square).\n    if (this.z.isZero())\n      throw new Error('Invalid point.');\n  }\n\n  clone() {\n    return this.curve.point(this.x.clone(),\n                            this.y.clone(),\n                            this.z.clone(),\n                            this.t.clone());\n  }\n\n  swap(point, flag) {\n    assert(point instanceof EdwardsPoint);\n\n    const cond = ((flag >> 31) | (-flag >> 31)) & 1;\n    const zOne1 = this.zOne;\n    const zOne2 = point.zOne;\n\n    this.x.cswap(point.x, flag);\n    this.y.cswap(point.y, flag);\n    this.z.cswap(point.z, flag);\n    this.t.cswap(point.t, flag);\n\n    this.zOne = (zOne1 & (cond ^ 1)) | (zOne2 & cond);\n    point.zOne = (zOne2 & (cond ^ 1)) | (zOne1 & cond);\n\n    return this;\n  }\n\n  normalize() {\n    // https://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#scaling-z\n    // 1I + 2M (+ 1M if extended)\n\n    // Z1 = 1\n    if (this.zOne)\n      return this;\n\n    // A = 1 / Z1\n    const a = this.z.redInvert();\n\n    // X3 = X1 * A\n    this.x = this.x.redMul(a);\n\n    // Y3 = Y1 * A\n    this.y = this.y.redMul(a);\n\n    // T3 = T1 * A\n    this.t = this.t.redMul(a);\n\n    // Z3 = 1\n    this.z = this.curve.one;\n    this.zOne = 1;\n\n    return this;\n  }\n\n  scale(a) {\n    assert(a instanceof BN);\n\n    // X3 = X1 * A\n    const nx = this.x.redMul(a);\n\n    // Y3 = Y1 * A\n    const ny = this.y.redMul(a);\n\n    // Z3 = Z1 * A\n    const nz = this.z.redMul(a);\n\n    // T3 = T1 * A\n    const nt = this.t.redMul(a);\n\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  neg() {\n    // -(X1, Y1, Z1, T1) = (-X1, Y1, Z1, -T1)\n    const nx = this.x.redNeg();\n    const ny = this.y;\n    const nz = this.z;\n    const nt = this.t.redNeg();\n\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  add(p) {\n    assert(p instanceof EdwardsPoint);\n\n    // P = O\n    if (this.isInfinity())\n      return p;\n\n    // Q = O\n    if (p.isInfinity())\n      return this;\n\n    // Z1 = 1\n    if (this.zOne)\n      return p._add(this, 0);\n\n    return this._add(p, 0);\n  }\n\n  _add(p, flag) {\n    // a = -1\n    if (this.curve.mOneA)\n      return this._addM1(p, flag);\n\n    return this._addA(p, flag);\n  }\n\n  _addM1(p, flag) {\n    // Assumes a = -1.\n    //\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n    // 8M + 8A + 1*k + 1*2\n    //\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-madd-2008-hwcd-3\n    // 7M + 8A + 1*k + 1*2\n    const zOne = p.zOne & (flag ^ 1);\n\n    // A = (Y1 - X1) * (Y2 - X2)\n    const a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n\n    // B = (Y1 + X1) * (Y2 + X2)\n    const b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n\n    // C = T1 * k * T2\n    const c = this.t.redMul(this.curve.k).redMul(p.t);\n\n    // D = Z1 * 2 * Z2\n    const d = zOne ? this.z.redAdd(this.z) : this.z.redMul(p.z).redIMuln(2);\n\n    // E = B - A\n    const e = b.redSub(a);\n\n    // F = D - C\n    const f = d.redSub(c);\n\n    // G = D + C\n    const g = d.redIAdd(c);\n\n    // H = B + A\n    const h = b.redIAdd(a);\n\n    // X3 = E * F\n    const nx = e.redMul(f);\n\n    // Y3 = G * H\n    const ny = g.redMul(h);\n\n    // T3 = E * H\n    const nt = e.redMul(h);\n\n    // Z3 = F * G\n    const nz = f.redMul(g);\n\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  _addA(p, flag) {\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // 9M + 7A + 1*a + 1*d\n    //\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-madd-2008-hwcd\n    // 8M + 7A + 1*a + 1*d\n    const zOne = p.zOne & (flag ^ 1);\n\n    // A = X1 * X2\n    const a = this.x.redMul(p.x);\n\n    // B = Y1 * Y2\n    const b = this.y.redMul(p.y);\n\n    // C = T1 * d * T2\n    const c = this.curve._mulD(this.t).redMul(p.t);\n\n    // D = Z1 * Z2\n    const d = zOne ? this.z.clone() : this.z.redMul(p.z);\n\n    // + XYXY = (X1 + Y1) * (X2 + Y2)\n    const xyxy = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y));\n\n    // E = (X1 + Y1) * (X2 + Y2) - A - B\n    const e = xyxy.redISub(a).redISub(b);\n\n    // F = D - C\n    const f = d.redSub(c);\n\n    // G = D + C\n    const g = d.redIAdd(c);\n\n    // H = B - a * A\n    const h = b.redISub(this.curve._mulA(a));\n\n    // X3 = E * F\n    const nx = e.redMul(f);\n\n    // Y3 = G * H\n    const ny = g.redMul(h);\n\n    // T3 = E * H\n    const nt = e.redMul(h);\n\n    // Z3 = F * G\n    const nz = f.redMul(g);\n\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  dbl() {\n    // P = O\n    if (this.isInfinity())\n      return this;\n\n    return this._dbl(0);\n  }\n\n  _dbl(flag) {\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // 4M + 4S + 6A + 1*a + 1*2\n    //\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-mdbl-2008-hwcd\n    // 3M + 4S + 7A + 1*a + 1*2\n    const zOne = this.zOne & (flag ^ 1);\n\n    // A = X1^2\n    const a = this.x.redSqr();\n\n    // B = Y1^2\n    const b = this.y.redSqr();\n\n    // C = 2 * Z1^2\n    const c = zOne ? this.curve.two : this.z.redSqr().redIMuln(2);\n\n    // D = a * A\n    const d = this.curve._mulA(a);\n\n    // E = (X1 + Y1)^2 - A - B\n    const e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n\n    // G = D + B\n    const g = d.redAdd(b);\n\n    // F = G - C\n    const f = g.redSub(c);\n\n    // H = D - B\n    const h = d.redISub(b);\n\n    // X3 = E * F\n    const nx = e.redMul(f);\n\n    // Y3 = G * H\n    const ny = g.redMul(h);\n\n    // T3 = E * H\n    const nt = e.redMul(h);\n\n    // Z3 = F * G\n    const nz = f.redMul(g);\n\n    return this.curve.point(nx, ny, nz, nt);\n  }\n\n  uadd(p) {\n    assert(p instanceof EdwardsPoint);\n    return this._add(p, 1);\n  }\n\n  udbl() {\n    return this._dbl(1);\n  }\n\n  getX() {\n    this.normalize();\n    return this.x.fromRed();\n  }\n\n  getY() {\n    this.normalize();\n    return this.y.fromRed();\n  }\n\n  eq(p) {\n    assert(p instanceof EdwardsPoint);\n    assert(!this.z.isZero());\n    assert(!p.z.isZero());\n\n    // P = Q\n    if (this === p)\n      return true;\n\n    // Z1 = Z2\n    if (this.z.eq(p.z)) {\n      return this.x.eq(p.x)\n          && this.y.eq(p.y);\n    }\n\n    // X1 * Z2 == X2 * Z1\n    const x1 = this.x.redMul(p.z);\n    const x2 = p.x.redMul(this.z);\n\n    if (!x1.eq(x2))\n      return false;\n\n    const y1 = this.y.redMul(p.z);\n    const y2 = p.y.redMul(this.z);\n\n    return y1.eq(y2);\n  }\n\n  cmp(point) {\n    assert(point instanceof EdwardsPoint);\n\n    return this.order().cmp(point.order())\n        || this.getY().cmp(point.getY())\n        || this.getX().cmp(point.getX());\n  }\n\n  isInfinity() {\n    assert(!this.z.isZero());\n\n    // X1 = 0\n    if (!this.x.isZero())\n      return false;\n\n    // Y1 = Z1\n    return this.y.eq(this.z);\n  }\n\n  isOrder2() {\n    if (this.isInfinity())\n      return false;\n\n    return this.x.isZero();\n  }\n\n  isOdd() {\n    this.normalize();\n    return this.x.redIsOdd();\n  }\n\n  isEven() {\n    this.normalize();\n    return this.x.redIsEven();\n  }\n\n  toP() {\n    return this.normalize();\n  }\n\n  toJ() {\n    return this;\n  }\n\n  encode() {\n    // [RFC8032] Section 5.1.2.\n    const y = this.getY();\n\n    // Note: `x` normalized from `getY()` call.\n    y.setn(this.curve.signBit, this.x.redIsOdd());\n\n    return this.curve.encodeAdjusted(y);\n  }\n\n  static decode(curve, bytes) {\n    // [RFC8032] Section 5.1.3.\n    assert(curve instanceof EdwardsCurve);\n\n    const y = curve.decodeAdjusted(bytes);\n    const sign = y.testn(curve.signBit) !== 0;\n\n    y.setn(curve.signBit, 0);\n\n    if (y.cmp(curve.p) >= 0)\n      throw new Error('Invalid point.');\n\n    return curve.pointFromY(y, sign);\n  }\n\n  toJSON(pre) {\n    if (this.isInfinity())\n      return [];\n\n    const x = this.getX().toJSON();\n    const y = this.getY().toJSON();\n\n    if (pre === true && this.pre)\n      return [x, y, this.pre.toJSON()];\n\n    return [x, y];\n  }\n\n  toPretty() {\n    const size = this.curve.fieldSize * 2;\n    const x = toPretty(this.getX(), size);\n    const y = toPretty(this.getY(), size);\n\n    return [x, y];\n  }\n\n  static fromJSON(curve, json) {\n    assert(curve instanceof EdwardsCurve);\n    assert(Array.isArray(json));\n    assert(json.length === 0\n        || json.length === 2\n        || json.length === 3);\n\n    if (json.length === 0)\n      return curve.point();\n\n    const x = BN.fromJSON(json[0]);\n    const y = BN.fromJSON(json[1]);\n    const point = curve.point(x, y);\n\n    if (json.length > 2 && json[2] != null)\n      point.pre = Precomp.fromJSON(point, json[2]);\n\n    return point;\n  }\n\n  [custom]() {\n    if (this.isInfinity())\n      return '<EdwardsPoint: Infinity>';\n\n    return '<EdwardsPoint:'\n        + ' x=' + this.x.fromRed().toString(16, 2)\n        + ' y=' + this.y.fromRed().toString(16, 2)\n        + ' z=' + this.z.fromRed().toString(16, 2)\n        + '>';\n  }\n}\n\n/**\n * Precomp\n */\n\nclass Precomp {\n  constructor() {\n    this.naf = null;\n    this.windows = null;\n    this.doubles = null;\n    this.blinding = null;\n    this.beta = null;\n  }\n\n  map(func) {\n    assert(typeof func === 'function');\n\n    const out = new this.constructor();\n\n    if (this.naf)\n      out.naf = this.naf.map(func);\n\n    if (this.doubles)\n      out.doubles = this.doubles.map(func);\n\n    return out;\n  }\n\n  toJSON() {\n    return {\n      naf: this.naf ? this.naf.toJSON() : null,\n      windows: this.windows ? this.windows.toJSON() : null,\n      doubles: this.doubles ? this.doubles.toJSON() : null,\n      blinding: this.blinding ? this.blinding.toJSON() : undefined\n    };\n  }\n\n  fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n\n    if (json.naf != null)\n      this.naf = NAF.fromJSON(point, json.naf);\n\n    if (json.windows != null)\n      this.windows = Windows.fromJSON(point, json.windows);\n\n    if (json.doubles != null)\n      this.doubles = Doubles.fromJSON(point, json.doubles);\n\n    if (json.blinding != null)\n      this.blinding = Blinding.fromJSON(point, json.blinding);\n\n    return this;\n  }\n\n  static fromJSON(point, json) {\n    return new this().fromJSON(point, json);\n  }\n}\n\n/**\n * NAF\n */\n\nclass NAF {\n  constructor(width, points) {\n    this.width = width;\n    this.points = points;\n  }\n\n  map(func) {\n    assert(typeof func === 'function');\n\n    const {width} = this;\n    const points = [];\n\n    for (const point of this.points)\n      points.push(func(point));\n\n    return new this.constructor(width, points);\n  }\n\n  toJSON() {\n    return {\n      width: this.width,\n      points: this.points.slice(1).map((point) => {\n        return point.toJSON();\n      })\n    };\n  }\n\n  static fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n    assert((json.width >>> 0) === json.width);\n    assert(Array.isArray(json.points));\n\n    const {curve} = point;\n    const {width} = json;\n    const points = [point];\n\n    for (const item of json.points)\n      points.push(curve.pointFromJSON(item));\n\n    return new this(width, points);\n  }\n}\n\n/**\n * Windows\n */\n\nclass Windows {\n  constructor(width, bits, points) {\n    this.width = width;\n    this.bits = bits;\n    this.points = points;\n  }\n\n  toJSON() {\n    return {\n      width: this.width,\n      bits: this.bits,\n      points: this.points.slice(1).map((point) => {\n        return point.toJSON();\n      })\n    };\n  }\n\n  static fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n    assert((json.width >>> 0) === json.width);\n    assert((json.bits >>> 0) === json.bits);\n    assert(Array.isArray(json.points));\n\n    const {curve} = point;\n    const {width, bits} = json;\n    const points = [point];\n\n    for (const item of json.points)\n      points.push(curve.pointFromJSON(item));\n\n    return new this(width, bits, points);\n  }\n}\n\n/**\n * Doubles\n */\n\nclass Doubles {\n  constructor(step, points) {\n    this.step = step;\n    this.points = points;\n  }\n\n  map(func) {\n    assert(typeof func === 'function');\n\n    const {step} = this;\n    const points = [];\n\n    for (const point of this.points)\n      points.push(func(point));\n\n    return new this.constructor(step, points);\n  }\n\n  toJSON() {\n    return {\n      step: this.step,\n      points: this.points.slice(1).map((point) => {\n        return point.toJSON();\n      })\n    };\n  }\n\n  static fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n    assert((json.step >>> 0) === json.step);\n    assert(Array.isArray(json.points));\n\n    const {curve} = point;\n    const {step} = json;\n    const points = [point];\n\n    for (const item of json.points)\n      points.push(curve.pointFromJSON(item));\n\n    return new this(step, points);\n  }\n}\n\n/**\n * Blinding\n */\n\nclass Blinding {\n  constructor(blind, unblind) {\n    this.blind = blind;\n    this.unblind = unblind;\n  }\n\n  toJSON() {\n    return {\n      blind: this.blind.toJSON(),\n      unblind: this.unblind.toJSON()\n    };\n  }\n\n  static fromJSON(point, json) {\n    assert(point instanceof Point);\n    assert(json && typeof json === 'object');\n\n    const {curve} = point;\n    const blind = BN.fromJSON(json.blind);\n    const unblind = curve.pointFromJSON(json.unblind);\n\n    return new this(blind, unblind);\n  }\n}\n\n/**\n * Endo\n */\n\nclass Endo {\n  constructor(beta, lambda, basis, pre) {\n    this.beta = beta;\n    this.lambda = lambda;\n    this.basis = basis;\n    this.pre = pre;\n  }\n\n  toJSON() {\n    return {\n      beta: this.beta.fromRed().toJSON(),\n      lambda: this.lambda.toJSON(),\n      basis: [\n        this.basis[0].toJSON(),\n        this.basis[1].toJSON()\n      ],\n      pre: [\n        this.pre[0].toJSON(),\n        this.pre[1].toJSON()\n      ]\n    };\n  }\n\n  static fromJSON(curve, json) {\n    assert(curve instanceof Curve);\n    assert(json && typeof json === 'object');\n    assert(Array.isArray(json.basis));\n    assert(Array.isArray(json.pre));\n    assert(json.basis.length === 2);\n    assert(json.pre.length === 2);\n\n    const beta = BN.fromJSON(json.beta).toRed(curve.red);\n    const lambda = BN.fromJSON(json.lambda);\n\n    const basis = [\n      Vector.fromJSON(json.basis[0]),\n      Vector.fromJSON(json.basis[1])\n    ];\n\n    const pre = [\n      BN.fromJSON(json.pre[0]),\n      BN.fromJSON(json.pre[1])\n    ];\n\n    return new this(beta, lambda, basis, pre);\n  }\n}\n\n/**\n * Vector\n */\n\nclass Vector {\n  constructor(a, b) {\n    this.a = a;\n    this.b = b;\n  }\n\n  toJSON() {\n    return {\n      a: this.a.toJSON(),\n      b: this.b.toJSON()\n    };\n  }\n\n  static fromJSON(json) {\n    assert(json && typeof json === 'object');\n\n    const a = BN.fromJSON(json.a);\n    const b = BN.fromJSON(json.b);\n\n    return new this(a, b);\n  }\n}\n\n/**\n * P192\n * https://tinyurl.com/fips-186-2 (page 29)\n * https://tinyurl.com/fips-186-3 (page 88)\n */\n\nclass P192 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P192',\n      ossl: 'prime192v1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'p192',\n      // 2^192 - 2^64 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff fffffffe',\n          'ffffffff ffffffff'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff fffffffe',\n          'ffffffff fffffffc'],\n      b: ['64210519 e59c80e7 0fa7e9ab 72243049',\n          'feb8deec c146b9b1'],\n      n: ['ffffffff ffffffff ffffffff 99def836',\n          '146bc9b1 b4d22831'],\n      h: '1',\n      // Icart\n      z: '-5',\n      g: [\n        ['188da80e b03090f6 7cbf20eb 43a18800',\n         'f4ff0afd 82ff1012'],\n        ['07192b95 ffc8da78 631011ed 6b24cdd5',\n         '73f977a1 1e794811'],\n        pre\n      ]\n    });\n  }\n}\n\n/**\n * P224\n * https://tinyurl.com/fips-186-2 (page 30)\n * https://tinyurl.com/fips-186-3 (page 88)\n */\n\nclass P224 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P224',\n      ossl: 'secp224r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'p224',\n      // 2^224 - 2^96 + 1 (no congruence)\n      p: ['ffffffff ffffffff ffffffff ffffffff',\n          '00000000 00000000 00000001'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff fffffffe',\n          'ffffffff ffffffff fffffffe'],\n      b: ['b4050a85 0c04b3ab f5413256 5044b0b7',\n          'd7bfd8ba 270b3943 2355ffb4'],\n      n: ['ffffffff ffffffff ffffffff ffff16a2',\n          'e0b8f03e 13dd2945 5c5c2a3d'],\n      h: '1',\n      // SSWU\n      z: '1f',\n      g: [\n        ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3',\n         '56c21122 343280d6 115c1d21'],\n        ['bd376388 b5f723fb 4c22dfe6 cd4375a0',\n         '5a074764 44d58199 85007e34'],\n        pre\n      ]\n    });\n  }\n}\n\n/**\n * P256\n * https://tinyurl.com/fips-186-2 (page 31)\n * https://tinyurl.com/fips-186-3 (page 89)\n */\n\nclass P256 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P256',\n      ossl: 'prime256v1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: null,\n      // 2^256 - 2^224 + 2^192 + 2^96 - 1 (= 3 mod 4)\n      p: ['ffffffff 00000001 00000000 00000000',\n          '00000000 ffffffff ffffffff ffffffff'],\n      // -3 mod p\n      a: ['ffffffff 00000001 00000000 00000000',\n          '00000000 ffffffff ffffffff fffffffc'],\n      b: ['5ac635d8 aa3a93e7 b3ebbd55 769886bc',\n          '651d06b0 cc53b0f6 3bce3c3e 27d2604b'],\n      n: ['ffffffff 00000000 ffffffff ffffffff',\n          'bce6faad a7179e84 f3b9cac2 fc632551'],\n      h: '1',\n      // SSWU\n      z: '-a',\n      g: [\n        ['6b17d1f2 e12c4247 f8bce6e5 63a440f2',\n         '77037d81 2deb33a0 f4a13945 d898c296'],\n        ['4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16',\n         '2bce3357 6b315ece cbb64068 37bf51f5'],\n        pre\n      ]\n    });\n  }\n}\n\n/**\n * P384\n * https://tinyurl.com/fips-186-2 (page 32)\n * https://tinyurl.com/fips-186-3 (page 89)\n */\n\nclass P384 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P384',\n      ossl: 'secp384r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA384',\n      prime: null,\n      // 2^384 - 2^128 - 2^96 + 2^32 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff fffffffe',\n          'ffffffff 00000000 00000000 ffffffff'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff fffffffe',\n          'ffffffff 00000000 00000000 fffffffc'],\n      b: ['b3312fa7 e23ee7e4 988e056b e3f82d19',\n          '181d9c6e fe814112 0314088f 5013875a',\n          'c656398d 8a2ed19d 2a85c8ed d3ec2aef'],\n      n: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff c7634d81 f4372ddf',\n          '581a0db2 48b0a77a ecec196a ccc52973'],\n      h: '1',\n      // Icart\n      z: '-c',\n      g: [\n        ['aa87ca22 be8b0537 8eb1c71e f320ad74',\n         '6e1d3b62 8ba79b98 59f741e0 82542a38',\n         '5502f25d bf55296c 3a545e38 72760ab7'],\n        ['3617de4a 96262c6f 5d9e98bf 9292dc29',\n         'f8f41dbd 289a147c e9da3113 b5f0b8c0',\n         '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'],\n        pre\n      ]\n    });\n  }\n}\n\n/**\n * P521\n * https://tinyurl.com/fips-186-2 (page 33)\n * https://tinyurl.com/fips-186-3 (page 90)\n */\n\nclass P521 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'P521',\n      ossl: 'secp521r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA512',\n      prime: 'p521',\n      // 2^521 - 1 (= 3 mod 4)\n      p: ['000001ff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff'],\n      // -3 mod p\n      a: ['000001ff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'fffffffc'],\n      b: ['00000051 953eb961 8e1c9a1f 929a21a0',\n          'b68540ee a2da725b 99b315f3 b8b48991',\n          '8ef109e1 56193951 ec7e937b 1652c0bd',\n          '3bb1bf07 3573df88 3d2c34f1 ef451fd4',\n          '6b503f00'],\n      n: ['000001ff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'fffffffa 51868783 bf2f966b 7fcc0148',\n          'f709a5d0 3bb5c9b8 899c47ae bb6fb71e',\n          '91386409'],\n      h: '1',\n      // SSWU\n      z: '-4',\n      g: [\n        ['000000c6 858e06b7 0404e9cd 9e3ecb66',\n         '2395b442 9c648139 053fb521 f828af60',\n         '6b4d3dba a14b5e77 efe75928 fe1dc127',\n         'a2ffa8de 3348b3c1 856a429b f97e7e31',\n         'c2e5bd66'],\n        ['00000118 39296a78 9a3bc004 5c8a5fb4',\n         '2c7d1bd9 98f54449 579b4468 17afbd17',\n         '273e662c 97ee7299 5ef42640 c550b901',\n         '3fad0761 353c7086 a272c240 88be9476',\n         '9fd16650'],\n        pre\n      ]\n    });\n  }\n}\n\n/**\n * SECP256K1\n * https://www.secg.org/SEC2-Ver-1.0.pdf (page 15, section 2.7.1)\n * https://www.secg.org/sec2-v2.pdf (page 9, section 2.4.1)\n */\n\nclass SECP256K1 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'SECP256K1',\n      ossl: 'secp256k1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'k256',\n      // 2^256 - 2^32 - 977 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff fffffffe fffffc2f'],\n      a: '0',\n      b: '7',\n      n: ['ffffffff ffffffff ffffffff fffffffe',\n          'baaedce6 af48a03b bfd25e8c d0364141'],\n      h: '1',\n      // SVDW\n      z: '1',\n      // sqrt(-3)\n      c: ['0a2d2ba9 3507f1df 233770c2 a797962c',\n          'c61f6d15 da14ecd4 7d8d27ae 1cd5f852'],\n      g: [\n        ['79be667e f9dcbbac 55a06295 ce870b07',\n         '029bfcdb 2dce28d9 59f2815b 16f81798'],\n        ['483ada77 26a3c465 5da4fbfc 0e1108a8',\n         'fd17b448 a6855419 9c47d08f fb10d4b8'],\n        pre\n      ],\n      // Precomputed endomorphism.\n      endo: {\n        beta: ['7ae96a2b 657c0710 6e64479e ac3434e9',\n               '9cf04975 12f58995 c1396c28 719501ee'],\n        lambda: ['5363ad4c c05c30e0 a5261c02 8812645a',\n                 '122e22ea 20816678 df02967c 1b23bd72'],\n        basis: [\n          {\n            a: '3086d221a7d46bcde86c90e49284eb15',\n            b: '-e4437ed6010e88286f547fa90abfe4c3'\n          },\n          {\n            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n            b: '3086d221a7d46bcde86c90e49284eb15'\n          }\n        ],\n        pre: [\n          '3086d221a7d46bcde86c90e49284eb153dab',\n          '-e4437ed6010e88286f547fa90abfe4c42212'\n        ]\n      }\n    });\n  }\n}\n\n/**\n * BRAINPOOLP256\n * https://tools.ietf.org/html/rfc5639#section-3.4\n */\n\nclass BRAINPOOLP256 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'BRAINPOOLP256',\n      ossl: 'brainpoolP256r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['a9fb57db a1eea9bc 3e660a90 9d838d72',\n          '6e3bf623 d5262028 2013481d 1f6e5377'],\n      a: ['7d5a0975 fc2c3057 eef67530 417affe7',\n          'fb8055c1 26dc5c6c e94a4b44 f330b5d9'],\n      b: ['26dc5c6c e94a4b44 f330b5d9 bbd77cbf',\n          '95841629 5cf7e1ce 6bccdc18 ff8c07b6'],\n      n: ['a9fb57db a1eea9bc 3e660a90 9d838d71',\n          '8c397aa3 b561a6f7 901e0e82 974856a7'],\n      h: '1',\n      // Icart\n      z: '-2',\n      g: [\n        ['8bd2aeb9 cb7e57cb 2c4b482f fc81b7af',\n         'b9de27e1 e3bd23c2 3a4453bd 9ace3262'],\n        ['547ef835 c3dac4fd 97f8461a 14611dc9',\n         'c2774513 2ded8e54 5c1d54c7 2f046997'],\n        pre\n      ]\n    });\n  }\n}\n\n/**\n * BRAINPOOLP384\n * https://tools.ietf.org/html/rfc5639#section-3.6\n */\n\nclass BRAINPOOLP384 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'BRAINPOOLP384',\n      ossl: 'brainpoolP384r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA384',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['8cb91e82 a3386d28 0f5d6f7e 50e641df',\n          '152f7109 ed5456b4 12b1da19 7fb71123',\n          'acd3a729 901d1a71 87470013 3107ec53'],\n      a: ['7bc382c6 3d8c150c 3c72080a ce05afa0',\n          'c2bea28e 4fb22787 139165ef ba91f90f',\n          '8aa5814a 503ad4eb 04a8c7dd 22ce2826'],\n      b: ['04a8c7dd 22ce2826 8b39b554 16f0447c',\n          '2fb77de1 07dcd2a6 2e880ea5 3eeb62d5',\n          '7cb43902 95dbc994 3ab78696 fa504c11'],\n      n: ['8cb91e82 a3386d28 0f5d6f7e 50e641df',\n          '152f7109 ed5456b3 1f166e6c ac0425a7',\n          'cf3ab6af 6b7fc310 3b883202 e9046565'],\n      h: '1',\n      // SSWU\n      z: '-5',\n      g: [\n        ['1d1c64f0 68cf45ff a2a63a81 b7c13f6b',\n         '8847a3e7 7ef14fe3 db7fcafe 0cbd10e8',\n         'e826e034 36d646aa ef87b2e2 47d4af1e'],\n        ['8abe1d75 20f9c2a4 5cb1eb8e 95cfd552',\n         '62b70b29 feec5864 e19c054f f9912928',\n         '0e464621 77918111 42820341 263c5315'],\n        pre\n      ]\n    });\n  }\n}\n\n/**\n * BRAINPOOLP512\n * https://tools.ietf.org/html/rfc5639#section-3.7\n */\n\nclass BRAINPOOLP512 extends ShortCurve {\n  constructor(pre) {\n    super({\n      id: 'BRAINPOOLP512',\n      ossl: 'brainpoolP512r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA512',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['aadd9db8 dbe9c48b 3fd4e6ae 33c9fc07',\n          'cb308db3 b3c9d20e d6639cca 70330871',\n          '7d4d9b00 9bc66842 aecda12a e6a380e6',\n          '2881ff2f 2d82c685 28aa6056 583a48f3'],\n      a: ['7830a331 8b603b89 e2327145 ac234cc5',\n          '94cbdd8d 3df91610 a83441ca ea9863bc',\n          '2ded5d5a a8253aa1 0a2ef1c9 8b9ac8b5',\n          '7f1117a7 2bf2c7b9 e7c1ac4d 77fc94ca'],\n      b: ['3df91610 a83441ca ea9863bc 2ded5d5a',\n          'a8253aa1 0a2ef1c9 8b9ac8b5 7f1117a7',\n          '2bf2c7b9 e7c1ac4d 77fc94ca dc083e67',\n          '984050b7 5ebae5dd 2809bd63 8016f723'],\n      n: ['aadd9db8 dbe9c48b 3fd4e6ae 33c9fc07',\n          'cb308db3 b3c9d20e d6639cca 70330870',\n          '553e5c41 4ca92619 41866119 7fac1047',\n          '1db1d381 085ddadd b5879682 9ca90069'],\n      h: '1',\n      // Icart\n      z: '7',\n      g: [\n        ['81aee4bd d82ed964 5a21322e 9c4c6a93',\n         '85ed9f70 b5d916c1 b43b62ee f4d0098e',\n         'ff3b1f78 e2d0d48d 50d1687b 93b97d5f',\n         '7c6d5047 406a5e68 8b352209 bcb9f822'],\n        ['7dde385d 566332ec c0eabfa9 cf7822fd',\n         'f209f700 24a57b1a a000c55b 881f8111',\n         'b2dcde49 4a5f485e 5bca4bd8 8a2763ae',\n         'd1ca2b2f a8f05406 78cd1e0f 3ad80892'],\n        pre\n      ]\n    });\n  }\n}\n\n/**\n * X25519\n * https://tools.ietf.org/html/rfc7748#section-4.1\n */\n\nclass X25519 extends MontCurve {\n  constructor() {\n    super({\n      id: 'X25519',\n      ossl: 'X25519',\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHA512',\n      prime: 'p25519',\n      // 2^255 - 19 (= 5 mod 8)\n      p: ['7fffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffed'],\n      // 486662\n      a: '76d06',\n      b: '1',\n      n: ['10000000 00000000 00000000 00000000',\n          '14def9de a2f79cd6 5812631a 5cf5d3ed'],\n      h: '8',\n      // Elligator 2\n      z: '2',\n      g: [\n        ['00000000 00000000 00000000 00000000',\n         '00000000 00000000 00000000 00000009'],\n        // See: https://www.rfc-editor.org/errata/eid4730\n        ['5f51e65e 475f794b 1fe122d3 88b72eb3',\n         '6dc2b281 92839e4d d6163a5d 81312c14']\n      ],\n      torsion: [\n        [],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000']\n        ],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000001'],\n          ['6be4f497 f9a9c2af c21fa77a d7f4a6ef',\n           '635a11c7 284a9363 e9a248ef 9c884415']\n        ],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000001'],\n          ['141b0b68 06563d50 3de05885 280b5910',\n           '9ca5ee38 d7b56c9c 165db710 6377bbd8']\n        ],\n        [\n          ['57119fd0 dd4e22d8 868e1c58 c45c4404',\n           '5bef839c 55b1d0b1 248c50a3 bc959c5f'],\n          ['68c59389 3d458e64 31c6ca00 45fb5015',\n           '20a44346 8eaa68dd 0f103842 048065b7']\n        ],\n        [\n          ['57119fd0 dd4e22d8 868e1c58 c45c4404',\n           '5bef839c 55b1d0b1 248c50a3 bc959c5f'],\n          ['173a6c76 c2ba719b ce3935ff ba04afea',\n           'df5bbcb9 71559722 f0efc7bd fb7f9a36']\n        ],\n        [\n          ['00b8495f 16056286 fdb1329c eb8d09da',\n           '6ac49ff1 fae35616 aeb8413b 7c7aebe0'],\n          ['3931c129 569e83a5 29482c14 e628b457',\n           '933bfc29 ed801b4d 68871483 92507b1a']\n        ],\n        [\n          ['00b8495f 16056286 fdb1329c eb8d09da',\n           '6ac49ff1 fae35616 aeb8413b 7c7aebe0'],\n          ['46ce3ed6 a9617c5a d6b7d3eb 19d74ba8',\n           '6cc403d6 127fe4b2 9778eb7c 6daf84d3']\n        ]\n      ]\n    });\n  }\n}\n\n/**\n * X448\n * https://tools.ietf.org/html/rfc7748#section-4.2\n */\n\nclass X448 extends MontCurve {\n  constructor() {\n    super({\n      id: 'X448',\n      ossl: 'X448',\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff fffffffe ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff'],\n      // 156326\n      a: '262a6',\n      b: '1',\n      n: ['3fffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff 7cca23e9',\n          'c44edb49 aed63690 216cc272 8dc58f55',\n          '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [\n        ['00000000 00000000 00000000 00000000',\n         '00000000 00000000 00000000 00000000',\n         '00000000 00000000 00000000 00000000',\n         '00000000 00000005'],\n        ['7d235d12 95f5b1f6 6c98ab6e 58326fce',\n         'cbae5d34 f55545d0 60f75dc2 8df3f6ed',\n         'b8027e23 46430d21 1312c4b1 50677af7',\n         '6fd7223d 457b5b1a']\n      ],\n      torsion: [\n        [],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000']\n        ],\n        [\n          ['ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff fffffffe ffffffff',\n           'ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff fffffffe'],\n          ['ba4d3a08 29b6112f 8812e51b a0bb2abe',\n           'bc1cb08e b48e5569 36ba50fd d2e7d68a',\n           'f8cb3216 0522425b 3f990812 abbe635a',\n           'd37a21e1 7551b193']\n        ],\n        [\n          ['ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff fffffffe ffffffff',\n           'ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff fffffffe'],\n          ['45b2c5f7 d649eed0 77ed1ae4 5f44d541',\n           '43e34f71 4b71aa96 c945af01 2d182975',\n           '0734cde9 faddbda4 c066f7ed 54419ca5',\n           '2c85de1e 8aae4e6c']\n        ]\n      ]\n    });\n  }\n}\n\n/**\n * MONT448\n * Isomorphic to Ed448-Goldilocks.\n */\n\nclass MONT448 extends MontCurve {\n  constructor() {\n    super({\n      id: 'MONT448',\n      ossl: null,\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff fffffffe ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff'],\n      // -78160 / -39082 mod p\n      a: ['b2cf97d2 d43459a9 31ed36b1 fc4e3cb5',\n          '5d93f8d2 22746997 60ccffc6 49961ed6',\n          'c5b05fca c24864ed 6fb59697 931b78da',\n          '84ddecd8 ca2b5cfb'],\n      b: '1',\n      n: ['3fffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff 7cca23e9',\n          'c44edb49 aed63690 216cc272 8dc58f55',\n          '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [\n        ['ac0d24cc c6c75cb0 eb71f81e 7a6edf51',\n         '48e88aee 009a2a24 e795687e c28e125a',\n         '3e6730a6 0d46367b aa7fe99d 152128dc',\n         '41321bc7 7817f059'],\n        ['5a4437f6 80c0d0db 9b061276 d5d0ffcc',\n         'e786ff33 b6a53d30 98746425 82e66f09',\n         '4433dae7 7244a6e2 6b11e905 7228f483',\n         '556c41a5 913f55fe']\n      ],\n      torsion: [\n        [],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000']\n        ],\n        [\n          ['ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff fffffffe ffffffff',\n           'ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff fffffffe'],\n          ['bec92fd0 6da2acf2 b4e261e8 7cef0d34',\n           '22e75c18 3c589857 b71924e5 73c2f9ce',\n           'e18da5f2 466e2f39 3c2eedf0 f105a60a',\n           'b40c717d 4f1e1fd7']\n        ],\n        [\n          ['ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff fffffffe ffffffff',\n           'ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff fffffffe'],\n          ['4136d02f 925d530d 4b1d9e17 8310f2cb',\n           'dd18a3e7 c3a767a8 48e6db19 8c3d0631',\n           '1e725a0d b991d0c6 c3d1120f 0efa59f5',\n           '4bf38e82 b0e1e028']\n        ]\n      ]\n    });\n  }\n}\n\n/**\n * ED25519\n * https://tools.ietf.org/html/rfc8032#section-5.1\n */\n\nclass ED25519 extends EdwardsCurve {\n  constructor(pre) {\n    super({\n      id: 'ED25519',\n      ossl: 'ED25519',\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHA512',\n      prefix: 'SigEd25519 no Ed25519 collisions',\n      context: false,\n      prime: 'p25519',\n      // 2^255 - 19 (= 5 mod 8)\n      p: ['7fffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff ffffffed'],\n      a: '-1',\n      // -121665 / 121666 mod p\n      d: ['52036cee 2b6ffe73 8cc74079 7779e898',\n          '00700a4d 4141d8ab 75eb4dca 135978a3'],\n      n: ['10000000 00000000 00000000 00000000',\n          '14def9de a2f79cd6 5812631a 5cf5d3ed'],\n      h: '8',\n      // Elligator 2\n      z: '2',\n      g: [\n        ['216936d3 cd6e53fe c0a4e231 fdd6dc5c',\n         '692cc760 9525a7b2 c9562d60 8f25d51a'],\n        // 4/5\n        ['66666666 66666666 66666666 66666666',\n         '66666666 66666666 66666666 66666658'],\n        pre\n      ],\n      torsion: [\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000001']\n        ],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000'],\n          ['7fffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff ffffffff ffffffec']\n        ],\n        [\n          ['2b832480 4fc1df0b 2b4d0099 3dfbd7a7',\n           '2f431806 ad2fe478 c4ee1b27 4a0ea0b0'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000']\n        ],\n        [\n          ['547cdb7f b03e20f4 d4b2ff66 c2042858',\n           'd0bce7f9 52d01b87 3b11e4d8 b5f15f3d'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000']\n        ],\n        [\n          ['1fd5b9a0 06394a28 e9339932 38de4abb',\n           '5c193c70 13e5e238 dea14646 c545d14a'],\n          ['05fc536d 880238b1 3933c6d3 05acdfd5',\n           'f098eff2 89f4c345 b027b2c2 8f95e826']\n        ],\n        [\n          ['602a465f f9c6b5d7 16cc66cd c721b544',\n           'a3e6c38f ec1a1dc7 215eb9b9 3aba2ea3'],\n          ['05fc536d 880238b1 3933c6d3 05acdfd5',\n           'f098eff2 89f4c345 b027b2c2 8f95e826']\n        ],\n        [\n          ['1fd5b9a0 06394a28 e9339932 38de4abb',\n           '5c193c70 13e5e238 dea14646 c545d14a'],\n          ['7a03ac92 77fdc74e c6cc392c fa53202a',\n           '0f67100d 760b3cba 4fd84d3d 706a17c7']\n        ],\n        [\n          ['602a465f f9c6b5d7 16cc66cd c721b544',\n           'a3e6c38f ec1a1dc7 215eb9b9 3aba2ea3'],\n          ['7a03ac92 77fdc74e c6cc392c fa53202a',\n           '0f67100d 760b3cba 4fd84d3d 706a17c7']\n        ]\n      ]\n    });\n  }\n}\n\n/**\n * ISO448\n * https://tools.ietf.org/html/rfc7748#section-4.2\n * https://git.zx2c4.com/goldilocks/tree/_aux/ristretto/ristretto.sage#n658\n */\n\nclass ISO448 extends EdwardsCurve {\n  constructor(pre) {\n    super({\n      id: 'ISO448',\n      ossl: null,\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prefix: 'SigEd448',\n      context: true,\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff fffffffe ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff'],\n      a: '1',\n      // 39082 / 39081 mod p\n      d: ['d78b4bdc 7f0daf19 f24f38c2 9373a2cc',\n          'ad461572 42a50f37 809b1da3 412a12e7',\n          '9ccc9c81 264cfe9a d0809970 58fb61c4',\n          '243cc32d baa156b9'],\n      n: ['3fffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff 7cca23e9',\n          'c44edb49 aed63690 216cc272 8dc58f55',\n          '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [\n        ['79a70b2b 70400553 ae7c9df4 16c792c6',\n         '1128751a c9296924 0c25a07d 728bdc93',\n         'e21f7787 ed697224 9de732f3 8496cd11',\n         '69871309 3e9c04fc'],\n        // Note: the RFC has this wrong.\n        ['7fffffff ffffffff ffffffff ffffffff',\n         'ffffffff ffffffff ffffffff 80000000',\n         '00000000 00000000 00000000 00000000',\n         '00000000 00000001'],\n        pre\n      ],\n      torsion: [\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000001']\n        ],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000'],\n          ['ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff fffffffe ffffffff',\n           'ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff fffffffe']\n        ],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000001'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000']\n        ],\n        [\n          ['ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff fffffffe ffffffff',\n           'ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff fffffffe'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000']\n        ]\n      ]\n    });\n  }\n}\n\n/**\n * ED448\n * https://tools.ietf.org/html/rfc8032#section-5.2\n */\n\nclass ED448 extends EdwardsCurve {\n  constructor(pre) {\n    super({\n      id: 'ED448',\n      ossl: 'ED448',\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prefix: 'SigEd448',\n      context: true,\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff fffffffe ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff'],\n      a: '1',\n      // -39081 mod p\n      d: ['ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff fffffffe ffffffff',\n          'ffffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffff6756'],\n      n: ['3fffffff ffffffff ffffffff ffffffff',\n          'ffffffff ffffffff ffffffff 7cca23e9',\n          'c44edb49 aed63690 216cc272 8dc58f55',\n          '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [\n        ['4f1970c6 6bed0ded 221d15a6 22bf36da',\n         '9e146570 470f1767 ea6de324 a3d3a464',\n         '12ae1af7 2ab66511 433b80e1 8b00938e',\n         '2626a82b c70cc05e'],\n        ['693f4671 6eb6bc24 88762037 56c9c762',\n         '4bea7373 6ca39840 87789c1e 05a0c2d7',\n         '3ad3ff1c e67c39c4 fdbd132c 4ed7c8ad',\n         '9808795b f230fa14'],\n        pre\n      ],\n      torsion: [\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000001']\n        ],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000'],\n          ['ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff fffffffe ffffffff',\n           'ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff fffffffe']\n        ],\n        [\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000001'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000']\n        ],\n        [\n          ['ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff ffffffff fffffffe ffffffff',\n           'ffffffff ffffffff ffffffff ffffffff',\n           'ffffffff fffffffe'],\n          ['00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000 00000000 00000000',\n           '00000000 00000000']\n        ]\n      ]\n    });\n  }\n}\n\n/*\n * Curve Registry\n */\n\nconst curves = {\n  __proto__: null,\n  P192,\n  P224,\n  P256,\n  P384,\n  P521,\n  SECP256K1,\n  BRAINPOOLP256,\n  BRAINPOOLP384,\n  BRAINPOOLP512,\n  X25519,\n  X448,\n  MONT448,\n  ED25519,\n  ISO448,\n  ED448\n};\n\nconst cache = {\n  __proto__: null,\n  P192: null,\n  P224: null,\n  P256: null,\n  P384: null,\n  P521: null,\n  SECP256K1: null,\n  BRAINPOOLP256: null,\n  BRAINPOOLP384: null,\n  BRAINPOOLP512: null,\n  X25519: null,\n  X448: null,\n  MONT448: null,\n  ED25519: null,\n  ISO448: null,\n  ED448: null\n};\n\nfunction curve(name, ...args) {\n  assert(typeof name === 'string');\n\n  const key = name.toUpperCase();\n\n  let curve = cache[key];\n\n  if (!curve) {\n    const Curve = curves[key];\n\n    if (!Curve)\n      throw new Error(`Curve not found: \"${name}\".`);\n\n    curve = new Curve(...args);\n    cache[key] = curve;\n  }\n\n  return curve;\n}\n\nfunction register(name, Curve) {\n  assert(typeof name === 'string');\n  assert(typeof Curve === 'function');\n\n  const key = name.toUpperCase();\n\n  if (curves[key])\n    throw new Error(`Curve already registered: \"${name}\".`);\n\n  curves[key] = Curve;\n  cache[key] = null;\n}\n\n/*\n * Scalar Recoding\n */\n\nfunction getNAF(k, width, max) {\n  // Computing the width-w NAF of a positive integer.\n  //\n  // [GECC] Algorithm 3.35, Page 100, Section 3.3.\n  //\n  // The above document describes a rather abstract\n  // method of recoding. The more optimal method\n  // below was ported from libsecp256k1.\n  assert(k instanceof BN);\n  assert(!k.red);\n  assert((width >>> 0) === width);\n  assert((max >>> 0) === max);\n\n  const naf = new Array(max);\n  const bits = k.bitLength() + 1;\n  const sign = k.sign() | 1;\n\n  assert(bits <= max);\n\n  for (let i = 0; i < max; i++)\n    naf[i] = 0;\n\n  let i = 0;\n  let carry = 0;\n  let word;\n\n  while (i < bits) {\n    if (k.bit(i) === carry) {\n      i += 1;\n      continue;\n    }\n\n    word = k.bits(i, width) + carry;\n    carry = (word >> (width - 1)) & 1;\n    word -= carry << width;\n\n    naf[i] = sign * word;\n\n    i += width;\n  }\n\n  assert(carry === 0);\n\n  return naf;\n}\n\nfunction getFixedNAF(k, width, max, step) {\n  assert((step >>> 0) === step);\n\n  // Recode to NAF.\n  const naf = getNAF(k, width, max);\n\n  // Translate into more windowed form.\n  const len = Math.ceil(naf.length / step);\n  const repr = new Array(len);\n\n  let i = 0;\n\n  for (let j = 0; j < naf.length; j += step) {\n    let nafW = 0;\n\n    for (let k = j + step - 1; k >= j; k--)\n      nafW = (nafW << 1) + naf[k];\n\n    repr[i++] = nafW;\n  }\n\n  assert(i === len);\n\n  return repr;\n}\n\nfunction getJSF(k1, k2, max) {\n  // Joint sparse form.\n  //\n  // [GECC] Algorithm 3.50, Page 111, Section 3.3.\n  assert(k1 instanceof BN);\n  assert(k2 instanceof BN);\n  assert(!k1.red);\n  assert(!k2.red);\n  assert((max >>> 0) === max);\n\n  const jsf = [new Array(max), new Array(max)];\n  const bits = Math.max(k1.bitLength(), k2.bitLength()) + 1;\n  const s1 = k1.sign() | 1;\n  const s2 = k2.sign() | 1;\n\n  assert(bits <= max);\n\n  let d1 = 0;\n  let d2 = 0;\n\n  for (let i = 0; i < bits; i++) {\n    const b1 = k1.bits(i, 3);\n    const b2 = k2.bits(i, 3);\n\n    // First phase.\n    let m14 = ((b1 & 3) + d1) & 3;\n    let m24 = ((b2 & 3) + d2) & 3;\n    let u1 = 0;\n    let u2 = 0;\n\n    if (m14 === 3)\n      m14 = -1;\n\n    if (m24 === 3)\n      m24 = -1;\n\n    if (m14 & 1) {\n      const m8 = ((b1 & 7) + d1) & 7;\n\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n\n    if (m24 & 1) {\n      const m8 = ((b2 & 7) + d2) & 7;\n\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n\n    jsf[0][i] = u1 * s1;\n    jsf[1][i] = u2 * s2;\n\n    // Second phase.\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n  }\n\n  for (let i = bits; i < max; i++) {\n    jsf[0][i] = 0;\n    jsf[1][i] = 0;\n  }\n\n  return jsf;\n}\n\nfunction getJNAF(c1, c2, max) {\n  const jsf = getJSF(c1, c2, max);\n  const naf = new Array(max);\n\n  // JSF -> NAF conversion.\n  for (let i = 0; i < max; i++) {\n    const ja = jsf[0][i];\n    const jb = jsf[1][i];\n\n    naf[i] = jsfIndex[(ja + 1) * 3 + (jb + 1)];\n  }\n\n  return naf;\n}\n\nfunction getLadderBits(k, n) {\n  // [TIMING] Page 16, Section 6.\n  assert(k instanceof BN);\n  assert(n instanceof BN);\n\n  // Ensure positive.\n  const k0 = k.abs();\n\n  // Inflate scalar.\n  const k1 = k0.add(n);\n  const k2 = k1.add(n);\n\n  // Get bit lengths.\n  const kb = k1.bitLength();\n  const nb = n.bitLength();\n\n  // k' = k + 2 * n, if ceil(log2(k + n)) <= ceil(log2(n)),\n  //    = k + n, otherwise\n  k1.cinject(k2, (kb - nb - 1) >>> 31);\n\n  // Track sign.\n  const sign = k.isNeg() & 1;\n\n  // Calculate the new scalar's length.\n  const bits = k1.bitLength();\n\n  // Recode scalar to base256.\n  const exp = k1.toArray('le');\n\n  return [sign, bits, exp];\n}\n\nfunction getCOZBits(k, n) {\n  assert(k instanceof BN);\n  assert(n instanceof BN);\n\n  // Reduce.\n  const u = k.mod(n);\n\n  // Negate scalar.\n  const v = n.sub(u);\n\n  // Get bit lengths.\n  const ub = u.bitLength();\n  const vb = v.bitLength();\n\n  // Negate if ceil(log2(k)) < ceil(log2(-k)).\n  const sign = (ub - vb) >>> 31;\n\n  // Possibly negate.\n  u.cinject(v, sign);\n\n  // Calculate the new scalar's length.\n  const bits = u.bitLength();\n\n  // Recode scalar to base256.\n  const exp = u.toArray('le');\n\n  // Final edge case.\n  const m1 = u.ceq(n.subn(1));\n\n  return [sign, bits, exp, m1];\n}\n\n/*\n * Helpers\n */\n\nfunction assert(val, msg) {\n  if (!val) {\n    const err = new Error(msg || 'Assertion failed');\n\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, assert);\n\n    throw err;\n  }\n}\n\nfunction sqrt(a) {\n  assert(a instanceof BN);\n\n  try {\n    return [1, a.redSqrt()];\n  } catch (e) {\n    if (e.message === 'X is not a square mod P.')\n      return [0, a.clone()];\n    throw e;\n  }\n}\n\nfunction divSqrt(u, v) {\n  assert(u instanceof BN);\n  assert(v instanceof BN);\n\n  try {\n    return [1, u.redDivSqrt(v)];\n  } catch (e) {\n    if (e.message === 'Not invertible.'\n        || e.message === 'X is not a square mod P.') {\n      return [0, u.clone()];\n    }\n    throw e;\n  }\n}\n\nfunction cubeRoot(x) {\n  assert(x instanceof BN);\n  assert(x.red);\n\n  const p = x.red.m;\n\n  if (p.cmpn(3) <= 0)\n    return x.clone();\n\n  // p = 2 mod 3\n  if (p.modrn(3) === 2) {\n    // e = (2 * p - 1) / 3\n    const e = p.ushln(1).isubn(1).idivn(3);\n    return x.redPow(e);\n  }\n\n  const mod9 = p.modrn(9);\n\n  // p = 4 mod 9\n  if (mod9 === 4) {\n    // e = (2 * p + 1) / 9\n    const e = p.ushln(1).iaddn(1).idivn(9);\n    const r = x.redPow(e);\n    const c = r.redSqr().redMul(r);\n\n    if (!c.eq(x))\n      throw new Error('X is not a cube mod P.');\n\n    return r;\n  }\n\n  // p = 7 mod 9\n  if (mod9 === 7) {\n    // e = (p + 2) / 9\n    const e = p.addn(2).idivn(9);\n    const r = x.redPow(e);\n    const c = r.redSqr().redMul(r);\n\n    if (!c.eq(x))\n      throw new Error('X is not a cube mod P.');\n\n    return r;\n  }\n\n  throw new Error('Not implemented.');\n}\n\nfunction cubeRoots(x) {\n  const r0 = cubeRoot(x);\n\n  // p = 1 mod 3\n  if (x.red.m.modrn(3) === 1) {\n    // Multiply by roots of unity to find other roots.\n    const two = new BN(2).toRed(x.red);\n    const three = new BN(3).toRed(x.red);\n    const i2 = two.redInvert();\n    const s1 = three.redNeg().redSqrt().redMul(i2);\n    const s2 = s1.redNeg();\n    const u1 = s1.redSub(i2);\n    const u2 = s2.redSub(i2);\n    const r1 = r0.redMul(u1);\n    const r2 = r0.redMul(u2);\n\n    return [r0, r1, r2];\n  }\n\n  // p = 2 mod 3 guarantees 1 cube root per element.\n  return [r0];\n}\n\nfunction uncube(x) {\n  // Find a cube root which is also a quadratic residue.\n  for (const root of cubeRoots(x)) {\n    if (root.redJacobi() >= 0)\n      return root;\n  }\n\n  throw new Error('X^(1/3) is not a square mod P.');\n}\n\nfunction randomInt(rng) {\n  return BN.randomBits(rng, 32).toNumber();\n}\n\nfunction memoize(method, self) {\n  const cache = new WeakMap();\n\n  return function memoized(curve, invert) {\n    const i = invert & 1;\n    const item = cache.get(curve);\n\n    if (item && item[i] !== null)\n      return item[i];\n\n    const result = method.call(self, curve, invert);\n\n    if (!cache.has(curve))\n      cache.set(curve, [null, null]);\n\n    cache.get(curve)[i] = result;\n\n    return result;\n  };\n}\n\nfunction toPretty(x, size) {\n  assert(x instanceof BN);\n  assert((size >>> 0) === size);\n\n  if (size & 7)\n    size += 8 - (size & 7);\n\n  const str = x.toString(16, size);\n  const chunks = [];\n  const out = [];\n\n  assert((str.length & 7) === 0);\n\n  for (let i = 0; i < str.length; i += 8)\n    chunks.push(str.slice(i, i + 8));\n\n  for (let i = 0; i < chunks.length; i += 4)\n    out.push(chunks.slice(i, i + 4).join(' '));\n\n  return out;\n}\n\n/*\n * Expose\n */\n\nexports.Curve = Curve;\nexports.Point = Point;\nexports.ShortCurve = ShortCurve;\nexports.ShortPoint = ShortPoint;\nexports.JPoint = JPoint;\nexports.MontCurve = MontCurve;\nexports.MontPoint = MontPoint;\nexports.XPoint = XPoint;\nexports.EdwardsCurve = EdwardsCurve;\nexports.EdwardsPoint = EdwardsPoint;\nexports.curves = curves;\nexports.curve = curve;\nexports.register = register;\n"]},"metadata":{},"sourceType":"script"}