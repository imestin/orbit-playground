{"ast":null,"code":"'use strict';\n\nconst waitForPeers = async (ipfs, peersToWait, topic) => {\n  const checkPeers = async () => {\n    const peers = await ipfs.pubsub.peers(topic);\n    const hasAllPeers = peersToWait.map(e => peers.includes(e)).filter(e => e === false).length === 0;\n    return hasAllPeers;\n  };\n\n  if (await checkPeers()) {\n    return Promise.resolve();\n  }\n\n  return new Promise(async (resolve, reject) => {\n    const interval = setInterval(async () => {\n      try {\n        if (await checkPeers()) {\n          clearInterval(interval);\n          resolve();\n        }\n      } catch (e) {\n        reject(e);\n      }\n    }, 100);\n  });\n};\n\nmodule.exports = waitForPeers;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-pubsub-1on1/src/wait-for-peers.js"],"names":["waitForPeers","ipfs","peersToWait","topic","checkPeers","peers","pubsub","hasAllPeers","map","e","includes","filter","length","Promise","resolve","reject","interval","setInterval","clearInterval","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG,OAAOC,IAAP,EAAaC,WAAb,EAA0BC,KAA1B,KAAoC;AACvD,QAAMC,UAAU,GAAG,YAAY;AAC7B,UAAMC,KAAK,GAAG,MAAMJ,IAAI,CAACK,MAAL,CAAYD,KAAZ,CAAkBF,KAAlB,CAApB;AACA,UAAMI,WAAW,GAAGL,WAAW,CAACM,GAAZ,CAAiBC,CAAD,IAAOJ,KAAK,CAACK,QAAN,CAAeD,CAAf,CAAvB,EAA0CE,MAA1C,CAAkDF,CAAD,IAAOA,CAAC,KAAK,KAA9D,EAAqEG,MAArE,KAAgF,CAApG;AACA,WAAOL,WAAP;AACD,GAJD;;AAMA,MAAI,MAAMH,UAAU,EAApB,EAAwB;AACtB,WAAOS,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,SAAO,IAAID,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC,UAAI;AACF,YAAI,MAAMb,UAAU,EAApB,EAAwB;AACtBc,UAAAA,aAAa,CAACF,QAAD,CAAb;AACAF,UAAAA,OAAO;AACR;AACF,OALD,CAKE,OAAOL,CAAP,EAAU;AACVM,QAAAA,MAAM,CAACN,CAAD,CAAN;AACD;AACF,KAT2B,EASzB,GATyB,CAA5B;AAUD,GAXM,CAAP;AAYD,CAvBD;;AAyBAU,MAAM,CAACC,OAAP,GAAiBpB,YAAjB","sourcesContent":["'use strict'\n\nconst waitForPeers = async (ipfs, peersToWait, topic) => {\n  const checkPeers = async () => {\n    const peers = await ipfs.pubsub.peers(topic)\n    const hasAllPeers = peersToWait.map((e) => peers.includes(e)).filter((e) => e === false).length === 0\n    return hasAllPeers\n  }\n\n  if (await checkPeers()) {\n    return Promise.resolve()\n  }\n\n  return new Promise(async (resolve, reject) => {\n    const interval = setInterval(async () => {\n      try {\n        if (await checkPeers()) {\n          clearInterval(interval)\n          resolve()\n        }\n      } catch (e) {\n        reject(e)\n      }\n    }, 100)\n  })\n}\n\nmodule.exports = waitForPeers\n"]},"metadata":{},"sourceType":"script"}