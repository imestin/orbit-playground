{"ast":null,"code":"'use strict';\n\nfunction difference(a, b, key) {\n  // Indices for quick lookups\n  var processed = {};\n  var existing = {}; // Create an index of the first collection\n\n  var addToIndex = e => existing[key ? e[key] : e] = true;\n\n  a.forEach(addToIndex); // Reduce to entries that are not in the first collection\n\n  var reducer = (res, entry) => {\n    var isInFirst = existing[key ? entry[key] : entry] !== undefined;\n    var hasBeenProcessed = processed[key ? entry[key] : entry] !== undefined;\n\n    if (!isInFirst && !hasBeenProcessed) {\n      res.push(entry);\n      processed[key ? entry[key] : entry] = true;\n    }\n\n    return res;\n  };\n\n  return b.reduce(reducer, []);\n}\n\nmodule.exports = difference;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-log/src/utils/difference.js"],"names":["difference","a","b","key","processed","existing","addToIndex","e","forEach","reducer","res","entry","isInFirst","undefined","hasBeenProcessed","push","reduce","module","exports"],"mappings":"AAAA;;AAEA,SAASA,UAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,GAA3B,EAAgC;AAC9B;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,QAAQ,GAAG,EAAf,CAH8B,CAK9B;;AACA,MAAIC,UAAU,GAAGC,CAAC,IAAKF,QAAQ,CAACF,GAAG,GAAGI,CAAC,CAACJ,GAAD,CAAJ,GAAYI,CAAhB,CAAR,GAA6B,IAApD;;AACAN,EAAAA,CAAC,CAACO,OAAF,CAAUF,UAAV,EAP8B,CAS9B;;AACA,MAAIG,OAAO,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC5B,QAAIC,SAAS,GAAGP,QAAQ,CAACF,GAAG,GAAGQ,KAAK,CAACR,GAAD,CAAR,GAAgBQ,KAApB,CAAR,KAAuCE,SAAvD;AACA,QAAIC,gBAAgB,GAAGV,SAAS,CAACD,GAAG,GAAGQ,KAAK,CAACR,GAAD,CAAR,GAAgBQ,KAApB,CAAT,KAAwCE,SAA/D;;AACA,QAAI,CAACD,SAAD,IAAc,CAACE,gBAAnB,EAAqC;AACnCJ,MAAAA,GAAG,CAACK,IAAJ,CAASJ,KAAT;AACAP,MAAAA,SAAS,CAACD,GAAG,GAAGQ,KAAK,CAACR,GAAD,CAAR,GAAgBQ,KAApB,CAAT,GAAsC,IAAtC;AACD;;AACD,WAAOD,GAAP;AACD,GARD;;AAUA,SAAOR,CAAC,CAACc,MAAF,CAASP,OAAT,EAAkB,EAAlB,CAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBlB,UAAjB","sourcesContent":["'use strict'\n\nfunction difference (a, b, key) {\n  // Indices for quick lookups\n  var processed = {}\n  var existing = {}\n\n  // Create an index of the first collection\n  var addToIndex = e => (existing[key ? e[key] : e] = true)\n  a.forEach(addToIndex)\n\n  // Reduce to entries that are not in the first collection\n  var reducer = (res, entry) => {\n    var isInFirst = existing[key ? entry[key] : entry] !== undefined\n    var hasBeenProcessed = processed[key ? entry[key] : entry] !== undefined\n    if (!isInFirst && !hasBeenProcessed) {\n      res.push(entry)\n      processed[key ? entry[key] : entry] = true\n    }\n    return res\n  }\n\n  return b.reduce(reducer, [])\n}\n\nmodule.exports = difference\n"]},"metadata":{},"sourceType":"script"}