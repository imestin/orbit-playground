{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * Returns the wantlist for a connected peer\n * @template {Record<string, any>} ExtraOptions\n * @callback WantlistForPeer\n * @param {PeerId | CID | string | Buffer} peerId - A peer ID to return the wantlist for\\\n * @param {import('../../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<CID[]>} - An array of CIDs currently in the wantlist\n */\n\n\nmodule.exports = ({\n  bitswap\n}) => {\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * @type {WantlistForPeer<{}>}\n   */\n  async function wantlistForPeer(peerId, options = {}) {\n    // eslint-disable-line require-await\n    const list = bitswap.wantlistForPeer(PeerId.createFromCID(peerId), options);\n    return Array.from(list).map(e => e[1].cid);\n  }\n\n  return withTimeoutOption(wantlistForPeer);\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/bitswap/wantlist-for-peer.js"],"names":["PeerId","require","withTimeoutOption","module","exports","bitswap","wantlistForPeer","peerId","options","list","createFromCID","Array","from","map","e","cid"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,aAAD,CAArC;AAEA;;;;;AAKA;;;;;;;;;;AASAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC;;AACA;;;AAGA,iBAAeC,eAAf,CAAgCC,MAAhC,EAAwCC,OAAO,GAAG,EAAlD,EAAsD;AAAE;AACtD,UAAMC,IAAI,GAAGJ,OAAO,CAACC,eAAR,CAAwBN,MAAM,CAACU,aAAP,CAAqBH,MAArB,CAAxB,EAAsDC,OAAtD,CAAb;AAEA,WAAOG,KAAK,CAACC,IAAN,CAAWH,IAAX,EAAiBI,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAA/B,CAAP;AACD;;AAED,SAAOb,iBAAiB,CAACI,eAAD,CAAxB;AACD,CAZD","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst { withTimeoutOption } = require('../../utils')\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * Returns the wantlist for a connected peer\n * @template {Record<string, any>} ExtraOptions\n * @callback WantlistForPeer\n * @param {PeerId | CID | string | Buffer} peerId - A peer ID to return the wantlist for\\\n * @param {import('../../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<CID[]>} - An array of CIDs currently in the wantlist\n */\n\nmodule.exports = ({ bitswap }) => {\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * @type {WantlistForPeer<{}>}\n   */\n  async function wantlistForPeer (peerId, options = {}) { // eslint-disable-line require-await\n    const list = bitswap.wantlistForPeer(PeerId.createFromCID(peerId), options)\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlistForPeer)\n}\n"]},"metadata":{},"sourceType":"script"}