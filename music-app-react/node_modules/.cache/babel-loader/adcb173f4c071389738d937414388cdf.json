{"ast":null,"code":"var _jsxFileName = \"/home/user/orbit-playground/music-app/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nconst Ipfs = require('ipfs');\n\nconst OrbitDB = require('orbit-db');\n/*\ntry {\n  // Ipfs and OrbitDB wouldn't be global.\n} catch(e) {\n  console.log(\"Error: \", e);\n}\n*/\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n} // This will create an IPFS node and an OrbitDB database when new instance is created\n\n\nclass NewPiecePlease {\n  constructor(IPFS, OrbitDB) {\n    this.OrbitDB = OrbitDB;\n    this.example = 0;\n\n    (async () => {\n      console.log(\"IPFS object: \", IPFS);\n      this.node = await IPFS.create(); //this.node.on(\"error\", (e) => { throw (e) })\n      //this.node.on(\"ready\", this._init.bind(this))\n\n      this.example = 5;\n\n      this._init.bind(this);\n\n      this._init();\n\n      this.ready = true;\n    })();\n  }\n\n  async _init() {\n    this.orbitdb = await this.OrbitDB.createInstance(this.node);\n    this.defaultOptions = {\n      accessController: {\n        write: [this.orbitdb.identity.publicKey]\n      }\n    };\n    const docStoreOptions = { ...this.defaultOptions,\n      indexBy: 'hash'\n    };\n    this.pieces = await this.orbitdb.docstore('pieces', docStoreOptions);\n    console.log(\"ID\", this.pieces.id); //this.onready();\n\n    this.example = 3;\n  }\n\n} // This is exporting the class\n\n\ntry {\n  module.exports = exports = new NewPiecePlease(Ipfs, OrbitDB);\n} catch (e) {\n  window.NPP = new NewPiecePlease(window.IPFS, window.OrbitDB);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      NPP: undefined,\n      DB_ID: null\n    };\n  }\n\n  componentDidMount() {\n    // Creating database instance\n    this.setState({\n      NPP: new NewPiecePlease(Ipfs, OrbitDB)\n    }, () => {\n      //this.state.NPP._init();\n      this.state.NPP = new NewPiecePlease(Ipfs, OrbitDB);\n      console.log(\"Database instance:\", this.state.NPP);\n      console.log(\"OrbitDB: \", this.state.NPP.OrbitDB); // !!!! The _init function is not assigning variables in the correct namespace!\n\n      if (this.state.NPP.ready) {\n        console.log(\"orbitdb: \", this.state.NPP.orbitdb);\n      }\n\n      console.log(\"example: \", this.state.NPP.example); //console.log(\"Table ID: \", this.state.NPP.pieces.id);\n    });\n  }\n\n  componentDidUpdate() {\n    /*this.setState((state, props) => {\n      return {\n        DB_ID: this.state.NPP.pieces.id,\n      }\n    });*/\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"This is an OrbitDB test.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, this.state.DB_ID)));\n  }\n\n}\n\nexport default App;\n;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/src/App.js"],"names":["React","Ipfs","require","OrbitDB","sleep","ms","Promise","resolve","setTimeout","NewPiecePlease","constructor","IPFS","example","console","log","node","create","_init","bind","ready","orbitdb","createInstance","defaultOptions","accessController","write","identity","publicKey","docStoreOptions","indexBy","pieces","docstore","id","module","exports","e","window","NPP","App","Component","props","state","undefined","DB_ID","componentDidMount","setState","componentDidUpdate","render","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst Ipfs = require('ipfs');\nconst OrbitDB = require('orbit-db');\n\n/*\ntry {\n  // Ipfs and OrbitDB wouldn't be global.\n} catch(e) {\n  console.log(\"Error: \", e);\n}\n*/\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// This will create an IPFS node and an OrbitDB database when new instance is created\nclass NewPiecePlease {\n  constructor(IPFS, OrbitDB) {\n    this.OrbitDB = OrbitDB;\n    this.example = 0;\n\n    (async () => {\n      console.log(\"IPFS object: \", IPFS)\n      this.node = await IPFS.create();\n\n      //this.node.on(\"error\", (e) => { throw (e) })\n      //this.node.on(\"ready\", this._init.bind(this))\n      this.example = 5;\n      this._init.bind(this);\n      this._init();\n      this.ready = true;\n    })();\n  }\n\n\n  async _init() {\n    this.orbitdb = await this.OrbitDB.createInstance(this.node);\n    this.defaultOptions = { accessController: { write: [this.orbitdb.identity.publicKey] }}\n    const docStoreOptions = {\n      ...this.defaultOptions,\n      indexBy: 'hash',\n    }\n    this.pieces = await this.orbitdb.docstore('pieces', docStoreOptions);\n    console.log(\"ID\", this.pieces.id);\n    //this.onready();\n    this.example = 3;\n  }\n}\n\n// This is exporting the class\ntry {\n  module.exports = exports = new NewPiecePlease(Ipfs, OrbitDB);\n} catch (e) {\n  window.NPP = new NewPiecePlease(window.IPFS, window.OrbitDB);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      NPP: undefined,\n      DB_ID: null,\n    }\n  }\n  componentDidMount() {\n    // Creating database instance\n    this.setState({\n      NPP: new NewPiecePlease(Ipfs, OrbitDB),\n    }, () => {\n      //this.state.NPP._init();\n      this.state.NPP = new NewPiecePlease(Ipfs, OrbitDB);\n      console.log(\"Database instance:\", this.state.NPP);\n      console.log(\"OrbitDB: \", this.state.NPP.OrbitDB);\n      // !!!! The _init function is not assigning variables in the correct namespace!\n      if (this.state.NPP.ready) {\n        console.log(\"orbitdb: \", this.state.NPP.orbitdb);\n      }\n      console.log(\"example: \", this.state.NPP.example);\n      //console.log(\"Table ID: \", this.state.NPP.pieces.id);\n    });\n    \n\n  }\n\n  componentDidUpdate() {\n    /*this.setState((state, props) => {\n      return {\n        DB_ID: this.state.NPP.pieces.id,\n      }\n    });*/\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            This is an OrbitDB test.\n          </p>\n          <p>{this.state.DB_ID}</p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n;"]},"metadata":{},"sourceType":"module"}