{"ast":null,"code":"'use strict';\n\nconst Key = require('interface-datastore').Key;\n\nconst core = require('datastore-core');\n\nconst ShardingStore = core.ShardingDatastore;\nexports.CONFIG_KEY = new Key('/config');\nexports.VERSION_KEY = new Key('/version');\n\nfunction getDatastoreAndOptions(name, options) {\n  if (!options || !options.storageBackends) {\n    throw new Error('Please pass storage backend definitions');\n  }\n\n  if (!options.storageBackends[name]) {\n    throw new Error(`Storage backend '${name}' not defined in config`);\n  }\n\n  const StorageBackend = options.storageBackends[name];\n  let storageBackendOptions = {};\n\n  if (options.storageBackendOptions !== undefined && options.storageBackendOptions[name] !== undefined) {\n    storageBackendOptions = options.storageBackendOptions[name];\n  }\n\n  return {\n    StorageBackend: StorageBackend,\n    storageOptions: storageBackendOptions\n  };\n}\n\nasync function createStore(location, name, options) {\n  const {\n    StorageBackend,\n    storageOptions\n  } = getDatastoreAndOptions(name, options);\n\n  if (name !== 'root') {\n    location = `${location}/${name}`;\n  }\n\n  let store = new StorageBackend(location, storageOptions);\n\n  if (storageOptions.sharding) {\n    const shard = new core.shard.NextToLast(2);\n    store = await ShardingStore.createOrOpen(store, shard);\n  }\n\n  await store.close();\n  return store;\n}\n\nfunction containsIrreversibleMigration(from, to, migrations) {\n  return migrations.filter(migration => migration.version > from && migration.version <= to).some(migration => migration.revert === undefined);\n}\n\nexports.createStore = createStore;\nexports.containsIrreversibleMigration = containsIrreversibleMigration;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-repo-migrations/src/utils.js"],"names":["Key","require","core","ShardingStore","ShardingDatastore","exports","CONFIG_KEY","VERSION_KEY","getDatastoreAndOptions","name","options","storageBackends","Error","StorageBackend","storageBackendOptions","undefined","storageOptions","createStore","location","store","sharding","shard","NextToLast","createOrOpen","close","containsIrreversibleMigration","from","to","migrations","filter","migration","version","some","revert"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,GAA3C;;AACA,MAAME,IAAI,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAME,aAAa,GAAGD,IAAI,CAACE,iBAA3B;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAAIN,GAAJ,CAAQ,SAAR,CAArB;AACAK,OAAO,CAACE,WAAR,GAAsB,IAAIP,GAAJ,CAAQ,UAAR,CAAtB;;AAEA,SAASQ,sBAAT,CAAiCC,IAAjC,EAAuCC,OAAvC,EAAgD;AAC9C,MAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,eAAzB,EAA0C;AACxC,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAI,CAACF,OAAO,CAACC,eAAR,CAAwBF,IAAxB,CAAL,EAAoC;AAClC,UAAM,IAAIG,KAAJ,CAAW,oBAAmBH,IAAK,yBAAnC,CAAN;AACD;;AAED,QAAMI,cAAc,GAAGH,OAAO,CAACC,eAAR,CAAwBF,IAAxB,CAAvB;AAEA,MAAIK,qBAAqB,GAAG,EAA5B;;AAEA,MAAIJ,OAAO,CAACI,qBAAR,KAAkCC,SAAlC,IAA+CL,OAAO,CAACI,qBAAR,CAA8BL,IAA9B,MAAwCM,SAA3F,EAAsG;AACpGD,IAAAA,qBAAqB,GAAGJ,OAAO,CAACI,qBAAR,CAA8BL,IAA9B,CAAxB;AACD;;AAED,SAAO;AACLI,IAAAA,cAAc,EAAEA,cADX;AAELG,IAAAA,cAAc,EAAEF;AAFX,GAAP;AAID;;AAED,eAAeG,WAAf,CAA4BC,QAA5B,EAAsCT,IAAtC,EAA4CC,OAA5C,EAAqD;AACnD,QAAM;AAAEG,IAAAA,cAAF;AAAkBG,IAAAA;AAAlB,MAAqCR,sBAAsB,CAACC,IAAD,EAAOC,OAAP,CAAjE;;AAEA,MAAID,IAAI,KAAK,MAAb,EAAqB;AACnBS,IAAAA,QAAQ,GAAI,GAAEA,QAAS,IAAGT,IAAK,EAA/B;AACD;;AAED,MAAIU,KAAK,GAAG,IAAIN,cAAJ,CAAmBK,QAAnB,EAA6BF,cAA7B,CAAZ;;AAEA,MAAIA,cAAc,CAACI,QAAnB,EAA6B;AAC3B,UAAMC,KAAK,GAAG,IAAInB,IAAI,CAACmB,KAAL,CAAWC,UAAf,CAA0B,CAA1B,CAAd;AACAH,IAAAA,KAAK,GAAG,MAAMhB,aAAa,CAACoB,YAAd,CAA2BJ,KAA3B,EAAkCE,KAAlC,CAAd;AACD;;AAED,QAAMF,KAAK,CAACK,KAAN,EAAN;AAEA,SAAOL,KAAP;AACD;;AAED,SAASM,6BAAT,CAAwCC,IAAxC,EAA8CC,EAA9C,EAAkDC,UAAlD,EAA8D;AAC5D,SAAOA,UAAU,CACdC,MADI,CACGC,SAAS,IAAIA,SAAS,CAACC,OAAV,GAAoBL,IAApB,IAA4BI,SAAS,CAACC,OAAV,IAAqBJ,EADjE,EAEJK,IAFI,CAECF,SAAS,IAAIA,SAAS,CAACG,MAAV,KAAqBlB,SAFnC,CAAP;AAGD;;AAEDV,OAAO,CAACY,WAAR,GAAsBA,WAAtB;AACAZ,OAAO,CAACoB,6BAAR,GAAwCA,6BAAxC","sourcesContent":["'use strict'\n\nconst Key = require('interface-datastore').Key\nconst core = require('datastore-core')\nconst ShardingStore = core.ShardingDatastore\n\nexports.CONFIG_KEY = new Key('/config')\nexports.VERSION_KEY = new Key('/version')\n\nfunction getDatastoreAndOptions (name, options) {\n  if (!options || !options.storageBackends) {\n    throw new Error('Please pass storage backend definitions')\n  }\n\n  if (!options.storageBackends[name]) {\n    throw new Error(`Storage backend '${name}' not defined in config`)\n  }\n\n  const StorageBackend = options.storageBackends[name]\n\n  let storageBackendOptions = {}\n\n  if (options.storageBackendOptions !== undefined && options.storageBackendOptions[name] !== undefined) {\n    storageBackendOptions = options.storageBackendOptions[name]\n  }\n\n  return {\n    StorageBackend: StorageBackend,\n    storageOptions: storageBackendOptions\n  }\n}\n\nasync function createStore (location, name, options) {\n  const { StorageBackend, storageOptions } = getDatastoreAndOptions(name, options)\n\n  if (name !== 'root') {\n    location = `${location}/${name}`\n  }\n\n  let store = new StorageBackend(location, storageOptions)\n\n  if (storageOptions.sharding) {\n    const shard = new core.shard.NextToLast(2)\n    store = await ShardingStore.createOrOpen(store, shard)\n  }\n\n  await store.close()\n\n  return store\n}\n\nfunction containsIrreversibleMigration (from, to, migrations) {\n  return migrations\n    .filter(migration => migration.version > from && migration.version <= to)\n    .some(migration => migration.revert === undefined)\n}\n\nexports.createStore = createStore\nexports.containsIrreversibleMigration = containsIrreversibleMigration\n"]},"metadata":{},"sourceType":"script"}