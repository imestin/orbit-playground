{"ast":null,"code":"'use strict';\n\nconst isDefined = require('./is-defined');\n\nclass Identity {\n  constructor(id, publicKey, idSignature, pubKeyIdSignature, type, provider) {\n    if (!isDefined(id)) {\n      throw new Error('Identity id is required');\n    }\n\n    if (!isDefined(publicKey)) {\n      throw new Error('Invalid public key');\n    }\n\n    if (!isDefined(idSignature)) {\n      throw new Error('Signature of the id (idSignature) is required');\n    }\n\n    if (!isDefined(pubKeyIdSignature)) {\n      throw new Error('Signature of (publicKey + idSignature) is required');\n    }\n\n    if (!isDefined(type)) {\n      throw new Error('Identity type is required');\n    }\n\n    if (!isDefined(provider)) {\n      throw new Error('Identity provider is required');\n    }\n\n    this._id = id;\n    this._publicKey = publicKey;\n    this._signatures = Object.assign({}, {\n      id: idSignature\n    }, {\n      publicKey: pubKeyIdSignature\n    });\n    this._type = type;\n    this._provider = provider;\n  }\n  /**\n  * This is only used as a fallback to the clock id when necessary\n  * @return {string} public key hex encoded\n  */\n\n\n  get id() {\n    return this._id;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get signatures() {\n    return this._signatures;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get provider() {\n    return this._provider;\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      publicKey: this.publicKey,\n      signatures: this.signatures,\n      type: this.type\n    };\n  }\n\n  static isIdentity(identity) {\n    return identity.id !== undefined && identity.publicKey !== undefined && identity.signatures !== undefined && identity.signatures.id !== undefined && identity.signatures.publicKey !== undefined && identity.type !== undefined;\n  }\n\n  static toJSON(identity) {\n    return {\n      id: identity.id,\n      publicKey: identity.publicKey,\n      signatures: identity.signatures,\n      type: identity.type\n    };\n  }\n\n}\n\nmodule.exports = Identity;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/orbit-db-identity-provider/src/identity.js"],"names":["isDefined","require","Identity","constructor","id","publicKey","idSignature","pubKeyIdSignature","type","provider","Error","_id","_publicKey","_signatures","Object","assign","_type","_provider","signatures","toJSON","isIdentity","identity","undefined","module","exports"],"mappings":"AAAA;;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAAEC,EAAF,EAAMC,SAAN,EAAiBC,WAAjB,EAA8BC,iBAA9B,EAAiDC,IAAjD,EAAuDC,QAAvD,EAAiE;AAC1E,QAAI,CAACT,SAAS,CAACI,EAAD,CAAd,EAAoB;AAClB,YAAM,IAAIM,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,QAAI,CAACV,SAAS,CAACK,SAAD,CAAd,EAA2B;AACzB,YAAM,IAAIK,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,QAAI,CAACV,SAAS,CAACM,WAAD,CAAd,EAA6B;AAC3B,YAAM,IAAII,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,QAAI,CAACV,SAAS,CAACO,iBAAD,CAAd,EAAmC;AACjC,YAAM,IAAIG,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,QAAI,CAACV,SAAS,CAACQ,IAAD,CAAd,EAAsB;AACpB,YAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,QAAI,CAACV,SAAS,CAACS,QAAD,CAAd,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAKC,GAAL,GAAWP,EAAX;AACA,SAAKQ,UAAL,GAAkBP,SAAlB;AACA,SAAKQ,WAAL,GAAmBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEX,MAAAA,EAAE,EAAEE;AAAN,KAAlB,EAAuC;AAAED,MAAAA,SAAS,EAAEE;AAAb,KAAvC,CAAnB;AACA,SAAKS,KAAL,GAAaR,IAAb;AACA,SAAKS,SAAL,GAAiBR,QAAjB;AACD;AAED;;;;;;AAIA,MAAIL,EAAJ,GAAU;AACR,WAAO,KAAKO,GAAZ;AACD;;AAED,MAAIN,SAAJ,GAAiB;AACf,WAAO,KAAKO,UAAZ;AACD;;AAED,MAAIM,UAAJ,GAAkB;AAChB,WAAO,KAAKL,WAAZ;AACD;;AAED,MAAIL,IAAJ,GAAY;AACV,WAAO,KAAKQ,KAAZ;AACD;;AAED,MAAIP,QAAJ,GAAgB;AACd,WAAO,KAAKQ,SAAZ;AACD;;AAEDE,EAAAA,MAAM,GAAI;AACR,WAAO;AACLf,MAAAA,EAAE,EAAE,KAAKA,EADJ;AAELC,MAAAA,SAAS,EAAE,KAAKA,SAFX;AAGLa,MAAAA,UAAU,EAAE,KAAKA,UAHZ;AAILV,MAAAA,IAAI,EAAE,KAAKA;AAJN,KAAP;AAMD;;AAED,SAAOY,UAAP,CAAmBC,QAAnB,EAA6B;AAC3B,WAAOA,QAAQ,CAACjB,EAAT,KAAgBkB,SAAhB,IACAD,QAAQ,CAAChB,SAAT,KAAuBiB,SADvB,IAEAD,QAAQ,CAACH,UAAT,KAAwBI,SAFxB,IAGAD,QAAQ,CAACH,UAAT,CAAoBd,EAApB,KAA2BkB,SAH3B,IAIAD,QAAQ,CAACH,UAAT,CAAoBb,SAApB,KAAkCiB,SAJlC,IAKAD,QAAQ,CAACb,IAAT,KAAkBc,SALzB;AAMD;;AAED,SAAOH,MAAP,CAAeE,QAAf,EAAyB;AACvB,WAAO;AACLjB,MAAAA,EAAE,EAAEiB,QAAQ,CAACjB,EADR;AAELC,MAAAA,SAAS,EAAEgB,QAAQ,CAAChB,SAFf;AAGLa,MAAAA,UAAU,EAAEG,QAAQ,CAACH,UAHhB;AAILV,MAAAA,IAAI,EAAEa,QAAQ,CAACb;AAJV,KAAP;AAMD;;AAlFY;;AAqFfe,MAAM,CAACC,OAAP,GAAiBtB,QAAjB","sourcesContent":["'use strict'\nconst isDefined = require('./is-defined')\n\nclass Identity {\n  constructor (id, publicKey, idSignature, pubKeyIdSignature, type, provider) {\n    if (!isDefined(id)) {\n      throw new Error('Identity id is required')\n    }\n\n    if (!isDefined(publicKey)) {\n      throw new Error('Invalid public key')\n    }\n\n    if (!isDefined(idSignature)) {\n      throw new Error('Signature of the id (idSignature) is required')\n    }\n\n    if (!isDefined(pubKeyIdSignature)) {\n      throw new Error('Signature of (publicKey + idSignature) is required')\n    }\n\n    if (!isDefined(type)) {\n      throw new Error('Identity type is required')\n    }\n\n    if (!isDefined(provider)) {\n      throw new Error('Identity provider is required')\n    }\n\n    this._id = id\n    this._publicKey = publicKey\n    this._signatures = Object.assign({}, { id: idSignature }, { publicKey: pubKeyIdSignature })\n    this._type = type\n    this._provider = provider\n  }\n\n  /**\n  * This is only used as a fallback to the clock id when necessary\n  * @return {string} public key hex encoded\n  */\n  get id () {\n    return this._id\n  }\n\n  get publicKey () {\n    return this._publicKey\n  }\n\n  get signatures () {\n    return this._signatures\n  }\n\n  get type () {\n    return this._type\n  }\n\n  get provider () {\n    return this._provider\n  }\n\n  toJSON () {\n    return {\n      id: this.id,\n      publicKey: this.publicKey,\n      signatures: this.signatures,\n      type: this.type\n    }\n  }\n\n  static isIdentity (identity) {\n    return identity.id !== undefined &&\n           identity.publicKey !== undefined &&\n           identity.signatures !== undefined &&\n           identity.signatures.id !== undefined &&\n           identity.signatures.publicKey !== undefined &&\n           identity.type !== undefined\n  }\n\n  static toJSON (identity) {\n    return {\n      id: identity.id,\n      publicKey: identity.publicKey,\n      signatures: identity.signatures,\n      type: identity.type\n    }\n  }\n}\n\nmodule.exports = Identity\n"]},"metadata":{},"sourceType":"script"}