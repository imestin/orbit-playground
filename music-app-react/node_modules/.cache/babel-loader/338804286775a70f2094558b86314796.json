{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:repo:migrator:repo:init');\n\nconst {\n  CONFIG_KEY,\n  VERSION_KEY,\n  createStore\n} = require('../utils');\n\nconst {\n  MissingRepoOptionsError\n} = require('../errors');\n\nexports.isRepoInitialized = async function isRepoInitialized(path, repoOptions) {\n  if (!repoOptions) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n  }\n\n  let root;\n\n  try {\n    root = await createStore(path, 'root', repoOptions);\n    await root.open();\n    const versionCheck = await root.has(VERSION_KEY);\n    const configCheck = await root.has(CONFIG_KEY);\n\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`);\n      log(`Config entry present: ${configCheck}`);\n      return false;\n    }\n\n    return true;\n  } catch (e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message);\n    return false;\n  } finally {\n    if (root !== undefined) {\n      await root.close();\n    }\n  }\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-repo-migrations/src/repo/init.js"],"names":["log","require","CONFIG_KEY","VERSION_KEY","createStore","MissingRepoOptionsError","exports","isRepoInitialized","path","repoOptions","root","open","versionCheck","has","configCheck","e","message","undefined","close"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,WAAd;AAA2BC,EAAAA;AAA3B,IAA2CH,OAAO,CAAC,UAAD,CAAxD;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAA8BJ,OAAO,CAAC,WAAD,CAA3C;;AAEAK,OAAO,CAACC,iBAAR,GAA4B,eAAeA,iBAAf,CAAkCC,IAAlC,EAAwCC,WAAxC,EAAqD;AAC/E,MAAI,CAACA,WAAL,EAAkB;AAChB,UAAM,IAAIJ,uBAAJ,CAA4B,qDAA5B,CAAN;AACD;;AAED,MAAIK,IAAJ;;AACA,MAAI;AACFA,IAAAA,IAAI,GAAG,MAAMN,WAAW,CAACI,IAAD,EAAO,MAAP,EAAeC,WAAf,CAAxB;AACA,UAAMC,IAAI,CAACC,IAAL,EAAN;AACA,UAAMC,YAAY,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASV,WAAT,CAA3B;AACA,UAAMW,WAAW,GAAG,MAAMJ,IAAI,CAACG,GAAL,CAASX,UAAT,CAA1B;;AACA,QAAI,CAACU,YAAD,IAAiB,CAACE,WAAtB,EAAmC;AACjCd,MAAAA,GAAG,CAAE,0BAAyBY,YAAa,EAAxC,CAAH;AACAZ,MAAAA,GAAG,CAAE,yBAAwBc,WAAY,EAAtC,CAAH;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAZD,CAYE,OAAOC,CAAP,EAAU;AACVf,IAAAA,GAAG,CAAC,6DAA6De,CAAC,CAACC,OAAhE,CAAH;AACA,WAAO,KAAP;AACD,GAfD,SAeU;AACR,QAAIN,IAAI,KAAKO,SAAb,EAAwB;AACtB,YAAMP,IAAI,CAACQ,KAAL,EAAN;AACD;AACF;AACF,CA1BD","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:repo:migrator:repo:init')\nconst { CONFIG_KEY, VERSION_KEY, createStore } = require('../utils')\nconst { MissingRepoOptionsError } = require('../errors')\n\nexports.isRepoInitialized = async function isRepoInitialized (path, repoOptions) {\n  if (!repoOptions) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  let root\n  try {\n    root = await createStore(path, 'root', repoOptions)\n    await root.open()\n    const versionCheck = await root.has(VERSION_KEY)\n    const configCheck = await root.has(CONFIG_KEY)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) {\n      await root.close()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}