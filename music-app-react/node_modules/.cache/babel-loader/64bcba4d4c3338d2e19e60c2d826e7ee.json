{"ast":null,"code":"'use strict';\n\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst {\n  resolvePath,\n  withTimeoutOption\n} = require('../../utils');\n\nconst {\n  PinTypes\n} = require('./pin-manager');\n\nmodule.exports = ({\n  pinManager,\n  gcLock,\n  dag\n}) => {\n  return withTimeoutOption(async function* rm(paths, options = {}) {\n    const release = await gcLock.readLock();\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const {\n        path,\n        recursive\n      } of normaliseInput(paths)) {\n        const cid = await resolvePath(dag, path);\n        const {\n          pinned,\n          reason\n        } = await pinManager.isPinnedWithType(cid, PinTypes.all);\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`);\n        }\n\n        switch (reason) {\n          case PinTypes.recursive:\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`);\n            }\n\n            await pinManager.unpin(cid);\n            yield cid;\n            break;\n\n          case PinTypes.direct:\n            await pinManager.unpin(cid);\n            yield cid;\n            break;\n\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`);\n        }\n      }\n    } finally {\n      release();\n    }\n  });\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/pin/rm-all.js"],"names":["normaliseInput","require","resolvePath","withTimeoutOption","PinTypes","module","exports","pinManager","gcLock","dag","rm","paths","options","release","readLock","path","recursive","cid","pinned","reason","isPinnedWithType","all","Error","unpin","direct"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,0CAAD,CAA9B;;AACA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAqCF,OAAO,CAAC,aAAD,CAAlD;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAeH,OAAO,CAAC,eAAD,CAA5B;;AAEAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,MAAd;AAAsBC,EAAAA;AAAtB,CAAD,KAAiC;AAChD,SAAON,iBAAiB,CAAC,gBAAiBO,EAAjB,CAAqBC,KAArB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AACjE,UAAMC,OAAO,GAAG,MAAML,MAAM,CAACM,QAAP,EAAtB;;AAEA,QAAI;AACF;AACA,iBAAW,MAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAjB,IAAwChB,cAAc,CAACW,KAAD,CAAtD,EAA+D;AAC7D,cAAMM,GAAG,GAAG,MAAMf,WAAW,CAACO,GAAD,EAAMM,IAAN,CAA7B;AACA,cAAM;AAAEG,UAAAA,MAAF;AAAUC,UAAAA;AAAV,YAAqB,MAAMZ,UAAU,CAACa,gBAAX,CAA4BH,GAA5B,EAAiCb,QAAQ,CAACiB,GAA1C,CAAjC;;AAEA,YAAI,CAACH,MAAL,EAAa;AACX,gBAAM,IAAII,KAAJ,CAAW,GAAEL,GAAI,gBAAjB,CAAN;AACD;;AAED,gBAAQE,MAAR;AACE,eAAMf,QAAQ,CAACY,SAAf;AACE,gBAAI,CAACA,SAAL,EAAgB;AACd,oBAAM,IAAIM,KAAJ,CAAW,GAAEL,GAAI,wBAAjB,CAAN;AACD;;AAED,kBAAMV,UAAU,CAACgB,KAAX,CAAiBN,GAAjB,CAAN;AAEA,kBAAMA,GAAN;AAEA;;AACF,eAAMb,QAAQ,CAACoB,MAAf;AACE,kBAAMjB,UAAU,CAACgB,KAAX,CAAiBN,GAAjB,CAAN;AAEA,kBAAMA,GAAN;AAEA;;AACF;AACE,kBAAM,IAAIK,KAAJ,CAAW,GAAEL,GAAI,+BAA8BE,MAAO,EAAtD,CAAN;AAlBJ;AAoBD;AACF,KA/BD,SA+BU;AACRN,MAAAA,OAAO;AACR;AACF,GArCuB,CAAxB;AAsCD,CAvCD","sourcesContent":["'use strict'\n\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst { resolvePath, withTimeoutOption } = require('../../utils')\nconst { PinTypes } = require('./pin-manager')\n\nmodule.exports = ({ pinManager, gcLock, dag }) => {\n  return withTimeoutOption(async function * rm (paths, options = {}) {\n    const release = await gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(paths)) {\n        const cid = await resolvePath(dag, path)\n        const { pinned, reason } = await pinManager.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await pinManager.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await pinManager.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}