{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst parseDuration = require('parse-duration').default;\n\nconst crypto = require('libp2p-crypto');\n\nconst errcode = require('err-code');\n\nconst log = debug('ipfs:name:publish');\nlog.error = debug('ipfs:name:publish:error');\n\nconst {\n  OFFLINE_ERROR,\n  normalizePath,\n  withTimeoutOption\n} = require('../../utils');\n\nconst {\n  resolvePath\n} = require('./utils');\n/**\n * @typedef { import(\"../index\") } IPFS\n */\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {IPFS} self\n * @returns {Object}\n */\n\n\nmodule.exports = ({\n  ipns,\n  dag,\n  peerId,\n  isOnline,\n  keychain\n}) => {\n  const lookupKey = async keyName => {\n    if (keyName === 'self') {\n      return peerId.privKey;\n    }\n\n    try {\n      // We're exporting and immediately importing the key, so we can just use a throw away password\n      const pem = await keychain.exportKey(keyName, 'temp');\n      const privateKey = await crypto.keys.import(pem, 'temp');\n      return privateKey;\n    } catch (err) {\n      log.error(err);\n      throw errcode(err, 'ERR_CANNOT_GET_KEY');\n    }\n  };\n  /**\n   * IPNS is a PKI namespace, where names are the hashes of public keys, and\n   * the private key enables publishing new (signed) values. In both publish\n   * and resolve, the default name used is the node's own PeerID,\n   * which is the hash of its public key.\n   *\n   * @param {String} value ipfs path of the object to be published.\n   * @param {Object} options ipfs publish options.\n   * @param {boolean} options.resolve resolve given path before publishing.\n   * @param {String} options.lifetime time duration that the record will be valid for.\n  This accepts durations such as \"300s\", \"1.5h\" or \"2h45m\". Valid time units are\n  \"ns\", \"ms\", \"s\", \"m\", \"h\". Default is 24h.\n    * @param {String} options.ttl time duration this record should be cached for (NOT IMPLEMENTED YET).\n    * This accepts durations such as \"300s\", \"1.5h\" or \"2h45m\". Valid time units are\n    \"ns\", \"ms\", \"s\", \"m\", \"h\" (caution: experimental).\n    * @param {String} options.key name of the key to be used, as listed by 'ipfs key list -l'.\n    * @param {function(Error)} [callback]\n    * @returns {Promise|void}\n    */\n\n\n  return withTimeoutOption(async function publish(value, options) {\n    options = options || {};\n    const resolve = !(options.resolve === false);\n    const lifetime = options.lifetime || '24h';\n    const key = options.key || 'self';\n\n    if (!isOnline()) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR');\n    } // TODO: params related logic should be in the core implementation\n    // Normalize path value\n\n\n    try {\n      value = normalizePath(value);\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n\n    let pubLifetime;\n\n    try {\n      pubLifetime = parseDuration(lifetime); // Calculate lifetime with nanoseconds precision\n\n      pubLifetime = pubLifetime.toFixed(6);\n    } catch (err) {\n      log.error(err);\n      throw err;\n    } // TODO: ttl human for cache\n\n\n    const results = await Promise.all([// verify if the path exists, if not, an error will stop the execution\n    lookupKey(key), resolve ? resolvePath({\n      ipns,\n      dag\n    }, value) : Promise.resolve()]); // Start publishing process\n\n    return ipns.publish(results[0], value, pubLifetime);\n  });\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/name/publish.js"],"names":["debug","require","parseDuration","default","crypto","errcode","log","error","OFFLINE_ERROR","normalizePath","withTimeoutOption","resolvePath","module","exports","ipns","dag","peerId","isOnline","keychain","lookupKey","keyName","privKey","pem","exportKey","privateKey","keys","import","err","publish","value","options","resolve","lifetime","key","Error","pubLifetime","toFixed","results","Promise","all"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst parseDuration = require('parse-duration').default\nconst crypto = require('libp2p-crypto')\nconst errcode = require('err-code')\n\nconst log = debug('ipfs:name:publish')\nlog.error = debug('ipfs:name:publish:error')\n\nconst { OFFLINE_ERROR, normalizePath, withTimeoutOption } = require('../../utils')\nconst { resolvePath } = require('./utils')\n\n/**\n * @typedef { import(\"../index\") } IPFS\n */\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {IPFS} self\n * @returns {Object}\n */\nmodule.exports = ({ ipns, dag, peerId, isOnline, keychain }) => {\n  const lookupKey = async keyName => {\n    if (keyName === 'self') {\n      return peerId.privKey\n    }\n\n    try {\n      // We're exporting and immediately importing the key, so we can just use a throw away password\n      const pem = await keychain.exportKey(keyName, 'temp')\n      const privateKey = await crypto.keys.import(pem, 'temp')\n      return privateKey\n    } catch (err) {\n      log.error(err)\n      throw errcode(err, 'ERR_CANNOT_GET_KEY')\n    }\n  }\n\n  /**\n   * IPNS is a PKI namespace, where names are the hashes of public keys, and\n   * the private key enables publishing new (signed) values. In both publish\n   * and resolve, the default name used is the node's own PeerID,\n   * which is the hash of its public key.\n   *\n   * @param {String} value ipfs path of the object to be published.\n   * @param {Object} options ipfs publish options.\n   * @param {boolean} options.resolve resolve given path before publishing.\n   * @param {String} options.lifetime time duration that the record will be valid for.\n  This accepts durations such as \"300s\", \"1.5h\" or \"2h45m\". Valid time units are\n  \"ns\", \"ms\", \"s\", \"m\", \"h\". Default is 24h.\n    * @param {String} options.ttl time duration this record should be cached for (NOT IMPLEMENTED YET).\n    * This accepts durations such as \"300s\", \"1.5h\" or \"2h45m\". Valid time units are\n    \"ns\", \"ms\", \"s\", \"m\", \"h\" (caution: experimental).\n    * @param {String} options.key name of the key to be used, as listed by 'ipfs key list -l'.\n    * @param {function(Error)} [callback]\n    * @returns {Promise|void}\n    */\n  return withTimeoutOption(async function publish (value, options) {\n    options = options || {}\n\n    const resolve = !(options.resolve === false)\n    const lifetime = options.lifetime || '24h'\n    const key = options.key || 'self'\n\n    if (!isOnline()) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    // TODO: params related logic should be in the core implementation\n\n    // Normalize path value\n    try {\n      value = normalizePath(value)\n    } catch (err) {\n      log.error(err)\n      throw err\n    }\n\n    let pubLifetime\n    try {\n      pubLifetime = parseDuration(lifetime)\n\n      // Calculate lifetime with nanoseconds precision\n      pubLifetime = pubLifetime.toFixed(6)\n    } catch (err) {\n      log.error(err)\n      throw err\n    }\n\n    // TODO: ttl human for cache\n    const results = await Promise.all([\n      // verify if the path exists, if not, an error will stop the execution\n      lookupKey(key),\n      resolve ? resolvePath({ ipns, dag }, value) : Promise.resolve()\n    ])\n\n    // Start publishing process\n    return ipns.publish(results[0], value, pubLifetime)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}