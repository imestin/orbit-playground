{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string'); // make sure the content only emits buffer-a-likes\n\n\nasync function* validateChunks(source) {\n  for await (const content of source) {\n    if (content.length === undefined) {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n    }\n\n    if (typeof content === 'string' || content instanceof String) {\n      yield uint8ArrayFromString(content);\n    } else if (Array.isArray(content)) {\n      yield Uint8Array.from(content);\n    } else {\n      yield content;\n    }\n  }\n}\n\nmodule.exports = validateChunks;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-unixfs-importer/src/dag-builder/validate-chunks.js"],"names":["errCode","require","uint8ArrayFromString","validateChunks","source","content","length","undefined","Error","String","Array","isArray","Uint8Array","from","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,yBAAD,CAApC,C,CAEA;;;AACA,gBAAiBE,cAAjB,CAAiCC,MAAjC,EAAyC;AACvC,aAAW,MAAMC,OAAjB,IAA4BD,MAA5B,EAAoC;AAClC,QAAIC,OAAO,CAACC,MAAR,KAAmBC,SAAvB,EAAkC;AAChC,YAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAU,qBAAV,CAAD,EAAmC,qBAAnC,CAAb;AACD;;AAED,QAAI,OAAOH,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,YAAYI,MAAtD,EAA8D;AAC5D,YAAMP,oBAAoB,CAACG,OAAD,CAA1B;AACD,KAFD,MAEO,IAAIK,KAAK,CAACC,OAAN,CAAcN,OAAd,CAAJ,EAA4B;AACjC,YAAMO,UAAU,CAACC,IAAX,CAAgBR,OAAhB,CAAN;AACD,KAFM,MAEA;AACL,YAAMA,OAAN;AACD;AACF;AACF;;AAEDS,MAAM,CAACC,OAAP,GAAiBZ,cAAjB","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n// make sure the content only emits buffer-a-likes\nasync function * validateChunks (source) {\n  for await (const content of source) {\n    if (content.length === undefined) {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n    }\n\n    if (typeof content === 'string' || content instanceof String) {\n      yield uint8ArrayFromString(content)\n    } else if (Array.isArray(content)) {\n      yield Uint8Array.from(content)\n    } else {\n      yield content\n    }\n  }\n}\n\nmodule.exports = validateChunks\n"]},"metadata":{},"sourceType":"script"}