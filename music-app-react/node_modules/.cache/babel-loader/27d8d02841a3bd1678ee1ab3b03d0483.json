{"ast":null,"code":"'use strict';\n\nconst {\n  isValidMultiaddr\n} = require('./utils');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  repo\n}) => {\n  return withTimeoutOption(async function rm(multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`);\n    }\n\n    const config = await repo.config.getAll(options);\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma !== multiaddr);\n    await repo.config.set(config);\n    return {\n      Peers: [multiaddr]\n    };\n  });\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/bootstrap/rm.js"],"names":["isValidMultiaddr","require","withTimeoutOption","module","exports","repo","rm","multiaddr","options","Error","config","getAll","Bootstrap","filter","ma","set","Peers"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAuBC,OAAO,CAAC,SAAD,CAApC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,aAAD,CAArC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B,SAAOH,iBAAiB,CAAC,eAAeI,EAAf,CAAmBC,SAAnB,EAA8BC,OAAO,GAAG,EAAxC,EAA4C;AACnE,QAAI,CAACR,gBAAgB,CAACO,SAAD,CAArB,EAAkC;AAChC,YAAM,IAAIE,KAAJ,CAAW,GAAEF,SAAU,2BAAvB,CAAN;AACD;;AAED,UAAMG,MAAM,GAAG,MAAML,IAAI,CAACK,MAAL,CAAYC,MAAZ,CAAmBH,OAAnB,CAArB;AACAE,IAAAA,MAAM,CAACE,SAAP,GAAmB,CAACF,MAAM,CAACE,SAAP,IAAoB,EAArB,EAAyBC,MAAzB,CAAgCC,EAAE,IAAIA,EAAE,KAAKP,SAA7C,CAAnB;AAEA,UAAMF,IAAI,CAACK,MAAL,CAAYK,GAAZ,CAAgBL,MAAhB,CAAN;AAEA,WAAO;AAAEM,MAAAA,KAAK,EAAE,CAACT,SAAD;AAAT,KAAP;AACD,GAXuB,CAAxB;AAYD,CAbD","sourcesContent":["'use strict'\n\nconst { isValidMultiaddr } = require('./utils')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ repo }) => {\n  return withTimeoutOption(async function rm (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma !== multiaddr)\n\n    await repo.config.set(config)\n\n    return { Peers: [multiaddr] }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}