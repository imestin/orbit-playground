{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst withIs = require('class-is');\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\n\n\nmodule.exports = class Block {\n  /**\n   * @constructor\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  constructor(data, cid) {\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array');\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n\n    this._data = data;\n    this._cid = cid;\n  }\n  /**\n   * The data of this block.\n   *\n   * @type {Uint8Array}\n   */\n\n\n  get data() {\n    return this._data;\n  }\n\n  set data(val) {\n    throw new Error('Tried to change an immutable block');\n  }\n  /**\n   * The cid of the data this block represents.\n   *\n   * @type {CID}\n   */\n\n\n  get cid() {\n    return this._cid;\n  }\n\n  set cid(val) {\n    throw new Error('Tried to change an immutable block');\n  } // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * Check if the given value is a Block.\n   * @returns {other is Block}\n   */\n\n\n  static isBlock(other) {// eslint-disable-line no-unused-vars\n    // implemented by class-is module\n  }\n\n}; // to trick the typings engine\n// https://github.com/ipld/js-ipld-block/pull/55#discussion_r478845002\n\nmodule.exports = withIs(module.exports, {\n  className: 'Block',\n  symbolName: '@ipld/js-ipld-block/block'\n});","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipld-block/src/index.js"],"names":["CID","require","withIs","module","exports","Block","constructor","data","cid","Uint8Array","Error","isCID","_data","_cid","val","isBlock","other","className","symbolName"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;AAEA;;;;;;;;AAMAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,KAAN,CAAY;AAC3B;;;;;AAKAC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,GAAR,EAAa;AACtB,QAAI,CAACD,IAAD,IAAS,EAAEA,IAAI,YAAYE,UAAlB,CAAb,EAA4C;AAC1C,YAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAI,CAACF,GAAD,IAAQ,CAACR,GAAG,CAACW,KAAJ,CAAUH,GAAV,CAAb,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAKE,KAAL,GAAaL,IAAb;AACA,SAAKM,IAAL,GAAYL,GAAZ;AACD;AAED;;;;;;;AAKA,MAAID,IAAJ,GAAY;AACV,WAAO,KAAKK,KAAZ;AACD;;AAED,MAAIL,IAAJ,CAAUO,GAAV,EAAe;AACb,UAAM,IAAIJ,KAAJ,CAAU,oCAAV,CAAN;AACD;AAED;;;;;;;AAKA,MAAIF,GAAJ,GAAW;AACT,WAAO,KAAKK,IAAZ;AACD;;AAED,MAAIL,GAAJ,CAASM,GAAT,EAAc;AACZ,UAAM,IAAIJ,KAAJ,CAAU,oCAAV,CAAN;AACD,GA3C0B,CA6C3B;;AACA;;;;;;AAIA,SAAOK,OAAP,CAAgBC,KAAhB,EAAuB,CAAE;AACvB;AACD;;AApD0B,CAA7B,C,CAuDA;AACA;;AACAb,MAAM,CAACC,OAAP,GAAiBF,MAAM,CAACC,MAAM,CAACC,OAAR,EAAiB;AAAEa,EAAAA,SAAS,EAAE,OAAb;AAAsBC,EAAAA,UAAU,EAAE;AAAlC,CAAjB,CAAvB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst withIs = require('class-is')\n\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\nmodule.exports = class Block {\n  /**\n   * @constructor\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  constructor (data, cid) {\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array')\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID')\n    }\n\n    this._data = data\n    this._cid = cid\n  }\n\n  /**\n   * The data of this block.\n   *\n   * @type {Uint8Array}\n   */\n  get data () {\n    return this._data\n  }\n\n  set data (val) {\n    throw new Error('Tried to change an immutable block')\n  }\n\n  /**\n   * The cid of the data this block represents.\n   *\n   * @type {CID}\n   */\n  get cid () {\n    return this._cid\n  }\n\n  set cid (val) {\n    throw new Error('Tried to change an immutable block')\n  }\n\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * Check if the given value is a Block.\n   * @returns {other is Block}\n   */\n  static isBlock (other) { // eslint-disable-line no-unused-vars\n    // implemented by class-is module\n  }\n}\n\n// to trick the typings engine\n// https://github.com/ipld/js-ipld-block/pull/55#discussion_r478845002\nmodule.exports = withIs(module.exports, { className: 'Block', symbolName: '@ipld/js-ipld-block/block' })\n"]},"metadata":{},"sourceType":"script"}