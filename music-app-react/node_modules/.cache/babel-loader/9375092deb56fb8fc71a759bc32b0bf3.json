{"ast":null,"code":"'use strict';\n\nconst multihashing = require('multihashing-async');\n\nconst errcode = require('err-code');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayEquals = require('uint8arrays/equals');\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n * @returns {Promise}\n */\n\n\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!(key instanceof Uint8Array)) {\n    throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n  }\n\n  if (key.byteLength < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n  }\n\n  const prefix = uint8ArrayToString(key.subarray(0, 4));\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n  }\n\n  const keyhash = key.slice(4);\n  const publicKeyHash = await multihashing(publicKey, 'sha2-256');\n\n  if (!uint8ArrayEquals(keyhash, publicKeyHash)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');\n  }\n};\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/libp2p-record/src/validators/public-key.js"],"names":["multihashing","require","errcode","uint8ArrayToString","uint8ArrayEquals","validatePublicKeyRecord","key","publicKey","Uint8Array","Error","byteLength","prefix","subarray","keyhash","slice","publicKeyHash","module","exports","func","sign"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAAhC;AAEA;;;;;;;;;;;;AAUA,MAAMI,uBAAuB,GAAG,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;AACxD,MAAI,EAAED,GAAG,YAAYE,UAAjB,CAAJ,EAAkC;AAChC,UAAMN,OAAO,CAAC,IAAIO,KAAJ,CAAU,4BAAV,CAAD,EAA0C,mCAA1C,CAAb;AACD;;AAED,MAAIH,GAAG,CAACI,UAAJ,GAAiB,CAArB,EAAwB;AACtB,UAAMR,OAAO,CAAC,IAAIO,KAAJ,CAAU,2BAAV,CAAD,EAAyC,kCAAzC,CAAb;AACD;;AAED,QAAME,MAAM,GAAGR,kBAAkB,CAACG,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAD,CAAjC;;AAEA,MAAID,MAAM,KAAK,MAAf,EAAuB;AACrB,UAAMT,OAAO,CAAC,IAAIO,KAAJ,CAAU,gCAAV,CAAD,EAA8C,mCAA9C,CAAb;AACD;;AAED,QAAMI,OAAO,GAAGP,GAAG,CAACQ,KAAJ,CAAU,CAAV,CAAhB;AAEA,QAAMC,aAAa,GAAG,MAAMf,YAAY,CAACO,SAAD,EAAY,UAAZ,CAAxC;;AAEA,MAAI,CAACH,gBAAgB,CAACS,OAAD,EAAUE,aAAV,CAArB,EAA+C;AAC7C,UAAMb,OAAO,CAAC,IAAIO,KAAJ,CAAU,yCAAV,CAAD,EAAuD,kCAAvD,CAAb;AACD;AACF,CAtBD;;AAwBAO,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAEb,uBADS;AAEfc,EAAAA,IAAI,EAAE;AAFS,CAAjB","sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst errcode = require('err-code')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayEquals = require('uint8arrays/equals')\n\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n * @returns {Promise}\n */\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!(key instanceof Uint8Array)) {\n    throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER')\n  }\n\n  if (key.byteLength < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT')\n  }\n\n  const prefix = uint8ArrayToString(key.subarray(0, 4))\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX')\n  }\n\n  const keyhash = key.slice(4)\n\n  const publicKeyHash = await multihashing(publicKey, 'sha2-256')\n\n  if (!uint8ArrayEquals(keyhash, publicKeyHash)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH')\n  }\n}\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n}\n"]},"metadata":{},"sourceType":"script"}