{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  return withTimeoutOption(async function resolve(ipfsPath, options = {}) {\n    const {\n      cid,\n      path\n    } = toCidAndPath(ipfsPath);\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    if (path) {\n      options.path = path;\n    }\n\n    let lastCid = cid;\n    let lastRemainderPath = options.path || '';\n\n    if (lastRemainderPath.startsWith('/')) {\n      lastRemainderPath = lastRemainderPath.substring(1);\n    }\n\n    if (options.path) {\n      try {\n        for await (const {\n          value,\n          remainderPath\n        } of ipld.resolve(cid, options.path, {\n          signal: options.signal\n        })) {\n          if (!CID.isCID(value)) {\n            break;\n          }\n\n          lastRemainderPath = remainderPath;\n          lastCid = value;\n        }\n      } catch (err) {\n        // TODO: add error codes to IPLD\n        if (err.message.startsWith('Object has no property')) {\n          err.message = `no link named \"${lastRemainderPath.split('/')[0]}\" under ${lastCid}`;\n          err.code = 'ERR_NO_LINK';\n        }\n\n        throw err;\n      }\n    }\n\n    return {\n      cid: lastCid,\n      remainderPath: lastRemainderPath || ''\n    };\n  });\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/dag/resolve.js"],"names":["CID","require","withTimeoutOption","toCidAndPath","module","exports","ipld","preload","resolve","ipfsPath","options","cid","path","lastCid","lastRemainderPath","startsWith","substring","value","remainderPath","signal","isCID","err","message","split","code"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,aAAD,CAArC;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,qCAAD,CAA5B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC,SAAOL,iBAAiB,CAAC,eAAeM,OAAf,CAAwBC,QAAxB,EAAkCC,OAAO,GAAG,EAA5C,EAAgD;AACvE,UAAM;AACJC,MAAAA,GADI;AAEJC,MAAAA;AAFI,QAGFT,YAAY,CAACM,QAAD,CAHhB;;AAKA,QAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACI,GAAD,CAAP;AACD;;AAED,QAAIC,IAAJ,EAAU;AACRF,MAAAA,OAAO,CAACE,IAAR,GAAeA,IAAf;AACD;;AAED,QAAIC,OAAO,GAAGF,GAAd;AACA,QAAIG,iBAAiB,GAAGJ,OAAO,CAACE,IAAR,IAAgB,EAAxC;;AAEA,QAAIE,iBAAiB,CAACC,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;AACrCD,MAAAA,iBAAiB,GAAGA,iBAAiB,CAACE,SAAlB,CAA4B,CAA5B,CAApB;AACD;;AAED,QAAIN,OAAO,CAACE,IAAZ,EAAkB;AAChB,UAAI;AACF,mBAAW,MAAM;AAAEK,UAAAA,KAAF;AAASC,UAAAA;AAAT,SAAjB,IAA6CZ,IAAI,CAACE,OAAL,CAAaG,GAAb,EAAkBD,OAAO,CAACE,IAA1B,EAAgC;AAC3EO,UAAAA,MAAM,EAAET,OAAO,CAACS;AAD2D,SAAhC,CAA7C,EAEI;AACF,cAAI,CAACnB,GAAG,CAACoB,KAAJ,CAAUH,KAAV,CAAL,EAAuB;AACrB;AACD;;AAEDH,UAAAA,iBAAiB,GAAGI,aAApB;AACAL,UAAAA,OAAO,GAAGI,KAAV;AACD;AACF,OAXD,CAWE,OAAOI,GAAP,EAAY;AACZ;AACA,YAAIA,GAAG,CAACC,OAAJ,CAAYP,UAAZ,CAAuB,wBAAvB,CAAJ,EAAsD;AACpDM,UAAAA,GAAG,CAACC,OAAJ,GAAe,kBAAiBR,iBAAiB,CAACS,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAgC,WAAUV,OAAQ,EAAlF;AACAQ,UAAAA,GAAG,CAACG,IAAJ,GAAW,aAAX;AACD;;AACD,cAAMH,GAAN;AACD;AACF;;AAED,WAAO;AACLV,MAAAA,GAAG,EAAEE,OADA;AAELK,MAAAA,aAAa,EAAEJ,iBAAiB,IAAI;AAF/B,KAAP;AAID,GA/CuB,CAAxB;AAgDD,CAjDD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { withTimeoutOption } = require('../../utils')\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path')\n\nmodule.exports = ({ ipld, preload }) => {\n  return withTimeoutOption(async function resolve (ipfsPath, options = {}) {\n    const {\n      cid,\n      path\n    } = toCidAndPath(ipfsPath)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (path) {\n      options.path = path\n    }\n\n    let lastCid = cid\n    let lastRemainderPath = options.path || ''\n\n    if (lastRemainderPath.startsWith('/')) {\n      lastRemainderPath = lastRemainderPath.substring(1)\n    }\n\n    if (options.path) {\n      try {\n        for await (const { value, remainderPath } of ipld.resolve(cid, options.path, {\n          signal: options.signal\n        })) {\n          if (!CID.isCID(value)) {\n            break\n          }\n\n          lastRemainderPath = remainderPath\n          lastCid = value\n        }\n      } catch (err) {\n        // TODO: add error codes to IPLD\n        if (err.message.startsWith('Object has no property')) {\n          err.message = `no link named \"${lastRemainderPath.split('/')[0]}\" under ${lastCid}`\n          err.code = 'ERR_NO_LINK'\n        }\n        throw err\n      }\n    }\n\n    return {\n      cid: lastCid,\n      remainderPath: lastRemainderPath || ''\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}