{"ast":null,"code":"'use strict';\n\nconst Store = require('orbit-db-store');\n\nconst DocumentIndex = require('./DocumentIndex');\n\nconst pMap = require('p-map');\n\nconst Readable = require('readable-stream');\n\nconst replaceAll = (str, search, replacement) => str.toString().split(search).join(replacement);\n\nclass DocumentStore extends Store {\n  constructor(ipfs, id, dbname, options) {\n    if (!options) options = {};\n    if (!options.indexBy) Object.assign(options, {\n      indexBy: '_id'\n    });\n    if (!options.Index) Object.assign(options, {\n      Index: DocumentIndex\n    });\n    super(ipfs, id, dbname, options);\n    this._type = 'docstore';\n  }\n\n  get(key, caseSensitive = false) {\n    key = key.toString();\n    const terms = key.split(' ');\n    key = terms.length > 1 ? replaceAll(key, '.', ' ').toLowerCase() : key.toLowerCase();\n\n    const search = e => {\n      if (terms.length > 1) {\n        return replaceAll(e, '.', ' ').toLowerCase().indexOf(key) !== -1;\n      }\n\n      return e.toLowerCase().indexOf(key) !== -1;\n    };\n\n    const mapper = e => this._index.get(e);\n\n    const filter = e => caseSensitive ? e.indexOf(key) !== -1 : search(e);\n\n    return Object.keys(this._index._index).filter(filter).map(mapper);\n  }\n\n  query(mapper, options = {}) {\n    // Whether we return the full operation data or just the db value\n    const fullOp = options.fullOp || false;\n    return Object.keys(this._index._index).map(e => this._index.get(e, fullOp)).filter(mapper);\n  }\n\n  batchPut(docs, onProgressCallback) {\n    const mapper = (doc, idx) => {\n      return this._addOperationBatch({\n        op: 'PUT',\n        key: doc[this.options.indexBy],\n        value: doc\n      }, true, idx === docs.length - 1, onProgressCallback);\n    };\n\n    return pMap(docs, mapper, {\n      concurrency: 1\n    }).then(() => this.saveSnapshot());\n  }\n\n  put(doc, options = {}) {\n    if (!doc[this.options.indexBy]) {\n      throw new Error(`The provided document doesn't contain field '${this.options.indexBy}'`);\n    }\n\n    return this._addOperation({\n      op: 'PUT',\n      key: doc[this.options.indexBy],\n      value: doc\n    }, options);\n  }\n\n  putAll(docs, options = {}) {\n    if (!Array.isArray(docs)) {\n      docs = [docs];\n    }\n\n    if (!docs.every(d => d[this.options.indexBy])) {\n      throw new Error(`The provided document doesn't contain field '${this.options.indexBy}'`);\n    }\n\n    return this._addOperation({\n      op: 'PUTALL',\n      docs: docs.map(value => ({\n        key: value[this.options.indexBy],\n        value\n      }))\n    }, options);\n  }\n\n  del(key, options = {}) {\n    if (!this._index.get(key)) {\n      throw new Error(`No entry with key '${key}' in the database`);\n    }\n\n    return this._addOperation({\n      op: 'DEL',\n      key: key,\n      value: null\n    }, options);\n  }\n\n}\n\nmodule.exports = DocumentStore;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app-react/node_modules/orbit-db-docstore/src/DocumentStore.js"],"names":["Store","require","DocumentIndex","pMap","Readable","replaceAll","str","search","replacement","toString","split","join","DocumentStore","constructor","ipfs","id","dbname","options","indexBy","Object","assign","Index","_type","get","key","caseSensitive","terms","length","toLowerCase","e","indexOf","mapper","_index","filter","keys","map","query","fullOp","batchPut","docs","onProgressCallback","doc","idx","_addOperationBatch","op","value","concurrency","then","saveSnapshot","put","Error","_addOperation","putAll","Array","isArray","every","d","del","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Store = require('orbit-db-store')\nconst DocumentIndex = require('./DocumentIndex')\nconst pMap = require('p-map')\nconst Readable = require('readable-stream')\n\nconst replaceAll = (str, search, replacement) => str.toString().split(search).join(replacement)\n\nclass DocumentStore extends Store {\n  constructor (ipfs, id, dbname, options) {\n    if (!options) options = {}\n    if (!options.indexBy) Object.assign(options, { indexBy: '_id' })\n    if (!options.Index) Object.assign(options, { Index: DocumentIndex })\n    super(ipfs, id, dbname, options)\n    this._type = 'docstore'\n  }\n\n  get (key, caseSensitive = false) {\n    key = key.toString()\n    const terms = key.split(' ')\n    key = terms.length > 1 ? replaceAll(key, '.', ' ').toLowerCase() : key.toLowerCase()\n\n    const search = (e) => {\n      if (terms.length > 1) {\n        return replaceAll(e, '.', ' ').toLowerCase().indexOf(key) !== -1\n      }\n      return e.toLowerCase().indexOf(key) !== -1\n    }\n    const mapper = e => this._index.get(e)\n    const filter = e => caseSensitive\n      ? e.indexOf(key) !== -1\n      : search(e)\n\n    return Object.keys(this._index._index)\n      .filter(filter)\n      .map(mapper)\n  }\n\n  query (mapper, options = {}) {\n    // Whether we return the full operation data or just the db value\n    const fullOp = options.fullOp || false\n\n    return Object.keys(this._index._index)\n      .map((e) => this._index.get(e, fullOp))\n      .filter(mapper)\n  }\n\n  batchPut (docs, onProgressCallback) {\n    const mapper = (doc, idx) => {\n      return this._addOperationBatch(\n        {\n          op: 'PUT',\n          key: doc[this.options.indexBy],\n          value: doc\n        },\n        true,\n        idx === docs.length - 1,\n        onProgressCallback\n      )\n    }\n\n    return pMap(docs, mapper, { concurrency: 1 })\n      .then(() => this.saveSnapshot())\n  }\n\n  put (doc, options = {}) {\n    if (!doc[this.options.indexBy]) { throw new Error(`The provided document doesn't contain field '${this.options.indexBy}'`) }\n\n    return this._addOperation({\n      op: 'PUT',\n      key: doc[this.options.indexBy],\n      value: doc\n    }, options)\n  }\n\n  putAll (docs, options = {}) {\n    if (!(Array.isArray(docs))) {\n      docs = [docs]\n    }\n    if (!(docs.every(d => d[this.options.indexBy]))) { throw new Error(`The provided document doesn't contain field '${this.options.indexBy}'`) }\n    return this._addOperation({\n      op: 'PUTALL',\n      docs: docs.map((value) => ({\n        key: value[this.options.indexBy],\n        value\n      }))\n    }, options)\n  }\n\n  del (key, options = {}) {\n    if (!this._index.get(key)) { throw new Error(`No entry with key '${key}' in the database`) }\n\n    return this._addOperation({\n      op: 'DEL',\n      key: key,\n      value: null\n    }, options)\n  }\n}\n\nmodule.exports = DocumentStore\n"]},"metadata":{},"sourceType":"script"}