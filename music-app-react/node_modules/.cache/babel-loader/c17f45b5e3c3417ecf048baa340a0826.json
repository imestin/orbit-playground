{"ast":null,"code":"'use strict';\n\nclass LamportClock {\n  constructor(id, time) {\n    this.id = id;\n    this.time = time || 0;\n  }\n\n  tick() {\n    return new LamportClock(this.id, ++this.time);\n  }\n\n  merge(clock) {\n    this.time = Math.max(this.time, clock.time);\n    return new LamportClock(this.id, this.time);\n  }\n\n  clone() {\n    return new LamportClock(this.id, this.time);\n  }\n\n  static compare(a, b) {\n    // Calculate the \"distance\" based on the clock, ie. lower or greater\n    var dist = a.time - b.time; // If the sequence number is the same (concurrent events),\n    // and the IDs are different, take the one with a \"lower\" id\n\n    if (dist === 0 && a.id !== b.id) return a.id < b.id ? -1 : 1;\n    return dist;\n  }\n\n}\n\nmodule.exports = LamportClock;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-log/src/lamport-clock.js"],"names":["LamportClock","constructor","id","time","tick","merge","clock","Math","max","clone","compare","a","b","dist","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAN,CAAmB;AACjBC,EAAAA,WAAW,CAAEC,EAAF,EAAMC,IAAN,EAAY;AACrB,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,IAAL,GAAYA,IAAI,IAAI,CAApB;AACD;;AAEDC,EAAAA,IAAI,GAAI;AACN,WAAO,IAAIJ,YAAJ,CAAiB,KAAKE,EAAtB,EAA0B,EAAE,KAAKC,IAAjC,CAAP;AACD;;AAEDE,EAAAA,KAAK,CAAEC,KAAF,EAAS;AACZ,SAAKH,IAAL,GAAYI,IAAI,CAACC,GAAL,CAAS,KAAKL,IAAd,EAAoBG,KAAK,CAACH,IAA1B,CAAZ;AACA,WAAO,IAAIH,YAAJ,CAAiB,KAAKE,EAAtB,EAA0B,KAAKC,IAA/B,CAAP;AACD;;AAEDM,EAAAA,KAAK,GAAI;AACP,WAAO,IAAIT,YAAJ,CAAiB,KAAKE,EAAtB,EAA0B,KAAKC,IAA/B,CAAP;AACD;;AAED,SAAOO,OAAP,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACpB;AACA,QAAIC,IAAI,GAAGF,CAAC,CAACR,IAAF,GAASS,CAAC,CAACT,IAAtB,CAFoB,CAIpB;AACA;;AACA,QAAIU,IAAI,KAAK,CAAT,IAAcF,CAAC,CAACT,EAAF,KAASU,CAAC,CAACV,EAA7B,EAAiC,OAAOS,CAAC,CAACT,EAAF,GAAOU,CAAC,CAACV,EAAT,GAAc,CAAC,CAAf,GAAmB,CAA1B;AAEjC,WAAOW,IAAP;AACD;;AA5BgB;;AA+BnBC,MAAM,CAACC,OAAP,GAAiBf,YAAjB","sourcesContent":["'use strict'\n\nclass LamportClock {\n  constructor (id, time) {\n    this.id = id\n    this.time = time || 0\n  }\n\n  tick () {\n    return new LamportClock(this.id, ++this.time)\n  }\n\n  merge (clock) {\n    this.time = Math.max(this.time, clock.time)\n    return new LamportClock(this.id, this.time)\n  }\n\n  clone () {\n    return new LamportClock(this.id, this.time)\n  }\n\n  static compare (a, b) {\n    // Calculate the \"distance\" based on the clock, ie. lower or greater\n    var dist = a.time - b.time\n\n    // If the sequence number is the same (concurrent events),\n    // and the IDs are different, take the one with a \"lower\" id\n    if (dist === 0 && a.id !== b.id) return a.id < b.id ? -1 : 1\n\n    return dist\n  }\n}\n\nmodule.exports = LamportClock\n"]},"metadata":{},"sourceType":"script"}