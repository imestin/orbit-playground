{"ast":null,"code":"'use strict';\n\nconst IdentityProvider = require('./identity-provider-interface');\n\nconst Keystore = require('orbit-db-keystore');\n\nconst type = 'orbitdb';\n\nclass OrbitDBIdentityProvider extends IdentityProvider {\n  constructor(keystore) {\n    super();\n\n    if (!keystore) {\n      throw new Error('OrbitDBIdentityProvider requires a keystore');\n    }\n\n    this._keystore = keystore;\n  } // Returns the type of the identity provider\n\n\n  static get type() {\n    return type;\n  }\n\n  async getId(options = {}) {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const keystore = this._keystore;\n    const key = (await keystore.getKey(id)) || (await keystore.createKey(id));\n    return key.public.marshal().toString('hex');\n  }\n\n  async signIdentity(data, options = {}) {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const keystore = this._keystore;\n    const key = await keystore.getKey(id);\n\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`);\n    }\n\n    return keystore.sign(key, data);\n  }\n\n  static async verifyIdentity(identity) {\n    // Verify that identity was signed by the ID\n    return Keystore.verify(identity.signatures.publicKey, identity.id, identity.publicKey + identity.signatures.id);\n  }\n\n}\n\nmodule.exports = OrbitDBIdentityProvider;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/orbit-db-identity-provider/src/orbit-db-identity-provider.js"],"names":["IdentityProvider","require","Keystore","type","OrbitDBIdentityProvider","constructor","keystore","Error","_keystore","getId","options","id","key","getKey","createKey","public","marshal","toString","signIdentity","data","sign","verifyIdentity","identity","verify","signatures","publicKey","module","exports"],"mappings":"AAAA;;AACA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,+BAAD,CAAhC;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAME,IAAI,GAAG,SAAb;;AAEA,MAAMC,uBAAN,SAAsCJ,gBAAtC,CAAuD;AACrDK,EAAAA,WAAW,CAAEC,QAAF,EAAY;AACrB;;AACA,QAAI,CAACA,QAAL,EAAe;AACb,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,SAAKC,SAAL,GAAiBF,QAAjB;AACD,GAPoD,CASrD;;;AACA,aAAWH,IAAX,GAAmB;AAAE,WAAOA,IAAP;AAAa;;AAElC,QAAMM,KAAN,CAAaC,OAAO,GAAG,EAAvB,EAA2B;AACzB,UAAMC,EAAE,GAAGD,OAAO,CAACC,EAAnB;;AACA,QAAI,CAACA,EAAL,EAAS;AACP,YAAM,IAAIJ,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,UAAMD,QAAQ,GAAG,KAAKE,SAAtB;AACA,UAAMI,GAAG,GAAG,OAAMN,QAAQ,CAACO,MAAT,CAAgBF,EAAhB,CAAN,MAA6B,MAAML,QAAQ,CAACQ,SAAT,CAAmBH,EAAnB,CAAnC,CAAZ;AACA,WAAOC,GAAG,CAACG,MAAJ,CAAWC,OAAX,GAAqBC,QAArB,CAA8B,KAA9B,CAAP;AACD;;AAED,QAAMC,YAAN,CAAoBC,IAApB,EAA0BT,OAAO,GAAG,EAApC,EAAwC;AACtC,UAAMC,EAAE,GAAGD,OAAO,CAACC,EAAnB;;AACA,QAAI,CAACA,EAAL,EAAS;AACP,YAAM,IAAIJ,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,UAAMD,QAAQ,GAAG,KAAKE,SAAtB;AACA,UAAMI,GAAG,GAAG,MAAMN,QAAQ,CAACO,MAAT,CAAgBF,EAAhB,CAAlB;;AACA,QAAI,CAACC,GAAL,EAAU;AACR,YAAM,IAAIL,KAAJ,CAAW,oBAAmBI,EAAG,aAAjC,CAAN;AACD;;AAED,WAAOL,QAAQ,CAACc,IAAT,CAAcR,GAAd,EAAmBO,IAAnB,CAAP;AACD;;AAED,eAAaE,cAAb,CAA6BC,QAA7B,EAAuC;AACrC;AACA,WAAOpB,QAAQ,CAACqB,MAAT,CACLD,QAAQ,CAACE,UAAT,CAAoBC,SADf,EAELH,QAAQ,CAACX,EAFJ,EAGLW,QAAQ,CAACG,SAAT,GAAqBH,QAAQ,CAACE,UAAT,CAAoBb,EAHpC,CAAP;AAKD;;AA5CoD;;AA+CvDe,MAAM,CAACC,OAAP,GAAiBvB,uBAAjB","sourcesContent":["'use strict'\nconst IdentityProvider = require('./identity-provider-interface')\nconst Keystore = require('orbit-db-keystore')\nconst type = 'orbitdb'\n\nclass OrbitDBIdentityProvider extends IdentityProvider {\n  constructor (keystore) {\n    super()\n    if (!keystore) {\n      throw new Error('OrbitDBIdentityProvider requires a keystore')\n    }\n    this._keystore = keystore\n  }\n\n  // Returns the type of the identity provider\n  static get type () { return type }\n\n  async getId (options = {}) {\n    const id = options.id\n    if (!id) {\n      throw new Error('id is required')\n    }\n\n    const keystore = this._keystore\n    const key = await keystore.getKey(id) || await keystore.createKey(id)\n    return key.public.marshal().toString('hex')\n  }\n\n  async signIdentity (data, options = {}) {\n    const id = options.id\n    if (!id) {\n      throw new Error('id is required')\n    }\n    const keystore = this._keystore\n    const key = await keystore.getKey(id)\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`)\n    }\n\n    return keystore.sign(key, data)\n  }\n\n  static async verifyIdentity (identity) {\n    // Verify that identity was signed by the ID\n    return Keystore.verify(\n      identity.signatures.publicKey,\n      identity.id,\n      identity.publicKey + identity.signatures.id\n    )\n  }\n}\n\nmodule.exports = OrbitDBIdentityProvider\n"]},"metadata":{},"sourceType":"script"}