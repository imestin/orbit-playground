{"ast":null,"code":"'use strict';\n\nconst multihash = require('multihashes');\n\nconst multibase = require('multibase');\n\nconst Multiaddr = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst CID = require('cids');\n\nconst {\n  URL\n} = require('iso-url');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/;\nconst pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 2; // CID, libp2p-key or DNSLink\n\nconst subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/;\nconst subdomainIdMatch = 1;\nconst subdomainProtocolMatch = 2; // Fully qualified domain name (FQDN) that has an explicit .tld suffix\n\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\n\nfunction isMultihash(hash) {\n  const formatted = convertToString(hash);\n\n  try {\n    multihash.decode(multibase.decode('z' + formatted));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultibase(hash) {\n  try {\n    return multibase.isEncoded(hash);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isCID(hash) {\n  try {\n    new CID(hash); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultiaddr(input) {\n  if (!input) return false;\n  if (Multiaddr.isMultiaddr(input)) return true;\n\n  try {\n    new Multiaddr(input); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isPeerMultiaddr(input) {\n  return isMultiaddr(input) && mafmt.IPFS.matches(input);\n}\n\nfunction isIpfs(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  const match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n\n  let hash = match[hashMatch];\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase();\n  }\n\n  return isCID(hash);\n}\n\nfunction isIpns(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\n  const formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  const match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n\n  let ipnsId = match[hashMatch];\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase(); // Check if it is cidv1\n\n    if (isCID(ipnsId)) return true; // Check if it looks like FQDN\n\n    try {\n      // URL implementation in web browsers forces lowercase of the hostname\n      const {\n        hostname\n      } = new URL(`http://${ipnsId}`); // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n\n      return fqdnWithTld.test(hostname);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isString(input) {\n  return typeof input === 'string';\n}\n\nfunction convertToString(input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc');\n  }\n\n  if (isString(input)) {\n    return input;\n  }\n\n  return false;\n}\n\nconst ipfsSubdomain = url => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\n\nconst ipnsSubdomain = url => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\n\nconst subdomain = url => ipfsSubdomain(url) || ipnsSubdomain(url);\n\nconst ipfsUrl = url => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url);\n\nconst ipnsUrl = url => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url);\n\nconst url = url => ipfsUrl(url) || ipnsUrl(url) || subdomain(url);\n\nconst path = path => isIpfs(path, pathPattern) || isIpns(path, pathPattern);\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  base32cid: cid => isMultibase(cid) === 'base32' && isCID(cid),\n  ipfsSubdomain,\n  ipnsSubdomain,\n  subdomain,\n  subdomainGatewayPattern,\n  ipfsUrl,\n  ipnsUrl,\n  url,\n  pathGatewayPattern: pathGatewayPattern,\n  ipfsPath: path => isIpfs(path, pathPattern),\n  ipnsPath: path => isIpns(path, pathPattern),\n  path,\n  pathPattern,\n  urlOrPath: x => url(x) || path(x),\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/is-ipfs/src/index.js"],"names":["multihash","require","multibase","Multiaddr","mafmt","CID","URL","uint8ArrayToString","pathGatewayPattern","pathPattern","defaultProtocolMatch","defaultHashMath","subdomainGatewayPattern","subdomainIdMatch","subdomainProtocolMatch","fqdnWithTld","isMultihash","hash","formatted","convertToString","decode","e","isMultibase","isEncoded","isCID","isMultiaddr","input","isPeerMultiaddr","IPFS","matches","isIpfs","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","ipnsId","hostname","test","isString","Uint8Array","ipfsSubdomain","url","ipnsSubdomain","subdomain","ipfsUrl","ipnsUrl","path","module","exports","multiaddr","peerMultiaddr","cid","base32cid","ipfsPath","ipnsPath","urlOrPath","x","cidPath"],"mappings":"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","sourcesContent":["'use strict'\n\nconst multihash = require('multihashes')\nconst multibase = require('multibase')\nconst Multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst CID = require('cids')\nconst { URL } = require('iso-url')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\nconst pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/\nconst pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 2\n\n// CID, libp2p-key or DNSLink\nconst subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/\nconst subdomainIdMatch = 1\nconst subdomainProtocolMatch = 2\n\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/\n\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    multihash.decode(multibase.decode('z' + formatted))\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isMultibase (hash) {\n  try {\n    return multibase.isEncoded(hash)\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isCID (hash) {\n  try {\n    new CID(hash) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isMultiaddr (input) {\n  if (!input) return false\n  if (Multiaddr.isMultiaddr(input)) return true\n  try {\n    new Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isPeerMultiaddr (input) {\n  return isMultiaddr(input) && mafmt.IPFS.matches(input)\n}\n\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  let ipnsId = match[hashMatch]\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase()\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true\n    // Check if it looks like FQDN\n    try {\n      // URL implementation in web browsers forces lowercase of the hostname\n      const { hostname } = new URL(`http://${ipnsId}`) // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname)\n    } catch (e) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\nfunction convertToString (input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc')\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\nconst ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\nconst ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\nconst subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url)\n\nconst ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url)\nconst ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url)\nconst url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url)\n\nconst path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern)\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  base32cid: (cid) => (isMultibase(cid) === 'base32' && isCID(cid)),\n  ipfsSubdomain,\n  ipnsSubdomain,\n  subdomain,\n  subdomainGatewayPattern,\n  ipfsUrl,\n  ipnsUrl,\n  url,\n  pathGatewayPattern: pathGatewayPattern,\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path,\n  pathPattern,\n  urlOrPath: (x) => url(x) || path(x),\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n}\n"]},"metadata":{},"sourceType":"script"}