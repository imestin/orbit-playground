{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n/**\n * Interface for OrbitDB Access Controllers\n *\n * Any OrbitDB access controller needs to define and implement\n * the methods defined by the interface here.\n */\n\n\nclass AccessController extends EventEmitter {\n  /*\n    Every AC needs to have a 'Factory' method\n    that creates an instance of the AccessController\n  */\n  static async create(orbitdb, options) {}\n  /* Return the type for this controller */\n\n\n  static get type() {\n    throw new Error('\\'static get type ()\\' needs to be defined in the inheriting class');\n  }\n  /*\n    Return the type for this controller\n    NOTE! This is the only property of the interface that\n    shouldn't be overridden in the inherited Access Controller\n  */\n\n\n  get type() {\n    return this.constructor.type;\n  }\n  /* Each Access Controller has some address to anchor to */\n\n\n  get address() {}\n  /*\n    Called by the databases (the log) to see if entry should\n    be allowed in the database. Return true if the entry is allowed,\n    false is not allowed\n  */\n\n\n  async canAppend(entry, identityProvider) {}\n  /* Add and remove access */\n\n\n  async grant(access, identity) {\n    return false;\n  }\n\n  async revoke(access, identity) {\n    return false;\n  }\n  /* AC creation and loading */\n\n\n  async load(address) {}\n  /* Returns AC manifest parameters object */\n\n\n  async save() {}\n  /* Called when the database for this AC gets closed */\n\n\n  async close() {}\n\n}\n\nmodule.exports = AccessController;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/orbit-db-access-controllers/src/access-controller-interface.js"],"names":["EventEmitter","require","AccessController","create","orbitdb","options","type","Error","constructor","address","canAppend","entry","identityProvider","grant","access","identity","revoke","load","save","close","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;AAEA;;;;;;;;AAMA,MAAME,gBAAN,SAA+BF,YAA/B,CAA4C;AAC1C;;;;AAIA,eAAaG,MAAb,CAAqBC,OAArB,EAA8BC,OAA9B,EAAuC,CAAE;AAEzC;;;AACA,aAAWC,IAAX,GAAmB;AACjB,UAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACD;AAED;;;;;;;AAKA,MAAID,IAAJ,GAAY;AACV,WAAO,KAAKE,WAAL,CAAiBF,IAAxB;AACD;AAED;;;AACA,MAAIG,OAAJ,GAAe,CAAE;AAEjB;;;;;;;AAKA,QAAMC,SAAN,CAAiBC,KAAjB,EAAwBC,gBAAxB,EAA0C,CAAE;AAE5C;;;AACA,QAAMC,KAAN,CAAaC,MAAb,EAAqBC,QAArB,EAA+B;AAAE,WAAO,KAAP;AAAc;;AAC/C,QAAMC,MAAN,CAAcF,MAAd,EAAsBC,QAAtB,EAAgC;AAAE,WAAO,KAAP;AAAc;AAEhD;;;AACA,QAAME,IAAN,CAAYR,OAAZ,EAAqB,CAAE;AACvB;;;AACA,QAAMS,IAAN,GAAc,CAAE;AAChB;;;AACA,QAAMC,KAAN,GAAe,CAAE;;AAxCyB;;AA2C5CC,MAAM,CAACC,OAAP,GAAiBnB,gBAAjB","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\n\n/**\n * Interface for OrbitDB Access Controllers\n *\n * Any OrbitDB access controller needs to define and implement\n * the methods defined by the interface here.\n */\nclass AccessController extends EventEmitter {\n  /*\n    Every AC needs to have a 'Factory' method\n    that creates an instance of the AccessController\n  */\n  static async create (orbitdb, options) {}\n\n  /* Return the type for this controller */\n  static get type () {\n    throw new Error('\\'static get type ()\\' needs to be defined in the inheriting class')\n  }\n\n  /*\n    Return the type for this controller\n    NOTE! This is the only property of the interface that\n    shouldn't be overridden in the inherited Access Controller\n  */\n  get type () {\n    return this.constructor.type\n  }\n\n  /* Each Access Controller has some address to anchor to */\n  get address () {}\n\n  /*\n    Called by the databases (the log) to see if entry should\n    be allowed in the database. Return true if the entry is allowed,\n    false is not allowed\n  */\n  async canAppend (entry, identityProvider) {}\n\n  /* Add and remove access */\n  async grant (access, identity) { return false }\n  async revoke (access, identity) { return false }\n\n  /* AC creation and loading */\n  async load (address) {}\n  /* Returns AC manifest parameters object */\n  async save () {}\n  /* Called when the database for this AC gets closed */\n  async close () {}\n}\n\nmodule.exports = AccessController\n"]},"metadata":{},"sourceType":"script"}