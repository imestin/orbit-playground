{"ast":null,"code":"'use strict';\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst {\n  encodeBase32\n} = require('./utils');\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:ipns:offline-datastore');\nlog.error = debug('ipfs:ipns:offline-datastore:error'); // Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\n\nclass OfflineDatastore {\n  constructor(repo) {\n    this._repo = repo;\n  }\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   * @param {Uint8Array} key identifier of the value.\n   * @param {Uint8Array} value value to be stored.\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n\n\n  async put(key, value) {\n    // eslint-disable-line require-await\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE');\n    }\n\n    let routingKey;\n\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    } // Marshal to libp2p record as the DHT does\n\n\n    const record = new Record(key, value);\n    return this._repo.datastore.put(routingKey, record.serialize());\n  }\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   * @param {Uint8Array} key identifier of the value to be obtained.\n   * @param {function(Error, Uint8Array)} callback\n   * @returns {void}\n   */\n\n\n  async get(key) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n\n    let routingKey;\n\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    }\n\n    const res = await this._repo.datastore.get(routingKey); // Unmarshal libp2p record as the DHT does\n\n    let record;\n\n    try {\n      record = Record.deserialize(res);\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n\n    return record.value;\n  } // encode key properly - base32(/ipns/{cid})\n\n\n  _routingKey(key) {\n    return new Key('/' + encodeBase32(key), false);\n  }\n\n}\n\nexports = module.exports = OfflineDatastore;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/ipns/routing/offline-datastore.js"],"names":["Key","require","Record","encodeBase32","errcode","debug","log","error","OfflineDatastore","constructor","repo","_repo","put","key","value","Uint8Array","Error","routingKey","_routingKey","err","record","datastore","serialize","get","res","deserialize","exports","module"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Key } = require('interface-datastore')\nconst { Record } = require('libp2p-record')\nconst { encodeBase32 } = require('./utils')\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('ipfs:ipns:offline-datastore')\nlog.error = debug('ipfs:ipns:offline-datastore:error')\n\n// Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\nclass OfflineDatastore {\n  constructor (repo) {\n    this._repo = repo\n  }\n\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   * @param {Uint8Array} key identifier of the value.\n   * @param {Uint8Array} value value to be stored.\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  async put (key, value) { // eslint-disable-line require-await\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    // Marshal to libp2p record as the DHT does\n    const record = new Record(key, value)\n\n    return this._repo.datastore.put(routingKey, record.serialize())\n  }\n\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   * @param {Uint8Array} key identifier of the value to be obtained.\n   * @param {function(Error, Uint8Array)} callback\n   * @returns {void}\n   */\n  async get (key) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    const res = await this._repo.datastore.get(routingKey)\n\n    // Unmarshal libp2p record as the DHT does\n    let record\n    try {\n      record = Record.deserialize(res)\n    } catch (err) {\n      log.error(err)\n      throw err\n    }\n\n    return record.value\n  }\n\n  // encode key properly - base32(/ipns/{cid})\n  _routingKey (key) {\n    return new Key('/' + encodeBase32(key), false)\n  }\n}\n\nexports = module.exports = OfflineDatastore\n"]},"metadata":{},"sourceType":"script"}