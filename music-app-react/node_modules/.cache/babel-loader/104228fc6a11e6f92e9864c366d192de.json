{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:components:init');\n\nconst PeerId = require('peer-id');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst mergeOptions = require('merge-options');\n\nconst getDefaultConfig = require('../runtime/config-nodejs.js');\n\nconst createRepo = require('../runtime/repo-nodejs');\n\nconst mortice = require('mortice');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst UnixFs = require('ipfs-unixfs');\n\nconst multicodec = require('multicodec');\n\nconst {\n  AlreadyInitializingError,\n  AlreadyInitializedError,\n  NotStartedError,\n  NotEnabledError\n} = require('../errors');\n\nconst BlockService = require('ipfs-block-service');\n\nconst Ipld = require('ipld');\n\nconst getDefaultIpldOptions = require('../runtime/ipld-nodejs');\n\nconst createPreloader = require('../preload');\n\nconst {\n  ERR_REPO_NOT_INITIALIZED\n} = require('ipfs-repo').errors;\n\nconst IPNS = require('../ipns');\n\nconst OfflineDatastore = require('../ipns/routing/offline-datastore');\n\nconst initAssets = require('../runtime/init-assets-nodejs');\n\nconst PinManager = require('./pin/pin-manager');\n\nconst Components = require('./');\n\nmodule.exports = ({\n  apiManager,\n  print,\n  options: constructorOptions\n}) => async function init(options) {\n  const {\n    cancel\n  } = apiManager.update({\n    init: () => {\n      throw new AlreadyInitializingError();\n    }\n  });\n\n  try {\n    options = options || {};\n\n    if (typeof constructorOptions.init === 'object') {\n      options = mergeOptions(constructorOptions.init, options);\n    }\n\n    options.pass = options.pass || constructorOptions.pass;\n\n    if (constructorOptions.config) {\n      options.config = mergeOptions(options.config, constructorOptions.config);\n    }\n\n    options.repo = options.repo || constructorOptions.repo;\n    options.repoAutoMigrate = options.repoAutoMigrate || constructorOptions.repoAutoMigrate;\n    const repo = typeof options.repo === 'string' || options.repo == null ? createRepo({\n      path: options.repo,\n      autoMigrate: options.repoAutoMigrate,\n      silent: constructorOptions.silent\n    }) : options.repo;\n    let isInitialized = true;\n\n    if (repo.closed) {\n      try {\n        await repo.open();\n      } catch (err) {\n        if (err.code === ERR_REPO_NOT_INITIALIZED) {\n          isInitialized = false;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    if (!isInitialized && options.allowNew === false) {\n      throw new NotEnabledError('new repo initialization is not enabled');\n    }\n\n    const {\n      peerId,\n      keychain\n    } = isInitialized ? await initExistingRepo(repo, options) : await initNewRepo(repo, { ...options,\n      print\n    });\n    log('peer created');\n    const blockService = new BlockService(repo);\n    const ipld = new Ipld(getDefaultIpldOptions(blockService, constructorOptions.ipld, log));\n    const preload = createPreloader(constructorOptions.preload);\n    await preload.start(); // Make sure GC lock is specific to repo, for tests where there are\n    // multiple instances of IPFS\n\n    const gcLock = mortice(repo.path, {\n      singleProcess: constructorOptions.repoOwner !== false\n    });\n    const dag = {\n      get: Components.dag.get({\n        ipld,\n        preload\n      }),\n      resolve: Components.dag.resolve({\n        ipld,\n        preload\n      }),\n      tree: Components.dag.tree({\n        ipld,\n        preload\n      })\n    };\n    const object = {\n      data: Components.object.data({\n        ipld,\n        preload\n      }),\n      get: Components.object.get({\n        ipld,\n        preload\n      }),\n      links: Components.object.links({\n        dag\n      }),\n      new: Components.object.new({\n        ipld,\n        preload\n      }),\n      patch: {\n        addLink: Components.object.patch.addLink({\n          ipld,\n          gcLock,\n          preload\n        }),\n        appendData: Components.object.patch.appendData({\n          ipld,\n          gcLock,\n          preload\n        }),\n        rmLink: Components.object.patch.rmLink({\n          ipld,\n          gcLock,\n          preload\n        }),\n        setData: Components.object.patch.setData({\n          ipld,\n          gcLock,\n          preload\n        })\n      },\n      put: Components.object.put({\n        ipld,\n        gcLock,\n        preload\n      }),\n      stat: Components.object.stat({\n        ipld,\n        preload\n      })\n    };\n    const pinManager = new PinManager(repo, dag);\n    const pinAddAll = Components.pin.addAll({\n      pinManager,\n      gcLock,\n      dag\n    });\n    const pinRmAll = Components.pin.rmAll({\n      pinManager,\n      gcLock,\n      dag\n    });\n    const pin = {\n      add: Components.pin.add({\n        addAll: pinAddAll\n      }),\n      addAll: pinAddAll,\n      ls: Components.pin.ls({\n        pinManager,\n        dag\n      }),\n      rm: Components.pin.rm({\n        rmAll: pinRmAll\n      }),\n      rmAll: pinRmAll\n    }; // FIXME: resolve this circular dependency\n\n    dag.put = Components.dag.put({\n      ipld,\n      pin,\n      gcLock,\n      preload\n    });\n    const block = {\n      get: Components.block.get({\n        blockService,\n        preload\n      }),\n      put: Components.block.put({\n        blockService,\n        pin,\n        gcLock,\n        preload\n      }),\n      rm: Components.block.rm({\n        blockService,\n        gcLock,\n        pinManager\n      }),\n      stat: Components.block.stat({\n        blockService,\n        preload\n      })\n    };\n    const addAll = Components.addAll({\n      block,\n      preload,\n      pin,\n      gcLock,\n      options: constructorOptions\n    });\n\n    if (!isInitialized && !options.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const emptyDirCid = await addEmptyDir({\n        dag,\n        pin\n      });\n      log('adding default assets');\n      await initAssets({\n        addAll,\n        print\n      });\n      log('initializing IPNS keyspace'); // Setup the offline routing for IPNS.\n      // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n\n      const offlineDatastore = new OfflineDatastore(repo);\n      const ipns = new IPNS(offlineDatastore, repo.datastore, peerId, keychain, {\n        pass: options.pass\n      });\n      await ipns.initializeKeyspace(peerId.privKey, emptyDirCid.toString());\n    }\n\n    const api = createApi({\n      add: Components.add({\n        addAll\n      }),\n      addAll,\n      apiManager,\n      constructorOptions,\n      block,\n      blockService,\n      dag,\n      gcLock,\n      initOptions: options,\n      ipld,\n      keychain,\n      object,\n      peerId,\n      pin,\n      pinManager,\n      preload,\n      print,\n      repo\n    });\n    apiManager.update(api, () => {\n      throw new NotStartedError();\n    });\n    /** @type {typeof api} */\n\n    const initializedApi = apiManager.api;\n    return initializedApi;\n  } catch (err) {\n    cancel();\n    throw err;\n  }\n};\n\nasync function initNewRepo(repo, {\n  privateKey,\n  emptyRepo,\n  algorithm,\n  bits,\n  profiles,\n  config,\n  pass,\n  print\n}) {\n  emptyRepo = emptyRepo || false;\n  bits = bits == null ? 2048 : Number(bits);\n  config = mergeOptions(applyProfiles(profiles, getDefaultConfig()), config); // Verify repo does not exist yet\n\n  const exists = await repo.exists();\n  log('repo exists?', exists);\n\n  if (exists === true) {\n    throw new Error('repo already exists');\n  }\n\n  const peerId = await createPeerId({\n    privateKey,\n    algorithm,\n    bits,\n    print\n  });\n  log('identity generated');\n  config.Identity = {\n    PeerID: peerId.toB58String(),\n    PrivKey: uint8ArrayToString(peerId.privKey.bytes, 'base64pad')\n  };\n  privateKey = peerId.privKey;\n  log('peer identity: %s', config.Identity.PeerID);\n  await repo.init(config);\n  await repo.open();\n  log('repo opened'); // Create libp2p for Keychain creation\n\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass\n    }\n  });\n\n  if (libp2p.keychain && libp2p.keychain.opts) {\n    await libp2p.loadKeychain();\n    await repo.config.set('Keychain', {\n      dek: libp2p.keychain.opts.dek\n    });\n  }\n\n  return {\n    peerId,\n    keychain: libp2p.keychain\n  };\n}\n\nasync function initExistingRepo(repo, {\n  config: newConfig,\n  profiles,\n  pass\n}) {\n  let config = await repo.config.getAll();\n\n  if (newConfig || profiles) {\n    if (profiles) {\n      config = applyProfiles(profiles, config);\n    }\n\n    if (newConfig) {\n      config = mergeOptions(config, newConfig);\n    }\n\n    await repo.config.set(config);\n  }\n\n  const peerId = await PeerId.createFromPrivKey(config.Identity.PrivKey);\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass,\n      ...config.Keychain\n    }\n  });\n  libp2p.keychain && (await libp2p.loadKeychain());\n  return {\n    peerId,\n    keychain: libp2p.keychain\n  };\n}\n\nfunction createPeerId({\n  privateKey,\n  algorithm = 'rsa',\n  bits,\n  print\n}) {\n  if (privateKey) {\n    log('using user-supplied private-key');\n    return typeof privateKey === 'object' ? privateKey : PeerId.createFromPrivKey(uint8ArrayFromString(privateKey, 'base64pad'));\n  } else {\n    // Generate peer identity keypair + transform to desired format + add to config.\n    print('generating %s-bit (rsa only) %s keypair...', bits, algorithm);\n    return PeerId.create({\n      keyType: algorithm,\n      bits\n    });\n  }\n}\n\nasync function addEmptyDir({\n  dag,\n  pin\n}) {\n  const node = new DAGNode(new UnixFs('directory').marshal());\n  const cid = await dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  });\n  await pin.add(cid);\n  return cid;\n} // Apply profiles (e.g. ['server', 'lowpower']) to config\n\n\nfunction applyProfiles(profiles, config) {\n  return (profiles || []).reduce((config, name) => {\n    const profile = require('./config').profiles[name];\n\n    if (!profile) {\n      throw new Error(`Could not find profile with name '${name}'`);\n    }\n\n    log('applying profile %s', name);\n    return profile.transform(config);\n  }, config);\n}\n\nfunction createApi({\n  add,\n  addAll,\n  apiManager,\n  constructorOptions,\n  block,\n  blockService,\n  dag,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  object,\n  peerId,\n  pin,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const notStarted = async () => {\n    // eslint-disable-line require-await\n    throw new NotStartedError();\n  };\n\n  const resolve = Components.resolve({\n    ipld\n  });\n  const refs = Components.refs({\n    ipld,\n    resolve,\n    preload\n  });\n  refs.local = Components.refs.local({\n    repo\n  });\n  const api = {\n    add,\n    addAll,\n    bitswap: {\n      stat: notStarted,\n      unwant: notStarted,\n      wantlist: notStarted,\n      wantlistForPeer: notStarted\n    },\n    bootstrap: {\n      add: Components.bootstrap.add({\n        repo\n      }),\n      list: Components.bootstrap.list({\n        repo\n      }),\n      rm: Components.bootstrap.rm({\n        repo\n      })\n    },\n    block,\n    cat: Components.cat({\n      ipld,\n      preload\n    }),\n    config: Components.config({\n      repo\n    }),\n    dag,\n    dns: Components.dns(),\n    files: Components.files({\n      ipld,\n      block,\n      blockService,\n      repo,\n      preload,\n      options: constructorOptions\n    }),\n    get: Components.get({\n      ipld,\n      preload\n    }),\n    id: Components.id({\n      peerId\n    }),\n    init: async () => {\n      throw new AlreadyInitializedError();\n    },\n    // eslint-disable-line require-await\n    isOnline: Components.isOnline({}),\n    key: {\n      export: Components.key.export({\n        keychain\n      }),\n      gen: Components.key.gen({\n        keychain\n      }),\n      import: Components.key.import({\n        keychain\n      }),\n      info: Components.key.info({\n        keychain\n      }),\n      list: Components.key.list({\n        keychain\n      }),\n      rename: Components.key.rename({\n        keychain\n      }),\n      rm: Components.key.rm({\n        keychain\n      })\n    },\n    ls: Components.ls({\n      ipld,\n      preload\n    }),\n    object,\n    pin,\n    refs,\n    repo: {\n      gc: Components.repo.gc({\n        gcLock,\n        pin,\n        pinManager,\n        refs,\n        repo\n      }),\n      stat: Components.repo.stat({\n        repo\n      }),\n      version: Components.repo.version({\n        repo\n      })\n    },\n    resolve,\n    start: Components.start({\n      apiManager,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    }),\n    stats: {\n      bitswap: notStarted,\n      bw: notStarted,\n      repo: Components.repo.stat({\n        repo\n      })\n    },\n    stop: () => {},\n    swarm: {\n      addrs: notStarted,\n      connect: notStarted,\n      disconnect: notStarted,\n      localAddrs: Components.swarm.localAddrs({\n        multiaddrs: []\n      }),\n      peers: notStarted\n    },\n    version: Components.version({\n      repo\n    })\n  };\n  return api;\n}","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/init.js"],"names":["log","require","PeerId","uint8ArrayFromString","uint8ArrayToString","mergeOptions","getDefaultConfig","createRepo","mortice","DAGNode","UnixFs","multicodec","AlreadyInitializingError","AlreadyInitializedError","NotStartedError","NotEnabledError","BlockService","Ipld","getDefaultIpldOptions","createPreloader","ERR_REPO_NOT_INITIALIZED","errors","IPNS","OfflineDatastore","initAssets","PinManager","Components","module","exports","apiManager","print","options","constructorOptions","init","cancel","update","pass","config","repo","repoAutoMigrate","path","autoMigrate","silent","isInitialized","closed","open","err","code","allowNew","peerId","keychain","initExistingRepo","initNewRepo","blockService","ipld","preload","start","gcLock","singleProcess","repoOwner","dag","get","resolve","tree","object","data","links","new","patch","addLink","appendData","rmLink","setData","put","stat","pinManager","pinAddAll","pin","addAll","pinRmAll","rmAll","add","ls","rm","block","emptyRepo","emptyDirCid","addEmptyDir","offlineDatastore","ipns","datastore","initializeKeyspace","privKey","toString","api","createApi","initOptions","initializedApi","privateKey","algorithm","bits","profiles","Number","applyProfiles","exists","Error","createPeerId","Identity","PeerID","toB58String","PrivKey","bytes","libp2p","keychainConfig","opts","loadKeychain","set","dek","newConfig","getAll","createFromPrivKey","Keychain","create","keyType","node","marshal","cid","version","format","DAG_PB","hashAlg","SHA2_256","reduce","name","profile","transform","notStarted","refs","local","bitswap","unwant","wantlist","wantlistForPeer","bootstrap","list","cat","dns","files","id","isOnline","key","export","gen","import","info","rename","gc","stats","bw","stop","swarm","addrs","connect","disconnect","localAddrs","multiaddrs","peers"],"mappings":"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","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:components:init')\nconst PeerId = require('peer-id')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\nconst mergeOptions = require('merge-options')\nconst getDefaultConfig = require('../runtime/config-nodejs.js')\nconst createRepo = require('../runtime/repo-nodejs')\nconst mortice = require('mortice')\nconst { DAGNode } = require('ipld-dag-pb')\nconst UnixFs = require('ipfs-unixfs')\nconst multicodec = require('multicodec')\nconst {\n  AlreadyInitializingError,\n  AlreadyInitializedError,\n  NotStartedError,\n  NotEnabledError\n} = require('../errors')\nconst BlockService = require('ipfs-block-service')\nconst Ipld = require('ipld')\nconst getDefaultIpldOptions = require('../runtime/ipld-nodejs')\nconst createPreloader = require('../preload')\nconst { ERR_REPO_NOT_INITIALIZED } = require('ipfs-repo').errors\nconst IPNS = require('../ipns')\nconst OfflineDatastore = require('../ipns/routing/offline-datastore')\nconst initAssets = require('../runtime/init-assets-nodejs')\nconst PinManager = require('./pin/pin-manager')\nconst Components = require('./')\n\nmodule.exports = ({\n  apiManager,\n  print,\n  options: constructorOptions\n}) => async function init (options) {\n  const { cancel } = apiManager.update({ init: () => { throw new AlreadyInitializingError() } })\n\n  try {\n    options = options || {}\n\n    if (typeof constructorOptions.init === 'object') {\n      options = mergeOptions(constructorOptions.init, options)\n    }\n\n    options.pass = options.pass || constructorOptions.pass\n\n    if (constructorOptions.config) {\n      options.config = mergeOptions(options.config, constructorOptions.config)\n    }\n\n    options.repo = options.repo || constructorOptions.repo\n    options.repoAutoMigrate = options.repoAutoMigrate || constructorOptions.repoAutoMigrate\n\n    const repo = typeof options.repo === 'string' || options.repo == null\n      ? createRepo({ path: options.repo, autoMigrate: options.repoAutoMigrate, silent: constructorOptions.silent })\n      : options.repo\n\n    let isInitialized = true\n\n    if (repo.closed) {\n      try {\n        await repo.open()\n      } catch (err) {\n        if (err.code === ERR_REPO_NOT_INITIALIZED) {\n          isInitialized = false\n        } else {\n          throw err\n        }\n      }\n    }\n\n    if (!isInitialized && options.allowNew === false) {\n      throw new NotEnabledError('new repo initialization is not enabled')\n    }\n\n    const { peerId, keychain } = isInitialized\n      ? await initExistingRepo(repo, options)\n      : await initNewRepo(repo, { ...options, print })\n\n    log('peer created')\n\n    const blockService = new BlockService(repo)\n    const ipld = new Ipld(getDefaultIpldOptions(blockService, constructorOptions.ipld, log))\n\n    const preload = createPreloader(constructorOptions.preload)\n    await preload.start()\n\n    // Make sure GC lock is specific to repo, for tests where there are\n    // multiple instances of IPFS\n    const gcLock = mortice(repo.path, { singleProcess: constructorOptions.repoOwner !== false })\n    const dag = {\n      get: Components.dag.get({ ipld, preload }),\n      resolve: Components.dag.resolve({ ipld, preload }),\n      tree: Components.dag.tree({ ipld, preload })\n    }\n    const object = {\n      data: Components.object.data({ ipld, preload }),\n      get: Components.object.get({ ipld, preload }),\n      links: Components.object.links({ dag }),\n      new: Components.object.new({ ipld, preload }),\n      patch: {\n        addLink: Components.object.patch.addLink({ ipld, gcLock, preload }),\n        appendData: Components.object.patch.appendData({ ipld, gcLock, preload }),\n        rmLink: Components.object.patch.rmLink({ ipld, gcLock, preload }),\n        setData: Components.object.patch.setData({ ipld, gcLock, preload })\n      },\n      put: Components.object.put({ ipld, gcLock, preload }),\n      stat: Components.object.stat({ ipld, preload })\n    }\n\n    const pinManager = new PinManager(repo, dag)\n    const pinAddAll = Components.pin.addAll({ pinManager, gcLock, dag })\n    const pinRmAll = Components.pin.rmAll({ pinManager, gcLock, dag })\n\n    const pin = {\n      add: Components.pin.add({ addAll: pinAddAll }),\n      addAll: pinAddAll,\n      ls: Components.pin.ls({ pinManager, dag }),\n      rm: Components.pin.rm({ rmAll: pinRmAll }),\n      rmAll: pinRmAll\n    }\n\n    // FIXME: resolve this circular dependency\n    dag.put = Components.dag.put({ ipld, pin, gcLock, preload })\n\n    const block = {\n      get: Components.block.get({ blockService, preload }),\n      put: Components.block.put({ blockService, pin, gcLock, preload }),\n      rm: Components.block.rm({ blockService, gcLock, pinManager }),\n      stat: Components.block.stat({ blockService, preload })\n    }\n\n    const addAll = Components.addAll({ block, preload, pin, gcLock, options: constructorOptions })\n\n    if (!isInitialized && !options.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const emptyDirCid = await addEmptyDir({ dag, pin })\n\n      log('adding default assets')\n      await initAssets({ addAll, print })\n\n      log('initializing IPNS keyspace')\n      // Setup the offline routing for IPNS.\n      // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n      const offlineDatastore = new OfflineDatastore(repo)\n      const ipns = new IPNS(offlineDatastore, repo.datastore, peerId, keychain, { pass: options.pass })\n      await ipns.initializeKeyspace(peerId.privKey, emptyDirCid.toString())\n    }\n\n    const api = createApi({\n      add: Components.add({ addAll }),\n      addAll,\n      apiManager,\n      constructorOptions,\n      block,\n      blockService,\n      dag,\n      gcLock,\n      initOptions: options,\n      ipld,\n      keychain,\n      object,\n      peerId,\n      pin,\n      pinManager,\n      preload,\n      print,\n      repo\n    })\n\n    apiManager.update(api, () => { throw new NotStartedError() })\n\n    /** @type {typeof api} */\n    const initializedApi = apiManager.api\n    return initializedApi\n  } catch (err) {\n    cancel()\n    throw err\n  }\n}\n\nasync function initNewRepo (repo, { privateKey, emptyRepo, algorithm, bits, profiles, config, pass, print }) {\n  emptyRepo = emptyRepo || false\n  bits = bits == null ? 2048 : Number(bits)\n\n  config = mergeOptions(applyProfiles(profiles, getDefaultConfig()), config)\n\n  // Verify repo does not exist yet\n  const exists = await repo.exists()\n  log('repo exists?', exists)\n\n  if (exists === true) {\n    throw new Error('repo already exists')\n  }\n\n  const peerId = await createPeerId({ privateKey, algorithm, bits, print })\n\n  log('identity generated')\n\n  config.Identity = {\n    PeerID: peerId.toB58String(),\n    PrivKey: uint8ArrayToString(peerId.privKey.bytes, 'base64pad')\n  }\n\n  privateKey = peerId.privKey\n\n  log('peer identity: %s', config.Identity.PeerID)\n\n  await repo.init(config)\n  await repo.open()\n\n  log('repo opened')\n\n  // Create libp2p for Keychain creation\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass\n    }\n  })\n\n  if (libp2p.keychain && libp2p.keychain.opts) {\n    await libp2p.loadKeychain()\n\n    await repo.config.set('Keychain', {\n      dek: libp2p.keychain.opts.dek\n    })\n  }\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\nasync function initExistingRepo (repo, { config: newConfig, profiles, pass }) {\n  let config = await repo.config.getAll()\n\n  if (newConfig || profiles) {\n    if (profiles) {\n      config = applyProfiles(profiles, config)\n    }\n    if (newConfig) {\n      config = mergeOptions(config, newConfig)\n    }\n    await repo.config.set(config)\n  }\n\n  const peerId = await PeerId.createFromPrivKey(config.Identity.PrivKey)\n\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass,\n      ...config.Keychain\n    }\n  })\n\n  libp2p.keychain && await libp2p.loadKeychain()\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\nfunction createPeerId ({ privateKey, algorithm = 'rsa', bits, print }) {\n  if (privateKey) {\n    log('using user-supplied private-key')\n    return typeof privateKey === 'object'\n      ? privateKey\n      : PeerId.createFromPrivKey(uint8ArrayFromString(privateKey, 'base64pad'))\n  } else {\n    // Generate peer identity keypair + transform to desired format + add to config.\n    print('generating %s-bit (rsa only) %s keypair...', bits, algorithm)\n    return PeerId.create({ keyType: algorithm, bits })\n  }\n}\n\nasync function addEmptyDir ({ dag, pin }) {\n  const node = new DAGNode(new UnixFs('directory').marshal())\n  const cid = await dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  })\n  await pin.add(cid)\n\n  return cid\n}\n\n// Apply profiles (e.g. ['server', 'lowpower']) to config\nfunction applyProfiles (profiles, config) {\n  return (profiles || []).reduce((config, name) => {\n    const profile = require('./config').profiles[name]\n    if (!profile) {\n      throw new Error(`Could not find profile with name '${name}'`)\n    }\n    log('applying profile %s', name)\n    return profile.transform(config)\n  }, config)\n}\n\nfunction createApi ({\n  add,\n  addAll,\n  apiManager,\n  constructorOptions,\n  block,\n  blockService,\n  dag,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  object,\n  peerId,\n  pin,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const notStarted = async () => { // eslint-disable-line require-await\n    throw new NotStartedError()\n  }\n\n  const resolve = Components.resolve({ ipld })\n  const refs = Components.refs({ ipld, resolve, preload })\n  refs.local = Components.refs.local({ repo })\n\n  const api = {\n    add,\n    addAll,\n    bitswap: {\n      stat: notStarted,\n      unwant: notStarted,\n      wantlist: notStarted,\n      wantlistForPeer: notStarted\n    },\n    bootstrap: {\n      add: Components.bootstrap.add({ repo }),\n      list: Components.bootstrap.list({ repo }),\n      rm: Components.bootstrap.rm({ repo })\n    },\n    block,\n    cat: Components.cat({ ipld, preload }),\n    config: Components.config({ repo }),\n    dag,\n    dns: Components.dns(),\n    files: Components.files({ ipld, block, blockService, repo, preload, options: constructorOptions }),\n    get: Components.get({ ipld, preload }),\n    id: Components.id({ peerId }),\n    init: async () => { throw new AlreadyInitializedError() }, // eslint-disable-line require-await\n    isOnline: Components.isOnline({}),\n    key: {\n      export: Components.key.export({ keychain }),\n      gen: Components.key.gen({ keychain }),\n      import: Components.key.import({ keychain }),\n      info: Components.key.info({ keychain }),\n      list: Components.key.list({ keychain }),\n      rename: Components.key.rename({ keychain }),\n      rm: Components.key.rm({ keychain })\n    },\n    ls: Components.ls({ ipld, preload }),\n    object,\n    pin,\n    refs,\n    repo: {\n      gc: Components.repo.gc({ gcLock, pin, pinManager, refs, repo }),\n      stat: Components.repo.stat({ repo }),\n      version: Components.repo.version({ repo })\n    },\n    resolve,\n    start: Components.start({\n      apiManager,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    }),\n    stats: {\n      bitswap: notStarted,\n      bw: notStarted,\n      repo: Components.repo.stat({ repo })\n    },\n    stop: () => {},\n    swarm: {\n      addrs: notStarted,\n      connect: notStarted,\n      disconnect: notStarted,\n      localAddrs: Components.swarm.localAddrs({ multiaddrs: [] }),\n      peers: notStarted\n    },\n    version: Components.version({ repo })\n  }\n\n  return api\n}\n"]},"metadata":{},"sourceType":"script"}