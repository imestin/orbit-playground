{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst lp = require('it-length-prefixed');\n\nconst pushable = require('it-pushable');\n\nconst pipe = require('it-pipe');\n\nconst abortable = require('abortable-iterator');\n\nconst AbortController = require('abort-controller');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p-pubsub:peer-streams');\nlog.error = debug('libp2p-pubsub:peer-streams:error');\n/**\n * @callback Sink\n * @param {Uint8Array} source\n * @returns {Promise<Uint8Array>}\n *\n * @typedef {object} DuplexIterableStream\n * @property {Sink} sink\n * @property {() AsyncIterator<Uint8Array>} source\n *\n * @typedef PeerId\n * @type import('peer-id')\n */\n\n/**\n * Thin wrapper around a peer's inbound / outbound pubsub streams\n */\n\nclass PeerStreams extends EventEmitter {\n  /**\n   * @param {object} properties properties of the PeerStreams.\n   * @param {PeerId} properties.id\n   * @param {string} properties.protocol\n   */\n  constructor({\n    id,\n    protocol\n  }) {\n    super();\n    /**\n     * @type {import('peer-id')}\n     */\n\n    this.id = id;\n    /**\n     * Established protocol\n     * @type {string}\n     */\n\n    this.protocol = protocol;\n    /**\n     * The raw outbound stream, as retrieved from conn.newStream\n     * @private\n     * @type {DuplexIterableStream}\n     */\n\n    this._rawOutboundStream = null;\n    /**\n     * The raw inbound stream, as retrieved from the callback from libp2p.handle\n     * @private\n     * @type {DuplexIterableStream}\n     */\n\n    this._rawInboundStream = null;\n    /**\n     * An AbortController for controlled shutdown of the inbound stream\n     * @private\n     * @type {typeof AbortController}\n     */\n\n    this._inboundAbortController = null;\n    /**\n     * Write stream -- its preferable to use the write method\n     * @type {import('it-pushable').Pushable<Uint8Array>>}\n     */\n\n    this.outboundStream = null;\n    /**\n     * Read stream\n     * @type {DuplexIterableStream}\n     */\n\n    this.inboundStream = null;\n  }\n  /**\n   * Do we have a connection to read from?\n   *\n   * @type {boolean}\n   */\n\n\n  get isReadable() {\n    return Boolean(this.inboundStream);\n  }\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n\n\n  get isWritable() {\n    return Boolean(this.outboundStream);\n  }\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Uint8Array} data\n   * @returns {void}\n   */\n\n\n  write(data) {\n    if (!this.isWritable) {\n      const id = this.id.toB58String();\n      throw new Error('No writable connection to ' + id);\n    }\n\n    this.outboundStream.push(data);\n  }\n  /**\n   * Attach a raw inbound stream and setup a read stream\n   *\n   * @param {DuplexIterableStream} stream\n   * @returns {void}\n   */\n\n\n  attachInboundStream(stream) {\n    // Create and attach a new inbound stream\n    // The inbound stream is:\n    // - abortable, set to only return on abort, rather than throw\n    // - transformed with length-prefix transform\n    this._inboundAbortController = new AbortController();\n    this._rawInboundStream = stream;\n    this.inboundStream = abortable(pipe(this._rawInboundStream, lp.decode()), this._inboundAbortController.signal, {\n      returnOnAbort: true\n    });\n    this.emit('stream:inbound');\n  }\n  /**\n   * Attach a raw outbound stream and setup a write stream\n   *\n   * @param {Stream} stream\n   * @returns {Promise<void>}\n   */\n\n\n  async attachOutboundStream(stream) {\n    // If an outbound stream already exists,\n    // gently close it\n    const _prevStream = this.outboundStream;\n\n    if (_prevStream) {\n      // End the stream without emitting a close event\n      await this.outboundStream.end(false);\n    }\n\n    this._rawOutboundStream = stream;\n    this.outboundStream = pushable({\n      onEnd: shouldEmit => {\n        // close writable side of the stream\n        this._rawOutboundStream.reset && this._rawOutboundStream.reset();\n        this._rawOutboundStream = null;\n        this.outboundStream = null;\n\n        if (shouldEmit !== false) {\n          this.emit('close');\n        }\n      }\n    });\n    pipe(this.outboundStream, lp.encode(), this._rawOutboundStream).catch(err => {\n      log.error(err);\n    }); // Only emit if the connection is new\n\n    if (!_prevStream) {\n      this.emit('stream:outbound');\n    }\n  }\n  /**\n   * Closes the open connection to peer\n   * @returns {void}\n   */\n\n\n  close() {\n    // End the outbound stream\n    if (this.outboundStream) {\n      this.outboundStream.end();\n    } // End the inbound stream\n\n\n    if (this.inboundStream) {\n      this._inboundAbortController.abort();\n    }\n\n    this._rawOutboundStream = null;\n    this.outboundStream = null;\n    this._rawInboundStream = null;\n    this.inboundStream = null;\n    this.emit('close');\n  }\n\n}\n\nmodule.exports = PeerStreams;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/libp2p-gossipsub/node_modules/libp2p-interfaces/src/pubsub/peer-streams.js"],"names":["EventEmitter","require","lp","pushable","pipe","abortable","AbortController","debug","log","error","PeerStreams","constructor","id","protocol","_rawOutboundStream","_rawInboundStream","_inboundAbortController","outboundStream","inboundStream","isReadable","Boolean","isWritable","write","data","toB58String","Error","push","attachInboundStream","stream","decode","signal","returnOnAbort","emit","attachOutboundStream","_prevStream","end","onEnd","shouldEmit","reset","encode","catch","err","close","abort","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\n\nconst lp = require('it-length-prefixed')\nconst pushable = require('it-pushable')\nconst pipe = require('it-pipe')\nconst abortable = require('abortable-iterator')\nconst AbortController = require('abort-controller')\nconst debug = require('debug')\n\nconst log = debug('libp2p-pubsub:peer-streams')\nlog.error = debug('libp2p-pubsub:peer-streams:error')\n\n/**\n * @callback Sink\n * @param {Uint8Array} source\n * @returns {Promise<Uint8Array>}\n *\n * @typedef {object} DuplexIterableStream\n * @property {Sink} sink\n * @property {() AsyncIterator<Uint8Array>} source\n *\n * @typedef PeerId\n * @type import('peer-id')\n */\n\n/**\n * Thin wrapper around a peer's inbound / outbound pubsub streams\n */\nclass PeerStreams extends EventEmitter {\n  /**\n   * @param {object} properties properties of the PeerStreams.\n   * @param {PeerId} properties.id\n   * @param {string} properties.protocol\n   */\n  constructor ({ id, protocol }) {\n    super()\n\n    /**\n     * @type {import('peer-id')}\n     */\n    this.id = id\n    /**\n     * Established protocol\n     * @type {string}\n     */\n    this.protocol = protocol\n    /**\n     * The raw outbound stream, as retrieved from conn.newStream\n     * @private\n     * @type {DuplexIterableStream}\n     */\n    this._rawOutboundStream = null\n    /**\n     * The raw inbound stream, as retrieved from the callback from libp2p.handle\n     * @private\n     * @type {DuplexIterableStream}\n     */\n    this._rawInboundStream = null\n    /**\n     * An AbortController for controlled shutdown of the inbound stream\n     * @private\n     * @type {typeof AbortController}\n     */\n    this._inboundAbortController = null\n    /**\n     * Write stream -- its preferable to use the write method\n     * @type {import('it-pushable').Pushable<Uint8Array>>}\n     */\n    this.outboundStream = null\n    /**\n     * Read stream\n     * @type {DuplexIterableStream}\n     */\n    this.inboundStream = null\n  }\n\n  /**\n   * Do we have a connection to read from?\n   *\n   * @type {boolean}\n   */\n  get isReadable () {\n    return Boolean(this.inboundStream)\n  }\n\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n  get isWritable () {\n    return Boolean(this.outboundStream)\n  }\n\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Uint8Array} data\n   * @returns {void}\n   */\n  write (data) {\n    if (!this.isWritable) {\n      const id = this.id.toB58String()\n      throw new Error('No writable connection to ' + id)\n    }\n\n    this.outboundStream.push(data)\n  }\n\n  /**\n   * Attach a raw inbound stream and setup a read stream\n   *\n   * @param {DuplexIterableStream} stream\n   * @returns {void}\n   */\n  attachInboundStream (stream) {\n    // Create and attach a new inbound stream\n    // The inbound stream is:\n    // - abortable, set to only return on abort, rather than throw\n    // - transformed with length-prefix transform\n    this._inboundAbortController = new AbortController()\n    this._rawInboundStream = stream\n    this.inboundStream = abortable(\n      pipe(\n        this._rawInboundStream,\n        lp.decode()\n      ),\n      this._inboundAbortController.signal,\n      { returnOnAbort: true }\n    )\n\n    this.emit('stream:inbound')\n  }\n\n  /**\n   * Attach a raw outbound stream and setup a write stream\n   *\n   * @param {Stream} stream\n   * @returns {Promise<void>}\n   */\n  async attachOutboundStream (stream) {\n    // If an outbound stream already exists,\n    // gently close it\n    const _prevStream = this.outboundStream\n    if (_prevStream) {\n      // End the stream without emitting a close event\n      await this.outboundStream.end(false)\n    }\n\n    this._rawOutboundStream = stream\n    this.outboundStream = pushable({\n      onEnd: (shouldEmit) => {\n        // close writable side of the stream\n        this._rawOutboundStream.reset && this._rawOutboundStream.reset()\n        this._rawOutboundStream = null\n        this.outboundStream = null\n        if (shouldEmit !== false) {\n          this.emit('close')\n        }\n      }\n    })\n\n    pipe(\n      this.outboundStream,\n      lp.encode(),\n      this._rawOutboundStream\n    ).catch(err => {\n      log.error(err)\n    })\n\n    // Only emit if the connection is new\n    if (!_prevStream) {\n      this.emit('stream:outbound')\n    }\n  }\n\n  /**\n   * Closes the open connection to peer\n   * @returns {void}\n   */\n  close () {\n    // End the outbound stream\n    if (this.outboundStream) {\n      this.outboundStream.end()\n    }\n    // End the inbound stream\n    if (this.inboundStream) {\n      this._inboundAbortController.abort()\n    }\n\n    this._rawOutboundStream = null\n    this.outboundStream = null\n    this._rawInboundStream = null\n    this.inboundStream = null\n    this.emit('close')\n  }\n}\n\nmodule.exports = PeerStreams\n"]},"metadata":{},"sourceType":"script"}