{"ast":null,"code":"var _jsxFileName = \"/home/user/orbit-playground/music-app/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nconst Ipfs = require('ipfs');\n\nconst OrbitDB = require('orbit-db');\n/*\ntry {\n  // Ipfs and OrbitDB wouldn't be global.\n} catch(e) {\n  console.log(\"Error: \", e);\n}\n*/\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n} // This will create an IPFS node and an OrbitDB database when new instance is created\n\n\nclass NewPiecePlease {\n  constructor(IPFS, OrbitDB) {\n    this.OrbitDB = OrbitDB;\n\n    (async () => {\n      console.log(\"IPFS object: \", IPFS);\n      this.node = await IPFS.create(); //this.node.on(\"error\", (e) => { throw (e) })\n      //this.node.on(\"ready\", this._init.bind(this))\n\n      this._init.bind(this);\n\n      this._init();\n    })();\n  }\n\n  async _init() {\n    this.orbitdb = await this.OrbitDB.createInstance(this.node);\n    this.defaultOptions = {\n      accessController: {\n        write: [this.orbitdb.identity.publicKey]\n      }\n    };\n    const docStoreOptions = { ...this.defaultOptions,\n      indexBy: 'hash'\n    };\n    this.pieces = await this.orbitdb.docstore('pieces', docStoreOptions); //console.log(\"ID\", this.pieces.id);\n    //this.onready();\n  }\n\n} // This is exporting the class\n\n\ntry {\n  module.exports = exports = new NewPiecePlease(Ipfs, OrbitDB);\n} catch (e) {\n  window.NPP = new NewPiecePlease(window.IPFS, window.OrbitDB);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      NPP: undefined,\n      DB_ID: undefined\n    };\n  }\n\n  componentDidMount() {\n    // Creating database instance\n    this.setState((state, props) => {\n      return {\n        NPP: new NewPiecePlease(Ipfs, OrbitDB)\n      };\n    });\n    console.log(\"Database instance:\", this.state.NPP); //console.log(\"Table ID: \", this.state.NPP.pieces);\n  }\n\n  componentDidUpdate() {\n    this.setState((state, props) => {\n      DB_ID: this.state.NPP.pieces.id;\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, \"This is an OrbitDB test.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, DB_ID)));\n  }\n\n}\n\nexport default App;\n;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/src/App.js"],"names":["React","Ipfs","require","OrbitDB","sleep","ms","Promise","resolve","setTimeout","NewPiecePlease","constructor","IPFS","console","log","node","create","_init","bind","orbitdb","createInstance","defaultOptions","accessController","write","identity","publicKey","docStoreOptions","indexBy","pieces","docstore","module","exports","e","window","NPP","App","Component","props","state","undefined","DB_ID","componentDidMount","setState","componentDidUpdate","id","render","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst Ipfs = require('ipfs');\nconst OrbitDB = require('orbit-db');\n\n/*\ntry {\n  // Ipfs and OrbitDB wouldn't be global.\n} catch(e) {\n  console.log(\"Error: \", e);\n}\n*/\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// This will create an IPFS node and an OrbitDB database when new instance is created\nclass NewPiecePlease {\n  constructor(IPFS, OrbitDB) {\n    this.OrbitDB = OrbitDB;\n\n    (async () => {\n      console.log(\"IPFS object: \", IPFS)\n      this.node = await IPFS.create();\n\n      //this.node.on(\"error\", (e) => { throw (e) })\n      //this.node.on(\"ready\", this._init.bind(this))\n      this._init.bind(this);\n      this._init();\n    })();\n  }\n\n  async _init() {\n    this.orbitdb = await this.OrbitDB.createInstance(this.node);\n    this.defaultOptions = { accessController: { write: [this.orbitdb.identity.publicKey] }}\n    const docStoreOptions = {\n      ...this.defaultOptions,\n      indexBy: 'hash',\n    }\n    this.pieces = await this.orbitdb.docstore('pieces', docStoreOptions);\n    //console.log(\"ID\", this.pieces.id);\n    //this.onready();\n  }\n}\n\n// This is exporting the class\ntry {\n  module.exports = exports = new NewPiecePlease(Ipfs, OrbitDB);\n} catch (e) {\n  window.NPP = new NewPiecePlease(window.IPFS, window.OrbitDB);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      NPP: undefined,\n      DB_ID: undefined,\n    }\n  }\n  componentDidMount() {\n    // Creating database instance\n    this.setState((state, props) => {\n      return {\n        NPP: new NewPiecePlease(Ipfs, OrbitDB),\n      }\n    });\n    console.log(\"Database instance:\", this.state.NPP);\n    //console.log(\"Table ID: \", this.state.NPP.pieces);\n  }\n\n  componentDidUpdate() {\n    this.setState((state, props) => {\n      DB_ID: this.state.NPP.pieces.id\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            This is an OrbitDB test.\n          </p>\n          <p>{DB_ID}</p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n;"]},"metadata":{},"sourceType":"module"}