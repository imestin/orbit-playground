{"ast":null,"code":"'use strict';\n\nconst Big = require('bignumber.js').default;\n\nconst CID = require('cids');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n/**\n * @typedef {object} BitswapStats - An object that contains information about the bitswap agent\n * @property {number} provideBufLen - an integer\n * @property {import('cids')[]} wantlist\n * @property {string[]} peers - array of peer IDs as Strings\n * @property {Big} blocksReceived\n * @property {Big} dataReceived\n * @property {Big} blocksSent\n * @property {Big} dataSent\n * @property {Big} dupBlksReceived\n * @property {Big} dupDataReceived\n */\n\n/**\n * Show diagnostic information on the bitswap agent.\n * @template {Record<string, any>} ExtraOptions\n * @callback Stat\n * @param {import('../../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<BitswapStats>}\n */\n\n\nmodule.exports = ({\n  bitswap\n}) => {\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * @type {Stat<{}>}\n   */\n  async function stat(options) {\n    // eslint-disable-line require-await, @typescript-eslint/no-unused-vars\n    const snapshot = bitswap.stat().snapshot;\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: new Big(snapshot.blocksReceived),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => new CID(id.toB58String())),\n      dupBlksReceived: new Big(snapshot.dupBlksReceived),\n      dupDataReceived: new Big(snapshot.dupDataReceived),\n      dataReceived: new Big(snapshot.dataReceived),\n      blocksSent: new Big(snapshot.blocksSent),\n      dataSent: new Big(snapshot.dataSent)\n    };\n  }\n\n  return withTimeoutOption(stat);\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/bitswap/stat.js"],"names":["Big","require","default","CID","withTimeoutOption","module","exports","bitswap","stat","options","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","wantlist","Array","from","getWantlist","map","e","cid","peers","id","toB58String","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,OAApC;;AACA,MAAMC,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAwBH,OAAO,CAAC,aAAD,CAArC;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;;AAQAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC;;AACA;;;AAGA,iBAAeC,IAAf,CAAqBC,OAArB,EAA8B;AAAE;AAC9B,UAAMC,QAAQ,GAAGH,OAAO,CAACC,IAAR,GAAeE,QAAhC;AAEA,WAAO;AACLC,MAAAA,aAAa,EAAEC,QAAQ,CAACF,QAAQ,CAACG,oBAAT,CAA8BC,QAA9B,EAAD,CADlB;AAELC,MAAAA,cAAc,EAAE,IAAIf,GAAJ,CAAQU,QAAQ,CAACK,cAAjB,CAFX;AAGLC,MAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWX,OAAO,CAACY,WAAR,EAAX,EAAkCC,GAAlC,CAAsCC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAhD,CAHL;AAILC,MAAAA,KAAK,EAAEhB,OAAO,CAACgB,KAAR,GAAgBH,GAAhB,CAAoBI,EAAE,IAAI,IAAIrB,GAAJ,CAAQqB,EAAE,CAACC,WAAH,EAAR,CAA1B,CAJF;AAKLC,MAAAA,eAAe,EAAE,IAAI1B,GAAJ,CAAQU,QAAQ,CAACgB,eAAjB,CALZ;AAMLC,MAAAA,eAAe,EAAE,IAAI3B,GAAJ,CAAQU,QAAQ,CAACiB,eAAjB,CANZ;AAOLC,MAAAA,YAAY,EAAE,IAAI5B,GAAJ,CAAQU,QAAQ,CAACkB,YAAjB,CAPT;AAQLC,MAAAA,UAAU,EAAE,IAAI7B,GAAJ,CAAQU,QAAQ,CAACmB,UAAjB,CARP;AASLC,MAAAA,QAAQ,EAAE,IAAI9B,GAAJ,CAAQU,QAAQ,CAACoB,QAAjB;AATL,KAAP;AAWD;;AAED,SAAO1B,iBAAiB,CAACI,IAAD,CAAxB;AACD,CAtBD","sourcesContent":["'use strict'\n\nconst Big = require('bignumber.js').default\nconst CID = require('cids')\nconst { withTimeoutOption } = require('../../utils')\n\n/**\n * @typedef {object} BitswapStats - An object that contains information about the bitswap agent\n * @property {number} provideBufLen - an integer\n * @property {import('cids')[]} wantlist\n * @property {string[]} peers - array of peer IDs as Strings\n * @property {Big} blocksReceived\n * @property {Big} dataReceived\n * @property {Big} blocksSent\n * @property {Big} dataSent\n * @property {Big} dupBlksReceived\n * @property {Big} dupDataReceived\n */\n\n/**\n * Show diagnostic information on the bitswap agent.\n * @template {Record<string, any>} ExtraOptions\n * @callback Stat\n * @param {import('../../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<BitswapStats>}\n */\n\nmodule.exports = ({ bitswap }) => {\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * @type {Stat<{}>}\n   */\n  async function stat (options) { // eslint-disable-line require-await, @typescript-eslint/no-unused-vars\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: new Big(snapshot.blocksReceived),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => new CID(id.toB58String())),\n      dupBlksReceived: new Big(snapshot.dupBlksReceived),\n      dupDataReceived: new Big(snapshot.dupDataReceived),\n      dataReceived: new Big(snapshot.dataReceived),\n      blocksSent: new Big(snapshot.blocksSent),\n      dataSent: new Big(snapshot.dataSent)\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"]},"metadata":{},"sourceType":"script"}