{"ast":null,"code":"'use strict';\n\nconst Store = require('orbit-db-store');\n\nconst KeyValueIndex = require('./KeyValueIndex');\n\nclass KeyValueStore extends Store {\n  constructor(ipfs, id, dbname, options) {\n    let opts = Object.assign({}, {\n      Index: KeyValueIndex\n    });\n    Object.assign(opts, options);\n    super(ipfs, id, dbname, opts);\n    this._type = 'keyvalue';\n  }\n\n  get all() {\n    return this._index._index;\n  }\n\n  get(key) {\n    return this._index.get(key);\n  }\n\n  set(key, data, options = {}) {\n    return this.put(key, data, options);\n  }\n\n  put(key, data, options = {}) {\n    return this._addOperation({\n      op: 'PUT',\n      key: key,\n      value: data\n    }, options);\n  }\n\n  del(key, options = {}) {\n    return this._addOperation({\n      op: 'DEL',\n      key: key,\n      value: null\n    }, options);\n  }\n\n}\n\nmodule.exports = KeyValueStore;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app-react/node_modules/orbit-db-kvstore/src/KeyValueStore.js"],"names":["Store","require","KeyValueIndex","KeyValueStore","constructor","ipfs","id","dbname","options","opts","Object","assign","Index","_type","all","_index","get","key","set","data","put","_addOperation","op","value","del","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA7B;;AAEA,MAAME,aAAN,SAA4BH,KAA5B,CAAkC;AAChCI,EAAAA,WAAW,CAACC,IAAD,EAAOC,EAAP,EAAWC,MAAX,EAAmBC,OAAnB,EAA4B;AACrC,QAAIC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEC,MAAAA,KAAK,EAAEV;AAAT,KAAlB,CAAX;AACAQ,IAAAA,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoBD,OAApB;AACA,UAAMH,IAAN,EAAYC,EAAZ,EAAgBC,MAAhB,EAAwBE,IAAxB;AACA,SAAKI,KAAL,GAAa,UAAb;AACD;;AAED,MAAIC,GAAJ,GAAW;AACT,WAAO,KAAKC,MAAL,CAAYA,MAAnB;AACD;;AAEDC,EAAAA,GAAG,CAAEC,GAAF,EAAO;AACR,WAAO,KAAKF,MAAL,CAAYC,GAAZ,CAAgBC,GAAhB,CAAP;AACD;;AAEDC,EAAAA,GAAG,CAAED,GAAF,EAAOE,IAAP,EAAaX,OAAO,GAAG,EAAvB,EAA2B;AAC5B,WAAO,KAAKY,GAAL,CAASH,GAAT,EAAcE,IAAd,EAAoBX,OAApB,CAAP;AACD;;AAEDY,EAAAA,GAAG,CAAEH,GAAF,EAAOE,IAAP,EAAaX,OAAO,GAAG,EAAvB,EAA2B;AAC5B,WAAO,KAAKa,aAAL,CAAmB;AACxBC,MAAAA,EAAE,EAAE,KADoB;AAExBL,MAAAA,GAAG,EAAEA,GAFmB;AAGxBM,MAAAA,KAAK,EAAEJ;AAHiB,KAAnB,EAIJX,OAJI,CAAP;AAKD;;AAEDgB,EAAAA,GAAG,CAAEP,GAAF,EAAOT,OAAO,GAAG,EAAjB,EAAqB;AACtB,WAAO,KAAKa,aAAL,CAAmB;AACxBC,MAAAA,EAAE,EAAE,KADoB;AAExBL,MAAAA,GAAG,EAAEA,GAFmB;AAGxBM,MAAAA,KAAK,EAAE;AAHiB,KAAnB,EAIJf,OAJI,CAAP;AAKD;;AAlC+B;;AAqClCiB,MAAM,CAACC,OAAP,GAAiBvB,aAAjB","sourcesContent":["'use strict'\n\nconst Store = require('orbit-db-store')\nconst KeyValueIndex = require('./KeyValueIndex')\n\nclass KeyValueStore extends Store {\n  constructor(ipfs, id, dbname, options) {\n    let opts = Object.assign({}, { Index: KeyValueIndex })\n    Object.assign(opts, options)\n    super(ipfs, id, dbname, opts)\n    this._type = 'keyvalue'\n  }\n\n  get all () {\n    return this._index._index\n  }\n\n  get (key) {\n    return this._index.get(key)\n  }\n\n  set (key, data, options = {}) {\n    return this.put(key, data, options)\n  }\n\n  put (key, data, options = {}) {\n    return this._addOperation({\n      op: 'PUT',\n      key: key,\n      value: data\n    }, options)\n  }\n\n  del (key, options = {}) {\n    return this._addOperation({\n      op: 'DEL',\n      key: key,\n      value: null\n    }, options)\n  }\n}\n\nmodule.exports = KeyValueStore\n"]},"metadata":{},"sourceType":"script"}