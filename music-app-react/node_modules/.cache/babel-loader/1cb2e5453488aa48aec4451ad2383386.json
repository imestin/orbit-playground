{"ast":null,"code":"var _jsxFileName = \"/home/user/orbit-playground/music-app/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nconst {\n  globSource\n} = require('ipfs');\n\nconst Ipfs = require('ipfs');\n\nconst OrbitDB = require('orbit-db');\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n} // This will create an IPFS node and an OrbitDB database when new instance is created\n\n\nclass NewPiecePlease {\n  constructor(orbitdb, node, piecesDb, user) {\n    this.orbitdb = orbitdb;\n    this.node = node;\n    this.piecesDb = piecesDb;\n    this.user = user;\n    this.ready = false;\n  } // This will create OrbitDB instance, and orbitdb folder.\n\n\n  static async create(IPFS, OrbitDB) {\n    const node = await IPFS.create({\n      repo: \"./ipfs\"\n    });\n    const peerInfo = await node.id();\n    const orbitdb = await OrbitDB.createInstance(node);\n    console.log(\"OrbitDB instance created!\"); //orbitdb.identity.publicKey\n\n    const defaultOptions = {\n      accessController: {\n        write: [orbitdb.identity.id]\n      }\n    };\n    console.log(\"orbitdb.identity.publicKey: \", orbitdb.identity.publicKey);\n    const docStoreOptions = { ...defaultOptions,\n      indexBy: 'hash'\n    };\n    console.log(\"docStoreOptions\", docStoreOptions);\n    const piecesDb = await orbitdb.docstore('pieces', docStoreOptions);\n    await piecesDb.load();\n    const user = await orbitdb.kvstore(\"user\", this.defaultOptions);\n    await user.load();\n    await user.set('pieces', piecesDb.id); // Random user id\n\n    const fixtureData = {\n      \"username\": Math.floor(Math.random() * 1000000),\n      \"pieces\": piecesDb.id,\n      \"nodeId\": peerInfo.id\n    };\n    const fixtureKeys = Object.keys(fixtureData);\n\n    for (let i in fixtureKeys) {\n      let key = fixtureKeys[i];\n      console.log(this);\n      if (!user.get(key)) await user.set(key, fixtureData[key]);\n    }\n\n    console.log(\"End of create function.\");\n    return new NewPiecePlease(orbitdb, node, piecesDb, user);\n  } // Because create is not working because of static\n\n\n  createEvents() {\n    this.node.libp2p.on(\"peer:connect\", this.handlePeerConnected.bind(this));\n    this.ready = true;\n    console.log(\"Event(s) created.\");\n  }\n\n  async addNewPiece(hash, instrument = \"Piano\") {\n    try {\n      const existingPiece = this.piecesDb.get(hash);\n\n      if (existingPiece[0]) {\n        const cid = await this.updatePieceByHash(hash, instrument);\n        return cid;\n      }\n\n      const dbName = \"counter.\" + hash.substr(20, 20);\n      const counterDb = await this.orbitdb.counter(dbName, this.defaultOptions);\n      const cid = await this.piecesDb.put({\n        hash: hash,\n        instrument: instrument,\n        counter: counterDb.id\n      });\n      return cid;\n    } catch (err) {\n      console.error(\"Error while adding new piece\");\n      console.error(err);\n    }\n  }\n\n  async updatePieceByHash(hash, instrument = \"Piano\") {\n    try {\n      let piece = await this.getPieceByHash(hash);\n      piece.instrument = instrument;\n      const cid = await this.piecesDb.put(piece);\n      return cid;\n    } catch (err) {\n      console.error(\"Error in updatePieceByHash\");\n      console.error(err);\n    }\n  }\n\n  async deletePieceByHash(hash) {\n    const cid = await this.piecesDb.del(hash);\n    return cid;\n  }\n\n  getAllPiece() {\n    const pieces = this.piecesDb.get('');\n    return pieces;\n  }\n\n  getPieceByHash(hash) {\n    const singlePiece = this.piecesDb.get(hash)[0];\n    return singlePiece;\n  }\n\n  getByInstrument(instrument) {\n    return this.piecesDb.query(piece => piece.instrument === instrument);\n  }\n\n  async uploadFileToIpfs(fileName) {\n    console.log(\"fileName is: \", fileName); //console.log(this.node)\n\n    const file = await this.node.add(globSource('./NOTES.md'), {\n      recursive: true\n    });\n    return file.cid.toString();\n  }\n\n  async getPracticeCount(piece) {\n    const counter = await this.orbitdb.counter(piece.counter);\n    await counter.load();\n    return counter.value;\n  }\n\n  async incrementPracticeCounter(piece) {\n    const counter = await this.orbitdb.counter(piece.counter);\n    const cid = await counter.inc();\n    return cid;\n  }\n\n  async deleteProfileField(key) {\n    const cid = await this.user.del(key);\n    return cid;\n  }\n\n  getAllProfileFields() {\n    return this.user.all;\n  }\n\n  getProfileField(key) {\n    return this.user.get(key);\n  }\n\n  async updateProfile(key, value) {\n    const cid = await this.user.set(key, value);\n    return cid;\n  }\n\n  async getIpfsPeers() {\n    const peers = await this.node.swarm.peers();\n    return peers;\n  }\n\n  async connectToPeer(multiaddr, protocol = \"/p2p-circuit/ipfs/\") {\n    try {\n      console.log(\"swarm.connect: \", protocol + multiaddr);\n      await this.node.swarm.connect(protocol + multiaddr);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  handlePeerConnected(ipfsPeer) {\n    console.log(\"CONNECTED! CONNECTED!\");\n    const ipfsId = ipfsPeer.id._idB58String;\n    console.log(\"ipfsId: \", ipfsId);\n    if (this.onpeerconnect) this.onpeerconnect(ipfsId);\n  }\n\n} // This is exporting the class\n\n\ntry {\n  module.exports = exports = new NewPiecePlease(Ipfs, OrbitDB);\n} catch (e) {\n  window.NPP = new NewPiecePlease(window.IPFS, window.OrbitDB);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      NPP: undefined,\n      DB_ID: null\n    };\n  }\n\n  componentDidMount() {\n    // Creating database instance\n    (async () => {\n      this.setState({\n        NPP: await NewPiecePlease.create(Ipfs, OrbitDB)\n      });\n    })(); // Object is undefined until constructor finishes (factory function)\n    // We can not test is-ready this way, because parameter does not exist yet.\n    //console.log(this.state.NPP.ready)\n\n  }\n\n  componentDidUpdate() {\n    /*this.setState((state, props) => {\n      return {\n        DB_ID: this.state.NPP.pieces.id,\n      }\n    });*/\n    (async () => {\n      // Temp solution...\n      let ready = false;\n\n      do {\n        console.log(this.state.NPP);\n\n        if (this.state.NPP) {\n          try {\n            console.log(\"Database instance:\", this.state.NPP);\n            console.log(\"orbitdb: \", this.state.NPP.orbitdb);\n            console.log(\"id: \", this.state.NPP.piecesDb.id);\n            this.state.NPP.createEvents();\n            /** Examples and tests */\n            // Create a new piece\n\n            const newCID = await this.state.NPP.addNewPiece(\"QmNR2n4zywCV61MeMLB6JwPueAPqheqpfiA4fLPMxouEmQ\");\n            console.log(\"CID of new piece: \", newCID); // Get back the new piece\n\n            const newContent = await this.state.NPP.node.dag.get(newCID);\n            console.log(\"newContent.value.payload: \", newContent.value.payload); // Get all\n\n            const allGet = await this.state.NPP.getAllPiece();\n            console.log(\"All pieces: \", allGet); // Get by instrument\n\n            const pianoGet = await this.state.NPP.getByInstrument(\"Piano\");\n            console.log(\"Piano\", pianoGet); // Random piano piece\n\n            const randomPiano = pianoGet[pianoGet.length * Math.random() | 0];\n            console.log(\"Random\", randomPiano); // Update\n\n            const updateCID = await this.state.NPP.updatePieceByHash(\"QmNR2n4zywCV61MeMLB6JwPueAPqheqpfiA4fLPMxouEmQ\", \"Harpsichord\");\n            console.log(\"Updated: \", this.state.NPP.getPieceByHash(\"QmNR2n4zywCV61MeMLB6JwPueAPqheqpfiA4fLPMxouEmQ\")); // Delete\n\n            /*const deleteCID = await NPP.deletePieceByHash(\"123\");\n            const deleteContent = await NPP.node.dag.get(deleteCID);\n            console.log(\"Deleted: \", deleteContent);*/\n            // Upload file to IPFS\n            //const uploadDataCID = await this.state.NPP.uploadFileToIpfs(\"../NOTES.md\");\n            //const uploadOrbitCID = await this.state.NPP.addNewPiece(uploadDataCID, \"Note\");\n            //console.log(\"uploadOrbitCID: \", uploadOrbitCID);\n            // Counter\n\n            const counterCID = await this.state.NPP.addNewPiece(\"QmdzDacgJ9EQF9Z8G3L1fzFwiEu255Nm5WiCey9ntrDPSL\", \"Piano\");\n            const counterContent = await this.state.NPP.node.dag.get(counterCID);\n            console.log(counterContent.value.payload.value); // Increment counter\n\n            const piece = this.state.NPP.getPieceByHash(\"QmdzDacgJ9EQF9Z8G3L1fzFwiEu255Nm5WiCey9ntrDPSL\");\n            const incCID = this.state.NPP.incrementPracticeCounter(piece);\n            const incContent = await this.state.NPP.node.dag.get(incCID);\n            console.log(\"Counter: \", incContent.value.payload); // User profile\n\n            await this.state.NPP.updateProfile(\"username\", \"aphelionz\");\n            let profileFields = this.state.NPP.getAllProfileFields();\n            console.log(\"All profile fields: \", profileFields);\n            await this.state.NPP.deleteProfileField(\"username\"); // Bootstrap list\n\n            const bootstrapList = await this.state.NPP.node.bootstrap.list();\n            console.log(\"Bootstrap list: \", bootstrapList); // Addresses\n\n            const id = await this.state.NPP.node.id();\n            console.log(\"Addresses: \", id.addresses); // Peers\n\n            for (let i = 0; i < 4; i++) {\n              let peers = await this.state.NPP.getIpfsPeers();\n              console.log(\"IPFS peers: \", peers);\n              await sleep(1000);\n            } // onPeerConnect\n\n\n            this.state.NPP.onpeerconnect = console.log;\n            await this.state.NPP.connectToPeer(\"QmWxWkrCcgNBG2uf1HSVAwb9RzcSYYC2d6CRsfJcqrz2FX\");\n            ready = true;\n          } catch (err) {\n            console.log(\"There was an error.\");\n            console.error(err);\n          }\n        } else {\n          console.log(\"Not ready...\");\n          await sleep(1000);\n        }\n      } while (!ready);\n    })();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }\n    }, \"This is an OrbitDB test.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }\n    }, this.state.DB_ID)));\n  }\n\n}\n\nexport default App;\n;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/src/App.js"],"names":["React","globSource","require","Ipfs","OrbitDB","sleep","ms","Promise","resolve","setTimeout","NewPiecePlease","constructor","orbitdb","node","piecesDb","user","ready","create","IPFS","repo","peerInfo","id","createInstance","console","log","defaultOptions","accessController","write","identity","publicKey","docStoreOptions","indexBy","docstore","load","kvstore","set","fixtureData","Math","floor","random","fixtureKeys","Object","keys","i","key","get","createEvents","libp2p","on","handlePeerConnected","bind","addNewPiece","hash","instrument","existingPiece","cid","updatePieceByHash","dbName","substr","counterDb","counter","put","err","error","piece","getPieceByHash","deletePieceByHash","del","getAllPiece","pieces","singlePiece","getByInstrument","query","uploadFileToIpfs","fileName","file","add","recursive","toString","getPracticeCount","value","incrementPracticeCounter","inc","deleteProfileField","getAllProfileFields","all","getProfileField","updateProfile","getIpfsPeers","peers","swarm","connectToPeer","multiaddr","protocol","connect","e","ipfsPeer","ipfsId","_idB58String","onpeerconnect","module","exports","window","NPP","App","Component","props","state","undefined","DB_ID","componentDidMount","setState","componentDidUpdate","newCID","newContent","dag","payload","allGet","pianoGet","randomPiano","length","updateCID","counterCID","counterContent","incCID","incContent","profileFields","bootstrapList","bootstrap","list","addresses","render","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst { globSource } = require('ipfs');\nconst Ipfs = require('ipfs');\nconst OrbitDB = require('orbit-db');\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// This will create an IPFS node and an OrbitDB database when new instance is created\nclass NewPiecePlease {\n  constructor(orbitdb, node, piecesDb, user) {\n      this.orbitdb = orbitdb;\n      this.node = node;\n      this.piecesDb = piecesDb;\n      this.user = user;\n      this.ready = false;\n    }\n\n  // This will create OrbitDB instance, and orbitdb folder.\n  static async create(IPFS, OrbitDB) {\n    const node = await IPFS.create({repo: \"./ipfs\"});\n    const peerInfo = await node.id();\n    const orbitdb = await OrbitDB.createInstance(node);\n    console.log(\"OrbitDB instance created!\");\n    \n    //orbitdb.identity.publicKey\n    const defaultOptions = {\n      accessController: {\n        write: [orbitdb.identity.id]\n      }\n    }\n  \n    console.log(\"orbitdb.identity.publicKey: \", orbitdb.identity.publicKey);\n    const docStoreOptions = { ...defaultOptions, indexBy: 'hash' };\n    console.log(\"docStoreOptions\", docStoreOptions);\n    const piecesDb = await orbitdb.docstore('pieces', docStoreOptions);\n    await piecesDb.load();\n\n    const user = await orbitdb.kvstore(\"user\", this.defaultOptions);\n    await user.load();\n    await user.set('pieces', piecesDb.id);\n\n    // Random user id\n    const fixtureData = {\n        \"username\": Math.floor(Math.random() * 1000000),\n        \"pieces\": piecesDb.id,\n        \"nodeId\": peerInfo.id\n    };\n    const fixtureKeys = Object.keys(fixtureData);\n    for (let i in fixtureKeys) {\n        let key = fixtureKeys[i];\n        console.log(this);\n        if(!user.get(key)) await user.set(key, fixtureData[key]);\n    }\n\n    console.log(\"End of create function.\")\n    return new NewPiecePlease(orbitdb, node, piecesDb, user);\n  }\n  \n  // Because create is not working because of static\n  createEvents() {\n    this.node.libp2p.on(\"peer:connect\", this.handlePeerConnected.bind(this));\n    this.ready = true;\n    console.log(\"Event(s) created.\");\n  }\n\n  async addNewPiece(hash, instrument = \"Piano\") {\n    try {\n        const existingPiece = this.piecesDb.get(hash);\n        if (existingPiece[0]) {\n            const cid = await this.updatePieceByHash(hash, instrument);\n            return cid;\n        }\n\n        const dbName = \"counter.\" +  hash.substr(20,20);\n        const counterDb = await this.orbitdb.counter(dbName, this.defaultOptions);\n\n        const cid = await this.piecesDb.put({\n            hash: hash,\n            instrument: instrument,\n            counter: counterDb.id\n        });\n        return cid; \n\n    } catch (err) {\n        console.error(\"Error while adding new piece\");\n        console.error(err);\n    }\n  }\n\n  async updatePieceByHash(hash, instrument = \"Piano\") {\n    try {\n        let piece = await this.getPieceByHash(hash);\n        piece.instrument = instrument;\n        const cid = await this.piecesDb.put(piece);\n        return cid;\n\n    } catch (err) {\n        console.error(\"Error in updatePieceByHash\");\n        console.error(err);\n    }\n  }\n\n  async deletePieceByHash(hash) {\n    const cid = await this.piecesDb.del(hash);\n    return cid;\n  }\n\n  getAllPiece() {\n    const pieces = this.piecesDb.get('');\n    return pieces;\n  }\n\n  getPieceByHash(hash) {\n    const singlePiece = this.piecesDb.get(hash)[0];\n    return singlePiece;\n  }\n\n  getByInstrument(instrument) {\n    return this.piecesDb.query((piece) => piece.instrument === instrument);\n  }\n\n  async uploadFileToIpfs(fileName) {\n    console.log(\"fileName is: \", fileName);\n    //console.log(this.node)\n    const file = await this.node.add(globSource('./NOTES.md'), {recursive: true});  \n    return (file.cid).toString();\n  }\n\n  async getPracticeCount(piece) {\n    const counter = await this.orbitdb.counter(piece.counter);\n    await counter.load();\n    return counter.value;\n  }\n\n  async incrementPracticeCounter(piece) {\n    const counter = await this.orbitdb.counter(piece.counter);\n    const cid = await counter.inc();\n    return cid;\n  }\n\n  async deleteProfileField(key) {\n    const cid = await this.user.del(key);\n    return cid;\n  }\n\n  getAllProfileFields() {\n    return this.user.all;\n  }\n\n  getProfileField(key) {\n    return this.user.get(key);\n  }\n\n  async updateProfile(key, value) {\n    const cid = await this.user.set(key, value);\n    return cid;\n  }\n\n  async getIpfsPeers() {\n    const peers = await this.node.swarm.peers();\n    return peers;\n  }\n\n  async connectToPeer(multiaddr, protocol =\"/p2p-circuit/ipfs/\") {\n    try {\n        console.log(\"swarm.connect: \", protocol + multiaddr);\n        await this.node.swarm.connect(protocol + multiaddr);\n    } catch (e) {\n        throw(e);\n    }\n  }\n\n  handlePeerConnected(ipfsPeer) {\n    console.log(\"CONNECTED! CONNECTED!\")\n    const ipfsId = ipfsPeer.id._idB58String;\n    console.log(\"ipfsId: \", ipfsId);\n    if (this.onpeerconnect) this.onpeerconnect(ipfsId);\n  }\n}\n\n// This is exporting the class\ntry {\n  module.exports = exports = new NewPiecePlease(Ipfs, OrbitDB);\n} catch (e) {\n  window.NPP = new NewPiecePlease(window.IPFS, window.OrbitDB);\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      NPP: undefined,\n      DB_ID: null,\n    }\n  }\n  componentDidMount() {\n    // Creating database instance\n    (async () => {\n      this.setState({\n        NPP: await NewPiecePlease.create(Ipfs, OrbitDB),\n      })\n    })();\n      \n\n    \n    // Object is undefined until constructor finishes (factory function)\n    // We can not test is-ready this way, because parameter does not exist yet.\n    //console.log(this.state.NPP.ready)\n  }\n  \n  componentDidUpdate() {\n    /*this.setState((state, props) => {\n      return {\n        DB_ID: this.state.NPP.pieces.id,\n      }\n    });*/\n    (async () => {\n      // Temp solution...\n      let ready = false;  \n      do {\n        console.log(this.state.NPP)\n        if (this.state.NPP) {\n          try {\n            console.log(\"Database instance:\", this.state.NPP);\n            console.log(\"orbitdb: \", this.state.NPP.orbitdb);\n            console.log(\"id: \", this.state.NPP.piecesDb.id);\n            this.state.NPP.createEvents();\n\n            /** Examples and tests */\n\n            // Create a new piece\n            const newCID = await this.state.NPP.addNewPiece(\"QmNR2n4zywCV61MeMLB6JwPueAPqheqpfiA4fLPMxouEmQ\");\n            console.log(\"CID of new piece: \", newCID);\n            \n            // Get back the new piece\n            const newContent = await this.state.NPP.node.dag.get(newCID);\n            console.log(\"newContent.value.payload: \", newContent.value.payload);\n\n            // Get all\n            const allGet = await this.state.NPP.getAllPiece();\n            console.log(\"All pieces: \", allGet);\n\n            // Get by instrument\n            const pianoGet = await this.state.NPP.getByInstrument(\"Piano\");\n            console.log(\"Piano\", pianoGet);\n\n            // Random piano piece\n            const randomPiano = pianoGet[pianoGet.length * Math.random() | 0];\n            console.log(\"Random\", randomPiano);\n\n            // Update\n            const updateCID = await this.state.NPP.updatePieceByHash(\"QmNR2n4zywCV61MeMLB6JwPueAPqheqpfiA4fLPMxouEmQ\", \"Harpsichord\");\n            console.log(\"Updated: \", this.state.NPP.getPieceByHash(\"QmNR2n4zywCV61MeMLB6JwPueAPqheqpfiA4fLPMxouEmQ\"));\n\n            // Delete\n            /*const deleteCID = await NPP.deletePieceByHash(\"123\");\n            const deleteContent = await NPP.node.dag.get(deleteCID);\n            console.log(\"Deleted: \", deleteContent);*/\n\n            // Upload file to IPFS\n            //const uploadDataCID = await this.state.NPP.uploadFileToIpfs(\"../NOTES.md\");\n            //const uploadOrbitCID = await this.state.NPP.addNewPiece(uploadDataCID, \"Note\");\n            //console.log(\"uploadOrbitCID: \", uploadOrbitCID);\n\n            // Counter\n            const counterCID = await this.state.NPP.addNewPiece(\"QmdzDacgJ9EQF9Z8G3L1fzFwiEu255Nm5WiCey9ntrDPSL\", \"Piano\");\n            const counterContent = await this.state.NPP.node.dag.get(counterCID);\n            console.log(counterContent.value.payload.value);\n\n            // Increment counter\n            const piece = this.state.NPP.getPieceByHash(\"QmdzDacgJ9EQF9Z8G3L1fzFwiEu255Nm5WiCey9ntrDPSL\");\n            const incCID = this.state.NPP.incrementPracticeCounter(piece);\n            const incContent = await this.state.NPP.node.dag.get(incCID);\n            console.log(\"Counter: \", incContent.value.payload);\n\n            // User profile\n            await this.state.NPP.updateProfile(\"username\", \"aphelionz\");\n            let profileFields = this.state.NPP.getAllProfileFields();\n            console.log(\"All profile fields: \", profileFields);\n            await this.state.NPP.deleteProfileField(\"username\");\n\n            // Bootstrap list\n            const bootstrapList = await this.state.NPP.node.bootstrap.list();\n            console.log(\"Bootstrap list: \", bootstrapList);\n\n            // Addresses\n            const id = await this.state.NPP.node.id();\n            console.log(\"Addresses: \", id.addresses);\n\n            // Peers\n            for (let i = 0; i < 4; i++) {\n              let peers = await this.state.NPP.getIpfsPeers();\n              console.log(\"IPFS peers: \", peers);\n              await sleep(1000);\n            }\n            \n            // onPeerConnect\n            this.state.NPP.onpeerconnect = console.log;\n            await this.state.NPP.connectToPeer(\"QmWxWkrCcgNBG2uf1HSVAwb9RzcSYYC2d6CRsfJcqrz2FX\");\n\n            ready = true;\n          } catch (err) {\n            console.log(\"There was an error.\");\n            console.error(err);\n          }\n        } else {\n          console.log(\"Not ready...\");\n          await sleep(1000);\n        }\n      } while (!ready);\n    })();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            This is an OrbitDB test.\n          </p>\n          <p>{this.state.DB_ID}</p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n;"]},"metadata":{},"sourceType":"module"}