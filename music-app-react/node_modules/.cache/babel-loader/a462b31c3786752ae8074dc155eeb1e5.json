{"ast":null,"code":"/*!\n * bn.js - big numbers for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/bn.js:\n *   Copyright (c) 2015, Fedor Indutny (MIT License).\n *   https://github.com/indutny/bn.js\n *\n * Parts of this software are based on golang/go:\n *   Copyright (c) 2009, The Go Authors. All rights reserved.\n *   https://github.com/golang/go\n *\n * Parts of this software are based on openssl/openssl:\n *   Copyright (c) 1998-2018, The OpenSSL Project (Apache License v2.0).\n *   Copyright (c) 1995-1998, Eric A. Young, Tim J. Hudson. All rights reserved.\n *   https://github.com/openssl/openssl\n *\n * Parts of this software are based on libgmp:\n *   Copyright (c) 1991-1997, 1999-2014, Free Software Foundation, Inc.\n *   https://gmplib.org/\n *\n * Parts of this software are based on v8/v8:\n *   Copyright (c) 2017, The V8 Project Authors (BSD-Style License).\n *   https://github.com/v8/v8\n *\n * Resources:\n *   https://github.com/indutny/bn.js/blob/master/lib/bn.js\n *   https://github.com/indutny/miller-rabin/blob/master/lib/mr.js\n *   https://github.com/golang/go/blob/master/src/math/big/int.go\n *   https://github.com/golang/go/blob/master/src/math/big/nat.go\n *   https://github.com/golang/go/blob/master/src/math/big/prime.go\n *   https://github.com/openssl/openssl/tree/master/crypto/bn\n *   https://github.com/openssl/openssl/blob/master/crypto/bn/bn_kron.c\n *   https://github.com/gnutls/nettle/blob/master/mini-gmp.c\n *   https://github.com/v8/v8/blob/master/src/objects/bigint.cc\n */\n\n/* eslint valid-typeof: \"off\" */\n'use strict';\n\nconst {\n  custom\n} = require('../internal/custom');\n/*\n * Constants\n */\n\n\nconst zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];\nconst groupSizes = [0x00, 0x19, 0x10, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05];\nconst groupBases = [0x00000000, 0x02000000, 0x0290d741, 0x01000000, 0x02e90edd, 0x039aa400, 0x0267bf47, 0x01000000, 0x0290d741, 0x00989680, 0x012959c3, 0x0222c000, 0x03bd7765, 0x0072e440, 0x00adcea1, 0x01000000, 0x01704f61, 0x0206fc40, 0x02cddcf9, 0x03d09000, 0x003e5185, 0x004ea360, 0x006235f7, 0x00798000, 0x009502f9, 0x00b54ba0, 0x00daf26b, 0x01069c00, 0x0138f9ad, 0x0172c9e0, 0x01b4d89f, 0x02000000, 0x025528a1, 0x02b54a20, 0x03216b93, 0x039aa400];\nconst primes = {\n  p192: null,\n  p224: null,\n  p521: null,\n  k256: null,\n  p251: null,\n  p25519: null,\n  p448: null\n};\nconst modes = {\n  NONE: 0,\n  QUO: 1,\n  REM: 2,\n  BOTH: 3,\n  EUCLID: 4,\n  ALL: 7\n};\nconst WND_WIDTH = 4;\nconst WND_SIZE = 1 << WND_WIDTH - 1;\nconst HAS_BIGINT = typeof BigInt === 'function';\n/**\n * BN\n */\n\nclass BN {\n  constructor(num, base, endian) {\n    this.words = [0];\n    this.length = 1;\n    this.negative = 0;\n    this.red = null;\n    this.from(num, base, endian);\n  }\n  /*\n   * Addition Engine\n   */\n\n\n  _iadd(a, b) {\n    let carry = 0;\n    let i = 0; // a.length > b.length\n\n    if (a.length < b.length) [a, b] = [b, a];\n    if (a !== this) this._alloc(a.length);\n\n    for (; i < b.length; i++) {\n      const r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    for (; carry !== 0 && i < a.length; i++) {\n      const r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n\n    if (carry !== 0) {\n      this._alloc(this.length + 1);\n\n      this.words[this.length++] = carry;\n    } else if (a !== this) {\n      // Copy the rest of the words.\n      for (; i < a.length; i++) this.words[i] = a.words[i];\n    } // Note: we shouldn't need to strip here.\n\n\n    return this;\n  }\n\n  _iaddn(num) {\n    this.words[0] += num;\n    if (this.words[0] < 0x4000000) return this; // Carry.\n\n    let i = 0;\n\n    this._alloc(this.length + 1);\n\n    this.words[this.length] = 0;\n\n    for (; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      this.words[i + 1] += 1;\n    }\n\n    this.length = Math.max(this.length, i + 1); // Note: we shouldn't need to strip here.\n\n    return this;\n  }\n  /*\n   * Addition\n   */\n\n\n  iadd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.negative === num.negative) {\n      // x + y == x + y\n      // (-x) + (-y) == -(x + y)\n      this._iadd(this, num);\n    } else {\n      // x + (-y) == x - y == -(y - x)\n      // (-x) + y == y - x == -(x - y)\n      const cmp = this.ucmp(num); // x + (-x) == (-x) + x == 0\n\n      if (cmp === 0) {\n        this.words[0] = 0;\n        this.length = 1;\n        this.negative = 0;\n        return this;\n      }\n\n      if (cmp < 0) {\n        this._isub(num, this);\n\n        this.negative ^= 1;\n      } else {\n        this._isub(this, num);\n      }\n    }\n\n    return this;\n  }\n\n  iaddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    const negative = num < 0 | 0;\n    if (negative) num = -num;\n\n    if (this.negative === negative) {\n      // x + y == x + y\n      // (-x) + (-y) == -(x + y)\n      this._iaddn(num);\n    } else {\n      // x + (-y) == x - y == -(y - x)\n      // (-x) + y == y - x == -(x - y)\n      if (this.length === 1 && this.words[0] < num) {\n        this.words[0] = num - this.words[0];\n        this.negative ^= 1;\n      } else {\n        this._isubn(num);\n      }\n    }\n\n    return this;\n  }\n\n  add(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    if (num.length > this.length) return num.clone().iadd(this);\n    return this.clone().iadd(num);\n  }\n\n  addn(num) {\n    return this.clone().iaddn(num);\n  }\n  /*\n   * Subtraction Engine\n   */\n\n\n  _isub(a, b) {\n    let carry = 0;\n    let i = 0; // a > b\n\n    assert(a.length >= b.length);\n    if (a !== this) this._alloc(a.length);\n\n    for (; i < b.length; i++) {\n      const r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    for (; carry !== 0 && i < a.length; i++) {\n      const r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    assert(carry === 0); // Copy rest of the words.\n\n    if (a !== this) {\n      for (; i < a.length; i++) this.words[i] = a.words[i];\n    }\n\n    this.length = Math.max(this.length, i);\n    return this._strip();\n  }\n\n  _isubn(num) {\n    this.words[0] -= num;\n    if (this.words[0] >= 0) return this._normalize();\n    assert(this.length !== 1); // Carry.\n\n    this._alloc(this.length + 1);\n\n    for (let i = 0; i < this.length && this.words[i] < 0; i++) {\n      this.words[i] += 0x4000000;\n      this.words[i + 1] -= 1;\n    }\n\n    this.words[this.length] = 0;\n    return this._strip();\n  }\n  /*\n   * Subtraction\n   */\n\n\n  isub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.negative !== num.negative) {\n      // x - (-y) == x + y\n      // (-x) - y == -(x + y)\n      this._iadd(this, num);\n    } else {\n      // x - y == x - y == -(y - x)\n      // (-x) - (-y) == y - x == -(x - y)\n      const cmp = this.ucmp(num); // x - x == 0\n\n      if (cmp === 0) {\n        this.words[0] = 0;\n        this.length = 1;\n        this.negative = 0;\n        return this;\n      }\n\n      if (cmp < 0) {\n        this._isub(num, this);\n\n        this.negative ^= 1;\n      } else {\n        this._isub(this, num);\n      }\n    }\n\n    return this;\n  }\n\n  isubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    const negative = num < 0 | 0;\n    if (negative) num = -num;\n\n    if (this.negative !== negative) {\n      // x - (-y) == x + y\n      // (-x) - y == -(x + y)\n      this._iaddn(num);\n    } else {\n      // x - y == x - y == -(y - x)\n      // (-x) - (-y) == y - x == -(x - y)\n      if (this.length === 1 && this.words[0] < num) {\n        this.words[0] = num - this.words[0];\n        this.negative ^= 1;\n      } else {\n        this._isubn(num);\n      }\n    }\n\n    return this;\n  }\n\n  sub(num) {\n    return this.clone().isub(num);\n  }\n\n  subn(num) {\n    return this.clone().isubn(num);\n  }\n  /*\n   * Multiplication Engine\n   */\n\n\n  _mul(num, out) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    enforce(BN.isBN(out), 'out', 'bignum');\n    if (this.length === 10 && num.length === 10) return comb10MulTo(this, num, out);\n    const len = this.length + num.length;\n    if (len < 63) return smallMulTo(this, num, out);\n    if (len < 1024) return bigMulTo(this, num, out);\n    return jumboMulTo(this, num, out);\n  }\n  /*\n   * Multiplication\n   */\n\n\n  imul(num) {\n    return this.mul(num)._move(this);\n  }\n\n  imuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    const neg = num < 0 | 0;\n    if (neg) num = -num; // Carry.\n\n    let carry = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const w = this.words[i] * num;\n      const lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += w / 0x4000000 | 0;\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    this.negative ^= neg;\n\n    if (carry !== 0) {\n      this._alloc(this.length + 1);\n\n      this.words[this.length++] = carry;\n    } else {\n      this._strip();\n    }\n\n    return this;\n  }\n\n  mul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    const len = this.length + num.length;\n    const out = new BN();\n    out.words = new Array(len);\n\n    for (let i = 0; i < len; i++) out.words[i] = 0;\n\n    return this._mul(num, out);\n  }\n\n  muln(num) {\n    return this.clone().imuln(num);\n  }\n  /*\n   * Multiplication + Shift\n   */\n\n\n  mulShift(num, bits) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    enforce(bits >>> 0 === bits, 'bits', 'uint32');\n    const r = this.mul(num);\n    const b = r.utestn(bits - 1);\n    r.iushrn(bits);\n    if (this.negative ^ num.negative) return r.isubn(b);\n    return r.iaddn(b);\n  }\n  /*\n   * Division Engine\n   */\n\n\n  _div(num, flags) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    assert((flags & modes.ALL) === flags);\n    assert(flags !== modes.NONE);\n    const a = this;\n    const b = num;\n    nonzero(!b.isZero());\n    if (a.isZero()) return [new BN(0), new BN(0)];\n    const as = a.negative;\n    const bs = b.negative;\n    a.negative = 0;\n    b.negative = 0;\n    let q = null;\n    let r = null;\n\n    if (a.ucmp(b) < 0) {\n      if (flags & modes.QUO) q = new BN(0);\n      if (flags & modes.REM) r = a.clone();\n    } else if (b.length === 1) {\n      if (flags & modes.QUO) q = a.quon(b.words[0]);\n      if (flags & modes.REM) r = a.remn(b.words[0]);\n    } else {\n      [q, r] = a._wordDiv(b, flags);\n    }\n\n    a.negative = as;\n    b.negative = bs;\n\n    if (flags & modes.QUO) {\n      q.negative = a.negative ^ b.negative;\n\n      q._normalize();\n    }\n\n    if (flags & modes.REM) {\n      r.negative = a.negative;\n\n      r._normalize();\n    }\n\n    if (flags & modes.EUCLID) {\n      if (flags & modes.QUO) {\n        assert((flags & modes.REM) !== 0);\n\n        if (r.negative !== 0) {\n          if (b.negative !== 0) q.iaddn(1);else q.isubn(1);\n        }\n      }\n\n      if (flags & modes.REM) {\n        if (r.negative !== 0) {\n          if (b.negative !== 0) r.isub(b);else r.iadd(b);\n        }\n      }\n    }\n\n    return [q, r];\n  }\n\n  _wordDiv(num, flags) {\n    let a = this.clone();\n    let b = num;\n    let q = null;\n    let hi; // Normalize.\n\n    const word = b.words[b.length - 1] | 0;\n    const shift = 26 - countBits(word);\n\n    if (shift !== 0) {\n      b = b.clone();\n      a.iushln(shift);\n      b.iushln(shift);\n      hi = b.words[b.length - 1] | 0;\n    } else {\n      hi = word;\n    } // Initialize quotient.\n\n\n    const m = a.length - b.length;\n    assert(m >= 0);\n\n    if (flags & modes.QUO) {\n      q = new BN(0);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n\n      for (let i = 0; i < q.length; i++) q.words[i] = 0;\n    } // Diff.\n\n\n    const d = a.clone();\n\n    d._ishlnsubmul(b, 1, m);\n\n    if (d.negative === 0) {\n      if (q) q.words[m] = 1;\n      a = d;\n    } // Divide.\n\n\n    for (let j = m - 1; j >= 0; j--) {\n      const ahi = a.words[b.length + j];\n      const alo = a.words[b.length + j - 1];\n      const quo = (ahi * 0x4000000 + alo) / hi | 0;\n      let qj = Math.min(quo, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n\n      while (a.negative !== 0) {\n        qj -= 1;\n        a.negative = 0;\n\n        a._ishlnsubmul(b, 1, j);\n\n        a.ineg();\n      }\n\n      if (q) q.words[j] = qj;\n    } // Strip.\n\n\n    if (q) q._strip(); // Denormalize.\n    // Note: we shouldn't need to strip `a` here.\n\n    if (flags & modes.REM && shift !== 0) a.iushrn(shift);\n    return [q, a];\n  }\n\n  _ishlnsubmul(num, mul, shift) {\n    let carry = 0;\n    let i = 0;\n\n    this._expand(num.length + shift);\n\n    for (; i < num.length; i++) {\n      const k = (this.words[i + shift] | 0) + carry;\n      const r = num.words[i] * mul;\n      const w = k - (r & 0x3ffffff);\n      carry = (w >> 26) - (r / 0x4000000 | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    for (; i < this.length - shift; i++) {\n      const w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip(); // Subtraction overflow.\n\n    assert(carry === -1);\n    carry = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n\n    this.negative = 1;\n    return this._strip();\n  }\n  /*\n   * Truncation Division + Modulo\n   */\n\n\n  quorem(num) {\n    return this._div(num, modes.BOTH);\n  }\n  /*\n   * Truncation Division\n   */\n\n\n  iquo(num) {\n    return this.quo(num)._move(this);\n  }\n\n  iquon(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    nonzero(num !== 0);\n    const neg = num < 0 | 0;\n    if (neg) num = -num;\n    let carry = 0;\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      const w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = w / num | 0;\n      carry = w % num;\n    }\n\n    this.negative ^= neg;\n    return this._strip();\n  }\n\n  quo(num) {\n    return this._div(num, modes.QUO)[0];\n  }\n\n  quon(num) {\n    return this.clone().iquon(num);\n  }\n  /*\n   * Truncation Modulo\n   */\n\n\n  irem(num) {\n    return this.rem(num)._move(this);\n  }\n\n  iremn(num) {\n    let m = this.remrn(num);\n    if (m < 0) m = -m;\n    this.words[0] = m;\n    this.length = 1;\n    return this._normalize();\n  }\n\n  rem(num) {\n    return this._div(num, modes.REM)[1];\n  }\n\n  remn(num) {\n    return this.clone().iremn(num);\n  }\n\n  remrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    nonzero(num !== 0);\n    if (num < 0) num = -num;\n    const p = (1 << 26) % num;\n    let acc = 0;\n\n    for (let i = this.length - 1; i >= 0; i--) acc = (p * acc + (this.words[i] | 0)) % num;\n\n    return this.negative !== 0 ? -acc | 0 : acc;\n  }\n  /*\n   * Euclidean Division + Modulo\n   */\n\n\n  divmod(num) {\n    return this._div(num, modes.BOTH | modes.EUCLID);\n  }\n  /*\n   * Euclidean Division\n   */\n\n\n  idiv(num) {\n    return this.div(num)._move(this);\n  }\n\n  idivn(num) {\n    if (this.negative === 0) return this.iquon(num);\n    const r = this.remrn(num);\n    this.iquon(num);\n\n    if (r < 0) {\n      if (num < 0) this.iaddn(1);else this.isubn(1);\n    }\n\n    return this;\n  }\n\n  div(num) {\n    return this._div(num, modes.BOTH | modes.EUCLID)[0];\n  }\n\n  divn(num) {\n    return this.clone().idivn(num);\n  }\n  /*\n   * Euclidean Modulo\n   */\n\n\n  imod(num) {\n    if (this.ucmp(num) < 0) {\n      if (this.negative !== 0) {\n        this._isub(num, this);\n\n        this.negative = 0;\n      }\n\n      return this;\n    }\n\n    return this.mod(num)._move(this);\n  }\n\n  imodn(num) {\n    this.words[0] = this.modrn(num);\n    this.length = 1;\n    this.negative = 0;\n    return this;\n  }\n\n  mod(num) {\n    return this._div(num, modes.REM | modes.EUCLID)[1];\n  }\n\n  modn(num) {\n    return this.clone().imodn(num);\n  }\n\n  modrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    let r = this.remrn(num);\n\n    if (r < 0) {\n      if (num < 0) r -= num;else r += num;\n    }\n\n    return r;\n  }\n  /*\n   * Round Division\n   */\n\n\n  divRound(num) {\n    const [q, r] = this.quorem(num); // Fast case - exact division.\n\n    if (r.isZero()) return q;\n    const bit = num.words[0] & 1;\n    num.iushrn(1);\n    const cmp = r.ucmp(num);\n    num.iushln(1);\n    num.words[0] |= bit; // Round down.\n\n    if (cmp < 0 || num.isOdd() && cmp === 0) return q; // Round up.\n\n    if (this.negative ^ num.negative) return q.isubn(1);\n    return q.iaddn(1);\n  }\n  /*\n   * Exponentiation\n   */\n\n\n  ipow(num) {\n    return this.pow(num)._move(this);\n  }\n\n  ipown(num) {\n    return this.pown(num)._move(this);\n  }\n\n  pow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    let b = countBits(num.words[num.length - 1]);\n    let r = new BN(1);\n\n    for (let i = num.length - 1; i >= 0; i--) {\n      const word = num.words[i];\n\n      for (let j = b - 1; j >= 0; j--) {\n        r = r.sqr();\n        if (word >> j & 1) r = r.mul(this);\n      }\n\n      b = 26;\n    }\n\n    return r;\n  }\n\n  pown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    if (num < 0) num = -num;\n    if (num === 0) return new BN(1);\n    if (num === 1) return this.clone();\n    const bits = countBits(num);\n    let r = this;\n\n    for (let i = bits - 2; i >= 0; i--) {\n      r = r.sqr();\n      if (num >> i & 1) r = r.mul(this);\n    }\n\n    return r;\n  }\n\n  isqr() {\n    return this.imul(this);\n  }\n\n  sqr() {\n    return this.mul(this);\n  }\n  /*\n   * Roots Engine\n   */\n\n\n  _rootrem(pow, rem) {\n    enforce(pow >>> 0 === pow, 'num', 'uint32');\n    if (pow === 0) throw new RangeError('Zeroth root.');\n    if (~pow & this.negative) throw new RangeError('Negative with even root.');\n    if (this.ucmpn(1) <= 0) return [this.clone(), new BN(0)];\n    let u = new BN(0);\n    let t = BN.shift(1, this.bitLength() / pow + 1 | 0);\n    let v, r;\n    if (this.negative !== 0) t.ineg();\n\n    if (pow === 2) {\n      do {\n        u = t;\n        t = this.quo(u);\n        t.iadd(u);\n        t.iushrn(1);\n      } while (t.ucmp(u) < 0);\n    } else {\n      do {\n        u = t;\n        t = u.pown(pow - 1);\n        t = this.quo(t);\n        v = u.muln(pow - 1);\n        t.iadd(v);\n        t = t.quon(pow);\n      } while (t.ucmp(u) < 0);\n    }\n\n    if (rem) {\n      t = u.pown(pow);\n      r = this.sub(t);\n    }\n\n    return [u, r];\n  }\n  /*\n   * Roots\n   */\n\n\n  rootrem(pow) {\n    return this._rootrem(pow, 1);\n  }\n\n  iroot(pow) {\n    return this.root(pow)._move(this);\n  }\n\n  root(pow) {\n    return this._rootrem(pow, 0)[0];\n  }\n\n  isPower(pow) {\n    enforce(pow >>> 0 === pow, 'num', 'uint32');\n    if (pow === 0 || ~pow & this.negative) return false;\n    const [, r] = this.rootrem(pow);\n    return r.sign() === 0;\n  }\n\n  sqrtrem() {\n    return this.rootrem(2);\n  }\n\n  isqrt() {\n    return this.sqrt()._move(this);\n  }\n\n  sqrt() {\n    return this.root(2);\n  }\n\n  isSquare() {\n    return this.isPower(2);\n  }\n  /*\n   * AND\n   */\n\n\n  iand(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    let x = this;\n    let y = num;\n    if (x === y) return x;\n    if ((x.negative | y.negative) === 0) return x.iuand(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) & (-y) == ~(x-1) & ~(y-1)\n      //             == ~((x-1) | (y-1))\n      //             == -(((x-1) | (y-1)) + 1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuor(y);\n      x.isubn(1);\n      y.isubn(1);\n      return x;\n    } // Assume x is the positive number.\n\n\n    if (x.negative !== 0) [x, y] = [y.clone(), x]; // x & (-y) == x & ~(y-1)\n    //          == x & ~(y-1)\n\n    const width = x.bitLength();\n    y.iaddn(1);\n    y.inotn(width);\n    x.iuand(y);\n    y.inotn(width);\n    y.isubn(1);\n    return x._move(this);\n  }\n\n  iandn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    if ((this.negative | num < 0) !== 0) return this.iand(new BN(num));\n    this.words[0] &= num;\n    this.length = 1;\n    return this;\n  }\n\n  and(num) {\n    return this.clone().iand(num);\n  }\n\n  andn(num) {\n    return this.clone().iandn(num);\n  }\n\n  andrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | num < 0) !== 0) {\n      const n = this.iand(new BN(num));\n      if (n.length > 1) throw new RangeError('Number exceeds 26 bits.');\n      return n.negative !== 0 ? -n.words[0] : n.words[0];\n    }\n\n    return this.words[0] & num;\n  }\n  /*\n   * Unsigned AND\n   */\n\n\n  iuand(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    this.length = Math.min(this.length, num.length);\n\n    for (let i = 0; i < this.length; i++) this.words[i] &= num.words[i];\n\n    return this._strip();\n  }\n\n  iuandn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    this.words[0] &= Math.abs(num);\n    this.length = 1;\n    return this._normalize();\n  }\n\n  uand(num) {\n    return this.clone().iuand(num);\n  }\n\n  uandn(num) {\n    return this.clone().iuandn(num);\n  }\n\n  uandrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    const n = this.words[0] & Math.abs(num);\n    return this.negative !== 0 ? -n | 0 : n;\n  }\n  /*\n   * OR\n   */\n\n\n  ior(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    let x = this;\n    let y = num;\n    if (x === y) return x;\n    if ((x.negative | y.negative) === 0) return x.iuor(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) | (-y) == ~(x-1) | ~(y-1)\n      //             == ~((x-1) & (y-1))\n      //             == -(((x-1) & (y-1)) + 1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuand(y);\n      x.isubn(1);\n      y.isubn(1);\n      return x;\n    } // Assume x is the positive number.\n\n\n    y = y.clone();\n    if (x.negative !== 0) [x, y] = [y, x]; // x | (-y) == x | ~(y-1)\n    //          == ~((y-1) & ~x)\n    //          == -(((y-1) & ~x) + 1)\n\n    y.iaddn(1);\n    x.inotn(y.bitLength());\n    y.iuand(x);\n    y.isubn(1);\n    return y._move(this);\n  }\n\n  iorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    if ((this.negative | num < 0) !== 0) return this.ior(new BN(num));\n    this.words[0] |= num;\n    return this;\n  }\n\n  or(num) {\n    return this.clone().ior(num);\n  }\n\n  orn(num) {\n    return this.clone().iorn(num);\n  }\n  /*\n   * Unsigned OR\n   */\n\n\n  iuor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    this._expand(num.length);\n\n    for (let i = 0; i < num.length; i++) this.words[i] |= num.words[i]; // Note: we shouldn't need to strip here.\n\n\n    return this;\n  }\n\n  iuorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    this.words[0] |= Math.abs(num);\n    return this;\n  }\n\n  uor(num) {\n    return this.clone().iuor(num);\n  }\n\n  uorn(num) {\n    return this.clone().iuorn(num);\n  }\n  /*\n   * XOR\n   */\n\n\n  ixor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    let x = this;\n    let y = num;\n\n    if (x === y) {\n      x.words[0] = 0;\n      x.length = 1;\n      x.negative = 0;\n      return x;\n    }\n\n    if ((x.negative | y.negative) === 0) return x.iuxor(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) ^ (-y) == ~(x-1) ^ ~(y-1)\n      //             == (x-1) ^ (y-1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuxor(y);\n      x.ineg();\n      y.isubn(1);\n      return x;\n    } // Assume x is the positive number.\n\n\n    if (x.negative !== 0) [x, y] = [y.clone(), x]; // x ^ (-y) == x ^ ~(y-1)\n    //          == ~(x ^ (y-1))\n    //          == -((x ^ (y-1)) + 1)\n\n    y.iaddn(1);\n    x.iuxor(y);\n    x.iaddn(1);\n    x.ineg();\n    y.isubn(1);\n    return x._move(this);\n  }\n\n  ixorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    if ((this.negative | num < 0) !== 0) return this.ixor(new BN(num));\n    this.words[0] ^= num;\n    return this;\n  }\n\n  xor(num) {\n    return this.clone().ixor(num);\n  }\n\n  xorn(num) {\n    return this.clone().ixorn(num);\n  }\n  /*\n   * Unsigned XOR\n   */\n\n\n  iuxor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    let a = this;\n    let b = num;\n    if (a.length < b.length) [a, b] = [b, a];\n    let i = 0;\n\n    for (; i < b.length; i++) this.words[i] = a.words[i] ^ b.words[i];\n\n    if (a !== this) {\n      this._alloc(a.length);\n\n      for (; i < a.length; i++) this.words[i] = a.words[i];\n    }\n\n    this.length = a.length;\n    return this._strip();\n  }\n\n  iuxorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    this.words[0] ^= Math.abs(num);\n    return this._normalize();\n  }\n\n  uxor(num) {\n    return this.clone().iuxor(num);\n  }\n\n  uxorn(num) {\n    return this.clone().iuxorn(num);\n  }\n  /*\n   * NOT\n   */\n\n\n  inot() {\n    if (this.negative !== 0) {\n      // ~(-x) == ~(~(x-1)) == x-1\n      this.ineg().isubn(1);\n    } else {\n      // ~x == -x-1 == -(x+1)\n      this.iaddn(1).ineg();\n    }\n\n    return this;\n  }\n\n  not() {\n    return this.clone().inot();\n  }\n\n  inotn(width) {\n    enforce(width >>> 0 === width, 'width', 'uint32');\n    const r = width % 26;\n    let s = Math.ceil(width / 26);\n    let i = 0; // Extend the buffer with leading zeroes.\n\n    this._expand(s);\n\n    if (r > 0) s -= 1; // Handle complete words.\n\n    for (; i < s; i++) this.words[i] ^= 0x3ffffff; // Handle the residue.\n\n\n    if (r > 0) this.words[i] ^= (1 << r) - 1; // And remove leading zeroes.\n\n    return this._strip();\n  }\n\n  notn(width) {\n    return this.clone().inotn(width);\n  }\n  /*\n   * Left Shift\n   */\n\n\n  ishl(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.ishln(num.toNumber());\n  }\n\n  ishln(bits) {\n    return this.iushln(bits);\n  }\n\n  shl(num) {\n    return this.clone().ishl(num);\n  }\n\n  shln(bits) {\n    return this.clone().ishln(bits);\n  }\n  /*\n   * Unsigned Left Shift\n   */\n\n\n  iushl(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.iushln(num.toNumber());\n  }\n\n  iushln(bits) {\n    enforce(bits >>> 0 === bits, 'bits', 'uint32');\n    const r = bits % 26;\n    const s = (bits - r) / 26;\n    const mask = (1 << r) - 1 << 26 - r;\n\n    if (r !== 0) {\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const ncarry = this.words[i] & mask;\n        const c = (this.words[i] | 0) - ncarry << r;\n        this.words[i] = c | carry;\n        carry = ncarry >>> 26 - r;\n      }\n\n      if (carry !== 0) {\n        this._alloc(this.length + 1);\n\n        this.words[this.length++] = carry;\n      }\n    }\n\n    if (s !== 0) {\n      this._alloc(this.length + s);\n\n      for (let i = this.length - 1; i >= 0; i--) this.words[i + s] = this.words[i];\n\n      for (let i = 0; i < s; i++) this.words[i] = 0;\n\n      this.length += s;\n    }\n\n    return this._strip();\n  }\n\n  ushl(num) {\n    return this.clone().iushl(num);\n  }\n\n  ushln(bits) {\n    return this.clone().iushln(bits);\n  }\n  /*\n   * Right Shift Engine\n   */\n\n\n  _split(bits, output) {\n    const r = bits % 26;\n    const s = Math.min((bits - r) / 26, this.length);\n    const mask = (1 << r) - 1; // Extended mode, copy masked part.\n\n    if (output) {\n      output._alloc(s);\n\n      for (let i = 0; i < s; i++) output.words[i] = this.words[i];\n\n      output.length = s;\n    }\n\n    if (s === 0) {// No-op, we should not move anything at all.\n    } else if (this.length > s) {\n      this.length -= s;\n\n      for (let i = 0; i < this.length; i++) this.words[i] = this.words[i + s];\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    let carry = 0;\n\n    if (r !== 0) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        const word = this.words[i] | 0;\n        this.words[i] = carry << 26 - r | word >>> r;\n        carry = word & mask;\n      }\n    } // Push carried bits as a mask.\n\n\n    if (output) {\n      if (carry !== 0) {\n        output._alloc(output.length + 1);\n\n        output.words[output.length++] = carry;\n      } else {\n        if (output.length === 0) output.words[output.length++] = 0;\n\n        output._strip();\n      }\n    }\n\n    return this._strip();\n  }\n  /*\n   * Right Shift\n   */\n\n\n  ishr(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.ishrn(num.toNumber());\n  }\n\n  ishrn(bits) {\n    enforce(bits >>> 0 === bits, 'bits', 'uint32');\n\n    if (this.negative !== 0) {\n      // (-x) >> y == ~(x-1) >> y\n      //           == ~((x-1) >> y)\n      //           == -(((x-1) >> y) + 1)\n      this.iaddn(1);\n      this.iushrn(bits);\n      this.isubn(1);\n      return this;\n    }\n\n    return this.iushrn(bits);\n  }\n\n  shr(num) {\n    return this.clone().ishr(num);\n  }\n\n  shrn(bits) {\n    return this.clone().ishrn(bits);\n  }\n  /*\n   * Unsigned Right Shift\n   */\n\n\n  iushr(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.iushrn(num.toNumber());\n  }\n\n  iushrn(bits) {\n    enforce(bits >>> 0 === bits, 'bits', 'uint32');\n    return this._split(bits, null);\n  }\n\n  ushr(num) {\n    return this.clone().iushr(num);\n  }\n\n  ushrn(bits) {\n    return this.clone().iushrn(bits);\n  }\n  /*\n   * Bit Manipulation\n   */\n\n\n  setn(bit, val) {\n    enforce(bit >>> 0 === bit, 'bit', 'uint32');\n\n    if (this.negative !== 0) {\n      this.iaddn(1);\n      this.usetn(bit, !val);\n      this.isubn(1);\n      return this;\n    }\n\n    return this.usetn(bit, val);\n  }\n\n  usetn(bit, val) {\n    enforce(bit >>> 0 === bit, 'bit', 'uint32');\n    const r = bit % 26;\n    const s = (bit - r) / 26;\n\n    this._expand(s + 1);\n\n    if (val) this.words[s] |= 1 << r;else this.words[s] &= ~(1 << r);\n    return this._strip();\n  }\n\n  testn(bit) {\n    enforce(bit >>> 0 === bit, 'bit', 'uint32');\n    const r = bit % 26;\n    const s = (bit - r) / 26; // Fast case: bit is much higher than all existing words.\n\n    if (this.length <= s) return this.negative; // Check bit and return.\n\n    const w = this.words[s];\n    const val = w >> r & 1;\n\n    if (this.negative !== 0) {\n      if (r > 0 && w & (1 << r) - 1) return val ^ 1;\n      let j = s;\n\n      while (j--) {\n        if (this.words[j] > 0) return val ^ 1;\n      }\n    }\n\n    return val;\n  }\n\n  utestn(bit) {\n    enforce(bit >>> 0 === bit, 'bit', 'uint32');\n    const r = bit % 26;\n    const s = (bit - r) / 26; // Fast case: bit is much higher than all existing words.\n\n    if (this.length <= s) return 0; // Check bit and return.\n\n    return this.words[s] >> r & 1;\n  }\n\n  imaskn(bits) {\n    enforce(bits >>> 0 === bits, 'bits', 'uint32');\n\n    if (this.negative !== 0) {\n      this.iaddn(1);\n      this.inotn(bits + 1);\n      this.ineg();\n    }\n\n    return this.iumaskn(bits);\n  }\n\n  maskn(bits) {\n    return this.clone().imaskn(bits);\n  }\n\n  iumaskn(bits) {\n    enforce(bits >>> 0 === bits, 'bits', 'uint32');\n    const r = bits % 26;\n    let s = (bits - r) / 26;\n    if (this.length <= s) return this;\n    if (r !== 0) s += 1;\n    this.length = Math.min(s, this.length);\n    if (r !== 0) this.words[this.length - 1] &= (1 << r) - 1;\n    if (this.length === 0) this.words[this.length++] = 0;\n    return this._strip();\n  }\n\n  umaskn(bits) {\n    return this.clone().iumaskn(bits);\n  }\n\n  andln(num) {\n    return this.words[0] & num;\n  }\n\n  bit(pos) {\n    return this.utestn(pos);\n  }\n\n  bits(pos, width) {\n    enforce(pos >>> 0 === pos, 'pos', 'uint32');\n    enforce(width >>> 0 === width, 'width', 'uint32');\n    enforce(width <= 26, 'width', 'width');\n    const shift = pos % 26;\n    const index = (pos - shift) / 26;\n    if (index >= this.length) return 0;\n    let bits = this.words[index] >> shift & (1 << width) - 1;\n\n    if (shift + width > 26 && index + 1 < this.length) {\n      const more = shift + width - 26;\n      const next = this.words[index + 1] & (1 << more) - 1;\n      bits |= next << 26 - shift;\n    }\n\n    return bits;\n  }\n  /*\n   * Negation\n   */\n\n\n  ineg() {\n    if (!this.isZero()) this.negative ^= 1;\n    return this;\n  }\n\n  neg() {\n    return this.clone().ineg();\n  }\n\n  iabs() {\n    this.negative = 0;\n    return this;\n  }\n\n  abs() {\n    return this.clone().iabs();\n  }\n  /*\n   * Comparison\n   */\n\n\n  cmp(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    if (this.negative !== num.negative) return num.negative - this.negative;\n    const res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  }\n\n  cmpn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    const negative = num < 0 | 0;\n    if (this.negative !== negative) return negative - this.negative;\n    const res = this.ucmpn(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  }\n\n  eq(num) {\n    return this.cmp(num) === 0;\n  }\n\n  eqn(num) {\n    return this.cmpn(num) === 0;\n  }\n\n  gt(num) {\n    return this.cmp(num) > 0;\n  }\n\n  gtn(num) {\n    return this.cmpn(num) > 0;\n  }\n\n  gte(num) {\n    return this.cmp(num) >= 0;\n  }\n\n  gten(num) {\n    return this.cmpn(num) >= 0;\n  }\n\n  lt(num) {\n    return this.cmp(num) < 0;\n  }\n\n  ltn(num) {\n    return this.cmpn(num) < 0;\n  }\n\n  lte(num) {\n    return this.cmp(num) <= 0;\n  }\n\n  lten(num) {\n    return this.cmpn(num) <= 0;\n  }\n\n  sign() {\n    if (this.negative !== 0) return -1;\n    if (this.length === 1 && this.words[0] === 0) return 0;\n    return 1;\n  }\n\n  isZero() {\n    return this.length === 1 && this.words[0] === 0;\n  }\n\n  isNeg() {\n    return this.negative !== 0;\n  }\n\n  isPos() {\n    return this.negative === 0;\n  }\n\n  isOdd() {\n    return (this.words[0] & 1) === 1;\n  }\n\n  isEven() {\n    return (this.words[0] & 1) === 0;\n  }\n  /*\n   * Unsigned Comparison\n   */\n\n\n  ucmp(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    if (this.length < num.length) return -1;\n    if (this.length > num.length) return 1;\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      const a = this.words[i] | 0;\n      const b = num.words[i] | 0;\n      if (a === b) continue;\n      return (a > b) - (a < b);\n    }\n\n    return 0;\n  }\n\n  ucmpn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    if (this.length > 1) return 1;\n    const w = this.words[0] | 0;\n    if (num < 0) num = -num;\n    return (w > num) - (w < num);\n  }\n  /*\n   * Number Theoretic Functions\n   */\n\n\n  legendre(num) {\n    const red = HAS_BIGINT ? BN.red(num) : BN.mont(num);\n    return this.toRed(red).redLegendre();\n  }\n\n  jacobi(num) {\n    // See: A Binary Algorithm for the Jacobi Symbol\n    //   J. Shallit, J. Sorenson\n    //   Page 3, Section 3\n    enforce(BN.isBN(num), 'num', 'bignum');\n    if (num.isZero() || num.isEven()) throw new Error('jacobi: `num` must be odd.');\n\n    let a = this._cloneNormal();\n\n    let b = num.clone();\n    let j = 1;\n\n    if (b.isNeg()) {\n      if (a.isNeg()) j = -1;\n      b.ineg();\n    }\n\n    if (a.isNeg() || a.ucmp(b) >= 0) a.imod(b);\n\n    while (!a.isZero()) {\n      const bits = a._makeOdd();\n\n      if (bits & 1) {\n        const bmod8 = b.andln(7);\n        if (bmod8 === 3 || bmod8 === 5) j = -j;\n      }\n\n      if (a.ucmp(b) < 0) {\n        [a, b] = [b, a];\n        if (a.andln(3) === 3 && b.andln(3) === 3) j = -j;\n      }\n\n      a._isub(a, b).iushrn(1);\n\n      const bmod8 = b.andln(7);\n      if (bmod8 === 3 || bmod8 === 5) j = -j;\n    }\n\n    if (b.cmpn(1) !== 0) return 0;\n    return j;\n  }\n\n  kronecker(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    const table = [0, 1, 0, -1, 0, -1, 0, 1];\n\n    let a = this._cloneNormal();\n\n    let b = num.clone();\n    let k = 1;\n    if (b.isZero()) return a.ucmpn(1) === 0 ? k : 0;\n    if (!a.isOdd() && !b.isOdd()) return 0;\n\n    const bits = b._makeOdd();\n\n    if (bits & 1) k = table[a.andln(7)];\n\n    if (b.isNeg()) {\n      if (a.isNeg()) k = -k;\n      b.ineg();\n    }\n\n    while (!a.isZero()) {\n      const bits = a._makeOdd();\n\n      if (bits & 1) k *= table[b.andln(7)];\n      const w = a.words[0] ^ a.negative * 0x3ffffff;\n      if (w & b.words[0] & 2) k = -k;\n      b.imod(a);\n      [a, b] = [b, a];\n      b.negative = 0;\n    }\n\n    if (b.cmpn(1) !== 0) return 0;\n    return k;\n  }\n\n  igcd(num) {\n    return this.gcd(num)._move(this);\n  }\n\n  gcd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n    let a = this.clone();\n    let b = num.clone();\n    a.negative = 0;\n    b.negative = 0; // Remove common factor of two.\n\n    const shift = a._factor2(b);\n\n    if (shift !== 0) {\n      a.iushrn(shift);\n      b.iushrn(shift);\n    }\n\n    for (;;) {\n      a._makeOdd();\n\n      b._makeOdd();\n\n      const cmp = a.ucmp(b);\n\n      if (cmp < 0) {\n        // a > b\n        [a, b] = [b, a];\n      } else if (cmp === 0 || b.ucmpn(1) === 0) {\n        // Break if a == b.\n        // Break if b == 1 to avoid repeated subtraction.\n        break;\n      }\n\n      a._isub(a, b);\n    }\n\n    return b.iushln(shift);\n  }\n\n  ilcm(num) {\n    return this.lcm(num)._move(this);\n  }\n\n  lcm(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    if (this.isZero() || num.isZero()) return new BN(0);\n    return this.quo(this.gcd(num)).mul(num).iabs();\n  }\n\n  egcd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.isZero()) {\n      return [new BN(0), new BN(num.sign()), num.abs()];\n    }\n\n    if (num.isZero()) {\n      return [new BN(this.sign()), new BN(0), this.abs()];\n    }\n\n    const x = this.clone();\n    const y = num.clone();\n    x.negative = 0;\n    y.negative = 0; // A * x + B * y = x\n\n    const A = new BN(1);\n    const B = new BN(0); // C * x + D * y = y\n\n    const C = new BN(0);\n    const D = new BN(1); // Remove common factor of two.\n\n    const g = x._factor2(y);\n\n    if (g !== 0) {\n      x.iushrn(g);\n      y.iushrn(g);\n    }\n\n    const yp = y.clone();\n    const xp = x.clone();\n\n    while (!x.isZero()) {\n      let i = x._makeOdd();\n\n      let j = y._makeOdd();\n\n      while (i--) {\n        if (A.isOdd() || B.isOdd()) {\n          A.iadd(yp);\n          B.isub(xp);\n        }\n\n        A.iushrn(1);\n        B.iushrn(1);\n      }\n\n      while (j--) {\n        if (C.isOdd() || D.isOdd()) {\n          C.iadd(yp);\n          D.isub(xp);\n        }\n\n        C.iushrn(1);\n        D.iushrn(1);\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    if (this.negative !== 0) C.ineg();\n    if (num.negative !== 0) D.ineg();\n    return [C, D, y.iushln(g)];\n  }\n\n  iinvert(num) {\n    return this.invert(num)._move(this);\n  }\n\n  invert(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    range(num.sign() > 0, 'invert');\n    if (num.isOdd()) return this._invertp(num);\n    if (num.cmpn(1) === 0) throw new RangeError('Not invertible.');\n    const [s,, g] = this.egcd(num);\n    if (g.cmpn(1) !== 0) throw new RangeError('Not invertible.');\n    return s.imod(num);\n  }\n\n  ifermat(num) {\n    return this.fermat(num)._move(this);\n  }\n\n  fermat(num) {\n    const red = HAS_BIGINT ? BN.red(num) : BN.mont(num);\n    return this.toRed(red).redFermat().fromRed();\n  }\n\n  ipowm(y, m, mont) {\n    return this.powm(y, m, mont)._move(this);\n  }\n\n  powm(y, m, mont) {\n    const red = !HAS_BIGINT && mont ? BN.mont(m) : BN.red(m);\n    return this.toRed(red).redPow(y).fromRed();\n  }\n\n  ipowmn(y, m, mont) {\n    return this.powmn(y, m, mont)._move(this);\n  }\n\n  powmn(y, m, mont) {\n    const red = mont ? BN.mont(m) : BN.red(m);\n    return this.toRed(red).redPown(y).fromRed();\n  }\n\n  isqrtm(p) {\n    return this.sqrtm(p)._move(this);\n  }\n\n  sqrtm(p) {\n    enforce(BN.isBN(p), 'p', 'bignum');\n    let red;\n\n    if (p.andln(3) === 3 || p.andln(7) === 5) {\n      // Probably not worth the setup.\n      red = BN.red(p);\n    } else {\n      red = BN.mont(p);\n    }\n\n    return this.toRed(red).redSqrt().fromRed();\n  }\n\n  isqrtpq(p, q) {\n    return this.sqrtpq(p, q)._move(this);\n  }\n\n  sqrtpq(p, q) {\n    const sp = this.sqrtm(p);\n    const sq = this.sqrtm(q);\n    const [mp, mq] = p.egcd(q);\n    const lhs = sq.mul(mp).mul(p);\n    const rhs = sp.mul(mq).mul(q);\n    const n = p.mul(q);\n    return lhs.iadd(rhs).imod(n);\n  }\n  /*\n   * Primality Testing\n   */\n\n\n  isPrime(rng, reps, limit) {\n    enforce(reps >>> 0 === reps, 'reps', 'uint32');\n    if (!this.isPrimeMR(rng, reps + 1, true)) return false;\n    if (!this.isPrimeLucas(limit)) return false;\n    return true;\n  }\n\n  isPrimeMR(rng, reps, force2 = false) {\n    enforce(reps >>> 0 === reps, 'reps', 'uint32');\n    enforce(reps > 0, 'reps', 'integer');\n    enforce(typeof force2 === 'boolean', 'force2', 'boolean');\n    const n = this;\n\n    if (n.cmpn(7) < 0) {\n      return n.cmpn(2) === 0 || n.cmpn(3) === 0 || n.cmpn(5) === 0;\n    }\n\n    if (n.isEven()) return false;\n    const nm1 = n.subn(1);\n    const nm3 = nm1.subn(2);\n    const k = nm1.zeroBits();\n    const q = nm1.ushrn(k);\n    const red = BN.red(n);\n    const rnm1 = nm1.toRed(red);\n    const rone = new BN(1).toRed(red);\n\n    next: for (let i = 0; i < reps; i++) {\n      let x;\n\n      if (i === reps - 1 && force2) {\n        x = new BN(2);\n      } else {\n        x = BN.random(rng, 0, nm3);\n        x.iaddn(2);\n      }\n\n      let y = x.toRed(red).redPow(q);\n      if (y.cmp(rone) === 0 || y.cmp(rnm1) === 0) continue;\n\n      for (let j = 1; j < k; j++) {\n        y = y.redSqr();\n        if (y.cmp(rnm1) === 0) continue next;\n        if (y.cmp(rone) === 0) return false;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  isPrimeLucas(limit = 0) {\n    enforce(limit >>> 0 === limit, 'limit', 'uint32');\n    const n = this; // Ignore 0 and 1.\n\n    if (n.cmpn(1) <= 0) return false; // Two is the only even prime.\n\n    if (n.isEven()) return n.cmpn(2) === 0;\n    let p = 3;\n\n    for (;;) {\n      if (p > 10000) {\n        // Thought to be impossible.\n        throw new Error(`Cannot find (D/n) = -1 for ${n.toString(10)}.`);\n      }\n\n      if (limit !== 0 && p > limit) {\n        // Optional DoS limit.\n        return false;\n      }\n\n      const d = new BN(p * p - 4);\n      const j = d.jacobi(n);\n      if (j === -1) break;\n      if (j === 0) return n.cmpn(p + 2) === 0;\n\n      if (p === 40) {\n        if (n.isSquare()) return false;\n      }\n\n      p += 1;\n    }\n\n    const s = n.addn(1);\n\n    const r = s._makeOdd();\n\n    const nm2 = n.subn(2);\n    let x = new BN(2);\n    let y = new BN(p);\n\n    for (let i = s.bitLength(); i >= 0; i--) {\n      if (s.utestn(i)) {\n        x = x.mul(y).iadd(n).isubn(p).imod(n);\n        y = y.sqr().iadd(nm2).imod(n);\n      } else {\n        y = y.mul(x).iadd(n).isubn(p).imod(n);\n        x = x.sqr().iadd(nm2).imod(n);\n      }\n    }\n\n    if (x.cmpn(2) === 0 || x.cmp(nm2) === 0) {\n      let a = x.muln(p);\n      let b = y.ushln(1);\n      if (a.cmp(b) < 0) [a, b] = [b, a];\n      if (a.isub(b).imod(n).isZero()) return true;\n    }\n\n    for (let t = 0; t < r - 1; t++) {\n      if (x.isZero()) return true;\n      if (x.cmpn(2) === 0) return false;\n      x = x.sqr().isubn(2).imod(n);\n    }\n\n    return false;\n  }\n  /*\n   * Twos Complement\n   */\n\n\n  toTwos(width) {\n    if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);\n    return this.clone();\n  }\n\n  fromTwos(width) {\n    enforce(width >>> 0 === width, 'width', 'uint32');\n    range(width > 0, 'width');\n    if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();\n    return this.clone();\n  }\n  /*\n   * Reduction Context\n   */\n\n\n  toRed(ctx) {\n    enforce(ctx instanceof Red, 'ctx', 'reduction context');\n    if (this.red) throw new Error('Already in reduction context.');\n    return ctx.convertTo(this);\n  }\n\n  fromRed() {\n    red(this.red, 'fromRed');\n    return this.red.convertFrom(this);\n  }\n\n  forceRed(ctx) {\n    enforce(ctx instanceof Red, 'ctx', 'reduction context');\n\n    if (this.red) {\n      if (!ctx.m.eq(this.red.m) || ctx.mont !== this.red.mont) throw new Error('Already in reduction context.');\n    } else {\n      range(this.negative === 0, 'red');\n      range(this.ucmp(ctx.m) < 0, 'red');\n    }\n\n    return this.clone()._forceRed(ctx);\n  }\n\n  redIAdd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIAdd');\n    return this.red.iadd(this, num);\n  }\n\n  redAdd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redAdd');\n    return this.red.add(this, num);\n  }\n\n  redIAddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIAddn');\n    return this.red.iaddn(this, num);\n  }\n\n  redAddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redAddn');\n    return this.red.addn(this, num);\n  }\n\n  redISub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redISub');\n    return this.red.isub(this, num);\n  }\n\n  redSub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redSub');\n    return this.red.sub(this, num);\n  }\n\n  redISubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redISubn');\n    return this.red.isubn(this, num);\n  }\n\n  redSubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redSubn');\n    return this.red.subn(this, num);\n  }\n\n  redIMul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIMul');\n    return this.red.imul(this, num);\n  }\n\n  redMul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redMul');\n    return this.red.mul(this, num);\n  }\n\n  redIMuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIMuln');\n    return this.red.imuln(this, num);\n  }\n\n  redMuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redMuln');\n    return this.red.muln(this, num);\n  }\n\n  redIDiv(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIDiv');\n    return this.red.idiv(this, num);\n  }\n\n  redDiv(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redDiv');\n    return this.red.div(this, num);\n  }\n\n  redIDivn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIDivn');\n    return this.red.idivn(this, num);\n  }\n\n  redDivn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redDivn');\n    return this.red.divn(this, num);\n  }\n\n  redIPow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIPow');\n    nonred(!num.red, 'redIPow');\n    return this.red.ipow(this, num);\n  }\n\n  redPow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redPow');\n    nonred(!num.red, 'redPow');\n    return this.red.pow(this, num);\n  }\n\n  redIPown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIPown');\n    return this.red.ipown(this, num);\n  }\n\n  redPown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redPown');\n    return this.red.pown(this, num);\n  }\n\n  redISqr() {\n    red(this.red, 'redISqr');\n    return this.red.isqr(this);\n  }\n\n  redSqr() {\n    red(this.red, 'redSqr');\n    return this.red.sqr(this);\n  }\n\n  redISqrt() {\n    red(this.red, 'redISqrt');\n    return this.red.isqrt(this);\n  }\n\n  redSqrt() {\n    red(this.red, 'redSqrt');\n    return this.red.sqrt(this);\n  }\n\n  redIDivSqrt(v) {\n    red(this.red, 'redIDivSqrt');\n    return this.red.idivsqrt(this, v);\n  }\n\n  redDivSqrt(v) {\n    red(this.red, 'redDivSqrt');\n    return this.red.divsqrt(this, v);\n  }\n\n  redIsSquare() {\n    red(this.red, 'redIsSquare');\n    return this.red.isSquare(this);\n  }\n\n  redIShl(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIShl');\n    nonred(!num.red, 'redIShl');\n    return this.red.ishl(this, num);\n  }\n\n  redShl(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redShl');\n    nonred(!num.red, 'redShl');\n    return this.red.shl(this, num);\n  }\n\n  redIShln(num) {\n    enforce(num >>> 0 === num, 'num', 'uint32');\n    red(this.red, 'redIShln');\n    return this.red.ishln(this, num);\n  }\n\n  redShln(num) {\n    enforce(num >>> 0 === num, 'num', 'uint32');\n    red(this.red, 'redShln');\n    return this.red.shln(this, num);\n  }\n\n  redINeg() {\n    red(this.red, 'redINeg');\n    return this.red.ineg(this);\n  }\n\n  redNeg() {\n    red(this.red, 'redNeg');\n    return this.red.neg(this);\n  }\n\n  redEq(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redEq');\n    return this.red.eq(this, num);\n  }\n\n  redEqn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redEqn');\n    return this.red.eqn(this, num);\n  }\n\n  redIsHigh() {\n    red(this.red, 'redIsHigh');\n    return this.red.isHigh(this);\n  }\n\n  redIsLow() {\n    red(this.red, 'redIsLow');\n    return this.red.isLow(this);\n  }\n\n  redIsOdd() {\n    red(this.red, 'redIsOdd');\n    return this.red.isOdd(this);\n  }\n\n  redIsEven() {\n    red(this.red, 'redIsEven');\n    return this.red.isEven(this);\n  }\n\n  redLegendre() {\n    red(this.red, 'redLegendre');\n    return this.red.legendre(this);\n  }\n\n  redJacobi() {\n    red(this.red, 'redJacobi');\n    return this.red.jacobi(this);\n  }\n\n  redKronecker() {\n    red(this.red, 'redKronecker');\n    return this.red.kronecker(this);\n  }\n\n  redIInvert() {\n    red(this.red, 'redIInvert');\n    return this.red.iinvert(this);\n  }\n\n  redInvert() {\n    red(this.red, 'redInvert');\n    return this.red.invert(this);\n  }\n\n  redIFermat() {\n    red(this.red, 'redIFermat');\n    return this.red.ifermat(this);\n  }\n\n  redFermat() {\n    red(this.red, 'redFermat');\n    return this.red.fermat(this);\n  }\n  /*\n   * Internal\n   */\n\n\n  _move(dest) {\n    dest.words = this.words;\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n    return dest;\n  }\n\n  _alloc(size) {\n    while (this.words.length < size) this.words.push(0);\n\n    return this;\n  }\n\n  _expand(size) {\n    this._alloc(size);\n\n    while (this.length < size) this.words[this.length++] = 0;\n\n    return this;\n  }\n\n  _strip() {\n    while (this.length > 1 && this.words[this.length - 1] === 0) this.length -= 1;\n\n    return this._normalize();\n  }\n\n  _normalize() {\n    assert(this.length > 0); // -0 = 0\n\n    if (this.length === 1 && this.words[0] === 0) this.negative = 0;\n    return this;\n  }\n\n  _check() {\n    // We never have a zero length number.\n    assert(this.length > 0); // Cannot exceed array bounds.\n\n    assert(this.length <= this.words.length);\n\n    if (this.length === 1) {\n      // Must be normalized.\n      if (this.words[0] === 0) assert(this.negative === 0);\n      return this;\n    } // Must be stripped.\n\n\n    assert(this.words[this.length - 1] !== 0);\n    return this;\n  }\n\n  _invertp(p) {\n    // Penk's right shift binary EGCD.\n    //\n    // See: The Art of Computer Programming,\n    //      Volume 2, Seminumerical Algorithms\n    //   Donald E. Knuth\n    //   Exercise 4.5.2.39\n    enforce(BN.isBN(p), 'p', 'bignum');\n    range(p.sign() > 0, 'invert');\n    assert(p.isOdd());\n    if (p.cmpn(1) === 0) throw new RangeError('Not invertible.');\n    const a = this.clone();\n    const b = p.clone();\n    const u = new BN(1);\n    const v = new BN(0);\n    if (a.isNeg() || a.ucmp(b) >= 0) a.imod(b);\n\n    while (!a.isZero()) {\n      let i = a._makeOdd();\n\n      let j = b._makeOdd();\n\n      while (i--) {\n        if (u.isOdd()) u._iadd(u, p);\n        u.iushrn(1);\n      }\n\n      while (j--) {\n        if (v.isOdd()) v._iadd(v, p);\n        v.iushrn(1);\n      }\n\n      if (a.ucmp(b) >= 0) {\n        a._isub(a, b);\n\n        if (u.ucmp(v) < 0) {\n          u._isub(v, u);\n\n          u._isub(p, u);\n        } else {\n          u._isub(u, v);\n        }\n      } else {\n        b._isub(b, a);\n\n        if (v.ucmp(u) < 0) {\n          v._isub(u, v);\n\n          v._isub(p, v);\n        } else {\n          v._isub(v, u);\n        }\n      }\n    }\n\n    if (b.cmpn(1) !== 0) throw new RangeError('Not invertible.');\n    assert(v.negative === 0);\n    assert(v.ucmp(p) < 0);\n    return v;\n  }\n\n  _makeOdd() {\n    const shift = this.zeroBits();\n    if (shift > 0) this.iushrn(shift);\n    return shift;\n  }\n\n  _factor2(num) {\n    // Find common factor of two.\n    // Expects inputs to be non-zero.\n    if ((this.words[0] | num.words[0]) & 1) return 0;\n    const len = Math.min(this.length, num.length);\n    let r = 0;\n\n    for (let i = 0; i < len; i++) {\n      const b = zeroBits(this.words[i] | num.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n\n    return r;\n  }\n\n  _cloneNormal() {\n    return this.red ? this.fromRed() : this.clone();\n  }\n\n  _forceRed(ctx) {\n    this.red = ctx;\n    return this;\n  }\n  /*\n   * Helpers\n   */\n\n\n  clone() {\n    const copy = new BN();\n    copy.words = new Array(this.length);\n\n    for (let i = 0; i < this.length; i++) copy.words[i] = this.words[i];\n\n    copy.length = this.length;\n    copy.negative = this.negative;\n    copy.red = this.red;\n    return copy;\n  }\n\n  inject(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    this._alloc(num.length);\n\n    for (let i = 0; i < num.length; i++) this.words[i] = num.words[i];\n\n    this.length = num.length;\n    this.negative = num.negative;\n    this.red = num.red;\n    return this;\n  }\n\n  set(num, endian) {\n    return this.fromNumber(num, endian);\n  }\n\n  swap(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    const x = this;\n    const y = num;\n    [x.words, y.words] = [y.words, x.words];\n    [x.length, y.length] = [y.length, x.length];\n    [x.negative, y.negative] = [y.negative, x.negative];\n    [x.red, y.red] = [y.red, x.red];\n    return x;\n  }\n\n  reverse() {\n    const neg = this.negative;\n    this.fromBuffer(this.toBuffer('be'), 'le');\n    this.negative = neg;\n    return this;\n  }\n\n  byteLength() {\n    return Math.ceil(this.bitLength() / 8);\n  }\n\n  bitLength() {\n    const w = this.words[this.length - 1];\n    const hi = countBits(w);\n    return (this.length - 1) * 26 + hi;\n  }\n\n  zeroBits() {\n    if (this.isZero()) return 0;\n    if (this.isOdd()) return 0;\n    let r = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const b = zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n\n    return r;\n  }\n\n  isSafe() {\n    if (this.length <= 2) return true;\n    if (this.length === 3 && this.words[2] === 0x01) return true;\n    return false;\n  }\n\n  word(pos) {\n    enforce(pos >>> 0 === pos, 'pos', 'uint32');\n    if (pos >= this.length) return 0;\n    return this.words[pos];\n  }\n\n  [custom]() {\n    let prefix = 'BN';\n    if (this.red) prefix = 'BN-R';\n    return `<${prefix}: ${this.toString(10)}>`;\n  }\n  /*\n   * Constant Time\n   */\n\n\n  csign() {\n    return this.negative * -2 + 1 - this.czero();\n  }\n\n  czero() {\n    const zword = this.words[0] - 1 >>> 31;\n    return this.length - 2 >>> 31 & zword;\n  }\n\n  cneg() {\n    return this.negative;\n  }\n\n  cpos() {\n    return this.negative ^ 1;\n  }\n\n  ceq(num) {\n    enforce(BN.isBN(num), 'num', 'bignum'); // Assumes `num` is the \"constant size\"\n    // parameter. Note that constant size\n    // doesn't necessarily mean secret.\n\n    let z = 0;\n\n    for (let i = 0; i < num.length; i++) z |= this.words[i % this.length] ^ num.words[i];\n\n    z |= this.length ^ num.length;\n    z |= this.negative ^ num.negative;\n    return z - 1 >>> 31;\n  }\n\n  ceqn(num) {\n    const neg = num >> 31 & 1;\n    const word = (num | 0) * (-neg | 1) & 0x3ffffff;\n    let z = 0;\n    z |= this.words[0] ^ word;\n    z |= this.length ^ 1;\n    z |= this.negative ^ neg;\n    return z - 1 >>> 31;\n  }\n\n  cswap(num, flag) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    const x = this;\n    const y = num;\n    const cond = (flag >> 31 | -flag >> 31) & 1;\n    const mask = -cond & 0x3ffffff;\n\n    x._alloc(y.words.length);\n\n    y._alloc(x.words.length);\n\n    for (let i = 0; i < x.words.length; i++) {\n      const word = (x.words[i] ^ y.words[i]) & mask;\n      x.words[i] ^= word;\n      y.words[i] ^= word;\n    }\n\n    const length = (x.length ^ y.length) & mask;\n    const negative = (x.negative ^ y.negative) & mask;\n    x.length ^= length;\n    y.length ^= length;\n    x.negative ^= negative;\n    y.negative ^= negative;\n    return this;\n  }\n\n  cinject(num, flag) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    const x = this;\n    const y = num;\n    const cond = (flag >> 31 | -flag >> 31) & 1;\n    const mask0 = cond - 1 & 0x3ffffff;\n    const mask1 = ~(cond - 1) & 0x3ffffff;\n\n    x._alloc(y.length);\n\n    for (let i = 0; i < y.length; i++) x.words[i] = x.words[i] & mask0 | y.words[i] & mask1;\n\n    x.length = x.length & mask0 | y.length & mask1;\n    x.negative = x.negative & mask0 | y.negative & mask1;\n    return this;\n  }\n\n  cset(num, flag) {\n    const cond = (flag >> 31 | -flag >> 31) & 1;\n    const mask0 = cond - 1 & 0x3ffffff;\n    const mask1 = ~(cond - 1) & 0x3ffffff;\n    const neg = num >> 31 & 1;\n    const word = (num | 0) * (-neg | 1) & 0x3ffffff;\n    this.words[0] = this.words[0] & mask0 | word & mask1;\n    this.length = this.length & mask0 | 1 & mask1;\n    this.negative = this.negative & mask0 | neg & mask1;\n    return this;\n  }\n  /*\n   * Conversion\n   */\n\n\n  toNumber() {\n    let num = this.words[0];\n\n    if (this.length === 2) {\n      num += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // Note: at this stage it is known that the top bit is set.\n      num += 0x10000000000000 + this.words[1] * 0x4000000;\n    } else if (this.length > 2) {\n      throw new RangeError('Number can only safely store up to 53 bits.');\n    }\n\n    return this.negative !== 0 ? -num : num;\n  }\n\n  toDouble() {\n    let num = 0;\n\n    for (let i = this.length - 1; i >= 0; i--) num = num * 0x4000000 + this.words[i];\n\n    return this.negative !== 0 ? -num : num;\n  }\n\n  valueOf() {\n    return this.toDouble();\n  }\n\n  toBigInt() {\n    if (!HAS_BIGINT) throw new Error('BigInt is not supported!');\n    const s52 = BigInt(52);\n    const s26 = BigInt(26);\n    let i = this.length - 1;\n    let num = BigInt(0);\n\n    for (; i >= 1; i -= 2) {\n      const hi = this.words[i] * 0x4000000;\n      const lo = this.words[i - 1];\n      num = num << s52 | BigInt(hi + lo);\n    }\n\n    if (i >= 0) num = num << s26 | BigInt(this.words[0]);\n    return this.negative !== 0 ? -num : num;\n  }\n\n  toBool() {\n    return !this.isZero();\n  }\n\n  toString(base, padding) {\n    base = getBase(base);\n    if (padding == null) padding = 0;\n    if (padding === 0) padding = 1;\n    enforce(base >>> 0 === base, 'base', 'uint32');\n    enforce(padding >>> 0 === padding, 'padding', 'uint32');\n    if (base < 2 || base > 36) throw new RangeError('Base ranges between 2 and 36.');\n\n    this._check();\n\n    if (base === 16) {\n      let out = '';\n      let off = 0;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const w = this.words[i];\n        const word = ((w << off | carry) & 0xffffff).toString(16);\n        carry = w >>> 24 - off & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;else out = word + out;\n        off += 2;\n\n        if (off >= 26) {\n          off -= 26;\n          i -= 1;\n        }\n      }\n\n      if (carry !== 0) out = carry.toString(16) + out;\n\n      while (out.length % padding !== 0) out = '0' + out;\n\n      if (this.negative !== 0) out = '-' + out;\n      return out;\n    }\n\n    const groupSize = groupSizes[base - 1];\n    const groupBase = groupBases[base - 1];\n    const c = this.clone();\n    let out = '';\n    c.negative = 0;\n\n    while (!c.isZero()) {\n      const r = c.remrn(groupBase).toString(base);\n      c.iquon(groupBase);\n      if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;else out = r + out;\n    }\n\n    if (this.isZero()) out = '0';\n\n    while (out.length % padding !== 0) out = '0' + out;\n\n    if (this.negative !== 0) out = '-' + out;\n    return out;\n  }\n\n  toJSON() {\n    return this.toString(16, 2);\n  }\n\n  toArray(endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  }\n\n  toBuffer(endian, length) {\n    return this.toArrayLike(Buffer, endian, length);\n  }\n\n  toArrayLike(ArrayType, endian, length) {\n    if (endian == null) endian = 'be';\n    if (length == null) length = 0;\n    enforce(typeof ArrayType === 'function', 'ArrayType', 'function');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n    enforce(length >>> 0 === length, 'length', 'uint32');\n\n    this._check();\n\n    const bytes = this.byteLength();\n    const size = length || Math.max(1, bytes);\n    if (bytes > size) throw new RangeError('Byte array longer than desired length.');\n    const res = allocate(ArrayType, size); // See: https://github.com/indutny/bn.js/pull/222\n\n    if (endian === 'be') {\n      let pos = res.length - 1;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const shift = (i & 3) << 1;\n        const word = this.words[i] << shift | carry;\n        res[pos--] = word & 0xff;\n        if (pos >= 0) res[pos--] = word >>> 8 & 0xff;\n        if (pos >= 0) res[pos--] = word >>> 16 & 0xff;\n\n        if (shift === 6) {\n          if (pos >= 0) res[pos--] = word >>> 24 & 0xff;\n          carry = 0;\n        } else {\n          carry = word >>> 24;\n        }\n      }\n\n      if (pos >= 0) {\n        res[pos--] = carry;\n\n        while (pos >= 0) res[pos--] = 0;\n\n        carry = 0;\n      }\n\n      assert(carry === 0);\n    } else {\n      let pos = 0;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const shift = (i & 3) << 1;\n        const word = this.words[i] << shift | carry;\n        res[pos++] = word & 0xff;\n        if (pos < res.length) res[pos++] = word >>> 8 & 0xff;\n        if (pos < res.length) res[pos++] = word >>> 16 & 0xff;\n\n        if (shift === 6) {\n          if (pos < res.length) res[pos++] = word >>> 24 & 0xff;\n          carry = 0;\n        } else {\n          carry = word >>> 24;\n        }\n      }\n\n      if (pos < res.length) {\n        res[pos++] = carry;\n\n        while (pos < res.length) res[pos++] = 0;\n\n        carry = 0;\n      }\n\n      assert(carry === 0);\n    }\n\n    return res;\n  }\n\n  encode(endian, length) {\n    return this.toBuffer(endian, length);\n  }\n  /*\n   * Instantiation\n   */\n\n\n  of(num, endian) {\n    return this.fromNumber(num, endian);\n  }\n\n  fromNumber(num, endian) {\n    if (endian == null) endian = 'be';\n    enforce(isInteger(num), 'num', 'integer');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n    const neg = num < 0 | 0;\n    if (neg) num = -num;\n\n    if (num < 0x4000000) {\n      this.words[0] = num & 0x3ffffff;\n      this.length = 1;\n    } else if (num < 0x10000000000000) {\n      this.words = [num & 0x3ffffff, num / 0x4000000 & 0x3ffffff];\n      this.length = 2;\n    } else {\n      this.words = [num & 0x3ffffff, num / 0x4000000 & 0x3ffffff, 1];\n      this.length = 3;\n    }\n\n    this.negative = neg;\n    if (endian === 'le') this.reverse();\n    return this;\n  }\n\n  fromDouble(num, endian) {\n    if (endian == null) endian = 'be';\n    enforce(typeof num === 'number', 'num', 'double');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n    if (!isFinite(num)) num = 0;\n    const neg = num <= -1 | 0;\n    if (num < 0) num = -num;\n    num = Math.floor(num);\n    this.words = [];\n\n    while (num > 0) {\n      const lo = num % 0x4000000;\n      const hi = (num - lo) / 0x4000000;\n      this.words.push(lo);\n      num = hi;\n    }\n\n    if (this.words.length === 0) this.words.push(0);\n    this.length = this.words.length;\n    this.negative = neg;\n    if (endian === 'le') this.reverse();\n    return this;\n  }\n\n  fromBigInt(num, endian) {\n    if (endian == null) endian = 'be';\n    enforce(typeof num === 'bigint', 'num', 'bigint');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n    if (!HAS_BIGINT) throw new Error('BigInt is not supported!'); // You know the implementation has a\n    // problem when strings are twice\n    // as fast as bigints.\n\n    const start = num < BigInt(0) | 0;\n\n    this._fromHex(num.toString(16), start);\n\n    this.negative = start;\n    if (endian === 'le') this.reverse();\n    return this;\n  }\n\n  fromBool(value) {\n    enforce(typeof value === 'boolean', 'value', 'boolean');\n    this.words[0] = value | 0;\n    this.length = 1;\n    this.negative = 0;\n    return this;\n  }\n\n  fromString(str, base, endian) {\n    if (base === 'le' || base === 'be') [base, endian] = [endian, base];\n    base = getBase(base);\n    if (endian == null) endian = 'be';\n    enforce(typeof str === 'string', 'string', 'string');\n    enforce(base >>> 0 === base, 'base', 'uint32');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n    if (base < 2 || base > 36) throw new Error('Base ranges between 2 and 36.');\n    str = str.replace(/\\s+/g, '');\n    let start = 0;\n    if (str.length > 0 && str.charCodeAt(0) === 0x2d) start = 1;\n    if (base === 16) this._fromHex(str, start);else this._fromBase(str, base, start);\n    this.negative = start;\n\n    this._normalize();\n\n    if (endian === 'le') this.reverse();\n    return this;\n  }\n\n  _fromHex(str, start) {\n    this.length = Math.max(2, Math.ceil((str.length - start) / 6));\n    this.words = new Array(this.length);\n\n    for (let i = 0; i < this.length; i++) this.words[i] = 0; // Scan 24-bit chunks and add them to the number.\n\n\n    let off = 0;\n    let i = str.length - 6;\n    let j = 0;\n\n    for (; i >= start; i -= 6) {\n      const w = parseHex(str, i, i + 6);\n      this.words[j] |= w << off & 0x3ffffff; // `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb.\n\n      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n      off += 24;\n\n      if (off >= 26) {\n        off -= 26;\n        j += 1;\n      }\n    }\n\n    if (i + 6 !== start) {\n      const w = parseHex(str, start, i + 6);\n      this.words[j] |= w << off & 0x3ffffff;\n      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n    }\n\n    return this._strip();\n  }\n\n  _fromBase(str, base, start) {\n    // Initialize as zero.\n    this.words[0] = 0;\n    this.length = 1;\n    this.negative = 0; // Find length of limb in base.\n\n    let limbLen = 0;\n    let limbPow = 1;\n\n    for (; limbPow <= 0x3ffffff; limbPow *= base) limbLen += 1;\n\n    limbLen -= 1;\n    limbPow = limbPow / base | 0;\n    const total = str.length - start;\n    const mod = total % limbLen;\n    const end = Math.min(total, total - mod) + start;\n    let i = start;\n\n    for (; i < end; i += limbLen) {\n      const word = parseBase(str, i, i + limbLen, base);\n      this.imuln(limbPow);\n\n      this._iaddn(word);\n    }\n\n    if (mod !== 0) {\n      const pow = Math.pow(base, mod);\n      const word = parseBase(str, i, str.length, base);\n      this.imuln(pow);\n\n      this._iaddn(word);\n    }\n\n    return this;\n  }\n\n  fromJSON(json) {\n    if (BN.isBN(json)) {\n      if (json.red) return json.fromRed();\n      return json.clone();\n    }\n\n    if (Array.isArray(json)) {\n      for (const chunk of json) enforce(typeof chunk === 'string', 'chunk', 'string');\n\n      json = json.join('');\n    }\n\n    return this.fromString(json, 16);\n  }\n\n  fromBN(num) {\n    return this.inject(num);\n  }\n\n  fromArray(data, endian) {\n    enforce(Array.isArray(data), 'data', 'array');\n    return this.fromArrayLike(data, endian);\n  }\n\n  fromBuffer(data, endian) {\n    enforce(Buffer.isBuffer(data), 'data', 'buffer');\n    return this.fromArrayLike(data, endian);\n  }\n\n  fromArrayLike(data, endian) {\n    if (endian == null) endian = 'be';\n    enforce(data && data.length >>> 0 === data.length, 'data', 'array-like');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (data.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n      this.negative = 0;\n      return this;\n    }\n\n    this.length = Math.max(2, Math.ceil(data.length / 3));\n    this.words = new Array(this.length);\n    this.negative = 0;\n\n    for (let i = 0; i < this.length; i++) this.words[i] = 0;\n\n    const left = data.length % 3;\n    let off = 0;\n    let j = 0;\n    let w = 0;\n\n    if (endian === 'be') {\n      for (let i = data.length - 1; i >= 2; i -= 3) {\n        const w = data[i] | data[i - 1] << 8 | data[i - 2] << 16;\n        this.words[j] |= w << off & 0x3ffffff;\n        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n        off += 24;\n\n        if (off >= 26) {\n          off -= 26;\n          j += 1;\n        }\n      }\n\n      switch (left) {\n        case 2:\n          w = data[1] | data[0] << 8;\n          break;\n\n        case 1:\n          w = data[0];\n          break;\n      }\n    } else {\n      const len = data.length - left;\n\n      for (let i = 0; i < len; i += 3) {\n        const w = data[i] | data[i + 1] << 8 | data[i + 2] << 16;\n        this.words[j] |= w << off & 0x3ffffff;\n        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n        off += 24;\n\n        if (off >= 26) {\n          off -= 26;\n          j += 1;\n        }\n      }\n\n      switch (left) {\n        case 2:\n          w = data[len] | data[len + 1] << 8;\n          break;\n\n        case 1:\n          w = data[len];\n          break;\n      }\n    }\n\n    if (left > 0) {\n      this.words[j] |= w << off & 0x3ffffff;\n      this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n    }\n\n    return this._strip();\n  }\n\n  decode(data, endian) {\n    return this.fromBuffer(data, endian);\n  }\n\n  from(num, base, endian) {\n    if (num == null) return this;\n    if (base === 'le' || base === 'be') [base, endian] = [endian, base];\n    if (typeof num === 'number') return this.fromNumber(num, endian);\n    if (typeof num === 'bigint') return this.fromBigInt(num, endian);\n    if (typeof num === 'string') return this.fromString(num, base, endian);\n\n    if (typeof num === 'object') {\n      if (BN.isBN(num)) return this.fromBN(num, endian);\n      if (num.length >>> 0 === num.length) return this.fromArrayLike(num, endian);\n    }\n\n    if (typeof num === 'boolean') return this.fromBool(num);\n    throw new TypeError('Non-numeric object passed to BN.');\n  }\n  /*\n   * Static Methods\n   */\n\n\n  static min(...args) {\n    let min = null;\n\n    for (const num of args) {\n      enforce(BN.isBN(num), 'num', 'bignum');\n      if (!min || num.cmp(min) < 0) min = num;\n    }\n\n    return min || new BN(0);\n  }\n\n  static max(...args) {\n    let max = null;\n\n    for (const num of args) {\n      enforce(BN.isBN(num), 'num', 'bignum');\n      if (!max || num.cmp(max) > 0) max = num;\n    }\n\n    return max || new BN(0);\n  }\n\n  static cmp(a, b) {\n    enforce(BN.isBN(a), 'a', 'bignum');\n    return a.cmp(b);\n  }\n\n  static ucmp(a, b) {\n    enforce(BN.isBN(a), 'a', 'bignum');\n    return a.ucmp(b);\n  }\n\n  static red(num) {\n    return new Red(num);\n  }\n\n  static barrett(num) {\n    return new Barrett(num);\n  }\n\n  static mont(num) {\n    return new Mont(num);\n  }\n\n  static _prime(name) {\n    if (primes[name]) return primes[name];\n    let prime;\n    if (name === 'p192') prime = new P192();else if (name === 'p224') prime = new P224();else if (name === 'p521') prime = new P521();else if (name === 'k256') prime = new K256();else if (name === 'p251') prime = new P251();else if (name === 'p25519') prime = new P25519();else if (name === 'p448') prime = new P448();else throw new Error(`Unknown prime: \"${name}\".`);\n    primes[name] = prime;\n    return prime;\n  }\n\n  static prime(name) {\n    return BN._prime(name).p.clone();\n  }\n\n  static pow(num, exp) {\n    if (num === 2) return BN.shift(1, exp);\n    return new BN().fromNumber(num).pown(exp);\n  }\n\n  static shift(num, bits) {\n    if (num === 1) return new BN(0).usetn(bits, 1);\n    return new BN().fromNumber(num).ishln(bits);\n  }\n\n  static mask(bits) {\n    return BN.shift(1, bits).isubn(1);\n  }\n\n  static randomBits(rng, bits) {\n    enforce(rng != null, 'rng', 'rng');\n    enforce(bits >>> 0 === bits, 'bits', 'uint32');\n\n    if (typeof rng === 'object') {\n      enforce(typeof rng.randomBytes === 'function', 'rng', 'rng');\n      const size = bits + 7 >>> 3;\n      const total = size * 8;\n      const bytes = rng.randomBytes(size);\n      enforce(Buffer.isBuffer(bytes), 'bytes', 'buffer');\n      if (bytes.length !== size) throw new RangeError('Invalid number of bytes returned from RNG.');\n      const num = BN.fromBuffer(bytes);\n      if (total > bits) num.iushrn(total - bits);\n      return num;\n    }\n\n    enforce(typeof rng === 'function', 'rng', 'rng');\n    const num = rng(bits);\n    enforce(BN.isBN(num), 'num', 'bignum');\n    range(num.negative === 0, 'RNG');\n    nonred(!num.red, 'RNG');\n    if (num.bitLength() > bits) throw new RangeError('Invalid number of bits returned from RNG.');\n    return num;\n  }\n\n  static random(rng, min, max) {\n    min = BN.cast(min, 16);\n    max = BN.cast(max, 16);\n    if (min.cmp(max) > 0) throw new RangeError('Minimum cannot be greater than maximum.');\n    const space = max.sub(min).iabs();\n    const bits = space.bitLength();\n    if (bits === 0) return min.clone();\n\n    for (;;) {\n      const num = BN.randomBits(rng, bits); // Maximum is _exclusive_!\n\n      if (num.cmp(space) >= 0) continue; // Minimum is _inclusive_!\n\n      num.iadd(min);\n      return num;\n    }\n  }\n\n  static of(num, endian) {\n    return new BN().of(num, endian);\n  }\n\n  static fromNumber(num, endian) {\n    return new BN().fromNumber(num, endian);\n  }\n\n  static fromDouble(num, endian) {\n    return new BN().fromDouble(num, endian);\n  }\n\n  static fromBigInt(num, endian) {\n    return new BN().fromBigInt(num, endian);\n  }\n\n  static fromBool(value) {\n    return new BN().fromBool(value);\n  }\n\n  static fromString(str, base, endian) {\n    return new BN().fromString(str, base, endian);\n  }\n\n  static fromJSON(json) {\n    return new BN().fromJSON(json);\n  }\n\n  static fromBN(num) {\n    return new BN().fromBN(num);\n  }\n\n  static fromArray(data, endian) {\n    return new BN().fromArray(data, endian);\n  }\n\n  static fromBuffer(data, endian) {\n    return new BN().fromBuffer(data, endian);\n  }\n\n  static fromArrayLike(data, endian) {\n    return new BN().fromArrayLike(data, endian);\n  }\n\n  static decode(data, endian) {\n    return new BN().decode(data, endian);\n  }\n\n  static from(num, base, endian) {\n    return new BN().from(num, base, endian);\n  }\n\n  static cast(num, base, endian) {\n    if (BN.isBN(num)) return num;\n    return new BN(num, base, endian);\n  }\n\n  static isBN(obj) {\n    return obj instanceof BN;\n  }\n\n}\n/*\n * Static\n */\n\n\nBN.BN = BN;\nBN.wordSize = 26;\nBN.native = 0;\n/**\n * Prime\n */\n\nclass Prime {\n  constructor(name, p) {\n    // P = 2^N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = BN.shift(1, this.n).isub(this.p);\n    this.lo = this.p.clone();\n    this.one = this.p.clone();\n  }\n\n  ireduce(num) {\n    // Assumes that `num` is less than `P^2`:\n    // num = HI * (2^N - K) + HI * K + LO = HI * K + LO (mod P)\n    const neg = num.negative !== 0; // Track bits.\n\n    let bits = num.bitLength(); // Must be less than P^2.\n\n    assert(bits <= this.n * 2); // Ensure positive.\n\n    num.negative = 0; // Reduce.\n\n    while (bits > this.n) {\n      // lo = num & ((1 << n) - 1)\n      // num = num >> n\n      this.split(num, this.lo); // num = num * K\n\n      this.imulK(num); // num = num + lo\n\n      num._iadd(num, this.lo); // bits = bitlen(num)\n\n\n      bits = num.bitLength();\n    } // Final reduction.\n\n\n    const cmp = bits < this.n ? -1 : num.ucmp(this.p);\n\n    if (cmp === 0) {\n      num.words[0] = 0;\n      num.length = 1;\n    } else if (cmp > 0) {\n      num._isub(num, this.p);\n    } else {// Note: we shouldn't need to strip here.\n    } // Adjust sign.\n\n\n    if (neg && !num.isZero()) num._isub(this.p, num);\n    return num;\n  }\n\n  split(input, out) {\n    input._split(this.n, out);\n  }\n\n  imulK(num) {\n    return num.imul(this.k);\n  }\n\n}\n/**\n * P192\n */\n\n\nclass P192 extends Prime {\n  constructor() {\n    // 2^192 - 2^64 - 1 (= 3 mod 4)\n    super('p192', 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x10000000000000001\n    // K = 2^64 + 1\n    const one = this.one.inject(num);\n    return num.iushln(64)._iadd(num, one);\n  }\n\n}\n/**\n * P224\n */\n\n\nclass P224 extends Prime {\n  constructor() {\n    // 2^224 - 2^96 + 1 (no congruence)\n    super('p224', 'ffffffff ffffffff ffffffff ffffffff' + '00000000 00000000 00000001');\n  }\n\n  imulK(num) {\n    // K = 0xffffffffffffffffffffffff\n    // K = 2^96 - 1\n    const one = this.one.inject(num);\n    return num.iushln(96)._isub(num, one);\n  }\n\n}\n/**\n * P521\n */\n\n\nclass P521 extends Prime {\n  constructor() {\n    // 2^521 - 1 (= 3 mod 4)\n    super('p521', '000001ff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x01\n    return num;\n  }\n\n}\n/**\n * K256\n */\n\n\nclass K256 extends Prime {\n  constructor() {\n    // 2^256 - 2^32 - 977 (= 3 mod 4)\n    super('k256', 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff fffffffe fffffc2f');\n  }\n\n  split(input, output) {\n    // 256 = 9 * 26 + 22\n    const mask = 0x3fffff;\n    const len = Math.min(input.length, 9);\n\n    output._alloc(len + 1);\n\n    for (let i = 0; i < len; i++) output.words[i] = input.words[i];\n\n    output.length = len;\n\n    if (input.length <= 9) {\n      output._strip();\n\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    } // Shift by 9 limbs.\n\n\n    let prev = input.words[9];\n    let i = 10;\n    output.words[output.length++] = prev & mask;\n\n    output._strip();\n\n    for (; i < input.length; i++) {\n      const next = input.words[i] | 0;\n      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n      prev = next;\n    }\n\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) input.length -= 10;else input.length -= 9;\n\n    input._strip(); // Unsure if we need this.\n\n  }\n\n  imulK(num) {\n    // K = 0x1000003d1 = [0x40, 0x3d1]\n    // K = 2^32 + 977\n    num._expand(num.length + 2); // Bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n\n\n    let lo = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i];\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + Math.floor(lo / 0x4000000);\n    } // Fast length reduction.\n\n\n    if (num.words[num.length - 1] === 0) {\n      num.length -= 1;\n      if (num.words[num.length - 1] === 0) num.length -= 1;\n    } // Note: we shouldn't need to strip here.\n\n\n    return num;\n  }\n\n}\n/**\n * P251\n */\n\n\nclass P251 extends Prime {\n  constructor() {\n    // 2^251 - 9\n    super('p251', '07ffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff fffffff7');\n  }\n\n  imulK(num) {\n    // K = 0x09\n    if (num.isZero()) return num;\n    let carry = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i] * 0x09 + carry;\n      carry = w >>> 26;\n      num.words[i] = w & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      num._alloc(num.length + 1);\n\n      num.words[num.length++] = carry;\n    } // Note: we shouldn't need to strip here.\n\n\n    return num;\n  }\n\n}\n/**\n * P25519\n */\n\n\nclass P25519 extends Prime {\n  constructor() {\n    // 2^255 - 19 (= 5 mod 8)\n    super('p25519', '7fffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffed');\n  }\n\n  imulK(num) {\n    // K = 0x13\n    let carry = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i] * 0x13 + carry;\n      carry = w >>> 26;\n      num.words[i] = w & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      num._alloc(num.length + 1);\n\n      num.words[num.length++] = carry;\n    } // Note: we shouldn't need to strip here.\n\n\n    return num;\n  }\n\n}\n/**\n * P448\n */\n\n\nclass P448 extends Prime {\n  constructor() {\n    // 2^448 - 2^224 - 1 (= 3 mod 4)\n    super('p448', 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff fffffffe ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x100000000000000000000000000000000000000000000000000000001\n    // K = 2^224 + 1\n    const one = this.one.inject(num);\n    return num.iushln(224)._iadd(num, one);\n  }\n\n}\n/**\n * Reduction Engine\n */\n\n\nclass Red {\n  constructor(m) {\n    let prime = null;\n\n    if (typeof m === 'string') {\n      prime = BN._prime(m);\n      m = prime.p;\n    }\n\n    enforce(BN.isBN(m), 'm', 'bignum');\n    nonred(!m.red, 'reduction');\n    range(m.sign() > 0, 'reduction');\n    this.m = m;\n    this.prime = prime;\n    this.mb = null;\n    this.sm1 = null;\n  }\n\n  _verify1(a) {\n    range(a.negative === 0, 'red');\n    red(a.red != null, 'red');\n  }\n\n  _verify2(a, b) {\n    range((a.negative | b.negative) === 0, 'red');\n    red(a.red != null && a.red === b.red, 'red');\n  }\n\n  get mont() {\n    return false;\n  }\n\n  precompute() {\n    // Precompute `sqrt(-1)` for primes congruent to 5 mod 8.\n    if (this.sm1 === null && this.m.andln(7) === 5) {\n      const x = new BN(2).toRed(this);\n      const e = this.m.subn(1).iushrn(2); // sqrt(-1) = 2^((p - 1) / 4) mod p\n\n      this.sm1 = this.pow(x, e);\n    }\n\n    return this;\n  }\n\n  convertTo(num) {\n    const res = num.mod(this.m);\n    res.red = this;\n    return res;\n  }\n\n  convertFrom(num) {\n    const res = num.clone();\n    res.red = null;\n    return res;\n  }\n\n  intTo(a) {\n    return a;\n  }\n\n  intFrom(a) {\n    return a;\n  }\n\n  imod(a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.imod(this.m)._forceRed(this);\n  }\n\n  iadd(a, b) {\n    this._verify2(a, b);\n\n    a._iadd(a, b);\n\n    if (a.ucmp(this.m) >= 0) a._isub(a, this.m);\n    return a;\n  }\n\n  add(a, b) {\n    if (a.length < b.length) return this.iadd(b.clone(), a);\n    return this.iadd(a.clone(), b);\n  }\n\n  iaddn(a, num) {\n    this._verify1(a);\n\n    if (num < 0) return this.isubn(a, -num);\n    if (this.m.length === 1) num %= this.m.words[0];\n\n    a._iaddn(num);\n\n    if (a.ucmp(this.m) >= 0) a._isub(a, this.m);\n    return a;\n  }\n\n  addn(a, num) {\n    return this.iaddn(a.clone(), num);\n  }\n\n  isub(a, b) {\n    this._verify2(a, b); //  0: a - a mod m == 0\n    // -1: a - b mod m == m - (b - a)\n    // +1: a - b mod m == a - b\n\n\n    const cmp = a.ucmp(b);\n\n    if (cmp === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    if (cmp < 0) {\n      a._isub(b, a);\n\n      a._isub(this.m, a);\n    } else {\n      a._isub(a, b);\n    }\n\n    return a;\n  }\n\n  sub(a, b) {\n    return this.isub(a.clone(), b);\n  }\n\n  isubn(a, num) {\n    this._verify1(a);\n\n    if (num < 0) return this.iaddn(a, -num);\n    if (this.m.length === 1) num %= this.m.words[0]; //  <: a - b mod m == m - (b - a)\n    // >=: a - b mod m == a - b\n\n    if (a.length === 1 && a.words[0] < num) {\n      a.words[0] = num - a.words[0];\n\n      a._isub(this.m, a);\n    } else {\n      a._isubn(num);\n    }\n\n    return a;\n  }\n\n  subn(a, num) {\n    return this.isubn(a.clone(), num);\n  }\n\n  imul(a, b) {\n    this._verify2(a, b);\n\n    return this.imod(a.imul(b));\n  }\n\n  mul(a, b) {\n    this._verify2(a, b);\n\n    return this.imod(a.mul(b));\n  }\n\n  imuln(a, num) {\n    this._verify1(a);\n\n    if (a.isZero()) return a;\n\n    if (num === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    const neg = num < 0;\n    if (neg) num = -num;\n    if (this.m.length === 1) num %= this.m.words[0];\n    a.imuln(num);\n\n    if (num <= 16) {\n      // Quick reduction.\n      while (a.ucmp(this.m) >= 0) a._isub(a, this.m);\n    } else {\n      this.imod(a);\n    }\n\n    if (neg) this.ineg(a);\n    return a;\n  }\n\n  muln(a, num) {\n    return this.imuln(a.clone(), num);\n  }\n\n  idiv(a, b) {\n    return this.div(a, b)._move(a);\n  }\n\n  div(a, b) {\n    return this.mul(a, this.invert(b));\n  }\n\n  idivn(a, num) {\n    return this.divn(a, num)._move(a);\n  }\n\n  divn(a, num) {\n    return this.div(a, this.convertTo(new BN(num)));\n  }\n\n  ipow(a, num) {\n    return this.pow(a, num)._move(a);\n  }\n\n  pow(a, num) {\n    this._verify1(a);\n\n    if (num.isNeg()) a = this.invert(a); // Small exponent.\n\n    if (num.length === 1) return this.pown(a, num.words[0]); // Call out to BigInt.\n\n    if (HAS_BIGINT && !this.prime) return this.powInt(a, num); // Otherwise, a BN implementation.\n\n    return this.powNum(a, num);\n  }\n\n  powNum(a, num) {\n    // Sliding window.\n    const wnd = new Array(WND_SIZE);\n    wnd[0] = this.sqrn(a, WND_WIDTH - 1);\n\n    for (let i = 1; i < WND_SIZE; i++) wnd[i] = this.mul(wnd[i - 1], a);\n\n    let i = num.bitLength();\n    let r = new BN(1).toRed(this);\n\n    while (i >= WND_WIDTH) {\n      const pos = i - WND_WIDTH;\n      const bits = num.bits(pos, WND_WIDTH);\n\n      if (bits < WND_SIZE) {\n        r = this.sqr(r);\n        i -= 1;\n        continue;\n      }\n\n      r = this.sqrn(r, WND_WIDTH);\n      r = this.mul(r, wnd[bits & ~WND_SIZE]);\n      i = pos;\n    }\n\n    if (i > 0) {\n      const bits = num.bits(0, i);\n\n      while (i--) {\n        r = this.sqr(r);\n        if (bits >> i & 1) r = this.mul(r, a);\n      }\n    }\n\n    return r;\n  }\n\n  powInt(a, num) {\n    if (this.mb === null) this.mb = this.m.toBigInt();\n    const x = this.intFrom(a.toBigInt());\n    const y = powInt(x, num, this.mb);\n    const z = this.intTo(y);\n    return BN.fromBigInt(z)._forceRed(this);\n  }\n\n  sqrn(a, n) {\n    for (let i = 0; i < n; i++) a = this.sqr(a);\n\n    return a;\n  }\n\n  ipown(a, num) {\n    return this.pown(a, num)._move(a);\n  }\n\n  pown(a, num) {\n    this._verify1(a);\n\n    if (num < 0) {\n      a = this.invert(a);\n      num = -num;\n    }\n\n    if (num === 0) return new BN(1).toRed(this);\n    if (num === 1) return a.clone();\n    const bits = countBits(num);\n    let r = a;\n\n    for (let i = bits - 2; i >= 0; i--) {\n      r = this.sqr(r);\n      if (num >> i & 1) r = this.mul(r, a);\n    }\n\n    return r;\n  }\n\n  isqr(a) {\n    return this.imul(a, a);\n  }\n\n  sqr(a) {\n    return this.mul(a, a);\n  }\n\n  isqrt(x) {\n    return this.sqrt(x)._move(x);\n  }\n\n  sqrt(x) {\n    this._verify1(x); // Fast case (p = 3 mod 4).\n\n\n    if (this.m.andln(3) === 3) return this.sqrt3mod4(x); // Fast case (p = 5 mod 8).\n\n    if (this.m.andln(7) === 5) {\n      if (this.sm1 != null) return this.sqrt5mod8sm1(x);\n      return this.sqrt5mod8(x);\n    } // Slow case (Tonelli-Shanks).\n\n\n    return this.sqrt0(x);\n  }\n\n  sqrt3mod4(x) {\n    const e = this.m.addn(1).iushrn(2); // (p + 1) / 4\n\n    const b = this.pow(x, e);\n    if (!this.sqr(b).eq(x)) throw new Error('X is not a square mod P.');\n    return b;\n  }\n\n  sqrt5mod8(x) {\n    // Atkin's Algorithm.\n    const one = new BN(1).toRed(this);\n    const e = this.m.ushrn(3); // (p - 5) / 8\n\n    const x2 = this.add(x, x);\n    const alpha = this.pow(x2, e);\n    const beta = this.mul(x2, this.sqr(alpha));\n    const b = this.mul(this.mul(alpha, x), this.isub(beta, one));\n    if (!this.sqr(b).eq(x)) throw new Error('X is not a square mod P.');\n    return b;\n  }\n\n  sqrt5mod8sm1(x) {\n    const e = this.m.addn(3).iushrn(3); // (p + 3) / 8\n\n    const b = this.pow(x, e);\n    if (this.sqr(b).eq(x)) return b;\n    const c = this.mul(b, this.sm1);\n    if (this.sqr(c).eq(x)) return c;\n    throw new Error('X is not a square mod P.');\n  }\n\n  sqrt0(x) {\n    if (this.m.cmpn(1) === 0 || !this.m.isOdd()) throw new Error('Invalid prime.');\n\n    switch (this.jacobi(x)) {\n      case -1:\n        throw new Error('X is not a square mod P.');\n\n      case 0:\n        return new BN(0)._forceRed(this);\n\n      case 1:\n        break;\n    }\n\n    const one = new BN(1).toRed(this);\n    const s = this.m.subn(1);\n\n    const e = s._makeOdd();\n\n    const n = new BN(2).toRed(this);\n\n    while (this.jacobi(n) !== -1) this.iadd(n, one);\n\n    let b = this.pow(x, s);\n    let g = this.pow(n, s);\n    let y = this.pow(x, s.iaddn(1).iushrn(1));\n    let k = e;\n\n    for (;;) {\n      let t = b;\n      let m = 0;\n\n      while (t.cmp(one) !== 0 && m < k) {\n        t = this.sqr(t);\n        m += 1;\n      }\n\n      if (m === 0) break;\n      assert(m < k);\n      t = this.sqrn(g, k - m - 1);\n      g = this.sqr(t);\n      y = this.mul(y, t);\n      b = this.mul(b, g);\n      k = m;\n    }\n\n    return y;\n  }\n\n  idivsqrt(u, v) {\n    return this.divsqrt(u, v)._move(u);\n  }\n\n  divsqrt(u, v) {\n    this._verify2(u, v); // v = 0\n\n\n    if (v.isZero()) throw new RangeError('Not invertible.'); // p = 3 mod 4\n\n    if (this.m.andln(3) === 3) return this.divsqrt3mod4(u, v); // p = 5 mod 8\n\n    if (this.sm1 != null && this.m.andln(7) === 5) return this.divsqrt5mod8(u, v);\n    return this.sqrt(this.div(u, v));\n  }\n\n  divsqrt3mod4(u, v) {\n    // x = u^3 * v * (u^5 * v^3)^((p - 3) / 4) mod p\n    const e = this.m.subn(3).iushrn(2);\n    const u2 = this.sqr(u);\n    const u3 = this.mul(u2, u);\n    const u5 = this.mul(u3, u2);\n    const v3 = this.mul(this.sqr(v), v);\n    const p = this.pow(this.mul(u5, v3), e);\n    const x = this.mul(this.mul(u3, v), p);\n    const c = this.mul(v, this.sqr(x));\n    if (c.cmp(u) === 0) return x;\n    throw new Error('X is not a square mod P.');\n  }\n\n  divsqrt5mod8(u, v) {\n    // x = u * v^3 * (u * v^7)^((p - 5) / 8) mod p\n    const e = this.m.subn(5).iushrn(3);\n    const v3 = this.mul(this.sqr(v), v);\n    const v7 = this.mul(this.sqr(v3), v);\n    const p = this.pow(this.mul(u, v7), e);\n    const x = this.mul(this.mul(u, v3), p);\n    const c = this.mul(v, this.sqr(x));\n    if (c.cmp(u) === 0) return x;\n    if (this.ineg(c).cmp(u) === 0) return this.mul(x, this.sm1);\n    throw new Error('X is not a square mod P.');\n  }\n\n  isSquare(a) {\n    let symbol;\n    if (this.prime) symbol = this.legendre(a);else if (this.m.isOdd()) symbol = this.jacobi(a);else symbol = this.kronecker(a);\n    return Boolean(~symbol >>> 31);\n  }\n\n  ishl(a, num) {\n    this._verify1(a);\n\n    return this.imod(a.iushl(num));\n  }\n\n  shl(a, num) {\n    return this.ishl(a.clone(), num);\n  }\n\n  ishln(a, num) {\n    this._verify1(a);\n\n    a.iushln(num);\n\n    if (num <= 4) {\n      // Quick reduction.\n      while (a.ucmp(this.m) >= 0) a._isub(a, this.m);\n    } else {\n      this.imod(a);\n    }\n\n    return a;\n  }\n\n  shln(a, num) {\n    return this.ishln(a.clone(), num);\n  }\n\n  ineg(a) {\n    this._verify1(a);\n\n    if (!a.isZero()) a._isub(this.m, a);\n    return a;\n  }\n\n  neg(a) {\n    return this.ineg(a.clone());\n  }\n\n  eq(a, b) {\n    this._verify2(a, b);\n\n    return a.ucmp(b) === 0;\n  }\n\n  eqn(a, num) {\n    this._verify1(a);\n\n    if (this.m.length === 1) {\n      num %= this.m.words[0];\n      if (num < 0) num += this.m.words[0];\n      return a.ucmpn(num) === 0;\n    }\n\n    if (num < 0) {\n      this.m._isubn(-num);\n\n      const cmp = a.ucmp(this.m);\n\n      this.m._iaddn(-num);\n\n      return cmp === 0;\n    }\n\n    return a.ucmpn(num) === 0;\n  }\n\n  isHigh(a) {\n    return !this.isLow(a);\n  }\n\n  isLow(a) {\n    this._verify1(a);\n\n    return a.ucmp(this.m.ushrn(1)) <= 0;\n  }\n\n  isOdd(a) {\n    this._verify1(a);\n\n    return a.isOdd();\n  }\n\n  isEven(a) {\n    this._verify1(a);\n\n    return a.isEven();\n  }\n\n  legendre(num) {\n    this._verify1(num);\n\n    if (this.m.isEven()) throw new Error('legendre: `num` must be odd.'); // Euler's criterion.\n\n    const e = this.m.subn(1).iushrn(1); // (p - 1) / 2\n\n    const symbol = this.pow(num, e);\n    const one = new BN(1).toRed(this);\n    const a = symbol.czero();\n    const b = symbol.ceq(one);\n    const c = symbol.ceq(this.ineg(one)); // Must be one of these.\n\n    if ((a | b | c) === 0) throw new Error('Invalid prime.'); // Cannot be multiple.\n\n    assert(a + b + c === 1); // 0, 1, or -1.\n\n    return b - c;\n  }\n\n  jacobi(a) {\n    this._verify1(a);\n\n    return a.jacobi(this.m);\n  }\n\n  kronecker(a) {\n    this._verify1(a);\n\n    return a.kronecker(this.m);\n  }\n\n  iinvert(a) {\n    return this.invert(a)._move(a);\n  }\n\n  invert(a) {\n    this._verify1(a);\n\n    return a.invert(this.m)._forceRed(this);\n  }\n\n  ifermat(a) {\n    return this.fermat(a)._move(a);\n  }\n\n  fermat(a) {\n    this._verify1(a);\n\n    if (a.isZero() || this.m.cmpn(1) === 0) throw new RangeError('Not invertible.'); // Invert using fermat's little theorem.\n\n    return this.pow(a, this.m.subn(2));\n  }\n\n  [custom]() {\n    if (this.prime) return `<Red: ${this.prime.name}>`;\n    return `<Red: ${this.m.toString(10)}>`;\n  }\n\n}\n/**\n * Barrett Engine\n */\n\n\nclass Barrett extends Red {\n  constructor(m) {\n    super(m);\n    this.prime = null;\n    this.n = this.m.bitLength();\n    if (this.n % 26 !== 0) this.n += 26 - this.n % 26;\n    this.k = this.n * 2;\n    this.w = this.k / 26;\n    this.b = BN.shift(1, this.k).div(this.m);\n  }\n\n  convertTo(num) {\n    if (num.length > this.w) return super.convertTo(num);\n    return this.imod(num.clone());\n  }\n\n  _shift(q) {\n    let i = 0;\n    let j = this.w;\n\n    while (j < q.length) q.words[i++] = q.words[j++];\n\n    if (i === 0) q.words[i++] = 0;\n    q.length = i;\n  }\n\n  imod(a) {\n    const neg = a.negative;\n    assert(a.length <= this.w);\n    a.negative = 0;\n    const q = a.mul(this.b); // Shift right by `k` bits.\n\n    this._shift(q);\n\n    a._isub(a, q.mul(this.m));\n\n    if (a.ucmp(this.m) >= 0) a._isub(a, this.m);\n    if (neg && !a.isZero()) a._isub(this.m, a);\n    a.red = this;\n    return a;\n  }\n\n}\n/**\n * Montgomery Engine\n */\n\n\nclass Mont extends Red {\n  constructor(m) {\n    super(m); // Note that:\n    //\n    //   mi = (-m^-1 mod (2^(n * 2))) mod r\n    //\n    // and:\n    //\n    //   mi = (((2^n)^-1 mod m) * r^-1 - 1) / m\n    //\n    // are equivalent.\n\n    this.prime = null;\n    this.n = this.m.length * 26;\n    this.r = BN.shift(1, this.n);\n    this.r2 = BN.shift(1, this.n * 2).imod(this.m);\n    this.ri = this.r.invert(this.m);\n    this.mi = this.r.mul(this.ri).isubn(1).div(this.m);\n    this.rib = null;\n  }\n\n  get mont() {\n    return true;\n  }\n\n  convertTo(num) {\n    if (num.isNeg() || num.ucmp(this.m) >= 0) return this.imod(num.ushln(this.n)); // Equivalent to: (num * 2^n) mod m\n\n    return this.mul(num, this.r2);\n  }\n\n  convertFrom(num) {\n    // Equivalent to: num * r^-1 mod m\n    const r = this.mul(num, new BN(1));\n    r.red = null;\n    return r;\n  }\n\n  intTo(a) {\n    return (a << BigInt(this.n)) % this.mb;\n  }\n\n  intFrom(a) {\n    if (this.rib === null) this.rib = this.ri.toBigInt();\n    return a * this.rib % this.mb;\n  }\n\n  iaddn(a, num) {\n    return this.iadd(a, this.convertTo(new BN(num)));\n  }\n\n  isubn(a, num) {\n    return this.isub(a, this.convertTo(new BN(num)));\n  }\n\n  imul(a, b) {\n    return this.mul(a, b)._move(a);\n  }\n\n  mul(a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n    const t = a.mul(b);\n    const c = t.umaskn(this.n).mul(this.mi).iumaskn(this.n);\n    const u = t.iadd(c.mul(this.m)).iushrn(this.n);\n    if (u.ucmp(this.m) >= 0) u._isub(u, this.m);\n    return u._forceRed(this);\n  }\n\n  imuln(a, num) {\n    this._verify1(a);\n\n    if (a.isZero()) return a;\n\n    if (num === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    const neg = num < 0;\n    if (neg) num = -num;\n    if (this.m.length === 1) num %= this.m.words[0];\n    const bits = countBits(num); // Potentially compute with additions.\n    // This avoids an expensive division.\n\n    if (bits > 5) {\n      // Slow case (num > 31).\n      this.imul(a, this.convertTo(new BN(num)));\n    } else if ((num & num - 1) === 0) {\n      // Optimize for powers of two.\n      for (let i = 0; i < bits - 1; i++) this.iadd(a, a);\n    } else {\n      // Multiply left to right.\n      const c = a.clone();\n\n      for (let i = bits - 2; i >= 0; i--) {\n        this.iadd(a, a);\n        if (num >> i & 1) this.iadd(a, c);\n      }\n    }\n\n    if (neg) this.ineg(a);\n    return a;\n  }\n\n  eqn(a, num) {\n    this._verify1(a);\n\n    if (num === 0) return a.isZero();\n    return a.ucmp(this.convertTo(new BN(num))) === 0;\n  }\n\n  isLow(a) {\n    this._verify1(a);\n\n    return this.convertFrom(a).ucmp(this.m.ushrn(1)) <= 0;\n  }\n\n  isOdd(a) {\n    this._verify1(a);\n\n    return this.convertFrom(a).isOdd();\n  }\n\n  isEven(a) {\n    this._verify1(a);\n\n    return this.convertFrom(a).isEven();\n  }\n\n  invert(a) {\n    this._verify1(a); // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n\n\n    return this.imod(a.invert(this.m).mul(this.r2));\n  }\n\n}\n/*\n * Helpers\n */\n\n\nfunction makeError(Error, msg, start) {\n  const err = new Error(msg);\n  if (Error.captureStackTrace) Error.captureStackTrace(err, start);\n  return err;\n}\n\nfunction assert(value, message) {\n  if (!value) {\n    const msg = message || 'Assertion failed.';\n    throw makeError(Error, msg, assert);\n  }\n}\n\nfunction enforce(value, name, type) {\n  if (!value) {\n    const msg = `\"${name}\" must be a(n) ${type}.`;\n    throw makeError(TypeError, msg, enforce);\n  }\n}\n\nfunction range(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with positive numbers.`;\n    throw makeError(RangeError, msg, range);\n  }\n}\n\nfunction red(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with red numbers.`;\n    throw makeError(TypeError, msg, red);\n  }\n}\n\nfunction nonred(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with normal numbers.`;\n    throw makeError(TypeError, msg, nonred);\n  }\n}\n\nfunction nonzero(value) {\n  if (!value) {\n    const msg = 'Cannot divide by zero.';\n    throw makeError(RangeError, msg, nonzero);\n  }\n}\n\nfunction isInteger(num) {\n  return Number.isSafeInteger(num);\n}\n\nfunction isSMI(num) {\n  return isInteger(num) && num >= -0x3ffffff && num <= 0x3ffffff;\n}\n\nfunction allocate(ArrayType, size) {\n  if (ArrayType.allocUnsafeSlow) return ArrayType.allocUnsafeSlow(size);\n  return new ArrayType(size);\n}\n\nfunction getBase(base) {\n  if (base == null) return 10;\n  if (typeof base === 'number') return base;\n\n  switch (base) {\n    case 'bin':\n      return 2;\n\n    case 'oct':\n      return 8;\n\n    case 'dec':\n      return 10;\n\n    case 'hex':\n      return 16;\n  }\n\n  return 0;\n}\n/*\n * Internal\n */\n\n\nfunction countBits(w) {\n  if (Math.clz32) return 32 - Math.clz32(w);\n  let t = w;\n  let r = 0;\n\n  if (t >= 0x1000) {\n    r += 13;\n    t >>>= 13;\n  }\n\n  if (t >= 0x40) {\n    r += 7;\n    t >>>= 7;\n  }\n\n  if (t >= 0x8) {\n    r += 4;\n    t >>>= 4;\n  }\n\n  if (t >= 0x02) {\n    r += 2;\n    t >>>= 2;\n  }\n\n  return r + t;\n}\n\nfunction zeroBits(w) {\n  // Shortcut.\n  if (w === 0) return 26;\n  let t = w;\n  let r = 0;\n\n  if ((t & 0x1fff) === 0) {\n    r += 13;\n    t >>>= 13;\n  }\n\n  if ((t & 0x7f) === 0) {\n    r += 7;\n    t >>>= 7;\n  }\n\n  if ((t & 0xf) === 0) {\n    r += 4;\n    t >>>= 4;\n  }\n\n  if ((t & 0x3) === 0) {\n    r += 2;\n    t >>>= 2;\n  }\n\n  if ((t & 0x1) === 0) r += 1;\n  return r;\n}\n\nfunction parseHex(str, start, end) {\n  const len = Math.min(str.length, end);\n  let r = 0;\n  let z = 0;\n\n  for (let i = start; i < len; i++) {\n    const c = str.charCodeAt(i) - 48;\n    r <<= 4;\n    let b;\n\n    if (c >= 49 && c <= 54) {\n      // 'a' - 'f'\n      b = c - 49 + 0xa;\n    } else if (c >= 17 && c <= 22) {\n      // 'A' - 'F'\n      b = c - 17 + 0xa;\n    } else {\n      // '0' - '9'\n      b = c;\n    }\n\n    r |= b;\n    z |= b;\n  }\n\n  if (z & ~15) throw new Error('Invalid string.');\n  return r;\n}\n\nfunction parseBase(str, start, end, mul) {\n  const len = Math.min(str.length, end);\n  let r = 0;\n\n  for (let i = start; i < len; i++) {\n    const c = str.charCodeAt(i) - 48;\n    r *= mul;\n    let b;\n\n    if (c >= 49) {\n      // 'a'\n      b = c - 49 + 0xa;\n    } else if (c >= 17) {\n      // 'A'\n      b = c - 17 + 0xa;\n    } else {\n      // '0' - '9'\n      b = c;\n    }\n\n    if (c < 0 || c > 207 || b >= mul) throw new Error('Invalid string.');\n    r += b;\n  }\n\n  return r;\n}\n/*\n * Exponentiation (bigint)\n */\n\n\nfunction powInt(x, e, m) {\n  // Sliding window.\n  const wnd = new Array(WND_SIZE);\n  wnd[0] = sqrn(x, WND_WIDTH - 1, m);\n\n  for (let i = 1; i < WND_SIZE; i++) wnd[i] = wnd[i - 1] * x % m;\n\n  let i = e.bitLength();\n  let r = BigInt(1);\n\n  while (i >= WND_WIDTH) {\n    const pos = i - WND_WIDTH;\n    const bits = e.bits(pos, WND_WIDTH);\n\n    if (bits < WND_SIZE) {\n      r = r * r % m;\n      i -= 1;\n      continue;\n    }\n\n    r = sqrn(r, WND_WIDTH, m);\n    r = r * wnd[bits & ~WND_SIZE] % m;\n    i = pos;\n  }\n\n  if (i > 0) {\n    const bits = e.bits(0, i);\n\n    while (i--) {\n      r = r * r % m;\n      if (bits >> i & 1) r = r * x % m;\n    }\n  }\n\n  return r;\n}\n\nfunction sqrn(x, n, m) {\n  for (let i = 0; i < n; i++) x = x * x % m;\n\n  return x;\n}\n/*\n * Multiplication\n */\n\n\nfunction smallMulTo(self, num, out) {\n  const len = self.length + num.length;\n  out.negative = self.negative ^ num.negative;\n\n  out._alloc(len);\n\n  out.length = len; // Peel one iteration (compiler can't\n  // do it, because of code complexity).\n\n  const a = self.words[0];\n  const b = num.words[0];\n  const r = a * b;\n  const lo = r & 0x3ffffff;\n  let carry = r / 0x4000000 | 0;\n  let k = 1;\n  out.words[0] = lo;\n\n  for (; k < out.length - 1; k++) {\n    // Sum all words with the same\n    // `i + j = k` and accumulate\n    // `ncarry`, note that ncarry\n    // could be >= 0x3ffffff.\n    let ncarry = carry >>> 26;\n    let rword = carry & 0x3ffffff;\n    const min = Math.max(0, k - self.length + 1);\n    const max = Math.min(k, num.length - 1);\n\n    for (let j = min; j <= max; j++) {\n      const i = k - j;\n      const a = self.words[i];\n      const b = num.words[j];\n      const r = a * b + rword;\n      ncarry += r / 0x4000000 | 0;\n      rword = r & 0x3ffffff;\n    }\n\n    out.words[k] = rword | 0;\n    carry = ncarry | 0;\n  }\n\n  if (carry !== 0) out.words[k] = carry | 0;else out.length -= 1;\n  return out._strip();\n}\n\nfunction bigMulTo(self, num, out) {\n  const len = self.length + num.length;\n  out.negative = self.negative ^ num.negative;\n\n  out._alloc(len);\n\n  out.length = len;\n  let carry = 0;\n  let hncarry = 0;\n  let k = 0;\n\n  for (; k < out.length - 1; k++) {\n    // Sum all words with the same\n    // `i + j = k` and accumulate\n    // `ncarry`, note that ncarry\n    // could be >= 0x3ffffff.\n    let ncarry = hncarry;\n    hncarry = 0;\n    let rword = carry & 0x3ffffff;\n    const min = Math.max(0, k - self.length + 1);\n    const max = Math.min(k, num.length - 1);\n\n    for (let j = min; j <= max; j++) {\n      const i = k - j;\n      const a = self.words[i];\n      const b = num.words[j];\n      const r = a * b;\n      let lo = r & 0x3ffffff;\n      ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n      lo = lo + rword | 0;\n      rword = lo & 0x3ffffff;\n      ncarry = ncarry + (lo >>> 26) | 0;\n      hncarry += ncarry >>> 26;\n      ncarry &= 0x3ffffff;\n    }\n\n    out.words[k] = rword;\n    carry = ncarry;\n    ncarry = hncarry;\n  }\n\n  if (carry !== 0) out.words[k] = carry;else out.length -= 1;\n  return out._strip();\n}\n\nfunction jumboMulTo(x, y, out) {\n  // v8 has a 2147483519 bit max (~256mb).\n  if (!HAS_BIGINT || x.length + y.length > 82595519) return bigMulTo(x, y, out);\n  const zero = BigInt(0);\n  const mask = BigInt(0x3ffffff);\n  const shift = BigInt(26);\n  let z = x.toBigInt() * y.toBigInt();\n  const neg = z < zero | 0;\n  if (neg) z = -z;\n  let i = 0;\n\n  while (z > zero) {\n    out.words[i++] = Number(z & mask);\n    z >>= shift;\n  }\n\n  if (i === 0) out.words[i++] = 0;\n  out.length = i;\n  out.negative = neg;\n  return out;\n}\n\nfunction comb10MulTo(self, num, out) {\n  const a = self.words;\n  const b = num.words;\n  const o = out.words;\n  const a0 = a[0] | 0;\n  const al0 = a0 & 0x1fff;\n  const ah0 = a0 >>> 13;\n  const a1 = a[1] | 0;\n  const al1 = a1 & 0x1fff;\n  const ah1 = a1 >>> 13;\n  const a2 = a[2] | 0;\n  const al2 = a2 & 0x1fff;\n  const ah2 = a2 >>> 13;\n  const a3 = a[3] | 0;\n  const al3 = a3 & 0x1fff;\n  const ah3 = a3 >>> 13;\n  const a4 = a[4] | 0;\n  const al4 = a4 & 0x1fff;\n  const ah4 = a4 >>> 13;\n  const a5 = a[5] | 0;\n  const al5 = a5 & 0x1fff;\n  const ah5 = a5 >>> 13;\n  const a6 = a[6] | 0;\n  const al6 = a6 & 0x1fff;\n  const ah6 = a6 >>> 13;\n  const a7 = a[7] | 0;\n  const al7 = a7 & 0x1fff;\n  const ah7 = a7 >>> 13;\n  const a8 = a[8] | 0;\n  const al8 = a8 & 0x1fff;\n  const ah8 = a8 >>> 13;\n  const a9 = a[9] | 0;\n  const al9 = a9 & 0x1fff;\n  const ah9 = a9 >>> 13;\n  const b0 = b[0] | 0;\n  const bl0 = b0 & 0x1fff;\n  const bh0 = b0 >>> 13;\n  const b1 = b[1] | 0;\n  const bl1 = b1 & 0x1fff;\n  const bh1 = b1 >>> 13;\n  const b2 = b[2] | 0;\n  const bl2 = b2 & 0x1fff;\n  const bh2 = b2 >>> 13;\n  const b3 = b[3] | 0;\n  const bl3 = b3 & 0x1fff;\n  const bh3 = b3 >>> 13;\n  const b4 = b[4] | 0;\n  const bl4 = b4 & 0x1fff;\n  const bh4 = b4 >>> 13;\n  const b5 = b[5] | 0;\n  const bl5 = b5 & 0x1fff;\n  const bh5 = b5 >>> 13;\n  const b6 = b[6] | 0;\n  const bl6 = b6 & 0x1fff;\n  const bh6 = b6 >>> 13;\n  const b7 = b[7] | 0;\n  const bl7 = b7 & 0x1fff;\n  const bh7 = b7 >>> 13;\n  const b8 = b[8] | 0;\n  const bl8 = b8 & 0x1fff;\n  const bh8 = b8 >>> 13;\n  const b9 = b[9] | 0;\n  const bl9 = b9 & 0x1fff;\n  const bh9 = b9 >>> 13;\n  let c = 0;\n  let lo, mid, hi;\n  out.negative = self.negative ^ num.negative;\n\n  out._alloc(20);\n\n  out.length = 19;\n  /* k = 0 */\n\n  lo = Math.imul(al0, bl0);\n  mid = Math.imul(al0, bh0);\n  mid = mid + Math.imul(ah0, bl0) | 0;\n  hi = Math.imul(ah0, bh0);\n  let w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n  w0 &= 0x3ffffff;\n  /* k = 1 */\n\n  lo = Math.imul(al1, bl0);\n  mid = Math.imul(al1, bh0);\n  mid = mid + Math.imul(ah1, bl0) | 0;\n  hi = Math.imul(ah1, bh0);\n  lo = lo + Math.imul(al0, bl1) | 0;\n  mid = mid + Math.imul(al0, bh1) | 0;\n  mid = mid + Math.imul(ah0, bl1) | 0;\n  hi = hi + Math.imul(ah0, bh1) | 0;\n  let w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n  w1 &= 0x3ffffff;\n  /* k = 2 */\n\n  lo = Math.imul(al2, bl0);\n  mid = Math.imul(al2, bh0);\n  mid = mid + Math.imul(ah2, bl0) | 0;\n  hi = Math.imul(ah2, bh0);\n  lo = lo + Math.imul(al1, bl1) | 0;\n  mid = mid + Math.imul(al1, bh1) | 0;\n  mid = mid + Math.imul(ah1, bl1) | 0;\n  hi = hi + Math.imul(ah1, bh1) | 0;\n  lo = lo + Math.imul(al0, bl2) | 0;\n  mid = mid + Math.imul(al0, bh2) | 0;\n  mid = mid + Math.imul(ah0, bl2) | 0;\n  hi = hi + Math.imul(ah0, bh2) | 0;\n  let w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n  w2 &= 0x3ffffff;\n  /* k = 3 */\n\n  lo = Math.imul(al3, bl0);\n  mid = Math.imul(al3, bh0);\n  mid = mid + Math.imul(ah3, bl0) | 0;\n  hi = Math.imul(ah3, bh0);\n  lo = lo + Math.imul(al2, bl1) | 0;\n  mid = mid + Math.imul(al2, bh1) | 0;\n  mid = mid + Math.imul(ah2, bl1) | 0;\n  hi = hi + Math.imul(ah2, bh1) | 0;\n  lo = lo + Math.imul(al1, bl2) | 0;\n  mid = mid + Math.imul(al1, bh2) | 0;\n  mid = mid + Math.imul(ah1, bl2) | 0;\n  hi = hi + Math.imul(ah1, bh2) | 0;\n  lo = lo + Math.imul(al0, bl3) | 0;\n  mid = mid + Math.imul(al0, bh3) | 0;\n  mid = mid + Math.imul(ah0, bl3) | 0;\n  hi = hi + Math.imul(ah0, bh3) | 0;\n  let w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n  w3 &= 0x3ffffff;\n  /* k = 4 */\n\n  lo = Math.imul(al4, bl0);\n  mid = Math.imul(al4, bh0);\n  mid = mid + Math.imul(ah4, bl0) | 0;\n  hi = Math.imul(ah4, bh0);\n  lo = lo + Math.imul(al3, bl1) | 0;\n  mid = mid + Math.imul(al3, bh1) | 0;\n  mid = mid + Math.imul(ah3, bl1) | 0;\n  hi = hi + Math.imul(ah3, bh1) | 0;\n  lo = lo + Math.imul(al2, bl2) | 0;\n  mid = mid + Math.imul(al2, bh2) | 0;\n  mid = mid + Math.imul(ah2, bl2) | 0;\n  hi = hi + Math.imul(ah2, bh2) | 0;\n  lo = lo + Math.imul(al1, bl3) | 0;\n  mid = mid + Math.imul(al1, bh3) | 0;\n  mid = mid + Math.imul(ah1, bl3) | 0;\n  hi = hi + Math.imul(ah1, bh3) | 0;\n  lo = lo + Math.imul(al0, bl4) | 0;\n  mid = mid + Math.imul(al0, bh4) | 0;\n  mid = mid + Math.imul(ah0, bl4) | 0;\n  hi = hi + Math.imul(ah0, bh4) | 0;\n  let w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n  w4 &= 0x3ffffff;\n  /* k = 5 */\n\n  lo = Math.imul(al5, bl0);\n  mid = Math.imul(al5, bh0);\n  mid = mid + Math.imul(ah5, bl0) | 0;\n  hi = Math.imul(ah5, bh0);\n  lo = lo + Math.imul(al4, bl1) | 0;\n  mid = mid + Math.imul(al4, bh1) | 0;\n  mid = mid + Math.imul(ah4, bl1) | 0;\n  hi = hi + Math.imul(ah4, bh1) | 0;\n  lo = lo + Math.imul(al3, bl2) | 0;\n  mid = mid + Math.imul(al3, bh2) | 0;\n  mid = mid + Math.imul(ah3, bl2) | 0;\n  hi = hi + Math.imul(ah3, bh2) | 0;\n  lo = lo + Math.imul(al2, bl3) | 0;\n  mid = mid + Math.imul(al2, bh3) | 0;\n  mid = mid + Math.imul(ah2, bl3) | 0;\n  hi = hi + Math.imul(ah2, bh3) | 0;\n  lo = lo + Math.imul(al1, bl4) | 0;\n  mid = mid + Math.imul(al1, bh4) | 0;\n  mid = mid + Math.imul(ah1, bl4) | 0;\n  hi = hi + Math.imul(ah1, bh4) | 0;\n  lo = lo + Math.imul(al0, bl5) | 0;\n  mid = mid + Math.imul(al0, bh5) | 0;\n  mid = mid + Math.imul(ah0, bl5) | 0;\n  hi = hi + Math.imul(ah0, bh5) | 0;\n  let w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n  w5 &= 0x3ffffff;\n  /* k = 6 */\n\n  lo = Math.imul(al6, bl0);\n  mid = Math.imul(al6, bh0);\n  mid = mid + Math.imul(ah6, bl0) | 0;\n  hi = Math.imul(ah6, bh0);\n  lo = lo + Math.imul(al5, bl1) | 0;\n  mid = mid + Math.imul(al5, bh1) | 0;\n  mid = mid + Math.imul(ah5, bl1) | 0;\n  hi = hi + Math.imul(ah5, bh1) | 0;\n  lo = lo + Math.imul(al4, bl2) | 0;\n  mid = mid + Math.imul(al4, bh2) | 0;\n  mid = mid + Math.imul(ah4, bl2) | 0;\n  hi = hi + Math.imul(ah4, bh2) | 0;\n  lo = lo + Math.imul(al3, bl3) | 0;\n  mid = mid + Math.imul(al3, bh3) | 0;\n  mid = mid + Math.imul(ah3, bl3) | 0;\n  hi = hi + Math.imul(ah3, bh3) | 0;\n  lo = lo + Math.imul(al2, bl4) | 0;\n  mid = mid + Math.imul(al2, bh4) | 0;\n  mid = mid + Math.imul(ah2, bl4) | 0;\n  hi = hi + Math.imul(ah2, bh4) | 0;\n  lo = lo + Math.imul(al1, bl5) | 0;\n  mid = mid + Math.imul(al1, bh5) | 0;\n  mid = mid + Math.imul(ah1, bl5) | 0;\n  hi = hi + Math.imul(ah1, bh5) | 0;\n  lo = lo + Math.imul(al0, bl6) | 0;\n  mid = mid + Math.imul(al0, bh6) | 0;\n  mid = mid + Math.imul(ah0, bl6) | 0;\n  hi = hi + Math.imul(ah0, bh6) | 0;\n  let w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n  w6 &= 0x3ffffff;\n  /* k = 7 */\n\n  lo = Math.imul(al7, bl0);\n  mid = Math.imul(al7, bh0);\n  mid = mid + Math.imul(ah7, bl0) | 0;\n  hi = Math.imul(ah7, bh0);\n  lo = lo + Math.imul(al6, bl1) | 0;\n  mid = mid + Math.imul(al6, bh1) | 0;\n  mid = mid + Math.imul(ah6, bl1) | 0;\n  hi = hi + Math.imul(ah6, bh1) | 0;\n  lo = lo + Math.imul(al5, bl2) | 0;\n  mid = mid + Math.imul(al5, bh2) | 0;\n  mid = mid + Math.imul(ah5, bl2) | 0;\n  hi = hi + Math.imul(ah5, bh2) | 0;\n  lo = lo + Math.imul(al4, bl3) | 0;\n  mid = mid + Math.imul(al4, bh3) | 0;\n  mid = mid + Math.imul(ah4, bl3) | 0;\n  hi = hi + Math.imul(ah4, bh3) | 0;\n  lo = lo + Math.imul(al3, bl4) | 0;\n  mid = mid + Math.imul(al3, bh4) | 0;\n  mid = mid + Math.imul(ah3, bl4) | 0;\n  hi = hi + Math.imul(ah3, bh4) | 0;\n  lo = lo + Math.imul(al2, bl5) | 0;\n  mid = mid + Math.imul(al2, bh5) | 0;\n  mid = mid + Math.imul(ah2, bl5) | 0;\n  hi = hi + Math.imul(ah2, bh5) | 0;\n  lo = lo + Math.imul(al1, bl6) | 0;\n  mid = mid + Math.imul(al1, bh6) | 0;\n  mid = mid + Math.imul(ah1, bl6) | 0;\n  hi = hi + Math.imul(ah1, bh6) | 0;\n  lo = lo + Math.imul(al0, bl7) | 0;\n  mid = mid + Math.imul(al0, bh7) | 0;\n  mid = mid + Math.imul(ah0, bl7) | 0;\n  hi = hi + Math.imul(ah0, bh7) | 0;\n  let w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n  w7 &= 0x3ffffff;\n  /* k = 8 */\n\n  lo = Math.imul(al8, bl0);\n  mid = Math.imul(al8, bh0);\n  mid = mid + Math.imul(ah8, bl0) | 0;\n  hi = Math.imul(ah8, bh0);\n  lo = lo + Math.imul(al7, bl1) | 0;\n  mid = mid + Math.imul(al7, bh1) | 0;\n  mid = mid + Math.imul(ah7, bl1) | 0;\n  hi = hi + Math.imul(ah7, bh1) | 0;\n  lo = lo + Math.imul(al6, bl2) | 0;\n  mid = mid + Math.imul(al6, bh2) | 0;\n  mid = mid + Math.imul(ah6, bl2) | 0;\n  hi = hi + Math.imul(ah6, bh2) | 0;\n  lo = lo + Math.imul(al5, bl3) | 0;\n  mid = mid + Math.imul(al5, bh3) | 0;\n  mid = mid + Math.imul(ah5, bl3) | 0;\n  hi = hi + Math.imul(ah5, bh3) | 0;\n  lo = lo + Math.imul(al4, bl4) | 0;\n  mid = mid + Math.imul(al4, bh4) | 0;\n  mid = mid + Math.imul(ah4, bl4) | 0;\n  hi = hi + Math.imul(ah4, bh4) | 0;\n  lo = lo + Math.imul(al3, bl5) | 0;\n  mid = mid + Math.imul(al3, bh5) | 0;\n  mid = mid + Math.imul(ah3, bl5) | 0;\n  hi = hi + Math.imul(ah3, bh5) | 0;\n  lo = lo + Math.imul(al2, bl6) | 0;\n  mid = mid + Math.imul(al2, bh6) | 0;\n  mid = mid + Math.imul(ah2, bl6) | 0;\n  hi = hi + Math.imul(ah2, bh6) | 0;\n  lo = lo + Math.imul(al1, bl7) | 0;\n  mid = mid + Math.imul(al1, bh7) | 0;\n  mid = mid + Math.imul(ah1, bl7) | 0;\n  hi = hi + Math.imul(ah1, bh7) | 0;\n  lo = lo + Math.imul(al0, bl8) | 0;\n  mid = mid + Math.imul(al0, bh8) | 0;\n  mid = mid + Math.imul(ah0, bl8) | 0;\n  hi = hi + Math.imul(ah0, bh8) | 0;\n  let w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n  w8 &= 0x3ffffff;\n  /* k = 9 */\n\n  lo = Math.imul(al9, bl0);\n  mid = Math.imul(al9, bh0);\n  mid = mid + Math.imul(ah9, bl0) | 0;\n  hi = Math.imul(ah9, bh0);\n  lo = lo + Math.imul(al8, bl1) | 0;\n  mid = mid + Math.imul(al8, bh1) | 0;\n  mid = mid + Math.imul(ah8, bl1) | 0;\n  hi = hi + Math.imul(ah8, bh1) | 0;\n  lo = lo + Math.imul(al7, bl2) | 0;\n  mid = mid + Math.imul(al7, bh2) | 0;\n  mid = mid + Math.imul(ah7, bl2) | 0;\n  hi = hi + Math.imul(ah7, bh2) | 0;\n  lo = lo + Math.imul(al6, bl3) | 0;\n  mid = mid + Math.imul(al6, bh3) | 0;\n  mid = mid + Math.imul(ah6, bl3) | 0;\n  hi = hi + Math.imul(ah6, bh3) | 0;\n  lo = lo + Math.imul(al5, bl4) | 0;\n  mid = mid + Math.imul(al5, bh4) | 0;\n  mid = mid + Math.imul(ah5, bl4) | 0;\n  hi = hi + Math.imul(ah5, bh4) | 0;\n  lo = lo + Math.imul(al4, bl5) | 0;\n  mid = mid + Math.imul(al4, bh5) | 0;\n  mid = mid + Math.imul(ah4, bl5) | 0;\n  hi = hi + Math.imul(ah4, bh5) | 0;\n  lo = lo + Math.imul(al3, bl6) | 0;\n  mid = mid + Math.imul(al3, bh6) | 0;\n  mid = mid + Math.imul(ah3, bl6) | 0;\n  hi = hi + Math.imul(ah3, bh6) | 0;\n  lo = lo + Math.imul(al2, bl7) | 0;\n  mid = mid + Math.imul(al2, bh7) | 0;\n  mid = mid + Math.imul(ah2, bl7) | 0;\n  hi = hi + Math.imul(ah2, bh7) | 0;\n  lo = lo + Math.imul(al1, bl8) | 0;\n  mid = mid + Math.imul(al1, bh8) | 0;\n  mid = mid + Math.imul(ah1, bl8) | 0;\n  hi = hi + Math.imul(ah1, bh8) | 0;\n  lo = lo + Math.imul(al0, bl9) | 0;\n  mid = mid + Math.imul(al0, bh9) | 0;\n  mid = mid + Math.imul(ah0, bl9) | 0;\n  hi = hi + Math.imul(ah0, bh9) | 0;\n  let w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n  w9 &= 0x3ffffff;\n  /* k = 10 */\n\n  lo = Math.imul(al9, bl1);\n  mid = Math.imul(al9, bh1);\n  mid = mid + Math.imul(ah9, bl1) | 0;\n  hi = Math.imul(ah9, bh1);\n  lo = lo + Math.imul(al8, bl2) | 0;\n  mid = mid + Math.imul(al8, bh2) | 0;\n  mid = mid + Math.imul(ah8, bl2) | 0;\n  hi = hi + Math.imul(ah8, bh2) | 0;\n  lo = lo + Math.imul(al7, bl3) | 0;\n  mid = mid + Math.imul(al7, bh3) | 0;\n  mid = mid + Math.imul(ah7, bl3) | 0;\n  hi = hi + Math.imul(ah7, bh3) | 0;\n  lo = lo + Math.imul(al6, bl4) | 0;\n  mid = mid + Math.imul(al6, bh4) | 0;\n  mid = mid + Math.imul(ah6, bl4) | 0;\n  hi = hi + Math.imul(ah6, bh4) | 0;\n  lo = lo + Math.imul(al5, bl5) | 0;\n  mid = mid + Math.imul(al5, bh5) | 0;\n  mid = mid + Math.imul(ah5, bl5) | 0;\n  hi = hi + Math.imul(ah5, bh5) | 0;\n  lo = lo + Math.imul(al4, bl6) | 0;\n  mid = mid + Math.imul(al4, bh6) | 0;\n  mid = mid + Math.imul(ah4, bl6) | 0;\n  hi = hi + Math.imul(ah4, bh6) | 0;\n  lo = lo + Math.imul(al3, bl7) | 0;\n  mid = mid + Math.imul(al3, bh7) | 0;\n  mid = mid + Math.imul(ah3, bl7) | 0;\n  hi = hi + Math.imul(ah3, bh7) | 0;\n  lo = lo + Math.imul(al2, bl8) | 0;\n  mid = mid + Math.imul(al2, bh8) | 0;\n  mid = mid + Math.imul(ah2, bl8) | 0;\n  hi = hi + Math.imul(ah2, bh8) | 0;\n  lo = lo + Math.imul(al1, bl9) | 0;\n  mid = mid + Math.imul(al1, bh9) | 0;\n  mid = mid + Math.imul(ah1, bl9) | 0;\n  hi = hi + Math.imul(ah1, bh9) | 0;\n  let w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n  w10 &= 0x3ffffff;\n  /* k = 11 */\n\n  lo = Math.imul(al9, bl2);\n  mid = Math.imul(al9, bh2);\n  mid = mid + Math.imul(ah9, bl2) | 0;\n  hi = Math.imul(ah9, bh2);\n  lo = lo + Math.imul(al8, bl3) | 0;\n  mid = mid + Math.imul(al8, bh3) | 0;\n  mid = mid + Math.imul(ah8, bl3) | 0;\n  hi = hi + Math.imul(ah8, bh3) | 0;\n  lo = lo + Math.imul(al7, bl4) | 0;\n  mid = mid + Math.imul(al7, bh4) | 0;\n  mid = mid + Math.imul(ah7, bl4) | 0;\n  hi = hi + Math.imul(ah7, bh4) | 0;\n  lo = lo + Math.imul(al6, bl5) | 0;\n  mid = mid + Math.imul(al6, bh5) | 0;\n  mid = mid + Math.imul(ah6, bl5) | 0;\n  hi = hi + Math.imul(ah6, bh5) | 0;\n  lo = lo + Math.imul(al5, bl6) | 0;\n  mid = mid + Math.imul(al5, bh6) | 0;\n  mid = mid + Math.imul(ah5, bl6) | 0;\n  hi = hi + Math.imul(ah5, bh6) | 0;\n  lo = lo + Math.imul(al4, bl7) | 0;\n  mid = mid + Math.imul(al4, bh7) | 0;\n  mid = mid + Math.imul(ah4, bl7) | 0;\n  hi = hi + Math.imul(ah4, bh7) | 0;\n  lo = lo + Math.imul(al3, bl8) | 0;\n  mid = mid + Math.imul(al3, bh8) | 0;\n  mid = mid + Math.imul(ah3, bl8) | 0;\n  hi = hi + Math.imul(ah3, bh8) | 0;\n  lo = lo + Math.imul(al2, bl9) | 0;\n  mid = mid + Math.imul(al2, bh9) | 0;\n  mid = mid + Math.imul(ah2, bl9) | 0;\n  hi = hi + Math.imul(ah2, bh9) | 0;\n  let w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n  w11 &= 0x3ffffff;\n  /* k = 12 */\n\n  lo = Math.imul(al9, bl3);\n  mid = Math.imul(al9, bh3);\n  mid = mid + Math.imul(ah9, bl3) | 0;\n  hi = Math.imul(ah9, bh3);\n  lo = lo + Math.imul(al8, bl4) | 0;\n  mid = mid + Math.imul(al8, bh4) | 0;\n  mid = mid + Math.imul(ah8, bl4) | 0;\n  hi = hi + Math.imul(ah8, bh4) | 0;\n  lo = lo + Math.imul(al7, bl5) | 0;\n  mid = mid + Math.imul(al7, bh5) | 0;\n  mid = mid + Math.imul(ah7, bl5) | 0;\n  hi = hi + Math.imul(ah7, bh5) | 0;\n  lo = lo + Math.imul(al6, bl6) | 0;\n  mid = mid + Math.imul(al6, bh6) | 0;\n  mid = mid + Math.imul(ah6, bl6) | 0;\n  hi = hi + Math.imul(ah6, bh6) | 0;\n  lo = lo + Math.imul(al5, bl7) | 0;\n  mid = mid + Math.imul(al5, bh7) | 0;\n  mid = mid + Math.imul(ah5, bl7) | 0;\n  hi = hi + Math.imul(ah5, bh7) | 0;\n  lo = lo + Math.imul(al4, bl8) | 0;\n  mid = mid + Math.imul(al4, bh8) | 0;\n  mid = mid + Math.imul(ah4, bl8) | 0;\n  hi = hi + Math.imul(ah4, bh8) | 0;\n  lo = lo + Math.imul(al3, bl9) | 0;\n  mid = mid + Math.imul(al3, bh9) | 0;\n  mid = mid + Math.imul(ah3, bl9) | 0;\n  hi = hi + Math.imul(ah3, bh9) | 0;\n  let w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n  w12 &= 0x3ffffff;\n  /* k = 13 */\n\n  lo = Math.imul(al9, bl4);\n  mid = Math.imul(al9, bh4);\n  mid = mid + Math.imul(ah9, bl4) | 0;\n  hi = Math.imul(ah9, bh4);\n  lo = lo + Math.imul(al8, bl5) | 0;\n  mid = mid + Math.imul(al8, bh5) | 0;\n  mid = mid + Math.imul(ah8, bl5) | 0;\n  hi = hi + Math.imul(ah8, bh5) | 0;\n  lo = lo + Math.imul(al7, bl6) | 0;\n  mid = mid + Math.imul(al7, bh6) | 0;\n  mid = mid + Math.imul(ah7, bl6) | 0;\n  hi = hi + Math.imul(ah7, bh6) | 0;\n  lo = lo + Math.imul(al6, bl7) | 0;\n  mid = mid + Math.imul(al6, bh7) | 0;\n  mid = mid + Math.imul(ah6, bl7) | 0;\n  hi = hi + Math.imul(ah6, bh7) | 0;\n  lo = lo + Math.imul(al5, bl8) | 0;\n  mid = mid + Math.imul(al5, bh8) | 0;\n  mid = mid + Math.imul(ah5, bl8) | 0;\n  hi = hi + Math.imul(ah5, bh8) | 0;\n  lo = lo + Math.imul(al4, bl9) | 0;\n  mid = mid + Math.imul(al4, bh9) | 0;\n  mid = mid + Math.imul(ah4, bl9) | 0;\n  hi = hi + Math.imul(ah4, bh9) | 0;\n  let w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n  w13 &= 0x3ffffff;\n  /* k = 14 */\n\n  lo = Math.imul(al9, bl5);\n  mid = Math.imul(al9, bh5);\n  mid = mid + Math.imul(ah9, bl5) | 0;\n  hi = Math.imul(ah9, bh5);\n  lo = lo + Math.imul(al8, bl6) | 0;\n  mid = mid + Math.imul(al8, bh6) | 0;\n  mid = mid + Math.imul(ah8, bl6) | 0;\n  hi = hi + Math.imul(ah8, bh6) | 0;\n  lo = lo + Math.imul(al7, bl7) | 0;\n  mid = mid + Math.imul(al7, bh7) | 0;\n  mid = mid + Math.imul(ah7, bl7) | 0;\n  hi = hi + Math.imul(ah7, bh7) | 0;\n  lo = lo + Math.imul(al6, bl8) | 0;\n  mid = mid + Math.imul(al6, bh8) | 0;\n  mid = mid + Math.imul(ah6, bl8) | 0;\n  hi = hi + Math.imul(ah6, bh8) | 0;\n  lo = lo + Math.imul(al5, bl9) | 0;\n  mid = mid + Math.imul(al5, bh9) | 0;\n  mid = mid + Math.imul(ah5, bl9) | 0;\n  hi = hi + Math.imul(ah5, bh9) | 0;\n  let w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n  w14 &= 0x3ffffff;\n  /* k = 15 */\n\n  lo = Math.imul(al9, bl6);\n  mid = Math.imul(al9, bh6);\n  mid = mid + Math.imul(ah9, bl6) | 0;\n  hi = Math.imul(ah9, bh6);\n  lo = lo + Math.imul(al8, bl7) | 0;\n  mid = mid + Math.imul(al8, bh7) | 0;\n  mid = mid + Math.imul(ah8, bl7) | 0;\n  hi = hi + Math.imul(ah8, bh7) | 0;\n  lo = lo + Math.imul(al7, bl8) | 0;\n  mid = mid + Math.imul(al7, bh8) | 0;\n  mid = mid + Math.imul(ah7, bl8) | 0;\n  hi = hi + Math.imul(ah7, bh8) | 0;\n  lo = lo + Math.imul(al6, bl9) | 0;\n  mid = mid + Math.imul(al6, bh9) | 0;\n  mid = mid + Math.imul(ah6, bl9) | 0;\n  hi = hi + Math.imul(ah6, bh9) | 0;\n  let w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n  w15 &= 0x3ffffff;\n  /* k = 16 */\n\n  lo = Math.imul(al9, bl7);\n  mid = Math.imul(al9, bh7);\n  mid = mid + Math.imul(ah9, bl7) | 0;\n  hi = Math.imul(ah9, bh7);\n  lo = lo + Math.imul(al8, bl8) | 0;\n  mid = mid + Math.imul(al8, bh8) | 0;\n  mid = mid + Math.imul(ah8, bl8) | 0;\n  hi = hi + Math.imul(ah8, bh8) | 0;\n  lo = lo + Math.imul(al7, bl9) | 0;\n  mid = mid + Math.imul(al7, bh9) | 0;\n  mid = mid + Math.imul(ah7, bl9) | 0;\n  hi = hi + Math.imul(ah7, bh9) | 0;\n  let w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n  w16 &= 0x3ffffff;\n  /* k = 17 */\n\n  lo = Math.imul(al9, bl8);\n  mid = Math.imul(al9, bh8);\n  mid = mid + Math.imul(ah9, bl8) | 0;\n  hi = Math.imul(ah9, bh8);\n  lo = lo + Math.imul(al8, bl9) | 0;\n  mid = mid + Math.imul(al8, bh9) | 0;\n  mid = mid + Math.imul(ah8, bl9) | 0;\n  hi = hi + Math.imul(ah8, bh9) | 0;\n  let w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n  w17 &= 0x3ffffff;\n  /* k = 18 */\n\n  lo = Math.imul(al9, bl9);\n  mid = Math.imul(al9, bh9);\n  mid = mid + Math.imul(ah9, bl9) | 0;\n  hi = Math.imul(ah9, bh9);\n  let w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n  c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n  w18 &= 0x3ffffff;\n  o[0] = w0;\n  o[1] = w1;\n  o[2] = w2;\n  o[3] = w3;\n  o[4] = w4;\n  o[5] = w5;\n  o[6] = w6;\n  o[7] = w7;\n  o[8] = w8;\n  o[9] = w9;\n  o[10] = w10;\n  o[11] = w11;\n  o[12] = w12;\n  o[13] = w13;\n  o[14] = w14;\n  o[15] = w15;\n  o[16] = w16;\n  o[17] = w17;\n  o[18] = w18;\n\n  if (c !== 0) {\n    o[19] = c;\n    out.length += 1;\n  } // Note: we shouldn't need to strip here.\n\n\n  return out;\n} // Polyfill comb.\n\n\nif (!Math.imul) comb10MulTo = smallMulTo;\n/*\n * Expose\n */\n\nBN.Red = Red;\nmodule.exports = BN;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/bcrypto/lib/js/bn.js"],"names":["custom","require","zeros","groupSizes","groupBases","primes","p192","p224","p521","k256","p251","p25519","p448","modes","NONE","QUO","REM","BOTH","EUCLID","ALL","WND_WIDTH","WND_SIZE","HAS_BIGINT","BigInt","BN","constructor","num","base","endian","words","length","negative","red","from","_iadd","a","b","carry","i","_alloc","r","_iaddn","Math","max","iadd","enforce","isBN","cmp","ucmp","_isub","iaddn","isSMI","_isubn","add","clone","addn","assert","_strip","_normalize","isub","isubn","sub","subn","_mul","out","comb10MulTo","len","smallMulTo","bigMulTo","jumboMulTo","imul","mul","_move","imuln","neg","w","lo","Array","muln","mulShift","bits","utestn","iushrn","_div","flags","nonzero","isZero","as","bs","q","quon","remn","_wordDiv","hi","word","shift","countBits","iushln","m","d","_ishlnsubmul","j","ahi","alo","quo","qj","min","ineg","_expand","k","quorem","iquo","iquon","irem","rem","iremn","remrn","p","acc","divmod","idiv","div","idivn","divn","imod","mod","imodn","modrn","modn","divRound","bit","isOdd","ipow","pow","ipown","pown","sqr","isqr","_rootrem","RangeError","ucmpn","u","t","bitLength","v","rootrem","iroot","root","isPower","sign","sqrtrem","isqrt","sqrt","isSquare","iand","x","y","iuand","iuor","width","inotn","iandn","and","andn","andrn","n","iuandn","abs","uand","uandn","uandrn","ior","iorn","or","orn","iuorn","uor","uorn","ixor","iuxor","ixorn","xor","xorn","iuxorn","uxor","uxorn","inot","not","s","ceil","notn","ishl","ishln","toNumber","shl","shln","iushl","mask","ncarry","c","ushl","ushln","_split","output","ishr","ishrn","shr","shrn","iushr","ushr","ushrn","setn","val","usetn","testn","imaskn","iumaskn","maskn","umaskn","andln","pos","index","more","next","iabs","res","cmpn","eq","eqn","gt","gtn","gte","gten","lt","ltn","lte","lten","isNeg","isPos","isEven","legendre","mont","toRed","redLegendre","jacobi","Error","_cloneNormal","_makeOdd","bmod8","kronecker","table","igcd","gcd","_factor2","ilcm","lcm","egcd","A","B","C","D","g","yp","xp","iinvert","invert","range","_invertp","ifermat","fermat","redFermat","fromRed","ipowm","powm","redPow","ipowmn","powmn","redPown","isqrtm","sqrtm","redSqrt","isqrtpq","sqrtpq","sp","sq","mp","mq","lhs","rhs","isPrime","rng","reps","limit","isPrimeMR","isPrimeLucas","force2","nm1","nm3","zeroBits","rnm1","rone","random","redSqr","toString","nm2","toTwos","fromTwos","ctx","Red","convertTo","convertFrom","forceRed","_forceRed","redIAdd","redAdd","redIAddn","redAddn","redISub","redSub","redISubn","redSubn","redIMul","redMul","redIMuln","redMuln","redIDiv","redDiv","redIDivn","redDivn","redIPow","nonred","redIPown","redISqr","redISqrt","redIDivSqrt","idivsqrt","redDivSqrt","divsqrt","redIsSquare","redIShl","redShl","redIShln","redShln","redINeg","redNeg","redEq","redEqn","redIsHigh","isHigh","redIsLow","isLow","redIsOdd","redIsEven","redJacobi","redKronecker","redIInvert","redInvert","redIFermat","dest","size","push","_check","copy","inject","set","fromNumber","swap","reverse","fromBuffer","toBuffer","byteLength","isSafe","prefix","csign","czero","zword","cneg","cpos","ceq","z","ceqn","cswap","flag","cond","cinject","mask0","mask1","cset","toDouble","valueOf","toBigInt","s52","s26","toBool","padding","getBase","off","groupSize","groupBase","toJSON","toArray","toArrayLike","Buffer","ArrayType","bytes","allocate","encode","of","isInteger","fromDouble","isFinite","floor","fromBigInt","start","_fromHex","fromBool","value","fromString","str","replace","charCodeAt","_fromBase","parseHex","limbLen","limbPow","total","end","parseBase","fromJSON","json","isArray","chunk","join","fromBN","fromArray","data","fromArrayLike","isBuffer","left","decode","TypeError","args","barrett","Barrett","Mont","_prime","name","prime","P192","P224","P521","K256","P251","P25519","P448","exp","randomBits","randomBytes","cast","space","obj","wordSize","native","Prime","one","ireduce","split","imulK","input","prev","mb","sm1","_verify1","_verify2","precompute","e","intTo","intFrom","powInt","powNum","wnd","sqrn","sqrt3mod4","sqrt5mod8sm1","sqrt5mod8","sqrt0","x2","alpha","beta","divsqrt3mod4","divsqrt5mod8","u2","u3","u5","v3","v7","symbol","Boolean","_shift","r2","ri","mi","rib","makeError","msg","err","captureStackTrace","message","type","Number","isSafeInteger","allocUnsafeSlow","clz32","self","rword","hncarry","zero","o","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","mid","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","module","exports"],"mappings":"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","sourcesContent":["/*!\n * bn.js - big numbers for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/bn.js:\n *   Copyright (c) 2015, Fedor Indutny (MIT License).\n *   https://github.com/indutny/bn.js\n *\n * Parts of this software are based on golang/go:\n *   Copyright (c) 2009, The Go Authors. All rights reserved.\n *   https://github.com/golang/go\n *\n * Parts of this software are based on openssl/openssl:\n *   Copyright (c) 1998-2018, The OpenSSL Project (Apache License v2.0).\n *   Copyright (c) 1995-1998, Eric A. Young, Tim J. Hudson. All rights reserved.\n *   https://github.com/openssl/openssl\n *\n * Parts of this software are based on libgmp:\n *   Copyright (c) 1991-1997, 1999-2014, Free Software Foundation, Inc.\n *   https://gmplib.org/\n *\n * Parts of this software are based on v8/v8:\n *   Copyright (c) 2017, The V8 Project Authors (BSD-Style License).\n *   https://github.com/v8/v8\n *\n * Resources:\n *   https://github.com/indutny/bn.js/blob/master/lib/bn.js\n *   https://github.com/indutny/miller-rabin/blob/master/lib/mr.js\n *   https://github.com/golang/go/blob/master/src/math/big/int.go\n *   https://github.com/golang/go/blob/master/src/math/big/nat.go\n *   https://github.com/golang/go/blob/master/src/math/big/prime.go\n *   https://github.com/openssl/openssl/tree/master/crypto/bn\n *   https://github.com/openssl/openssl/blob/master/crypto/bn/bn_kron.c\n *   https://github.com/gnutls/nettle/blob/master/mini-gmp.c\n *   https://github.com/v8/v8/blob/master/src/objects/bigint.cc\n */\n\n/* eslint valid-typeof: \"off\" */\n\n'use strict';\n\nconst {custom} = require('../internal/custom');\n\n/*\n * Constants\n */\n\nconst zeros = [\n  '',\n  '0',\n  '00',\n  '000',\n  '0000',\n  '00000',\n  '000000',\n  '0000000',\n  '00000000',\n  '000000000',\n  '0000000000',\n  '00000000000',\n  '000000000000',\n  '0000000000000',\n  '00000000000000',\n  '000000000000000',\n  '0000000000000000',\n  '00000000000000000',\n  '000000000000000000',\n  '0000000000000000000',\n  '00000000000000000000',\n  '000000000000000000000',\n  '0000000000000000000000',\n  '00000000000000000000000',\n  '000000000000000000000000',\n  '0000000000000000000000000'\n];\n\nconst groupSizes = [\n  0x00, 0x19, 0x10, 0x0c, 0x0b, 0x0a,\n  0x09, 0x08, 0x08, 0x07, 0x07, 0x07,\n  0x07, 0x06, 0x06, 0x06, 0x06, 0x06,\n  0x06, 0x06, 0x05, 0x05, 0x05, 0x05,\n  0x05, 0x05, 0x05, 0x05, 0x05, 0x05,\n  0x05, 0x05, 0x05, 0x05, 0x05, 0x05\n];\n\nconst groupBases = [\n  0x00000000, 0x02000000, 0x0290d741, 0x01000000,\n  0x02e90edd, 0x039aa400, 0x0267bf47, 0x01000000,\n  0x0290d741, 0x00989680, 0x012959c3, 0x0222c000,\n  0x03bd7765, 0x0072e440, 0x00adcea1, 0x01000000,\n  0x01704f61, 0x0206fc40, 0x02cddcf9, 0x03d09000,\n  0x003e5185, 0x004ea360, 0x006235f7, 0x00798000,\n  0x009502f9, 0x00b54ba0, 0x00daf26b, 0x01069c00,\n  0x0138f9ad, 0x0172c9e0, 0x01b4d89f, 0x02000000,\n  0x025528a1, 0x02b54a20, 0x03216b93, 0x039aa400\n];\n\nconst primes = {\n  p192: null,\n  p224: null,\n  p521: null,\n  k256: null,\n  p251: null,\n  p25519: null,\n  p448: null\n};\n\nconst modes = {\n  NONE: 0,\n  QUO: 1,\n  REM: 2,\n  BOTH: 3,\n  EUCLID: 4,\n  ALL: 7\n};\n\nconst WND_WIDTH = 4;\nconst WND_SIZE = 1 << (WND_WIDTH - 1);\n\nconst HAS_BIGINT = typeof BigInt === 'function';\n\n/**\n * BN\n */\n\nclass BN {\n  constructor(num, base, endian) {\n    this.words = [0];\n    this.length = 1;\n    this.negative = 0;\n    this.red = null;\n    this.from(num, base, endian);\n  }\n\n  /*\n   * Addition Engine\n   */\n\n  _iadd(a, b) {\n    let carry = 0;\n    let i = 0;\n\n    // a.length > b.length\n    if (a.length < b.length)\n      [a, b] = [b, a];\n\n    if (a !== this)\n      this._alloc(a.length);\n\n    for (; i < b.length; i++) {\n      const r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n\n      this.words[i] = r & 0x3ffffff;\n\n      carry = r >>> 26;\n    }\n\n    for (; carry !== 0 && i < a.length; i++) {\n      const r = (a.words[i] | 0) + carry;\n\n      this.words[i] = r & 0x3ffffff;\n\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n\n    if (carry !== 0) {\n      this._alloc(this.length + 1);\n      this.words[this.length++] = carry;\n    } else if (a !== this) {\n      // Copy the rest of the words.\n      for (; i < a.length; i++)\n        this.words[i] = a.words[i];\n    }\n\n    // Note: we shouldn't need to strip here.\n    return this;\n  }\n\n  _iaddn(num) {\n    this.words[0] += num;\n\n    if (this.words[0] < 0x4000000)\n      return this;\n\n    // Carry.\n    let i = 0;\n\n    this._alloc(this.length + 1);\n\n    this.words[this.length] = 0;\n\n    for (; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      this.words[i + 1] += 1;\n    }\n\n    this.length = Math.max(this.length, i + 1);\n\n    // Note: we shouldn't need to strip here.\n    return this;\n  }\n\n  /*\n   * Addition\n   */\n\n  iadd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.negative === num.negative) {\n      // x + y == x + y\n      // (-x) + (-y) == -(x + y)\n      this._iadd(this, num);\n    } else {\n      // x + (-y) == x - y == -(y - x)\n      // (-x) + y == y - x == -(x - y)\n      const cmp = this.ucmp(num);\n\n      // x + (-x) == (-x) + x == 0\n      if (cmp === 0) {\n        this.words[0] = 0;\n        this.length = 1;\n        this.negative = 0;\n        return this;\n      }\n\n      if (cmp < 0) {\n        this._isub(num, this);\n        this.negative ^= 1;\n      } else {\n        this._isub(this, num);\n      }\n    }\n\n    return this;\n  }\n\n  iaddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const negative = (num < 0) | 0;\n\n    if (negative)\n      num = -num;\n\n    if (this.negative === negative) {\n      // x + y == x + y\n      // (-x) + (-y) == -(x + y)\n      this._iaddn(num);\n    } else {\n      // x + (-y) == x - y == -(y - x)\n      // (-x) + y == y - x == -(x - y)\n      if (this.length === 1 && this.words[0] < num) {\n        this.words[0] = num - this.words[0];\n        this.negative ^= 1;\n      } else {\n        this._isubn(num);\n      }\n    }\n\n    return this;\n  }\n\n  add(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (num.length > this.length)\n      return num.clone().iadd(this);\n\n    return this.clone().iadd(num);\n  }\n\n  addn(num) {\n    return this.clone().iaddn(num);\n  }\n\n  /*\n   * Subtraction Engine\n   */\n\n  _isub(a, b) {\n    let carry = 0;\n    let i = 0;\n\n    // a > b\n    assert(a.length >= b.length);\n\n    if (a !== this)\n      this._alloc(a.length);\n\n    for (; i < b.length; i++) {\n      const r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n\n      carry = r >> 26;\n\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    for (; carry !== 0 && i < a.length; i++) {\n      const r = (a.words[i] | 0) + carry;\n\n      carry = r >> 26;\n\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    assert(carry === 0);\n\n    // Copy rest of the words.\n    if (a !== this) {\n      for (; i < a.length; i++)\n        this.words[i] = a.words[i];\n    }\n\n    this.length = Math.max(this.length, i);\n\n    return this._strip();\n  }\n\n  _isubn(num) {\n    this.words[0] -= num;\n\n    if (this.words[0] >= 0)\n      return this._normalize();\n\n    assert(this.length !== 1);\n\n    // Carry.\n    this._alloc(this.length + 1);\n\n    for (let i = 0; i < this.length && this.words[i] < 0; i++) {\n      this.words[i] += 0x4000000;\n      this.words[i + 1] -= 1;\n    }\n\n    this.words[this.length] = 0;\n\n    return this._strip();\n  }\n\n  /*\n   * Subtraction\n   */\n\n  isub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.negative !== num.negative) {\n      // x - (-y) == x + y\n      // (-x) - y == -(x + y)\n      this._iadd(this, num);\n    } else {\n      // x - y == x - y == -(y - x)\n      // (-x) - (-y) == y - x == -(x - y)\n      const cmp = this.ucmp(num);\n\n      // x - x == 0\n      if (cmp === 0) {\n        this.words[0] = 0;\n        this.length = 1;\n        this.negative = 0;\n        return this;\n      }\n\n      if (cmp < 0) {\n        this._isub(num, this);\n        this.negative ^= 1;\n      } else {\n        this._isub(this, num);\n      }\n    }\n\n    return this;\n  }\n\n  isubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const negative = (num < 0) | 0;\n\n    if (negative)\n      num = -num;\n\n    if (this.negative !== negative) {\n      // x - (-y) == x + y\n      // (-x) - y == -(x + y)\n      this._iaddn(num);\n    } else {\n      // x - y == x - y == -(y - x)\n      // (-x) - (-y) == y - x == -(x - y)\n      if (this.length === 1 && this.words[0] < num) {\n        this.words[0] = num - this.words[0];\n        this.negative ^= 1;\n      } else {\n        this._isubn(num);\n      }\n    }\n\n    return this;\n  }\n\n  sub(num) {\n    return this.clone().isub(num);\n  }\n\n  subn(num) {\n    return this.clone().isubn(num);\n  }\n\n  /*\n   * Multiplication Engine\n   */\n\n  _mul(num, out) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    enforce(BN.isBN(out), 'out', 'bignum');\n\n    if (this.length === 10 && num.length === 10)\n      return comb10MulTo(this, num, out);\n\n    const len = this.length + num.length;\n\n    if (len < 63)\n      return smallMulTo(this, num, out);\n\n    if (len < 1024)\n      return bigMulTo(this, num, out);\n\n    return jumboMulTo(this, num, out);\n  }\n\n  /*\n   * Multiplication\n   */\n\n  imul(num) {\n    return this.mul(num)._move(this);\n  }\n\n  imuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const neg = (num < 0) | 0;\n\n    if (neg)\n      num = -num;\n\n    // Carry.\n    let carry = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const w = this.words[i] * num;\n      const lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      carry += lo >>> 26;\n\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    this.negative ^= neg;\n\n    if (carry !== 0) {\n      this._alloc(this.length + 1);\n      this.words[this.length++] = carry;\n    } else {\n      this._strip();\n    }\n\n    return this;\n  }\n\n  mul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    const len = this.length + num.length;\n    const out = new BN();\n\n    out.words = new Array(len);\n\n    for (let i = 0; i < len; i ++)\n      out.words[i] = 0;\n\n    return this._mul(num, out);\n  }\n\n  muln(num) {\n    return this.clone().imuln(num);\n  }\n\n  /*\n   * Multiplication + Shift\n   */\n\n  mulShift(num, bits) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    const r = this.mul(num);\n    const b = r.utestn(bits - 1);\n\n    r.iushrn(bits);\n\n    if (this.negative ^ num.negative)\n      return r.isubn(b);\n\n    return r.iaddn(b);\n  }\n\n  /*\n   * Division Engine\n   */\n\n  _div(num, flags) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    assert((flags & modes.ALL) === flags);\n    assert(flags !== modes.NONE);\n\n    const a = this;\n    const b = num;\n\n    nonzero(!b.isZero());\n\n    if (a.isZero())\n      return [new BN(0), new BN(0)];\n\n    const as = a.negative;\n    const bs = b.negative;\n\n    a.negative = 0;\n    b.negative = 0;\n\n    let q = null;\n    let r = null;\n\n    if (a.ucmp(b) < 0) {\n      if (flags & modes.QUO)\n        q = new BN(0);\n\n      if (flags & modes.REM)\n        r = a.clone();\n    } else if (b.length === 1) {\n      if (flags & modes.QUO)\n        q = a.quon(b.words[0]);\n\n      if (flags & modes.REM)\n        r = a.remn(b.words[0]);\n    } else {\n      [q, r] = a._wordDiv(b, flags);\n    }\n\n    a.negative = as;\n    b.negative = bs;\n\n    if (flags & modes.QUO) {\n      q.negative = a.negative ^ b.negative;\n      q._normalize();\n    }\n\n    if (flags & modes.REM) {\n      r.negative = a.negative;\n      r._normalize();\n    }\n\n    if (flags & modes.EUCLID) {\n      if (flags & modes.QUO) {\n        assert((flags & modes.REM) !== 0);\n\n        if (r.negative !== 0) {\n          if (b.negative !== 0)\n            q.iaddn(1);\n          else\n            q.isubn(1);\n        }\n      }\n\n      if (flags & modes.REM) {\n        if (r.negative !== 0) {\n          if (b.negative !== 0)\n            r.isub(b);\n          else\n            r.iadd(b);\n        }\n      }\n    }\n\n    return [q, r];\n  }\n\n  _wordDiv(num, flags) {\n    let a = this.clone();\n    let b = num;\n    let q = null;\n    let hi;\n\n    // Normalize.\n    const word = b.words[b.length - 1] | 0;\n    const shift = 26 - countBits(word);\n\n    if (shift !== 0) {\n      b = b.clone();\n\n      a.iushln(shift);\n      b.iushln(shift);\n\n      hi = b.words[b.length - 1] | 0;\n    } else {\n      hi = word;\n    }\n\n    // Initialize quotient.\n    const m = a.length - b.length;\n\n    assert(m >= 0);\n\n    if (flags & modes.QUO) {\n      q = new BN(0);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n\n      for (let i = 0; i < q.length; i++)\n        q.words[i] = 0;\n    }\n\n    // Diff.\n    const d = a.clone();\n\n    d._ishlnsubmul(b, 1, m);\n\n    if (d.negative === 0) {\n      if (q)\n        q.words[m] = 1;\n\n      a = d;\n    }\n\n    // Divide.\n    for (let j = m - 1; j >= 0; j--) {\n      const ahi = a.words[b.length + j];\n      const alo = a.words[b.length + j - 1];\n      const quo = ((ahi * 0x4000000 + alo) / hi) | 0;\n\n      let qj = Math.min(quo, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n\n      while (a.negative !== 0) {\n        qj -= 1;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        a.ineg();\n      }\n\n      if (q)\n        q.words[j] = qj;\n    }\n\n    // Strip.\n    if (q)\n      q._strip();\n\n    // Denormalize.\n    // Note: we shouldn't need to strip `a` here.\n    if ((flags & modes.REM) && shift !== 0)\n      a.iushrn(shift);\n\n    return [q, a];\n  }\n\n  _ishlnsubmul(num, mul, shift) {\n    let carry = 0;\n    let i = 0;\n\n    this._expand(num.length + shift);\n\n    for (; i < num.length; i++) {\n      const k = (this.words[i + shift] | 0) + carry;\n      const r = num.words[i] * mul;\n      const w = k - (r & 0x3ffffff);\n\n      carry = (w >> 26) - ((r / 0x4000000) | 0);\n\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    for (; i < this.length - shift; i++) {\n      const w = (this.words[i + shift] | 0) + carry;\n\n      carry = w >> 26;\n\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0)\n      return this._strip();\n\n    // Subtraction overflow.\n    assert(carry === -1);\n\n    carry = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const w = -(this.words[i] | 0) + carry;\n\n      carry = w >> 26;\n\n      this.words[i] = w & 0x3ffffff;\n    }\n\n    this.negative = 1;\n\n    return this._strip();\n  }\n\n  /*\n   * Truncation Division + Modulo\n   */\n\n  quorem(num) {\n    return this._div(num, modes.BOTH);\n  }\n\n  /*\n   * Truncation Division\n   */\n\n  iquo(num) {\n    return this.quo(num)._move(this);\n  }\n\n  iquon(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    nonzero(num !== 0);\n\n    const neg = (num < 0) | 0;\n\n    if (neg)\n      num = -num;\n\n    let carry = 0;\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      const w = (this.words[i] | 0) + carry * 0x4000000;\n\n      this.words[i] = (w / num) | 0;\n\n      carry = w % num;\n    }\n\n    this.negative ^= neg;\n\n    return this._strip();\n  }\n\n  quo(num) {\n    return this._div(num, modes.QUO)[0];\n  }\n\n  quon(num) {\n    return this.clone().iquon(num);\n  }\n\n  /*\n   * Truncation Modulo\n   */\n\n  irem(num) {\n    return this.rem(num)._move(this);\n  }\n\n  iremn(num) {\n    let m = this.remrn(num);\n\n    if (m < 0)\n      m = -m;\n\n    this.words[0] = m;\n    this.length = 1;\n\n    return this._normalize();\n  }\n\n  rem(num) {\n    return this._div(num, modes.REM)[1];\n  }\n\n  remn(num) {\n    return this.clone().iremn(num);\n  }\n\n  remrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    nonzero(num !== 0);\n\n    if (num < 0)\n      num = -num;\n\n    const p = (1 << 26) % num;\n\n    let acc = 0;\n\n    for (let i = this.length - 1; i >= 0; i--)\n      acc = (p * acc + (this.words[i] | 0)) % num;\n\n    return this.negative !== 0 ? (-acc | 0) : acc;\n  }\n\n  /*\n   * Euclidean Division + Modulo\n   */\n\n  divmod(num) {\n    return this._div(num, modes.BOTH | modes.EUCLID);\n  }\n\n  /*\n   * Euclidean Division\n   */\n\n  idiv(num) {\n    return this.div(num)._move(this);\n  }\n\n  idivn(num) {\n    if (this.negative === 0)\n      return this.iquon(num);\n\n    const r = this.remrn(num);\n\n    this.iquon(num);\n\n    if (r < 0) {\n      if (num < 0)\n        this.iaddn(1);\n      else\n        this.isubn(1);\n    }\n\n    return this;\n  }\n\n  div(num) {\n    return this._div(num, modes.BOTH | modes.EUCLID)[0];\n  }\n\n  divn(num) {\n    return this.clone().idivn(num);\n  }\n\n  /*\n   * Euclidean Modulo\n   */\n\n  imod(num) {\n    if (this.ucmp(num) < 0) {\n      if (this.negative !== 0) {\n        this._isub(num, this);\n        this.negative = 0;\n      }\n      return this;\n    }\n\n    return this.mod(num)._move(this);\n  }\n\n  imodn(num) {\n    this.words[0] = this.modrn(num);\n    this.length = 1;\n    this.negative = 0;\n    return this;\n  }\n\n  mod(num) {\n    return this._div(num, modes.REM | modes.EUCLID)[1];\n  }\n\n  modn(num) {\n    return this.clone().imodn(num);\n  }\n\n  modrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    let r = this.remrn(num);\n\n    if (r < 0) {\n      if (num < 0)\n        r -= num;\n      else\n        r += num;\n    }\n\n    return r;\n  }\n\n  /*\n   * Round Division\n   */\n\n  divRound(num) {\n    const [q, r] = this.quorem(num);\n\n    // Fast case - exact division.\n    if (r.isZero())\n      return q;\n\n    const bit = num.words[0] & 1;\n\n    num.iushrn(1);\n\n    const cmp = r.ucmp(num);\n\n    num.iushln(1);\n\n    num.words[0] |= bit;\n\n    // Round down.\n    if (cmp < 0 || (num.isOdd() && cmp === 0))\n      return q;\n\n    // Round up.\n    if (this.negative ^ num.negative)\n      return q.isubn(1);\n\n    return q.iaddn(1);\n  }\n\n  /*\n   * Exponentiation\n   */\n\n  ipow(num) {\n    return this.pow(num)._move(this);\n  }\n\n  ipown(num) {\n    return this.pown(num)._move(this);\n  }\n\n  pow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let b = countBits(num.words[num.length - 1]);\n    let r = new BN(1);\n\n    for (let i = num.length - 1; i >= 0; i--) {\n      const word = num.words[i];\n\n      for (let j = b - 1; j >= 0; j--) {\n        r = r.sqr();\n\n        if ((word >> j) & 1)\n          r = r.mul(this);\n      }\n\n      b = 26;\n    }\n\n    return r;\n  }\n\n  pown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if (num < 0)\n      num = -num;\n\n    if (num === 0)\n      return new BN(1);\n\n    if (num === 1)\n      return this.clone();\n\n    const bits = countBits(num);\n\n    let r = this;\n\n    for (let i = bits - 2; i >= 0; i--) {\n      r = r.sqr();\n\n      if ((num >> i) & 1)\n        r = r.mul(this);\n    }\n\n    return r;\n  }\n\n  isqr() {\n    return this.imul(this);\n  }\n\n  sqr() {\n    return this.mul(this);\n  }\n\n  /*\n   * Roots Engine\n   */\n\n  _rootrem(pow, rem) {\n    enforce((pow >>> 0) === pow, 'num', 'uint32');\n\n    if (pow === 0)\n      throw new RangeError('Zeroth root.');\n\n    if (~pow & this.negative)\n      throw new RangeError('Negative with even root.');\n\n    if (this.ucmpn(1) <= 0)\n      return [this.clone(), new BN(0)];\n\n    let u = new BN(0);\n    let t = BN.shift(1, this.bitLength() / pow + 1 | 0);\n    let v, r;\n\n    if (this.negative !== 0)\n      t.ineg();\n\n    if (pow === 2) {\n      do {\n        u = t;\n        t = this.quo(u);\n        t.iadd(u);\n        t.iushrn(1);\n      } while (t.ucmp(u) < 0);\n    } else {\n      do {\n        u = t;\n        t = u.pown(pow - 1);\n        t = this.quo(t);\n        v = u.muln(pow - 1);\n        t.iadd(v);\n        t = t.quon(pow);\n      } while (t.ucmp(u) < 0);\n    }\n\n    if (rem) {\n      t = u.pown(pow);\n      r = this.sub(t);\n    }\n\n    return [u, r];\n  }\n\n  /*\n   * Roots\n   */\n\n  rootrem(pow) {\n    return this._rootrem(pow, 1);\n  }\n\n  iroot(pow) {\n    return this.root(pow)._move(this);\n  }\n\n  root(pow) {\n    return this._rootrem(pow, 0)[0];\n  }\n\n  isPower(pow) {\n    enforce((pow >>> 0) === pow, 'num', 'uint32');\n\n    if (pow === 0 || (~pow & this.negative))\n      return false;\n\n    const [, r] = this.rootrem(pow);\n\n    return r.sign() === 0;\n  }\n\n  sqrtrem() {\n    return this.rootrem(2);\n  }\n\n  isqrt() {\n    return this.sqrt()._move(this);\n  }\n\n  sqrt() {\n    return this.root(2);\n  }\n\n  isSquare() {\n    return this.isPower(2);\n  }\n\n  /*\n   * AND\n   */\n\n  iand(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let x = this;\n    let y = num;\n\n    if (x === y)\n      return x;\n\n    if ((x.negative | y.negative) === 0)\n      return x.iuand(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) & (-y) == ~(x-1) & ~(y-1)\n      //             == ~((x-1) | (y-1))\n      //             == -(((x-1) | (y-1)) + 1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuor(y);\n      x.isubn(1);\n      y.isubn(1);\n      return x;\n    }\n\n    // Assume x is the positive number.\n    if (x.negative !== 0)\n      [x, y] = [y.clone(), x];\n\n    // x & (-y) == x & ~(y-1)\n    //          == x & ~(y-1)\n    const width = x.bitLength();\n\n    y.iaddn(1);\n    y.inotn(width);\n    x.iuand(y);\n    y.inotn(width);\n    y.isubn(1);\n\n    return x._move(this);\n  }\n\n  iandn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | (num < 0)) !== 0)\n      return this.iand(new BN(num));\n\n    this.words[0] &= num;\n    this.length = 1;\n\n    return this;\n  }\n\n  and(num) {\n    return this.clone().iand(num);\n  }\n\n  andn(num) {\n    return this.clone().iandn(num);\n  }\n\n  andrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | (num < 0)) !== 0) {\n      const n = this.iand(new BN(num));\n\n      if (n.length > 1)\n        throw new RangeError('Number exceeds 26 bits.');\n\n      return n.negative !== 0 ? -n.words[0] : n.words[0];\n    }\n\n    return this.words[0] & num;\n  }\n\n  /*\n   * Unsigned AND\n   */\n\n  iuand(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    this.length = Math.min(this.length, num.length);\n\n    for (let i = 0; i < this.length; i++)\n      this.words[i] &= num.words[i];\n\n    return this._strip();\n  }\n\n  iuandn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    this.words[0] &= Math.abs(num);\n    this.length = 1;\n\n    return this._normalize();\n  }\n\n  uand(num) {\n    return this.clone().iuand(num);\n  }\n\n  uandn(num) {\n    return this.clone().iuandn(num);\n  }\n\n  uandrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const n = this.words[0] & Math.abs(num);\n\n    return this.negative !== 0 ? (-n | 0) : n;\n  }\n\n  /*\n   * OR\n   */\n\n  ior(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let x = this;\n    let y = num;\n\n    if (x === y)\n      return x;\n\n    if ((x.negative | y.negative) === 0)\n      return x.iuor(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) | (-y) == ~(x-1) | ~(y-1)\n      //             == ~((x-1) & (y-1))\n      //             == -(((x-1) & (y-1)) + 1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuand(y);\n      x.isubn(1);\n      y.isubn(1);\n      return x;\n    }\n\n    // Assume x is the positive number.\n    y = y.clone();\n\n    if (x.negative !== 0)\n      [x, y] = [y, x];\n\n    // x | (-y) == x | ~(y-1)\n    //          == ~((y-1) & ~x)\n    //          == -(((y-1) & ~x) + 1)\n    y.iaddn(1);\n    x.inotn(y.bitLength());\n    y.iuand(x);\n    y.isubn(1);\n\n    return y._move(this);\n  }\n\n  iorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | (num < 0)) !== 0)\n      return this.ior(new BN(num));\n\n    this.words[0] |= num;\n\n    return this;\n  }\n\n  or(num) {\n    return this.clone().ior(num);\n  }\n\n  orn(num) {\n    return this.clone().iorn(num);\n  }\n\n  /*\n   * Unsigned OR\n   */\n\n  iuor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    this._expand(num.length);\n\n    for (let i = 0; i < num.length; i++)\n      this.words[i] |= num.words[i];\n\n    // Note: we shouldn't need to strip here.\n    return this;\n  }\n\n  iuorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    this.words[0] |= Math.abs(num);\n\n    return this;\n  }\n\n  uor(num) {\n    return this.clone().iuor(num);\n  }\n\n  uorn(num) {\n    return this.clone().iuorn(num);\n  }\n\n  /*\n   * XOR\n   */\n\n  ixor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let x = this;\n    let y = num;\n\n    if (x === y) {\n      x.words[0] = 0;\n      x.length = 1;\n      x.negative = 0;\n      return x;\n    }\n\n    if ((x.negative | y.negative) === 0)\n      return x.iuxor(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) ^ (-y) == ~(x-1) ^ ~(y-1)\n      //             == (x-1) ^ (y-1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuxor(y);\n      x.ineg();\n      y.isubn(1);\n      return x;\n    }\n\n    // Assume x is the positive number.\n    if (x.negative !== 0)\n      [x, y] = [y.clone(), x];\n\n    // x ^ (-y) == x ^ ~(y-1)\n    //          == ~(x ^ (y-1))\n    //          == -((x ^ (y-1)) + 1)\n    y.iaddn(1);\n    x.iuxor(y);\n    x.iaddn(1);\n    x.ineg();\n    y.isubn(1);\n\n    return x._move(this);\n  }\n\n  ixorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | (num < 0)) !== 0)\n      return this.ixor(new BN(num));\n\n    this.words[0] ^= num;\n\n    return this;\n  }\n\n  xor(num) {\n    return this.clone().ixor(num);\n  }\n\n  xorn(num) {\n    return this.clone().ixorn(num);\n  }\n\n  /*\n   * Unsigned XOR\n   */\n\n  iuxor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let a = this;\n    let b = num;\n\n    if (a.length < b.length)\n      [a, b] = [b, a];\n\n    let i = 0;\n\n    for (; i < b.length; i++)\n      this.words[i] = a.words[i] ^ b.words[i];\n\n    if (a !== this) {\n      this._alloc(a.length);\n\n      for (; i < a.length; i++)\n        this.words[i] = a.words[i];\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  }\n\n  iuxorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    this.words[0] ^= Math.abs(num);\n\n    return this._normalize();\n  }\n\n  uxor(num) {\n    return this.clone().iuxor(num);\n  }\n\n  uxorn(num) {\n    return this.clone().iuxorn(num);\n  }\n\n  /*\n   * NOT\n   */\n\n  inot() {\n    if (this.negative !== 0) {\n      // ~(-x) == ~(~(x-1)) == x-1\n      this.ineg().isubn(1);\n    } else {\n      // ~x == -x-1 == -(x+1)\n      this.iaddn(1).ineg();\n    }\n    return this;\n  }\n\n  not() {\n    return this.clone().inot();\n  }\n\n  inotn(width) {\n    enforce((width >>> 0) === width, 'width', 'uint32');\n\n    const r = width % 26;\n\n    let s = Math.ceil(width / 26);\n    let i = 0;\n\n    // Extend the buffer with leading zeroes.\n    this._expand(s);\n\n    if (r > 0)\n      s -= 1;\n\n    // Handle complete words.\n    for (; i < s; i++)\n      this.words[i] ^= 0x3ffffff;\n\n    // Handle the residue.\n    if (r > 0)\n      this.words[i] ^= (1 << r) - 1;\n\n    // And remove leading zeroes.\n    return this._strip();\n  }\n\n  notn(width) {\n    return this.clone().inotn(width);\n  }\n\n  /*\n   * Left Shift\n   */\n\n  ishl(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.ishln(num.toNumber());\n  }\n\n  ishln(bits) {\n    return this.iushln(bits);\n  }\n\n  shl(num) {\n    return this.clone().ishl(num);\n  }\n\n  shln(bits) {\n    return this.clone().ishln(bits);\n  }\n\n  /*\n   * Unsigned Left Shift\n   */\n\n  iushl(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.iushln(num.toNumber());\n  }\n\n  iushln(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    const r = bits % 26;\n    const s = (bits - r) / 26;\n    const mask = ((1 << r) - 1) << (26 - r);\n\n    if (r !== 0) {\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const ncarry = this.words[i] & mask;\n        const c = ((this.words[i] | 0) - ncarry) << r;\n\n        this.words[i] = c | carry;\n\n        carry = ncarry >>> (26 - r);\n      }\n\n      if (carry !== 0) {\n        this._alloc(this.length + 1);\n        this.words[this.length++] = carry;\n      }\n    }\n\n    if (s !== 0) {\n      this._alloc(this.length + s);\n\n      for (let i = this.length - 1; i >= 0; i--)\n        this.words[i + s] = this.words[i];\n\n      for (let i = 0; i < s; i++)\n        this.words[i] = 0;\n\n      this.length += s;\n    }\n\n    return this._strip();\n  }\n\n  ushl(num) {\n    return this.clone().iushl(num);\n  }\n\n  ushln(bits) {\n    return this.clone().iushln(bits);\n  }\n\n  /*\n   * Right Shift Engine\n   */\n\n  _split(bits, output) {\n    const r = bits % 26;\n    const s = Math.min((bits - r) / 26, this.length);\n    const mask = (1 << r) - 1;\n\n    // Extended mode, copy masked part.\n    if (output) {\n      output._alloc(s);\n\n      for (let i = 0; i < s; i++)\n        output.words[i] = this.words[i];\n\n      output.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all.\n    } else if (this.length > s) {\n      this.length -= s;\n      for (let i = 0; i < this.length; i++)\n        this.words[i] = this.words[i + s];\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    let carry = 0;\n\n    if (r !== 0) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        const word = this.words[i] | 0;\n\n        this.words[i] = (carry << (26 - r)) | (word >>> r);\n\n        carry = word & mask;\n      }\n    }\n\n    // Push carried bits as a mask.\n    if (output) {\n      if (carry !== 0) {\n        output._alloc(output.length + 1);\n        output.words[output.length++] = carry;\n      } else {\n        if (output.length === 0)\n          output.words[output.length++] = 0;\n\n        output._strip();\n      }\n    }\n\n    return this._strip();\n  }\n\n  /*\n   * Right Shift\n   */\n\n  ishr(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.ishrn(num.toNumber());\n  }\n\n  ishrn(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    if (this.negative !== 0) {\n      // (-x) >> y == ~(x-1) >> y\n      //           == ~((x-1) >> y)\n      //           == -(((x-1) >> y) + 1)\n      this.iaddn(1);\n      this.iushrn(bits);\n      this.isubn(1);\n      return this;\n    }\n\n    return this.iushrn(bits);\n  }\n\n  shr(num) {\n    return this.clone().ishr(num);\n  }\n\n  shrn(bits) {\n    return this.clone().ishrn(bits);\n  }\n\n  /*\n   * Unsigned Right Shift\n   */\n\n  iushr(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.iushrn(num.toNumber());\n  }\n\n  iushrn(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n    return this._split(bits, null);\n  }\n\n  ushr(num) {\n    return this.clone().iushr(num);\n  }\n\n  ushrn(bits) {\n    return this.clone().iushrn(bits);\n  }\n\n  /*\n   * Bit Manipulation\n   */\n\n  setn(bit, val) {\n    enforce((bit >>> 0) === bit, 'bit', 'uint32');\n\n    if (this.negative !== 0) {\n      this.iaddn(1);\n      this.usetn(bit, !val);\n      this.isubn(1);\n      return this;\n    }\n\n    return this.usetn(bit, val);\n  }\n\n  usetn(bit, val) {\n    enforce((bit >>> 0) === bit, 'bit', 'uint32');\n\n    const r = bit % 26;\n    const s = (bit - r) / 26;\n\n    this._expand(s + 1);\n\n    if (val)\n      this.words[s] |= (1 << r);\n    else\n      this.words[s] &= ~(1 << r);\n\n    return this._strip();\n  }\n\n  testn(bit) {\n    enforce((bit >>> 0) === bit, 'bit', 'uint32');\n\n    const r = bit % 26;\n    const s = (bit - r) / 26;\n\n    // Fast case: bit is much higher than all existing words.\n    if (this.length <= s)\n      return this.negative;\n\n    // Check bit and return.\n    const w = this.words[s];\n    const val = (w >> r) & 1;\n\n    if (this.negative !== 0) {\n      if (r > 0 && (w & ((1 << r) - 1)))\n        return val ^ 1;\n\n      let j = s;\n\n      while (j--) {\n        if (this.words[j] > 0)\n          return val ^ 1;\n      }\n    }\n\n    return val;\n  }\n\n  utestn(bit) {\n    enforce((bit >>> 0) === bit, 'bit', 'uint32');\n\n    const r = bit % 26;\n    const s = (bit - r) / 26;\n\n    // Fast case: bit is much higher than all existing words.\n    if (this.length <= s)\n      return 0;\n\n    // Check bit and return.\n    return (this.words[s] >> r) & 1;\n  }\n\n  imaskn(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    if (this.negative !== 0) {\n      this.iaddn(1);\n      this.inotn(bits + 1);\n      this.ineg();\n    }\n\n    return this.iumaskn(bits);\n  }\n\n  maskn(bits) {\n    return this.clone().imaskn(bits);\n  }\n\n  iumaskn(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    const r = bits % 26;\n\n    let s = (bits - r) / 26;\n\n    if (this.length <= s)\n      return this;\n\n    if (r !== 0)\n      s += 1;\n\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0)\n      this.words[this.length - 1] &= (1 << r) - 1;\n\n    if (this.length === 0)\n      this.words[this.length++] = 0;\n\n    return this._strip();\n  }\n\n  umaskn(bits) {\n    return this.clone().iumaskn(bits);\n  }\n\n  andln(num) {\n    return this.words[0] & num;\n  }\n\n  bit(pos) {\n    return this.utestn(pos);\n  }\n\n  bits(pos, width) {\n    enforce((pos >>> 0) === pos, 'pos', 'uint32');\n    enforce((width >>> 0) === width, 'width', 'uint32');\n    enforce(width <= 26, 'width', 'width');\n\n    const shift = pos % 26;\n    const index = (pos - shift) / 26;\n\n    if (index >= this.length)\n      return 0;\n\n    let bits = (this.words[index] >> shift) & ((1 << width) - 1);\n\n    if (shift + width > 26 && index + 1 < this.length) {\n      const more = shift + width - 26;\n      const next = this.words[index + 1] & ((1 << more) - 1);\n\n      bits |= next << (26 - shift);\n    }\n\n    return bits;\n  }\n\n  /*\n   * Negation\n   */\n\n  ineg() {\n    if (!this.isZero())\n      this.negative ^= 1;\n\n    return this;\n  }\n\n  neg() {\n    return this.clone().ineg();\n  }\n\n  iabs() {\n    this.negative = 0;\n    return this;\n  }\n\n  abs() {\n    return this.clone().iabs();\n  }\n\n  /*\n   * Comparison\n   */\n\n  cmp(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.negative !== num.negative)\n      return num.negative - this.negative;\n\n    const res = this.ucmp(num);\n\n    if (this.negative !== 0)\n      return -res | 0;\n\n    return res;\n  }\n\n  cmpn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const negative = (num < 0) | 0;\n\n    if (this.negative !== negative)\n      return negative - this.negative;\n\n    const res = this.ucmpn(num);\n\n    if (this.negative !== 0)\n      return -res | 0;\n\n    return res;\n  }\n\n  eq(num) {\n    return this.cmp(num) === 0;\n  }\n\n  eqn(num) {\n    return this.cmpn(num) === 0;\n  }\n\n  gt(num) {\n    return this.cmp(num) > 0;\n  }\n\n  gtn(num) {\n    return this.cmpn(num) > 0;\n  }\n\n  gte(num) {\n    return this.cmp(num) >= 0;\n  }\n\n  gten(num) {\n    return this.cmpn(num) >= 0;\n  }\n\n  lt(num) {\n    return this.cmp(num) < 0;\n  }\n\n  ltn(num) {\n    return this.cmpn(num) < 0;\n  }\n\n  lte(num) {\n    return this.cmp(num) <= 0;\n  }\n\n  lten(num) {\n    return this.cmpn(num) <= 0;\n  }\n\n  sign() {\n    if (this.negative !== 0)\n      return -1;\n\n    if (this.length === 1 && this.words[0] === 0)\n      return 0;\n\n    return 1;\n  }\n\n  isZero() {\n    return this.length === 1 && this.words[0] === 0;\n  }\n\n  isNeg() {\n    return this.negative !== 0;\n  }\n\n  isPos() {\n    return this.negative === 0;\n  }\n\n  isOdd() {\n    return (this.words[0] & 1) === 1;\n  }\n\n  isEven() {\n    return (this.words[0] & 1) === 0;\n  }\n\n  /*\n   * Unsigned Comparison\n   */\n\n  ucmp(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.length < num.length)\n      return -1;\n\n    if (this.length > num.length)\n      return 1;\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      const a = this.words[i] | 0;\n      const b = num.words[i] | 0;\n\n      if (a === b)\n        continue;\n\n      return (a > b) - (a < b);\n    }\n\n    return 0;\n  }\n\n  ucmpn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if (this.length > 1)\n      return 1;\n\n    const w = this.words[0] | 0;\n\n    if (num < 0)\n      num = -num;\n\n    return (w > num) - (w < num);\n  }\n\n  /*\n   * Number Theoretic Functions\n   */\n\n  legendre(num) {\n    const red = HAS_BIGINT ? BN.red(num) : BN.mont(num);\n    return this.toRed(red).redLegendre();\n  }\n\n  jacobi(num) {\n    // See: A Binary Algorithm for the Jacobi Symbol\n    //   J. Shallit, J. Sorenson\n    //   Page 3, Section 3\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (num.isZero() || num.isEven())\n      throw new Error('jacobi: `num` must be odd.');\n\n    let a = this._cloneNormal();\n    let b = num.clone();\n    let j = 1;\n\n    if (b.isNeg()) {\n      if (a.isNeg())\n        j = -1;\n      b.ineg();\n    }\n\n    if (a.isNeg() || a.ucmp(b) >= 0)\n      a.imod(b);\n\n    while (!a.isZero()) {\n      const bits = a._makeOdd();\n\n      if (bits & 1) {\n        const bmod8 = b.andln(7);\n\n        if (bmod8 === 3 || bmod8 === 5)\n          j = -j;\n      }\n\n      if (a.ucmp(b) < 0) {\n        [a, b] = [b, a];\n\n        if (a.andln(3) === 3 && b.andln(3) === 3)\n          j = -j;\n      }\n\n      a._isub(a, b).iushrn(1);\n\n      const bmod8 = b.andln(7);\n\n      if (bmod8 === 3 || bmod8 === 5)\n        j = -j;\n    }\n\n    if (b.cmpn(1) !== 0)\n      return 0;\n\n    return j;\n  }\n\n  kronecker(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    const table = [\n      0,  1, 0, -1,\n      0, -1, 0,  1\n    ];\n\n    let a = this._cloneNormal();\n    let b = num.clone();\n    let k = 1;\n\n    if (b.isZero())\n      return a.ucmpn(1) === 0 ? k : 0;\n\n    if (!a.isOdd() && !b.isOdd())\n      return 0;\n\n    const bits = b._makeOdd();\n\n    if (bits & 1)\n      k = table[a.andln(7)];\n\n    if (b.isNeg()) {\n      if (a.isNeg())\n        k = -k;\n      b.ineg();\n    }\n\n    while (!a.isZero()) {\n      const bits = a._makeOdd();\n\n      if (bits & 1)\n        k *= table[b.andln(7)];\n\n      const w = a.words[0] ^ (a.negative * 0x3ffffff);\n\n      if (w & b.words[0] & 2)\n        k = -k;\n\n      b.imod(a);\n\n      [a, b] = [b, a];\n\n      b.negative = 0;\n    }\n\n    if (b.cmpn(1) !== 0)\n      return 0;\n\n    return k;\n  }\n\n  igcd(num) {\n    return this.gcd(num)._move(this);\n  }\n\n  gcd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.isZero())\n      return num.abs();\n\n    if (num.isZero())\n      return this.abs();\n\n    let a = this.clone();\n    let b = num.clone();\n\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two.\n    const shift = a._factor2(b);\n\n    if (shift !== 0) {\n      a.iushrn(shift);\n      b.iushrn(shift);\n    }\n\n    for (;;) {\n      a._makeOdd();\n      b._makeOdd();\n\n      const cmp = a.ucmp(b);\n\n      if (cmp < 0) {\n        // a > b\n        [a, b] = [b, a];\n      } else if (cmp === 0 || b.ucmpn(1) === 0) {\n        // Break if a == b.\n        // Break if b == 1 to avoid repeated subtraction.\n        break;\n      }\n\n      a._isub(a, b);\n    }\n\n    return b.iushln(shift);\n  }\n\n  ilcm(num) {\n    return this.lcm(num)._move(this);\n  }\n\n  lcm(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.isZero() || num.isZero())\n      return new BN(0);\n\n    return this.quo(this.gcd(num)).mul(num).iabs();\n  }\n\n  egcd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.isZero()) {\n      return [\n        new BN(0),\n        new BN(num.sign()),\n        num.abs()\n      ];\n    }\n\n    if (num.isZero()) {\n      return [\n        new BN(this.sign()),\n        new BN(0),\n        this.abs()\n      ];\n    }\n\n    const x = this.clone();\n    const y = num.clone();\n\n    x.negative = 0;\n    y.negative = 0;\n\n    // A * x + B * y = x\n    const A = new BN(1);\n    const B = new BN(0);\n\n    // C * x + D * y = y\n    const C = new BN(0);\n    const D = new BN(1);\n\n    // Remove common factor of two.\n    const g = x._factor2(y);\n\n    if (g !== 0) {\n      x.iushrn(g);\n      y.iushrn(g);\n    }\n\n    const yp = y.clone();\n    const xp = x.clone();\n\n    while (!x.isZero()) {\n      let i = x._makeOdd();\n      let j = y._makeOdd();\n\n      while (i--) {\n        if (A.isOdd() || B.isOdd()) {\n          A.iadd(yp);\n          B.isub(xp);\n        }\n\n        A.iushrn(1);\n        B.iushrn(1);\n      }\n\n      while (j--) {\n        if (C.isOdd() || D.isOdd()) {\n          C.iadd(yp);\n          D.isub(xp);\n        }\n\n        C.iushrn(1);\n        D.iushrn(1);\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    if (this.negative !== 0)\n      C.ineg();\n\n    if (num.negative !== 0)\n      D.ineg();\n\n    return [C, D, y.iushln(g)];\n  }\n\n  iinvert(num) {\n    return this.invert(num)._move(this);\n  }\n\n  invert(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    range(num.sign() > 0, 'invert');\n\n    if (num.isOdd())\n      return this._invertp(num);\n\n    if (num.cmpn(1) === 0)\n      throw new RangeError('Not invertible.');\n\n    const [s,, g] = this.egcd(num);\n\n    if (g.cmpn(1) !== 0)\n      throw new RangeError('Not invertible.');\n\n    return s.imod(num);\n  }\n\n  ifermat(num) {\n    return this.fermat(num)._move(this);\n  }\n\n  fermat(num) {\n    const red = HAS_BIGINT ? BN.red(num) : BN.mont(num);\n    return this.toRed(red).redFermat().fromRed();\n  }\n\n  ipowm(y, m, mont) {\n    return this.powm(y, m, mont)._move(this);\n  }\n\n  powm(y, m, mont) {\n    const red = !HAS_BIGINT && mont ? BN.mont(m) : BN.red(m);\n    return this.toRed(red).redPow(y).fromRed();\n  }\n\n  ipowmn(y, m, mont) {\n    return this.powmn(y, m, mont)._move(this);\n  }\n\n  powmn(y, m, mont) {\n    const red = mont ? BN.mont(m) : BN.red(m);\n    return this.toRed(red).redPown(y).fromRed();\n  }\n\n  isqrtm(p) {\n    return this.sqrtm(p)._move(this);\n  }\n\n  sqrtm(p) {\n    enforce(BN.isBN(p), 'p', 'bignum');\n\n    let red;\n\n    if (p.andln(3) === 3 || p.andln(7) === 5) {\n      // Probably not worth the setup.\n      red = BN.red(p);\n    } else {\n      red = BN.mont(p);\n    }\n\n    return this.toRed(red).redSqrt().fromRed();\n  }\n\n  isqrtpq(p, q) {\n    return this.sqrtpq(p, q)._move(this);\n  }\n\n  sqrtpq(p, q) {\n    const sp = this.sqrtm(p);\n    const sq = this.sqrtm(q);\n    const [mp, mq] = p.egcd(q);\n    const lhs = sq.mul(mp).mul(p);\n    const rhs = sp.mul(mq).mul(q);\n    const n = p.mul(q);\n\n    return lhs.iadd(rhs).imod(n);\n  }\n\n  /*\n   * Primality Testing\n   */\n\n  isPrime(rng, reps, limit) {\n    enforce((reps >>> 0) === reps, 'reps', 'uint32');\n\n    if (!this.isPrimeMR(rng, reps + 1, true))\n      return false;\n\n    if (!this.isPrimeLucas(limit))\n      return false;\n\n    return true;\n  }\n\n  isPrimeMR(rng, reps, force2 = false) {\n    enforce((reps >>> 0) === reps, 'reps', 'uint32');\n    enforce(reps > 0, 'reps', 'integer');\n    enforce(typeof force2 === 'boolean', 'force2', 'boolean');\n\n    const n = this;\n\n    if (n.cmpn(7) < 0) {\n      return n.cmpn(2) === 0\n          || n.cmpn(3) === 0\n          || n.cmpn(5) === 0;\n    }\n\n    if (n.isEven())\n      return false;\n\n    const nm1 = n.subn(1);\n    const nm3 = nm1.subn(2);\n    const k = nm1.zeroBits();\n    const q = nm1.ushrn(k);\n\n    const red = BN.red(n);\n    const rnm1 = nm1.toRed(red);\n    const rone = new BN(1).toRed(red);\n\nnext:\n    for (let i = 0; i < reps; i++) {\n      let x;\n\n      if (i === reps - 1 && force2) {\n        x = new BN(2);\n      } else {\n        x = BN.random(rng, 0, nm3);\n        x.iaddn(2);\n      }\n\n      let y = x.toRed(red).redPow(q);\n\n      if (y.cmp(rone) === 0 || y.cmp(rnm1) === 0)\n        continue;\n\n      for (let j = 1; j < k; j++) {\n        y = y.redSqr();\n\n        if (y.cmp(rnm1) === 0)\n          continue next;\n\n        if (y.cmp(rone) === 0)\n          return false;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  isPrimeLucas(limit = 0) {\n    enforce((limit >>> 0) === limit, 'limit', 'uint32');\n\n    const n = this;\n\n    // Ignore 0 and 1.\n    if (n.cmpn(1) <= 0)\n      return false;\n\n    // Two is the only even prime.\n    if (n.isEven())\n      return n.cmpn(2) === 0;\n\n    let p = 3;\n\n    for (;;) {\n      if (p > 10000) {\n        // Thought to be impossible.\n        throw new Error(`Cannot find (D/n) = -1 for ${n.toString(10)}.`);\n      }\n\n      if (limit !== 0 && p > limit) {\n        // Optional DoS limit.\n        return false;\n      }\n\n      const d = new BN(p * p - 4);\n      const j = d.jacobi(n);\n\n      if (j === -1)\n        break;\n\n      if (j === 0)\n        return n.cmpn(p + 2) === 0;\n\n      if (p === 40) {\n        if (n.isSquare())\n          return false;\n      }\n\n      p += 1;\n    }\n\n    const s = n.addn(1);\n    const r = s._makeOdd();\n    const nm2 = n.subn(2);\n\n    let x = new BN(2);\n    let y = new BN(p);\n\n    for (let i = s.bitLength(); i >= 0; i--) {\n      if (s.utestn(i)) {\n        x = x.mul(y).iadd(n).isubn(p).imod(n);\n        y = y.sqr().iadd(nm2).imod(n);\n      } else {\n        y = y.mul(x).iadd(n).isubn(p).imod(n);\n        x = x.sqr().iadd(nm2).imod(n);\n      }\n    }\n\n    if (x.cmpn(2) === 0 || x.cmp(nm2) === 0) {\n      let a = x.muln(p);\n      let b = y.ushln(1);\n\n      if (a.cmp(b) < 0)\n        [a, b] = [b, a];\n\n      if (a.isub(b).imod(n).isZero())\n        return true;\n    }\n\n    for (let t = 0; t < r - 1; t++) {\n      if (x.isZero())\n        return true;\n\n      if (x.cmpn(2) === 0)\n        return false;\n\n      x = x.sqr().isubn(2).imod(n);\n    }\n\n    return false;\n  }\n\n  /*\n   * Twos Complement\n   */\n\n  toTwos(width) {\n    if (this.negative !== 0)\n      return this.abs().inotn(width).iaddn(1);\n\n    return this.clone();\n  }\n\n  fromTwos(width) {\n    enforce((width >>> 0) === width, 'width', 'uint32');\n    range(width > 0, 'width');\n\n    if (this.testn(width - 1))\n      return this.notn(width).iaddn(1).ineg();\n\n    return this.clone();\n  }\n\n  /*\n   * Reduction Context\n   */\n\n  toRed(ctx) {\n    enforce(ctx instanceof Red, 'ctx', 'reduction context');\n\n    if (this.red)\n      throw new Error('Already in reduction context.');\n\n    return ctx.convertTo(this);\n  }\n\n  fromRed() {\n    red(this.red, 'fromRed');\n    return this.red.convertFrom(this);\n  }\n\n  forceRed(ctx) {\n    enforce(ctx instanceof Red, 'ctx', 'reduction context');\n\n    if (this.red) {\n      if (!ctx.m.eq(this.red.m) || ctx.mont !== this.red.mont)\n        throw new Error('Already in reduction context.');\n    } else {\n      range(this.negative === 0, 'red');\n      range(this.ucmp(ctx.m) < 0, 'red');\n    }\n\n    return this.clone()._forceRed(ctx);\n  }\n\n  redIAdd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIAdd');\n    return this.red.iadd(this, num);\n  }\n\n  redAdd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redAdd');\n    return this.red.add(this, num);\n  }\n\n  redIAddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIAddn');\n    return this.red.iaddn(this, num);\n  }\n\n  redAddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redAddn');\n    return this.red.addn(this, num);\n  }\n\n  redISub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redISub');\n    return this.red.isub(this, num);\n  }\n\n  redSub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redSub');\n    return this.red.sub(this, num);\n  }\n\n  redISubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redISubn');\n    return this.red.isubn(this, num);\n  }\n\n  redSubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redSubn');\n    return this.red.subn(this, num);\n  }\n\n  redIMul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIMul');\n    return this.red.imul(this, num);\n  }\n\n  redMul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redMul');\n    return this.red.mul(this, num);\n  }\n\n  redIMuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIMuln');\n    return this.red.imuln(this, num);\n  }\n\n  redMuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redMuln');\n    return this.red.muln(this, num);\n  }\n\n  redIDiv(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIDiv');\n    return this.red.idiv(this, num);\n  }\n\n  redDiv(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redDiv');\n    return this.red.div(this, num);\n  }\n\n  redIDivn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIDivn');\n    return this.red.idivn(this, num);\n  }\n\n  redDivn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redDivn');\n    return this.red.divn(this, num);\n  }\n\n  redIPow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIPow');\n    nonred(!num.red, 'redIPow');\n    return this.red.ipow(this, num);\n  }\n\n  redPow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redPow');\n    nonred(!num.red, 'redPow');\n    return this.red.pow(this, num);\n  }\n\n  redIPown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIPown');\n    return this.red.ipown(this, num);\n  }\n\n  redPown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redPown');\n    return this.red.pown(this, num);\n  }\n\n  redISqr() {\n    red(this.red, 'redISqr');\n    return this.red.isqr(this);\n  }\n\n  redSqr() {\n    red(this.red, 'redSqr');\n    return this.red.sqr(this);\n  }\n\n  redISqrt() {\n    red(this.red, 'redISqrt');\n    return this.red.isqrt(this);\n  }\n\n  redSqrt() {\n    red(this.red, 'redSqrt');\n    return this.red.sqrt(this);\n  }\n\n  redIDivSqrt(v) {\n    red(this.red, 'redIDivSqrt');\n    return this.red.idivsqrt(this, v);\n  }\n\n  redDivSqrt(v) {\n    red(this.red, 'redDivSqrt');\n    return this.red.divsqrt(this, v);\n  }\n\n  redIsSquare() {\n    red(this.red, 'redIsSquare');\n    return this.red.isSquare(this);\n  }\n\n  redIShl(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIShl');\n    nonred(!num.red, 'redIShl');\n    return this.red.ishl(this, num);\n  }\n\n  redShl(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redShl');\n    nonred(!num.red, 'redShl');\n    return this.red.shl(this, num);\n  }\n\n  redIShln(num) {\n    enforce((num >>> 0) === num, 'num', 'uint32');\n    red(this.red, 'redIShln');\n    return this.red.ishln(this, num);\n  }\n\n  redShln(num) {\n    enforce((num >>> 0) === num, 'num', 'uint32');\n    red(this.red, 'redShln');\n    return this.red.shln(this, num);\n  }\n\n  redINeg() {\n    red(this.red, 'redINeg');\n    return this.red.ineg(this);\n  }\n\n  redNeg() {\n    red(this.red, 'redNeg');\n    return this.red.neg(this);\n  }\n\n  redEq(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redEq');\n    return this.red.eq(this, num);\n  }\n\n  redEqn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redEqn');\n    return this.red.eqn(this, num);\n  }\n\n  redIsHigh() {\n    red(this.red, 'redIsHigh');\n    return this.red.isHigh(this);\n  }\n\n  redIsLow() {\n    red(this.red, 'redIsLow');\n    return this.red.isLow(this);\n  }\n\n  redIsOdd() {\n    red(this.red, 'redIsOdd');\n    return this.red.isOdd(this);\n  }\n\n  redIsEven() {\n    red(this.red, 'redIsEven');\n    return this.red.isEven(this);\n  }\n\n  redLegendre() {\n    red(this.red, 'redLegendre');\n    return this.red.legendre(this);\n  }\n\n  redJacobi() {\n    red(this.red, 'redJacobi');\n    return this.red.jacobi(this);\n  }\n\n  redKronecker() {\n    red(this.red, 'redKronecker');\n    return this.red.kronecker(this);\n  }\n\n  redIInvert() {\n    red(this.red, 'redIInvert');\n    return this.red.iinvert(this);\n  }\n\n  redInvert() {\n    red(this.red, 'redInvert');\n    return this.red.invert(this);\n  }\n\n  redIFermat() {\n    red(this.red, 'redIFermat');\n    return this.red.ifermat(this);\n  }\n\n  redFermat() {\n    red(this.red, 'redFermat');\n    return this.red.fermat(this);\n  }\n\n  /*\n   * Internal\n   */\n\n  _move(dest) {\n    dest.words = this.words;\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n    return dest;\n  }\n\n  _alloc(size) {\n    while (this.words.length < size)\n      this.words.push(0);\n\n    return this;\n  }\n\n  _expand(size) {\n    this._alloc(size);\n\n    while (this.length < size)\n      this.words[this.length++] = 0;\n\n    return this;\n  }\n\n  _strip() {\n    while (this.length > 1 && this.words[this.length - 1] === 0)\n      this.length -= 1;\n\n    return this._normalize();\n  }\n\n  _normalize() {\n    assert(this.length > 0);\n\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0)\n      this.negative = 0;\n\n    return this;\n  }\n\n  _check() {\n    // We never have a zero length number.\n    assert(this.length > 0);\n\n    // Cannot exceed array bounds.\n    assert(this.length <= this.words.length);\n\n    if (this.length === 1) {\n      // Must be normalized.\n      if (this.words[0] === 0)\n        assert(this.negative === 0);\n      return this;\n    }\n\n    // Must be stripped.\n    assert(this.words[this.length - 1] !== 0);\n\n    return this;\n  }\n\n  _invertp(p) {\n    // Penk's right shift binary EGCD.\n    //\n    // See: The Art of Computer Programming,\n    //      Volume 2, Seminumerical Algorithms\n    //   Donald E. Knuth\n    //   Exercise 4.5.2.39\n    enforce(BN.isBN(p), 'p', 'bignum');\n    range(p.sign() > 0, 'invert');\n    assert(p.isOdd());\n\n    if (p.cmpn(1) === 0)\n      throw new RangeError('Not invertible.');\n\n    const a = this.clone();\n    const b = p.clone();\n    const u = new BN(1);\n    const v = new BN(0);\n\n    if (a.isNeg() || a.ucmp(b) >= 0)\n      a.imod(b);\n\n    while (!a.isZero()) {\n      let i = a._makeOdd();\n      let j = b._makeOdd();\n\n      while (i--) {\n        if (u.isOdd())\n          u._iadd(u, p);\n\n        u.iushrn(1);\n      }\n\n      while (j--) {\n        if (v.isOdd())\n          v._iadd(v, p);\n\n        v.iushrn(1);\n      }\n\n      if (a.ucmp(b) >= 0) {\n        a._isub(a, b);\n        if (u.ucmp(v) < 0) {\n          u._isub(v, u);\n          u._isub(p, u);\n        } else {\n          u._isub(u, v);\n        }\n      } else {\n        b._isub(b, a);\n        if (v.ucmp(u) < 0) {\n          v._isub(u, v);\n          v._isub(p, v);\n        } else {\n          v._isub(v, u);\n        }\n      }\n    }\n\n    if (b.cmpn(1) !== 0)\n      throw new RangeError('Not invertible.');\n\n    assert(v.negative === 0);\n    assert(v.ucmp(p) < 0);\n\n    return v;\n  }\n\n  _makeOdd() {\n    const shift = this.zeroBits();\n\n    if (shift > 0)\n      this.iushrn(shift);\n\n    return shift;\n  }\n\n  _factor2(num) {\n    // Find common factor of two.\n    // Expects inputs to be non-zero.\n    if ((this.words[0] | num.words[0]) & 1)\n      return 0;\n\n    const len = Math.min(this.length, num.length);\n\n    let r = 0;\n\n    for (let i = 0; i < len; i++) {\n      const b = zeroBits(this.words[i] | num.words[i]);\n\n      r += b;\n\n      if (b !== 26)\n        break;\n    }\n\n    return r;\n  }\n\n  _cloneNormal() {\n    return this.red ? this.fromRed() : this.clone();\n  }\n\n  _forceRed(ctx) {\n    this.red = ctx;\n    return this;\n  }\n\n  /*\n   * Helpers\n   */\n\n  clone() {\n    const copy = new BN();\n\n    copy.words = new Array(this.length);\n\n    for (let i = 0; i < this.length; i++)\n      copy.words[i] = this.words[i];\n\n    copy.length = this.length;\n    copy.negative = this.negative;\n    copy.red = this.red;\n\n    return copy;\n  }\n\n  inject(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    this._alloc(num.length);\n\n    for (let i = 0; i < num.length; i++)\n      this.words[i] = num.words[i];\n\n    this.length = num.length;\n    this.negative = num.negative;\n    this.red = num.red;\n\n    return this;\n  }\n\n  set(num, endian) {\n    return this.fromNumber(num, endian);\n  }\n\n  swap(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    const x = this;\n    const y = num;\n\n    [x.words, y.words] = [y.words, x.words];\n    [x.length, y.length] = [y.length, x.length];\n    [x.negative, y.negative] = [y.negative, x.negative];\n    [x.red, y.red] = [y.red, x.red];\n\n    return x;\n  }\n\n  reverse() {\n    const neg = this.negative;\n\n    this.fromBuffer(this.toBuffer('be'), 'le');\n    this.negative = neg;\n\n    return this;\n  }\n\n  byteLength() {\n    return Math.ceil(this.bitLength() / 8);\n  }\n\n  bitLength() {\n    const w = this.words[this.length - 1];\n    const hi = countBits(w);\n    return (this.length - 1) * 26 + hi;\n  }\n\n  zeroBits() {\n    if (this.isZero())\n      return 0;\n\n    if (this.isOdd())\n      return 0;\n\n    let r = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const b = zeroBits(this.words[i]);\n\n      r += b;\n\n      if (b !== 26)\n        break;\n    }\n\n    return r;\n  }\n\n  isSafe() {\n    if (this.length <= 2)\n      return true;\n\n    if (this.length === 3 && this.words[2] === 0x01)\n      return true;\n\n    return false;\n  }\n\n  word(pos) {\n    enforce((pos >>> 0) === pos, 'pos', 'uint32');\n\n    if (pos >= this.length)\n      return 0;\n\n    return this.words[pos];\n  }\n\n  [custom]() {\n    let prefix = 'BN';\n\n    if (this.red)\n      prefix = 'BN-R';\n\n    return `<${prefix}: ${this.toString(10)}>`;\n  }\n\n  /*\n   * Constant Time\n   */\n\n  csign() {\n    return this.negative * -2 + 1 - this.czero();\n  }\n\n  czero() {\n    const zword = (this.words[0] - 1) >>> 31;\n    return ((this.length - 2) >>> 31) & zword;\n  }\n\n  cneg() {\n    return this.negative;\n  }\n\n  cpos() {\n    return this.negative ^ 1;\n  }\n\n  ceq(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    // Assumes `num` is the \"constant size\"\n    // parameter. Note that constant size\n    // doesn't necessarily mean secret.\n    let z = 0;\n\n    for (let i = 0; i < num.length; i++)\n      z |= this.words[i % this.length] ^ num.words[i];\n\n    z |= this.length ^ num.length;\n    z |= this.negative ^ num.negative;\n\n    return (z - 1) >>> 31;\n  }\n\n  ceqn(num) {\n    const neg = (num >> 31) & 1;\n    const word = ((num | 0) * (-neg | 1)) & 0x3ffffff;\n\n    let z = 0;\n\n    z |= this.words[0] ^ word;\n    z |= this.length ^ 1;\n    z |= this.negative ^ neg;\n\n    return (z - 1) >>> 31;\n  }\n\n  cswap(num, flag) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    const x = this;\n    const y = num;\n    const cond = ((flag >> 31) | (-flag >> 31)) & 1;\n    const mask = -cond & 0x3ffffff;\n\n    x._alloc(y.words.length);\n    y._alloc(x.words.length);\n\n    for (let i = 0; i < x.words.length; i++) {\n      const word = (x.words[i] ^ y.words[i]) & mask;\n\n      x.words[i] ^= word;\n      y.words[i] ^= word;\n    }\n\n    const length = (x.length ^ y.length) & mask;\n    const negative = (x.negative ^ y.negative) & mask;\n\n    x.length ^= length;\n    y.length ^= length;\n\n    x.negative ^= negative;\n    y.negative ^= negative;\n\n    return this;\n  }\n\n  cinject(num, flag) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    const x = this;\n    const y = num;\n    const cond = ((flag >> 31) | (-flag >> 31)) & 1;\n    const mask0 = (cond - 1) & 0x3ffffff;\n    const mask1 = ~(cond - 1) & 0x3ffffff;\n\n    x._alloc(y.length);\n\n    for (let i = 0; i < y.length; i++)\n      x.words[i] = (x.words[i] & mask0) | (y.words[i] & mask1);\n\n    x.length = (x.length & mask0) | (y.length & mask1);\n    x.negative = (x.negative & mask0) | (y.negative & mask1);\n\n    return this;\n  }\n\n  cset(num, flag) {\n    const cond = ((flag >> 31) | (-flag >> 31)) & 1;\n    const mask0 = (cond - 1) & 0x3ffffff;\n    const mask1 = ~(cond - 1) & 0x3ffffff;\n    const neg = (num >> 31) & 1;\n    const word = ((num | 0) * (-neg | 1)) & 0x3ffffff;\n\n    this.words[0] = (this.words[0] & mask0) | (word & mask1);\n    this.length = (this.length & mask0) | (1 & mask1);\n    this.negative = (this.negative & mask0) | (neg & mask1);\n\n    return this;\n  }\n\n  /*\n   * Conversion\n   */\n\n  toNumber() {\n    let num = this.words[0];\n\n    if (this.length === 2) {\n      num += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // Note: at this stage it is known that the top bit is set.\n      num += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      throw new RangeError('Number can only safely store up to 53 bits.');\n    }\n\n    return this.negative !== 0 ? -num : num;\n  }\n\n  toDouble() {\n    let num = 0;\n\n    for (let i = this.length - 1; i >= 0; i--)\n      num = (num * 0x4000000) + this.words[i];\n\n    return this.negative !== 0 ? -num : num;\n  }\n\n  valueOf() {\n    return this.toDouble();\n  }\n\n  toBigInt() {\n    if (!HAS_BIGINT)\n      throw new Error('BigInt is not supported!');\n\n    const s52 = BigInt(52);\n    const s26 = BigInt(26);\n\n    let i = this.length - 1;\n    let num = BigInt(0);\n\n    for (; i >= 1; i -= 2) {\n      const hi = this.words[i] * 0x4000000;\n      const lo = this.words[i - 1];\n\n      num = (num << s52) | BigInt(hi + lo);\n    }\n\n    if (i >= 0)\n      num = (num << s26) | BigInt(this.words[0]);\n\n    return this.negative !== 0 ? -num : num;\n  }\n\n  toBool() {\n    return !this.isZero();\n  }\n\n  toString(base, padding) {\n    base = getBase(base);\n\n    if (padding == null)\n      padding = 0;\n\n    if (padding === 0)\n      padding = 1;\n\n    enforce((base >>> 0) === base, 'base', 'uint32');\n    enforce((padding >>> 0) === padding, 'padding', 'uint32');\n\n    if (base < 2 || base > 36)\n      throw new RangeError('Base ranges between 2 and 36.');\n\n    this._check();\n\n    if (base === 16) {\n      let out = '';\n      let off = 0;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const w = this.words[i];\n        const word = (((w << off) | carry) & 0xffffff).toString(16);\n\n        carry = (w >>> (24 - off)) & 0xffffff;\n\n        if (carry !== 0 || i !== this.length - 1)\n          out = zeros[6 - word.length] + word + out;\n        else\n          out = word + out;\n\n        off += 2;\n\n        if (off >= 26) {\n          off -= 26;\n          i -= 1;\n        }\n      }\n\n      if (carry !== 0)\n        out = carry.toString(16) + out;\n\n      while (out.length % padding !== 0)\n        out = '0' + out;\n\n      if (this.negative !== 0)\n        out = '-' + out;\n\n      return out;\n    }\n\n    const groupSize = groupSizes[base - 1];\n    const groupBase = groupBases[base - 1];\n    const c = this.clone();\n\n    let out = '';\n\n    c.negative = 0;\n\n    while (!c.isZero()) {\n      const r = c.remrn(groupBase).toString(base);\n\n      c.iquon(groupBase);\n\n      if (!c.isZero())\n        out = zeros[groupSize - r.length] + r + out;\n      else\n        out = r + out;\n    }\n\n    if (this.isZero())\n      out = '0';\n\n    while (out.length % padding !== 0)\n      out = '0' + out;\n\n    if (this.negative !== 0)\n      out = '-' + out;\n\n    return out;\n  }\n\n  toJSON() {\n    return this.toString(16, 2);\n  }\n\n  toArray(endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  }\n\n  toBuffer(endian, length) {\n    return this.toArrayLike(Buffer, endian, length);\n  }\n\n  toArrayLike(ArrayType, endian, length) {\n    if (endian == null)\n      endian = 'be';\n\n    if (length == null)\n      length = 0;\n\n    enforce(typeof ArrayType === 'function', 'ArrayType', 'function');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n    enforce((length >>> 0) === length, 'length', 'uint32');\n\n    this._check();\n\n    const bytes = this.byteLength();\n    const size = length || Math.max(1, bytes);\n\n    if (bytes > size)\n      throw new RangeError('Byte array longer than desired length.');\n\n    const res = allocate(ArrayType, size);\n\n    // See: https://github.com/indutny/bn.js/pull/222\n    if (endian === 'be') {\n      let pos = res.length - 1;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const shift = (i & 3) << 1;\n        const word = (this.words[i] << shift) | carry;\n\n        res[pos--] = word & 0xff;\n\n        if (pos >= 0)\n          res[pos--] = (word >>> 8) & 0xff;\n\n        if (pos >= 0)\n          res[pos--] = (word >>> 16) & 0xff;\n\n        if (shift === 6) {\n          if (pos >= 0)\n            res[pos--] = (word >>> 24) & 0xff;\n\n          carry = 0;\n        } else {\n          carry = word >>> 24;\n        }\n      }\n\n      if (pos >= 0) {\n        res[pos--] = carry;\n\n        while (pos >= 0)\n          res[pos--] = 0;\n\n        carry = 0;\n      }\n\n      assert(carry === 0);\n    } else {\n      let pos = 0;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const shift = (i & 3) << 1;\n        const word = (this.words[i] << shift) | carry;\n\n        res[pos++] = word & 0xff;\n\n        if (pos < res.length)\n          res[pos++] = (word >>> 8) & 0xff;\n\n        if (pos < res.length)\n          res[pos++] = (word >>> 16) & 0xff;\n\n        if (shift === 6) {\n          if (pos < res.length)\n            res[pos++] = (word >>> 24) & 0xff;\n\n          carry = 0;\n        } else {\n          carry = word >>> 24;\n        }\n      }\n\n      if (pos < res.length) {\n        res[pos++] = carry;\n\n        while (pos < res.length)\n          res[pos++] = 0;\n\n        carry = 0;\n      }\n\n      assert(carry === 0);\n    }\n\n    return res;\n  }\n\n  encode(endian, length) {\n    return this.toBuffer(endian, length);\n  }\n\n  /*\n   * Instantiation\n   */\n\n  of(num, endian) {\n    return this.fromNumber(num, endian);\n  }\n\n  fromNumber(num, endian) {\n    if (endian == null)\n      endian = 'be';\n\n    enforce(isInteger(num), 'num', 'integer');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    const neg = (num < 0) | 0;\n\n    if (neg)\n      num = -num;\n\n    if (num < 0x4000000) {\n      this.words[0] = num & 0x3ffffff;\n      this.length = 1;\n    } else if (num < 0x10000000000000) {\n      this.words = [\n        num & 0x3ffffff,\n        (num / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      this.words = [\n        num & 0x3ffffff,\n        (num / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    this.negative = neg;\n\n    if (endian === 'le')\n      this.reverse();\n\n    return this;\n  }\n\n  fromDouble(num, endian) {\n    if (endian == null)\n      endian = 'be';\n\n    enforce(typeof num === 'number', 'num', 'double');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (!isFinite(num))\n      num = 0;\n\n    const neg = (num <= -1) | 0;\n\n    if (num < 0)\n      num = -num;\n\n    num = Math.floor(num);\n\n    this.words = [];\n\n    while (num > 0) {\n      const lo = num % 0x4000000;\n      const hi = (num - lo) / 0x4000000;\n\n      this.words.push(lo);\n\n      num = hi;\n    }\n\n    if (this.words.length === 0)\n      this.words.push(0);\n\n    this.length = this.words.length;\n    this.negative = neg;\n\n    if (endian === 'le')\n      this.reverse();\n\n    return this;\n  }\n\n  fromBigInt(num, endian) {\n    if (endian == null)\n      endian = 'be';\n\n    enforce(typeof num === 'bigint', 'num', 'bigint');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (!HAS_BIGINT)\n      throw new Error('BigInt is not supported!');\n\n    // You know the implementation has a\n    // problem when strings are twice\n    // as fast as bigints.\n    const start = (num < BigInt(0)) | 0;\n\n    this._fromHex(num.toString(16), start);\n    this.negative = start;\n\n    if (endian === 'le')\n      this.reverse();\n\n    return this;\n  }\n\n  fromBool(value) {\n    enforce(typeof value === 'boolean', 'value', 'boolean');\n\n    this.words[0] = value | 0;\n    this.length = 1;\n    this.negative = 0;\n\n    return this;\n  }\n\n  fromString(str, base, endian) {\n    if (base === 'le' || base === 'be')\n      [base, endian] = [endian, base];\n\n    base = getBase(base);\n\n    if (endian == null)\n      endian = 'be';\n\n    enforce(typeof str === 'string', 'string', 'string');\n    enforce((base >>> 0) === base, 'base', 'uint32');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (base < 2 || base > 36)\n      throw new Error('Base ranges between 2 and 36.');\n\n    str = str.replace(/\\s+/g, '');\n\n    let start = 0;\n\n    if (str.length > 0 && str.charCodeAt(0) === 0x2d)\n      start = 1;\n\n    if (base === 16)\n      this._fromHex(str, start);\n    else\n      this._fromBase(str, base, start);\n\n    this.negative = start;\n\n    this._normalize();\n\n    if (endian === 'le')\n      this.reverse();\n\n    return this;\n  }\n\n  _fromHex(str, start) {\n    this.length = Math.max(2, Math.ceil((str.length - start) / 6));\n    this.words = new Array(this.length);\n\n    for (let i = 0; i < this.length; i++)\n      this.words[i] = 0;\n\n    // Scan 24-bit chunks and add them to the number.\n    let off = 0;\n    let i = str.length - 6;\n    let j = 0;\n\n    for (; i >= start; i -= 6) {\n      const w = parseHex(str, i, i + 6);\n\n      this.words[j] |= (w << off) & 0x3ffffff;\n\n      // `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb.\n      this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;\n\n      off += 24;\n\n      if (off >= 26) {\n        off -= 26;\n        j += 1;\n      }\n    }\n\n    if (i + 6 !== start) {\n      const w = parseHex(str, start, i + 6);\n\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;\n    }\n\n    return this._strip();\n  }\n\n  _fromBase(str, base, start) {\n    // Initialize as zero.\n    this.words[0] = 0;\n    this.length = 1;\n    this.negative = 0;\n\n    // Find length of limb in base.\n    let limbLen = 0;\n    let limbPow = 1;\n\n    for (; limbPow <= 0x3ffffff; limbPow *= base)\n      limbLen += 1;\n\n    limbLen -= 1;\n    limbPow = (limbPow / base) | 0;\n\n    const total = str.length - start;\n    const mod = total % limbLen;\n    const end = Math.min(total, total - mod) + start;\n\n    let i = start;\n\n    for (; i < end; i += limbLen) {\n      const word = parseBase(str, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      this._iaddn(word);\n    }\n\n    if (mod !== 0) {\n      const pow = Math.pow(base, mod);\n      const word = parseBase(str, i, str.length, base);\n\n      this.imuln(pow);\n      this._iaddn(word);\n    }\n\n    return this;\n  }\n\n  fromJSON(json) {\n    if (BN.isBN(json)) {\n      if (json.red)\n        return json.fromRed();\n\n      return json.clone();\n    }\n\n    if (Array.isArray(json)) {\n      for (const chunk of json)\n        enforce(typeof chunk === 'string', 'chunk', 'string');\n\n      json = json.join('');\n    }\n\n    return this.fromString(json, 16);\n  }\n\n  fromBN(num) {\n    return this.inject(num);\n  }\n\n  fromArray(data, endian) {\n    enforce(Array.isArray(data), 'data', 'array');\n    return this.fromArrayLike(data, endian);\n  }\n\n  fromBuffer(data, endian) {\n    enforce(Buffer.isBuffer(data), 'data', 'buffer');\n    return this.fromArrayLike(data, endian);\n  }\n\n  fromArrayLike(data, endian) {\n    if (endian == null)\n      endian = 'be';\n\n    enforce(data && (data.length >>> 0) === data.length, 'data', 'array-like');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (data.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n      this.negative = 0;\n      return this;\n    }\n\n    this.length = Math.max(2, Math.ceil(data.length / 3));\n    this.words = new Array(this.length);\n    this.negative = 0;\n\n    for (let i = 0; i < this.length; i++)\n      this.words[i] = 0;\n\n    const left = data.length % 3;\n\n    let off = 0;\n    let j = 0;\n    let w = 0;\n\n    if (endian === 'be') {\n      for (let i = data.length - 1; i >= 2; i -= 3) {\n        const w = data[i] | (data[i - 1] << 8) | (data[i - 2] << 16);\n\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n\n        off += 24;\n\n        if (off >= 26) {\n          off -= 26;\n          j += 1;\n        }\n      }\n\n      switch (left) {\n        case 2:\n          w = data[1] | (data[0] << 8);\n          break;\n        case 1:\n          w = data[0];\n          break;\n      }\n    } else {\n      const len = data.length - left;\n\n      for (let i = 0; i < len; i += 3) {\n        const w = data[i] | (data[i + 1] << 8) | (data[i + 2] << 16);\n\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n\n        off += 24;\n\n        if (off >= 26) {\n          off -= 26;\n          j += 1;\n        }\n      }\n\n      switch (left) {\n        case 2:\n          w = data[len] | (data[len + 1] << 8);\n          break;\n        case 1:\n          w = data[len];\n          break;\n      }\n    }\n\n    if (left > 0) {\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n    }\n\n    return this._strip();\n  }\n\n  decode(data, endian) {\n    return this.fromBuffer(data, endian);\n  }\n\n  from(num, base, endian) {\n    if (num == null)\n      return this;\n\n    if (base === 'le' || base === 'be')\n      [base, endian] = [endian, base];\n\n    if (typeof num === 'number')\n      return this.fromNumber(num, endian);\n\n    if (typeof num === 'bigint')\n      return this.fromBigInt(num, endian);\n\n    if (typeof num === 'string')\n      return this.fromString(num, base, endian);\n\n    if (typeof num === 'object') {\n      if (BN.isBN(num))\n        return this.fromBN(num, endian);\n\n      if ((num.length >>> 0) === num.length)\n        return this.fromArrayLike(num, endian);\n    }\n\n    if (typeof num === 'boolean')\n      return this.fromBool(num);\n\n    throw new TypeError('Non-numeric object passed to BN.');\n  }\n\n  /*\n   * Static Methods\n   */\n\n  static min(...args) {\n    let min = null;\n\n    for (const num of args) {\n      enforce(BN.isBN(num), 'num', 'bignum');\n\n      if (!min || num.cmp(min) < 0)\n        min = num;\n    }\n\n    return min || new BN(0);\n  }\n\n  static max(...args) {\n    let max = null;\n\n    for (const num of args) {\n      enforce(BN.isBN(num), 'num', 'bignum');\n\n      if (!max || num.cmp(max) > 0)\n        max = num;\n    }\n\n    return max || new BN(0);\n  }\n\n  static cmp(a, b) {\n    enforce(BN.isBN(a), 'a', 'bignum');\n    return a.cmp(b);\n  }\n\n  static ucmp(a, b) {\n    enforce(BN.isBN(a), 'a', 'bignum');\n    return a.ucmp(b);\n  }\n\n  static red(num) {\n    return new Red(num);\n  }\n\n  static barrett(num) {\n    return new Barrett(num);\n  }\n\n  static mont(num) {\n    return new Mont(num);\n  }\n\n  static _prime(name) {\n    if (primes[name])\n      return primes[name];\n\n    let prime;\n\n    if (name === 'p192')\n      prime = new P192();\n    else if (name === 'p224')\n      prime = new P224();\n    else if (name === 'p521')\n      prime = new P521();\n    else if (name === 'k256')\n      prime = new K256();\n    else if (name === 'p251')\n      prime = new P251();\n    else if (name === 'p25519')\n      prime = new P25519();\n    else if (name === 'p448')\n      prime = new P448();\n    else\n      throw new Error(`Unknown prime: \"${name}\".`);\n\n    primes[name] = prime;\n\n    return prime;\n  }\n\n  static prime(name) {\n    return BN._prime(name).p.clone();\n  }\n\n  static pow(num, exp) {\n    if (num === 2)\n      return BN.shift(1, exp);\n\n    return new BN().fromNumber(num).pown(exp);\n  }\n\n  static shift(num, bits) {\n    if (num === 1)\n      return new BN(0).usetn(bits, 1);\n\n    return new BN().fromNumber(num).ishln(bits);\n  }\n\n  static mask(bits) {\n    return BN.shift(1, bits).isubn(1);\n  }\n\n  static randomBits(rng, bits) {\n    enforce(rng != null, 'rng', 'rng');\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    if (typeof rng === 'object') {\n      enforce(typeof rng.randomBytes === 'function', 'rng', 'rng');\n\n      const size = (bits + 7) >>> 3;\n      const total = size * 8;\n      const bytes = rng.randomBytes(size);\n\n      enforce(Buffer.isBuffer(bytes), 'bytes', 'buffer');\n\n      if (bytes.length !== size)\n        throw new RangeError('Invalid number of bytes returned from RNG.');\n\n      const num = BN.fromBuffer(bytes);\n\n      if (total > bits)\n        num.iushrn(total - bits);\n\n      return num;\n    }\n\n    enforce(typeof rng === 'function', 'rng', 'rng');\n\n    const num = rng(bits);\n\n    enforce(BN.isBN(num), 'num', 'bignum');\n    range(num.negative === 0, 'RNG');\n    nonred(!num.red, 'RNG');\n\n    if (num.bitLength() > bits)\n      throw new RangeError('Invalid number of bits returned from RNG.');\n\n    return num;\n  }\n\n  static random(rng, min, max) {\n    min = BN.cast(min, 16);\n    max = BN.cast(max, 16);\n\n    if (min.cmp(max) > 0)\n      throw new RangeError('Minimum cannot be greater than maximum.');\n\n    const space = max.sub(min).iabs();\n    const bits = space.bitLength();\n\n    if (bits === 0)\n      return min.clone();\n\n    for (;;) {\n      const num = BN.randomBits(rng, bits);\n\n      // Maximum is _exclusive_!\n      if (num.cmp(space) >= 0)\n        continue;\n\n      // Minimum is _inclusive_!\n      num.iadd(min);\n\n      return num;\n    }\n  }\n\n  static of(num, endian) {\n    return new BN().of(num, endian);\n  }\n\n  static fromNumber(num, endian) {\n    return new BN().fromNumber(num, endian);\n  }\n\n  static fromDouble(num, endian) {\n    return new BN().fromDouble(num, endian);\n  }\n\n  static fromBigInt(num, endian) {\n    return new BN().fromBigInt(num, endian);\n  }\n\n  static fromBool(value) {\n    return new BN().fromBool(value);\n  }\n\n  static fromString(str, base, endian) {\n    return new BN().fromString(str, base, endian);\n  }\n\n  static fromJSON(json) {\n    return new BN().fromJSON(json);\n  }\n\n  static fromBN(num) {\n    return new BN().fromBN(num);\n  }\n\n  static fromArray(data, endian) {\n    return new BN().fromArray(data, endian);\n  }\n\n  static fromBuffer(data, endian) {\n    return new BN().fromBuffer(data, endian);\n  }\n\n  static fromArrayLike(data, endian) {\n    return new BN().fromArrayLike(data, endian);\n  }\n\n  static decode(data, endian) {\n    return new BN().decode(data, endian);\n  }\n\n  static from(num, base, endian) {\n    return new BN().from(num, base, endian);\n  }\n\n  static cast(num, base, endian) {\n    if (BN.isBN(num))\n      return num;\n\n    return new BN(num, base, endian);\n  }\n\n  static isBN(obj) {\n    return obj instanceof BN;\n  }\n}\n\n/*\n * Static\n */\n\nBN.BN = BN;\nBN.wordSize = 26;\nBN.native = 0;\n\n/**\n * Prime\n */\n\nclass Prime {\n  constructor(name, p) {\n    // P = 2^N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = BN.shift(1, this.n).isub(this.p);\n    this.lo = this.p.clone();\n    this.one = this.p.clone();\n  }\n\n  ireduce(num) {\n    // Assumes that `num` is less than `P^2`:\n    // num = HI * (2^N - K) + HI * K + LO = HI * K + LO (mod P)\n    const neg = num.negative !== 0;\n\n    // Track bits.\n    let bits = num.bitLength();\n\n    // Must be less than P^2.\n    assert(bits <= this.n * 2);\n\n    // Ensure positive.\n    num.negative = 0;\n\n    // Reduce.\n    while (bits > this.n) {\n      // lo = num & ((1 << n) - 1)\n      // num = num >> n\n      this.split(num, this.lo);\n\n      // num = num * K\n      this.imulK(num);\n\n      // num = num + lo\n      num._iadd(num, this.lo);\n\n      // bits = bitlen(num)\n      bits = num.bitLength();\n    }\n\n    // Final reduction.\n    const cmp = bits < this.n ? -1 : num.ucmp(this.p);\n\n    if (cmp === 0) {\n      num.words[0] = 0;\n      num.length = 1;\n    } else if (cmp > 0) {\n      num._isub(num, this.p);\n    } else {\n      // Note: we shouldn't need to strip here.\n    }\n\n    // Adjust sign.\n    if (neg && !num.isZero())\n      num._isub(this.p, num);\n\n    return num;\n  }\n\n  split(input, out) {\n    input._split(this.n, out);\n  }\n\n  imulK(num) {\n    return num.imul(this.k);\n  }\n}\n\n/**\n * P192\n */\n\nclass P192 extends Prime {\n  constructor() {\n    // 2^192 - 2^64 - 1 (= 3 mod 4)\n    super('p192', 'ffffffff ffffffff ffffffff fffffffe'\n                + 'ffffffff ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x10000000000000001\n    // K = 2^64 + 1\n    const one = this.one.inject(num);\n    return num.iushln(64)._iadd(num, one);\n  }\n}\n\n/**\n * P224\n */\n\nclass P224 extends Prime {\n  constructor() {\n    // 2^224 - 2^96 + 1 (no congruence)\n    super('p224', 'ffffffff ffffffff ffffffff ffffffff'\n                + '00000000 00000000 00000001');\n  }\n\n  imulK(num) {\n    // K = 0xffffffffffffffffffffffff\n    // K = 2^96 - 1\n    const one = this.one.inject(num);\n    return num.iushln(96)._isub(num, one);\n  }\n}\n\n/**\n * P521\n */\n\nclass P521 extends Prime {\n  constructor() {\n    // 2^521 - 1 (= 3 mod 4)\n    super('p521', '000001ff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x01\n    return num;\n  }\n}\n\n/**\n * K256\n */\n\nclass K256 extends Prime {\n  constructor() {\n    // 2^256 - 2^32 - 977 (= 3 mod 4)\n    super('k256', 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff fffffffe fffffc2f');\n  }\n\n  split(input, output) {\n    // 256 = 9 * 26 + 22\n    const mask = 0x3fffff;\n    const len = Math.min(input.length, 9);\n\n    output._alloc(len + 1);\n\n    for (let i = 0; i < len; i++)\n      output.words[i] = input.words[i];\n\n    output.length = len;\n\n    if (input.length <= 9) {\n      output._strip();\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs.\n    let prev = input.words[9];\n    let i = 10;\n\n    output.words[output.length++] = prev & mask;\n    output._strip();\n\n    for (; i < input.length; i++) {\n      const next = input.words[i] | 0;\n\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n\n      prev = next;\n    }\n\n    prev >>>= 22;\n\n    input.words[i - 10] = prev;\n\n    if (prev === 0 && input.length > 10)\n      input.length -= 10;\n    else\n      input.length -= 9;\n\n    input._strip(); // Unsure if we need this.\n  }\n\n  imulK(num) {\n    // K = 0x1000003d1 = [0x40, 0x3d1]\n    // K = 2^32 + 977\n    num._expand(num.length + 2);\n\n    // Bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    let lo = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i];\n\n      lo += w * 0x3d1;\n\n      num.words[i] = lo & 0x3ffffff;\n\n      lo = w * 0x40 + Math.floor(lo / 0x4000000);\n    }\n\n    // Fast length reduction.\n    if (num.words[num.length - 1] === 0) {\n      num.length -= 1;\n      if (num.words[num.length - 1] === 0)\n        num.length -= 1;\n    }\n\n    // Note: we shouldn't need to strip here.\n    return num;\n  }\n}\n\n/**\n * P251\n */\n\nclass P251 extends Prime {\n  constructor() {\n    // 2^251 - 9\n    super('p251', '07ffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff ffffffff fffffff7');\n  }\n\n  imulK(num) {\n    // K = 0x09\n    if (num.isZero())\n      return num;\n\n    let carry = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i] * 0x09 + carry;\n\n      carry = w >>> 26;\n\n      num.words[i] = w & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      num._alloc(num.length + 1);\n      num.words[num.length++] = carry;\n    }\n\n    // Note: we shouldn't need to strip here.\n    return num;\n  }\n}\n\n/**\n * P25519\n */\n\nclass P25519 extends Prime {\n  constructor() {\n    // 2^255 - 19 (= 5 mod 8)\n    super('p25519', '7fffffff ffffffff ffffffff ffffffff'\n                  + 'ffffffff ffffffff ffffffff ffffffed');\n  }\n\n  imulK(num) {\n    // K = 0x13\n    let carry = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i] * 0x13 + carry;\n\n      carry = w >>> 26;\n\n      num.words[i] = w & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      num._alloc(num.length + 1);\n      num.words[num.length++] = carry;\n    }\n\n    // Note: we shouldn't need to strip here.\n    return num;\n  }\n}\n\n/**\n * P448\n */\n\nclass P448 extends Prime {\n  constructor() {\n    // 2^448 - 2^224 - 1 (= 3 mod 4)\n    super('p448', 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff fffffffe ffffffff'\n                + 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x100000000000000000000000000000000000000000000000000000001\n    // K = 2^224 + 1\n    const one = this.one.inject(num);\n    return num.iushln(224)._iadd(num, one);\n  }\n}\n\n/**\n * Reduction Engine\n */\n\nclass Red {\n  constructor(m) {\n    let prime = null;\n\n    if (typeof m === 'string') {\n      prime = BN._prime(m);\n      m = prime.p;\n    }\n\n    enforce(BN.isBN(m), 'm', 'bignum');\n    nonred(!m.red, 'reduction');\n    range(m.sign() > 0, 'reduction');\n\n    this.m = m;\n    this.prime = prime;\n    this.mb = null;\n    this.sm1 = null;\n  }\n\n  _verify1(a) {\n    range(a.negative === 0, 'red');\n    red(a.red != null, 'red');\n  }\n\n  _verify2(a, b) {\n    range((a.negative | b.negative) === 0, 'red');\n    red(a.red != null && a.red === b.red, 'red');\n  }\n\n  get mont() {\n    return false;\n  }\n\n  precompute() {\n    // Precompute `sqrt(-1)` for primes congruent to 5 mod 8.\n    if (this.sm1 === null && this.m.andln(7) === 5) {\n      const x = new BN(2).toRed(this);\n      const e = this.m.subn(1).iushrn(2);\n\n      // sqrt(-1) = 2^((p - 1) / 4) mod p\n      this.sm1 = this.pow(x, e);\n    }\n\n    return this;\n  }\n\n  convertTo(num) {\n    const res = num.mod(this.m);\n    res.red = this;\n    return res;\n  }\n\n  convertFrom(num) {\n    const res = num.clone();\n    res.red = null;\n    return res;\n  }\n\n  intTo(a) {\n    return a;\n  }\n\n  intFrom(a) {\n    return a;\n  }\n\n  imod(a) {\n    if (this.prime)\n      return this.prime.ireduce(a)._forceRed(this);\n\n    return a.imod(this.m)._forceRed(this);\n  }\n\n  iadd(a, b) {\n    this._verify2(a, b);\n\n    a._iadd(a, b);\n\n    if (a.ucmp(this.m) >= 0)\n      a._isub(a, this.m);\n\n    return a;\n  }\n\n  add(a, b) {\n    if (a.length < b.length)\n      return this.iadd(b.clone(), a);\n\n    return this.iadd(a.clone(), b);\n  }\n\n  iaddn(a, num) {\n    this._verify1(a);\n\n    if (num < 0)\n      return this.isubn(a, -num);\n\n    if (this.m.length === 1)\n      num %= this.m.words[0];\n\n    a._iaddn(num);\n\n    if (a.ucmp(this.m) >= 0)\n      a._isub(a, this.m);\n\n    return a;\n  }\n\n  addn(a, num) {\n    return this.iaddn(a.clone(), num);\n  }\n\n  isub(a, b) {\n    this._verify2(a, b);\n\n    //  0: a - a mod m == 0\n    // -1: a - b mod m == m - (b - a)\n    // +1: a - b mod m == a - b\n    const cmp = a.ucmp(b);\n\n    if (cmp === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    if (cmp < 0) {\n      a._isub(b, a);\n      a._isub(this.m, a);\n    } else {\n      a._isub(a, b);\n    }\n\n    return a;\n  }\n\n  sub(a, b) {\n    return this.isub(a.clone(), b);\n  }\n\n  isubn(a, num) {\n    this._verify1(a);\n\n    if (num < 0)\n      return this.iaddn(a, -num);\n\n    if (this.m.length === 1)\n      num %= this.m.words[0];\n\n    //  <: a - b mod m == m - (b - a)\n    // >=: a - b mod m == a - b\n    if (a.length === 1 && a.words[0] < num) {\n      a.words[0] = num - a.words[0];\n      a._isub(this.m, a);\n    } else {\n      a._isubn(num);\n    }\n\n    return a;\n  }\n\n  subn(a, num) {\n    return this.isubn(a.clone(), num);\n  }\n\n  imul(a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  }\n\n  mul(a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  }\n\n  imuln(a, num) {\n    this._verify1(a);\n\n    if (a.isZero())\n      return a;\n\n    if (num === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    const neg = num < 0;\n\n    if (neg)\n      num = -num;\n\n    if (this.m.length === 1)\n      num %= this.m.words[0];\n\n    a.imuln(num);\n\n    if (num <= 16) {\n      // Quick reduction.\n      while (a.ucmp(this.m) >= 0)\n        a._isub(a, this.m);\n    } else {\n      this.imod(a);\n    }\n\n    if (neg)\n      this.ineg(a);\n\n    return a;\n  }\n\n  muln(a, num) {\n    return this.imuln(a.clone(), num);\n  }\n\n  idiv(a, b) {\n    return this.div(a, b)._move(a);\n  }\n\n  div(a, b) {\n    return this.mul(a, this.invert(b));\n  }\n\n  idivn(a, num) {\n    return this.divn(a, num)._move(a);\n  }\n\n  divn(a, num) {\n    return this.div(a, this.convertTo(new BN(num)));\n  }\n\n  ipow(a, num) {\n    return this.pow(a, num)._move(a);\n  }\n\n  pow(a, num) {\n    this._verify1(a);\n\n    if (num.isNeg())\n      a = this.invert(a);\n\n    // Small exponent.\n    if (num.length === 1)\n      return this.pown(a, num.words[0]);\n\n    // Call out to BigInt.\n    if (HAS_BIGINT && !this.prime)\n      return this.powInt(a, num);\n\n    // Otherwise, a BN implementation.\n    return this.powNum(a, num);\n  }\n\n  powNum(a, num) {\n    // Sliding window.\n    const wnd = new Array(WND_SIZE);\n\n    wnd[0] = this.sqrn(a, WND_WIDTH - 1);\n\n    for (let i = 1; i < WND_SIZE; i++)\n      wnd[i] = this.mul(wnd[i - 1], a);\n\n    let i = num.bitLength();\n    let r = new BN(1).toRed(this);\n\n    while (i >= WND_WIDTH) {\n      const pos = i - WND_WIDTH;\n      const bits = num.bits(pos, WND_WIDTH);\n\n      if (bits < WND_SIZE) {\n        r = this.sqr(r);\n        i -= 1;\n        continue;\n      }\n\n      r = this.sqrn(r, WND_WIDTH);\n      r = this.mul(r, wnd[bits & ~WND_SIZE]);\n      i = pos;\n    }\n\n    if (i > 0) {\n      const bits = num.bits(0, i);\n\n      while (i--) {\n        r = this.sqr(r);\n\n        if ((bits >> i) & 1)\n          r = this.mul(r, a);\n      }\n    }\n\n    return r;\n  }\n\n  powInt(a, num) {\n    if (this.mb === null)\n      this.mb = this.m.toBigInt();\n\n    const x = this.intFrom(a.toBigInt());\n    const y = powInt(x, num, this.mb);\n    const z = this.intTo(y);\n\n    return BN.fromBigInt(z)._forceRed(this);\n  }\n\n  sqrn(a, n) {\n    for (let i = 0; i < n; i++)\n      a = this.sqr(a);\n    return a;\n  }\n\n  ipown(a, num) {\n    return this.pown(a, num)._move(a);\n  }\n\n  pown(a, num) {\n    this._verify1(a);\n\n    if (num < 0) {\n      a = this.invert(a);\n      num = -num;\n    }\n\n    if (num === 0)\n      return new BN(1).toRed(this);\n\n    if (num === 1)\n      return a.clone();\n\n    const bits = countBits(num);\n\n    let r = a;\n\n    for (let i = bits - 2; i >= 0; i--) {\n      r = this.sqr(r);\n\n      if ((num >> i) & 1)\n        r = this.mul(r, a);\n    }\n\n    return r;\n  }\n\n  isqr(a) {\n    return this.imul(a, a);\n  }\n\n  sqr(a) {\n    return this.mul(a, a);\n  }\n\n  isqrt(x) {\n    return this.sqrt(x)._move(x);\n  }\n\n  sqrt(x) {\n    this._verify1(x);\n\n    // Fast case (p = 3 mod 4).\n    if (this.m.andln(3) === 3)\n      return this.sqrt3mod4(x);\n\n    // Fast case (p = 5 mod 8).\n    if (this.m.andln(7) === 5) {\n      if (this.sm1 != null)\n        return this.sqrt5mod8sm1(x);\n      return this.sqrt5mod8(x);\n    }\n\n    // Slow case (Tonelli-Shanks).\n    return this.sqrt0(x);\n  }\n\n  sqrt3mod4(x) {\n    const e = this.m.addn(1).iushrn(2); // (p + 1) / 4\n    const b = this.pow(x, e);\n\n    if (!this.sqr(b).eq(x))\n      throw new Error('X is not a square mod P.');\n\n    return b;\n  }\n\n  sqrt5mod8(x) {\n    // Atkin's Algorithm.\n    const one = new BN(1).toRed(this);\n    const e = this.m.ushrn(3); // (p - 5) / 8\n    const x2 = this.add(x, x);\n    const alpha = this.pow(x2, e);\n    const beta = this.mul(x2, this.sqr(alpha));\n    const b = this.mul(this.mul(alpha, x), this.isub(beta, one));\n\n    if (!this.sqr(b).eq(x))\n      throw new Error('X is not a square mod P.');\n\n    return b;\n  }\n\n  sqrt5mod8sm1(x) {\n    const e = this.m.addn(3).iushrn(3); // (p + 3) / 8\n    const b = this.pow(x, e);\n\n    if (this.sqr(b).eq(x))\n      return b;\n\n    const c = this.mul(b, this.sm1);\n\n    if (this.sqr(c).eq(x))\n      return c;\n\n    throw new Error('X is not a square mod P.');\n  }\n\n  sqrt0(x) {\n    if (this.m.cmpn(1) === 0 || !this.m.isOdd())\n      throw new Error('Invalid prime.');\n\n    switch (this.jacobi(x)) {\n      case -1:\n        throw new Error('X is not a square mod P.');\n      case 0:\n        return new BN(0)._forceRed(this);\n      case 1:\n        break;\n    }\n\n    const one = new BN(1).toRed(this);\n    const s = this.m.subn(1);\n    const e = s._makeOdd();\n    const n = new BN(2).toRed(this);\n\n    while (this.jacobi(n) !== -1)\n      this.iadd(n, one);\n\n    let b = this.pow(x, s);\n    let g = this.pow(n, s);\n    let y = this.pow(x, s.iaddn(1).iushrn(1));\n    let k = e;\n\n    for (;;) {\n      let t = b;\n      let m = 0;\n\n      while (t.cmp(one) !== 0 && m < k) {\n        t = this.sqr(t);\n        m += 1;\n      }\n\n      if (m === 0)\n        break;\n\n      assert(m < k);\n\n      t = this.sqrn(g, k - m - 1);\n      g = this.sqr(t);\n      y = this.mul(y, t);\n      b = this.mul(b, g);\n      k = m;\n    }\n\n    return y;\n  }\n\n  idivsqrt(u, v) {\n    return this.divsqrt(u, v)._move(u);\n  }\n\n  divsqrt(u, v) {\n    this._verify2(u, v);\n\n    // v = 0\n    if (v.isZero())\n      throw new RangeError('Not invertible.');\n\n    // p = 3 mod 4\n    if (this.m.andln(3) === 3)\n      return this.divsqrt3mod4(u, v);\n\n    // p = 5 mod 8\n    if (this.sm1 != null && this.m.andln(7) === 5)\n      return this.divsqrt5mod8(u, v);\n\n    return this.sqrt(this.div(u, v));\n  }\n\n  divsqrt3mod4(u, v) {\n    // x = u^3 * v * (u^5 * v^3)^((p - 3) / 4) mod p\n    const e = this.m.subn(3).iushrn(2);\n    const u2 = this.sqr(u);\n    const u3 = this.mul(u2, u);\n    const u5 = this.mul(u3, u2);\n    const v3 = this.mul(this.sqr(v), v);\n    const p = this.pow(this.mul(u5, v3), e);\n    const x = this.mul(this.mul(u3, v), p);\n    const c = this.mul(v, this.sqr(x));\n\n    if (c.cmp(u) === 0)\n      return x;\n\n    throw new Error('X is not a square mod P.');\n  }\n\n  divsqrt5mod8(u, v) {\n    // x = u * v^3 * (u * v^7)^((p - 5) / 8) mod p\n    const e = this.m.subn(5).iushrn(3);\n    const v3 = this.mul(this.sqr(v), v);\n    const v7 = this.mul(this.sqr(v3), v);\n    const p = this.pow(this.mul(u, v7), e);\n    const x = this.mul(this.mul(u, v3), p);\n    const c = this.mul(v, this.sqr(x));\n\n    if (c.cmp(u) === 0)\n      return x;\n\n    if (this.ineg(c).cmp(u) === 0)\n      return this.mul(x, this.sm1);\n\n    throw new Error('X is not a square mod P.');\n  }\n\n  isSquare(a) {\n    let symbol;\n\n    if (this.prime)\n      symbol = this.legendre(a);\n    else if (this.m.isOdd())\n      symbol = this.jacobi(a);\n    else\n      symbol = this.kronecker(a);\n\n    return Boolean(~symbol >>> 31);\n  }\n\n  ishl(a, num) {\n    this._verify1(a);\n    return this.imod(a.iushl(num));\n  }\n\n  shl(a, num) {\n    return this.ishl(a.clone(), num);\n  }\n\n  ishln(a, num) {\n    this._verify1(a);\n\n    a.iushln(num);\n\n    if (num <= 4) {\n      // Quick reduction.\n      while (a.ucmp(this.m) >= 0)\n        a._isub(a, this.m);\n    } else {\n      this.imod(a);\n    }\n\n    return a;\n  }\n\n  shln(a, num) {\n    return this.ishln(a.clone(), num);\n  }\n\n  ineg(a) {\n    this._verify1(a);\n\n    if (!a.isZero())\n      a._isub(this.m, a);\n\n    return a;\n  }\n\n  neg(a) {\n    return this.ineg(a.clone());\n  }\n\n  eq(a, b) {\n    this._verify2(a, b);\n    return a.ucmp(b) === 0;\n  }\n\n  eqn(a, num) {\n    this._verify1(a);\n\n    if (this.m.length === 1) {\n      num %= this.m.words[0];\n\n      if (num < 0)\n        num += this.m.words[0];\n\n      return a.ucmpn(num) === 0;\n    }\n\n    if (num < 0) {\n      this.m._isubn(-num);\n\n      const cmp = a.ucmp(this.m);\n\n      this.m._iaddn(-num);\n\n      return cmp === 0;\n    }\n\n    return a.ucmpn(num) === 0;\n  }\n\n  isHigh(a) {\n    return !this.isLow(a);\n  }\n\n  isLow(a) {\n    this._verify1(a);\n    return a.ucmp(this.m.ushrn(1)) <= 0;\n  }\n\n  isOdd(a) {\n    this._verify1(a);\n    return a.isOdd();\n  }\n\n  isEven(a) {\n    this._verify1(a);\n    return a.isEven();\n  }\n\n  legendre(num) {\n    this._verify1(num);\n\n    if (this.m.isEven())\n      throw new Error('legendre: `num` must be odd.');\n\n    // Euler's criterion.\n    const e = this.m.subn(1).iushrn(1); // (p - 1) / 2\n    const symbol = this.pow(num, e);\n    const one = new BN(1).toRed(this);\n    const a = symbol.czero();\n    const b = symbol.ceq(one);\n    const c = symbol.ceq(this.ineg(one));\n\n    // Must be one of these.\n    if ((a | b | c) === 0)\n      throw new Error('Invalid prime.');\n\n    // Cannot be multiple.\n    assert(a + b + c === 1);\n\n    // 0, 1, or -1.\n    return b - c;\n  }\n\n  jacobi(a) {\n    this._verify1(a);\n    return a.jacobi(this.m);\n  }\n\n  kronecker(a) {\n    this._verify1(a);\n    return a.kronecker(this.m);\n  }\n\n  iinvert(a) {\n    return this.invert(a)._move(a);\n  }\n\n  invert(a) {\n    this._verify1(a);\n    return a.invert(this.m)._forceRed(this);\n  }\n\n  ifermat(a) {\n    return this.fermat(a)._move(a);\n  }\n\n  fermat(a) {\n    this._verify1(a);\n\n    if (a.isZero() || this.m.cmpn(1) === 0)\n      throw new RangeError('Not invertible.');\n\n    // Invert using fermat's little theorem.\n    return this.pow(a, this.m.subn(2));\n  }\n\n  [custom]() {\n    if (this.prime)\n      return `<Red: ${this.prime.name}>`;\n\n    return `<Red: ${this.m.toString(10)}>`;\n  }\n}\n\n/**\n * Barrett Engine\n */\n\nclass Barrett extends Red {\n  constructor(m) {\n    super(m);\n\n    this.prime = null;\n    this.n = this.m.bitLength();\n\n    if ((this.n % 26) !== 0)\n      this.n += 26 - (this.n % 26);\n\n    this.k = this.n * 2;\n    this.w = this.k / 26;\n    this.b = BN.shift(1, this.k).div(this.m);\n  }\n\n  convertTo(num) {\n    if (num.length > this.w)\n      return super.convertTo(num);\n\n    return this.imod(num.clone());\n  }\n\n  _shift(q) {\n    let i = 0;\n    let j = this.w;\n\n    while (j < q.length)\n      q.words[i++] = q.words[j++];\n\n    if (i === 0)\n      q.words[i++] = 0;\n\n    q.length = i;\n  }\n\n  imod(a) {\n    const neg = a.negative;\n\n    assert(a.length <= this.w);\n\n    a.negative = 0;\n\n    const q = a.mul(this.b);\n\n    // Shift right by `k` bits.\n    this._shift(q);\n\n    a._isub(a, q.mul(this.m));\n\n    if (a.ucmp(this.m) >= 0)\n      a._isub(a, this.m);\n\n    if (neg && !a.isZero())\n      a._isub(this.m, a);\n\n    a.red = this;\n\n    return a;\n  }\n}\n\n/**\n * Montgomery Engine\n */\n\nclass Mont extends Red {\n  constructor(m) {\n    super(m);\n\n    // Note that:\n    //\n    //   mi = (-m^-1 mod (2^(n * 2))) mod r\n    //\n    // and:\n    //\n    //   mi = (((2^n)^-1 mod m) * r^-1 - 1) / m\n    //\n    // are equivalent.\n    this.prime = null;\n    this.n = this.m.length * 26;\n    this.r = BN.shift(1, this.n);\n    this.r2 = BN.shift(1, this.n * 2).imod(this.m);\n    this.ri = this.r.invert(this.m);\n    this.mi = this.r.mul(this.ri).isubn(1).div(this.m);\n    this.rib = null;\n  }\n\n  get mont() {\n    return true;\n  }\n\n  convertTo(num) {\n    if (num.isNeg() || num.ucmp(this.m) >= 0)\n      return this.imod(num.ushln(this.n));\n\n    // Equivalent to: (num * 2^n) mod m\n    return this.mul(num, this.r2);\n  }\n\n  convertFrom(num) {\n    // Equivalent to: num * r^-1 mod m\n    const r = this.mul(num, new BN(1));\n    r.red = null;\n    return r;\n  }\n\n  intTo(a) {\n    return (a << BigInt(this.n)) % this.mb;\n  }\n\n  intFrom(a) {\n    if (this.rib === null)\n      this.rib = this.ri.toBigInt();\n\n    return (a * this.rib) % this.mb;\n  }\n\n  iaddn(a, num) {\n    return this.iadd(a, this.convertTo(new BN(num)));\n  }\n\n  isubn(a, num) {\n    return this.isub(a, this.convertTo(new BN(num)));\n  }\n\n  imul(a, b) {\n    return this.mul(a, b)._move(a);\n  }\n\n  mul(a, b) {\n    if (a.isZero() || b.isZero())\n      return new BN(0)._forceRed(this);\n\n    const t = a.mul(b);\n    const c = t.umaskn(this.n).mul(this.mi).iumaskn(this.n);\n    const u = t.iadd(c.mul(this.m)).iushrn(this.n);\n\n    if (u.ucmp(this.m) >= 0)\n      u._isub(u, this.m);\n\n    return u._forceRed(this);\n  }\n\n  imuln(a, num) {\n    this._verify1(a);\n\n    if (a.isZero())\n      return a;\n\n    if (num === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    const neg = num < 0;\n\n    if (neg)\n      num = -num;\n\n    if (this.m.length === 1)\n      num %= this.m.words[0];\n\n    const bits = countBits(num);\n\n    // Potentially compute with additions.\n    // This avoids an expensive division.\n    if (bits > 5) {\n      // Slow case (num > 31).\n      this.imul(a, this.convertTo(new BN(num)));\n    } else if ((num & (num - 1)) === 0) {\n      // Optimize for powers of two.\n      for (let i = 0; i < bits - 1; i++)\n        this.iadd(a, a);\n    } else {\n      // Multiply left to right.\n      const c = a.clone();\n\n      for (let i = bits - 2; i >= 0; i--) {\n        this.iadd(a, a);\n\n        if ((num >> i) & 1)\n          this.iadd(a, c);\n      }\n    }\n\n    if (neg)\n      this.ineg(a);\n\n    return a;\n  }\n\n  eqn(a, num) {\n    this._verify1(a);\n\n    if (num === 0)\n      return a.isZero();\n\n    return a.ucmp(this.convertTo(new BN(num))) === 0;\n  }\n\n  isLow(a) {\n    this._verify1(a);\n    return this.convertFrom(a).ucmp(this.m.ushrn(1)) <= 0;\n  }\n\n  isOdd(a) {\n    this._verify1(a);\n    return this.convertFrom(a).isOdd();\n  }\n\n  isEven(a) {\n    this._verify1(a);\n    return this.convertFrom(a).isEven();\n  }\n\n  invert(a) {\n    this._verify1(a);\n\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    return this.imod(a.invert(this.m).mul(this.r2));\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction makeError(Error, msg, start) {\n  const err = new Error(msg);\n\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(err, start);\n\n  return err;\n}\n\nfunction assert(value, message) {\n  if (!value) {\n    const msg = message || 'Assertion failed.';\n    throw makeError(Error, msg, assert);\n  }\n}\n\nfunction enforce(value, name, type) {\n  if (!value) {\n    const msg = `\"${name}\" must be a(n) ${type}.`;\n    throw makeError(TypeError, msg, enforce);\n  }\n}\n\nfunction range(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with positive numbers.`;\n    throw makeError(RangeError, msg, range);\n  }\n}\n\nfunction red(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with red numbers.`;\n    throw makeError(TypeError, msg, red);\n  }\n}\n\nfunction nonred(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with normal numbers.`;\n    throw makeError(TypeError, msg, nonred);\n  }\n}\n\nfunction nonzero(value) {\n  if (!value) {\n    const msg = 'Cannot divide by zero.';\n    throw makeError(RangeError, msg, nonzero);\n  }\n}\n\nfunction isInteger(num) {\n  return Number.isSafeInteger(num);\n}\n\nfunction isSMI(num) {\n  return isInteger(num)\n      && num >= -0x3ffffff\n      && num <= 0x3ffffff;\n}\n\nfunction allocate(ArrayType, size) {\n  if (ArrayType.allocUnsafeSlow)\n    return ArrayType.allocUnsafeSlow(size);\n\n  return new ArrayType(size);\n}\n\nfunction getBase(base) {\n  if (base == null)\n    return 10;\n\n  if (typeof base === 'number')\n    return base;\n\n  switch (base) {\n    case 'bin':\n      return 2;\n    case 'oct':\n      return 8;\n    case 'dec':\n      return 10;\n    case 'hex':\n      return 16;\n  }\n\n  return 0;\n}\n\n/*\n * Internal\n */\n\nfunction countBits(w) {\n  if (Math.clz32)\n    return 32 - Math.clz32(w);\n\n  let t = w;\n  let r = 0;\n\n  if (t >= 0x1000) {\n    r += 13;\n    t >>>= 13;\n  }\n\n  if (t >= 0x40) {\n    r += 7;\n    t >>>= 7;\n  }\n\n  if (t >= 0x8) {\n    r += 4;\n    t >>>= 4;\n  }\n\n  if (t >= 0x02) {\n    r += 2;\n    t >>>= 2;\n  }\n\n  return r + t;\n}\n\nfunction zeroBits(w) {\n  // Shortcut.\n  if (w === 0)\n    return 26;\n\n  let t = w;\n  let r = 0;\n\n  if ((t & 0x1fff) === 0) {\n    r += 13;\n    t >>>= 13;\n  }\n\n  if ((t & 0x7f) === 0) {\n    r += 7;\n    t >>>= 7;\n  }\n\n  if ((t & 0xf) === 0) {\n    r += 4;\n    t >>>= 4;\n  }\n\n  if ((t & 0x3) === 0) {\n    r += 2;\n    t >>>= 2;\n  }\n\n  if ((t & 0x1) === 0)\n    r += 1;\n\n  return r;\n}\n\nfunction parseHex(str, start, end) {\n  const len = Math.min(str.length, end);\n\n  let r = 0;\n  let z = 0;\n\n  for (let i = start; i < len; i++) {\n    const c = str.charCodeAt(i) - 48;\n\n    r <<= 4;\n\n    let b;\n\n    if (c >= 49 && c <= 54) {\n      // 'a' - 'f'\n      b = c - 49 + 0xa;\n    } else if (c >= 17 && c <= 22) {\n      // 'A' - 'F'\n      b = c - 17 + 0xa;\n    } else {\n      // '0' - '9'\n      b = c;\n    }\n\n    r |= b;\n    z |= b;\n  }\n\n  if (z & ~15)\n    throw new Error('Invalid string.');\n\n  return r;\n}\n\nfunction parseBase(str, start, end, mul) {\n  const len = Math.min(str.length, end);\n\n  let r = 0;\n\n  for (let i = start; i < len; i++) {\n    const c = str.charCodeAt(i) - 48;\n\n    r *= mul;\n\n    let b;\n\n    if (c >= 49) {\n      // 'a'\n      b = c - 49 + 0xa;\n    } else if (c >= 17) {\n      // 'A'\n      b = c - 17 + 0xa;\n    } else {\n      // '0' - '9'\n      b = c;\n    }\n\n    if (c < 0 || c > 207 || b >= mul)\n      throw new Error('Invalid string.');\n\n    r += b;\n  }\n\n  return r;\n}\n\n/*\n * Exponentiation (bigint)\n */\n\nfunction powInt(x, e, m) {\n  // Sliding window.\n  const wnd = new Array(WND_SIZE);\n\n  wnd[0] = sqrn(x, WND_WIDTH - 1, m);\n\n  for (let i = 1; i < WND_SIZE; i++)\n    wnd[i] = (wnd[i - 1] * x) % m;\n\n  let i = e.bitLength();\n  let r = BigInt(1);\n\n  while (i >= WND_WIDTH) {\n    const pos = i - WND_WIDTH;\n    const bits = e.bits(pos, WND_WIDTH);\n\n    if (bits < WND_SIZE) {\n      r = (r * r) % m;\n      i -= 1;\n      continue;\n    }\n\n    r = sqrn(r, WND_WIDTH, m);\n    r = (r * wnd[bits & ~WND_SIZE]) % m;\n    i = pos;\n  }\n\n  if (i > 0) {\n    const bits = e.bits(0, i);\n\n    while (i--) {\n      r = (r * r) % m;\n\n      if ((bits >> i) & 1)\n        r = (r * x) % m;\n    }\n  }\n\n  return r;\n}\n\nfunction sqrn(x, n, m) {\n  for (let i = 0; i < n; i++)\n    x = (x * x) % m;\n  return x;\n}\n\n/*\n * Multiplication\n */\n\nfunction smallMulTo(self, num, out) {\n  const len = self.length + num.length;\n\n  out.negative = self.negative ^ num.negative;\n  out._alloc(len);\n  out.length = len;\n\n  // Peel one iteration (compiler can't\n  // do it, because of code complexity).\n  const a = self.words[0];\n  const b = num.words[0];\n  const r = a * b;\n  const lo = r & 0x3ffffff;\n\n  let carry = (r / 0x4000000) | 0;\n  let k = 1;\n\n  out.words[0] = lo;\n\n  for (; k < out.length - 1; k++) {\n    // Sum all words with the same\n    // `i + j = k` and accumulate\n    // `ncarry`, note that ncarry\n    // could be >= 0x3ffffff.\n    let ncarry = carry >>> 26;\n    let rword = carry & 0x3ffffff;\n\n    const min = Math.max(0, k - self.length + 1);\n    const max = Math.min(k, num.length - 1);\n\n    for (let j = min; j <= max; j++) {\n      const i = k - j;\n      const a = self.words[i];\n      const b = num.words[j];\n      const r = a * b + rword;\n\n      ncarry += (r / 0x4000000) | 0;\n      rword = r & 0x3ffffff;\n    }\n\n    out.words[k] = rword | 0;\n    carry = ncarry | 0;\n  }\n\n  if (carry !== 0)\n    out.words[k] = carry | 0;\n  else\n    out.length -= 1;\n\n  return out._strip();\n}\n\nfunction bigMulTo(self, num, out) {\n  const len = self.length + num.length;\n\n  out.negative = self.negative ^ num.negative;\n  out._alloc(len);\n  out.length = len;\n\n  let carry = 0;\n  let hncarry = 0;\n  let k = 0;\n\n  for (; k < out.length - 1; k++) {\n    // Sum all words with the same\n    // `i + j = k` and accumulate\n    // `ncarry`, note that ncarry\n    // could be >= 0x3ffffff.\n    let ncarry = hncarry;\n\n    hncarry = 0;\n\n    let rword = carry & 0x3ffffff;\n\n    const min = Math.max(0, k - self.length + 1);\n    const max = Math.min(k, num.length - 1);\n\n    for (let j = min; j <= max; j++) {\n      const i = k - j;\n      const a = self.words[i];\n      const b = num.words[j];\n      const r = a * b;\n\n      let lo = r & 0x3ffffff;\n\n      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n      lo = (lo + rword) | 0;\n      rword = lo & 0x3ffffff;\n      ncarry = (ncarry + (lo >>> 26)) | 0;\n\n      hncarry += ncarry >>> 26;\n      ncarry &= 0x3ffffff;\n    }\n\n    out.words[k] = rword;\n    carry = ncarry;\n    ncarry = hncarry;\n  }\n\n  if (carry !== 0)\n    out.words[k] = carry;\n  else\n    out.length -= 1;\n\n  return out._strip();\n}\n\nfunction jumboMulTo(x, y, out) {\n  // v8 has a 2147483519 bit max (~256mb).\n  if (!HAS_BIGINT || x.length + y.length > 82595519)\n    return bigMulTo(x, y, out);\n\n  const zero = BigInt(0);\n  const mask = BigInt(0x3ffffff);\n  const shift = BigInt(26);\n\n  let z = x.toBigInt() * y.toBigInt();\n\n  const neg = (z < zero) | 0;\n\n  if (neg)\n    z = -z;\n\n  let i = 0;\n\n  while (z > zero) {\n    out.words[i++] = Number(z & mask);\n    z >>= shift;\n  }\n\n  if (i === 0)\n    out.words[i++] = 0;\n\n  out.length = i;\n  out.negative = neg;\n\n  return out;\n}\n\nfunction comb10MulTo(self, num, out) {\n  const a = self.words;\n  const b = num.words;\n  const o = out.words;\n  const a0 = a[0] | 0;\n  const al0 = a0 & 0x1fff;\n  const ah0 = a0 >>> 13;\n  const a1 = a[1] | 0;\n  const al1 = a1 & 0x1fff;\n  const ah1 = a1 >>> 13;\n  const a2 = a[2] | 0;\n  const al2 = a2 & 0x1fff;\n  const ah2 = a2 >>> 13;\n  const a3 = a[3] | 0;\n  const al3 = a3 & 0x1fff;\n  const ah3 = a3 >>> 13;\n  const a4 = a[4] | 0;\n  const al4 = a4 & 0x1fff;\n  const ah4 = a4 >>> 13;\n  const a5 = a[5] | 0;\n  const al5 = a5 & 0x1fff;\n  const ah5 = a5 >>> 13;\n  const a6 = a[6] | 0;\n  const al6 = a6 & 0x1fff;\n  const ah6 = a6 >>> 13;\n  const a7 = a[7] | 0;\n  const al7 = a7 & 0x1fff;\n  const ah7 = a7 >>> 13;\n  const a8 = a[8] | 0;\n  const al8 = a8 & 0x1fff;\n  const ah8 = a8 >>> 13;\n  const a9 = a[9] | 0;\n  const al9 = a9 & 0x1fff;\n  const ah9 = a9 >>> 13;\n  const b0 = b[0] | 0;\n  const bl0 = b0 & 0x1fff;\n  const bh0 = b0 >>> 13;\n  const b1 = b[1] | 0;\n  const bl1 = b1 & 0x1fff;\n  const bh1 = b1 >>> 13;\n  const b2 = b[2] | 0;\n  const bl2 = b2 & 0x1fff;\n  const bh2 = b2 >>> 13;\n  const b3 = b[3] | 0;\n  const bl3 = b3 & 0x1fff;\n  const bh3 = b3 >>> 13;\n  const b4 = b[4] | 0;\n  const bl4 = b4 & 0x1fff;\n  const bh4 = b4 >>> 13;\n  const b5 = b[5] | 0;\n  const bl5 = b5 & 0x1fff;\n  const bh5 = b5 >>> 13;\n  const b6 = b[6] | 0;\n  const bl6 = b6 & 0x1fff;\n  const bh6 = b6 >>> 13;\n  const b7 = b[7] | 0;\n  const bl7 = b7 & 0x1fff;\n  const bh7 = b7 >>> 13;\n  const b8 = b[8] | 0;\n  const bl8 = b8 & 0x1fff;\n  const bh8 = b8 >>> 13;\n  const b9 = b[9] | 0;\n  const bl9 = b9 & 0x1fff;\n  const bh9 = b9 >>> 13;\n\n  let c = 0;\n  let lo, mid, hi;\n\n  out.negative = self.negative ^ num.negative;\n  out._alloc(20);\n  out.length = 19;\n\n  /* k = 0 */\n  lo = Math.imul(al0, bl0);\n  mid = Math.imul(al0, bh0);\n  mid = (mid + Math.imul(ah0, bl0)) | 0;\n  hi = Math.imul(ah0, bh0);\n\n  let w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n  w0 &= 0x3ffffff;\n\n  /* k = 1 */\n  lo = Math.imul(al1, bl0);\n  mid = Math.imul(al1, bh0);\n  mid = (mid + Math.imul(ah1, bl0)) | 0;\n  hi = Math.imul(ah1, bh0);\n  lo = (lo + Math.imul(al0, bl1)) | 0;\n  mid = (mid + Math.imul(al0, bh1)) | 0;\n  mid = (mid + Math.imul(ah0, bl1)) | 0;\n  hi = (hi + Math.imul(ah0, bh1)) | 0;\n\n  let w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n  w1 &= 0x3ffffff;\n\n  /* k = 2 */\n  lo = Math.imul(al2, bl0);\n  mid = Math.imul(al2, bh0);\n  mid = (mid + Math.imul(ah2, bl0)) | 0;\n  hi = Math.imul(ah2, bh0);\n  lo = (lo + Math.imul(al1, bl1)) | 0;\n  mid = (mid + Math.imul(al1, bh1)) | 0;\n  mid = (mid + Math.imul(ah1, bl1)) | 0;\n  hi = (hi + Math.imul(ah1, bh1)) | 0;\n  lo = (lo + Math.imul(al0, bl2)) | 0;\n  mid = (mid + Math.imul(al0, bh2)) | 0;\n  mid = (mid + Math.imul(ah0, bl2)) | 0;\n  hi = (hi + Math.imul(ah0, bh2)) | 0;\n\n  let w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n  w2 &= 0x3ffffff;\n\n  /* k = 3 */\n  lo = Math.imul(al3, bl0);\n  mid = Math.imul(al3, bh0);\n  mid = (mid + Math.imul(ah3, bl0)) | 0;\n  hi = Math.imul(ah3, bh0);\n  lo = (lo + Math.imul(al2, bl1)) | 0;\n  mid = (mid + Math.imul(al2, bh1)) | 0;\n  mid = (mid + Math.imul(ah2, bl1)) | 0;\n  hi = (hi + Math.imul(ah2, bh1)) | 0;\n  lo = (lo + Math.imul(al1, bl2)) | 0;\n  mid = (mid + Math.imul(al1, bh2)) | 0;\n  mid = (mid + Math.imul(ah1, bl2)) | 0;\n  hi = (hi + Math.imul(ah1, bh2)) | 0;\n  lo = (lo + Math.imul(al0, bl3)) | 0;\n  mid = (mid + Math.imul(al0, bh3)) | 0;\n  mid = (mid + Math.imul(ah0, bl3)) | 0;\n  hi = (hi + Math.imul(ah0, bh3)) | 0;\n\n  let w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n  w3 &= 0x3ffffff;\n\n  /* k = 4 */\n  lo = Math.imul(al4, bl0);\n  mid = Math.imul(al4, bh0);\n  mid = (mid + Math.imul(ah4, bl0)) | 0;\n  hi = Math.imul(ah4, bh0);\n  lo = (lo + Math.imul(al3, bl1)) | 0;\n  mid = (mid + Math.imul(al3, bh1)) | 0;\n  mid = (mid + Math.imul(ah3, bl1)) | 0;\n  hi = (hi + Math.imul(ah3, bh1)) | 0;\n  lo = (lo + Math.imul(al2, bl2)) | 0;\n  mid = (mid + Math.imul(al2, bh2)) | 0;\n  mid = (mid + Math.imul(ah2, bl2)) | 0;\n  hi = (hi + Math.imul(ah2, bh2)) | 0;\n  lo = (lo + Math.imul(al1, bl3)) | 0;\n  mid = (mid + Math.imul(al1, bh3)) | 0;\n  mid = (mid + Math.imul(ah1, bl3)) | 0;\n  hi = (hi + Math.imul(ah1, bh3)) | 0;\n  lo = (lo + Math.imul(al0, bl4)) | 0;\n  mid = (mid + Math.imul(al0, bh4)) | 0;\n  mid = (mid + Math.imul(ah0, bl4)) | 0;\n  hi = (hi + Math.imul(ah0, bh4)) | 0;\n\n  let w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n  w4 &= 0x3ffffff;\n\n  /* k = 5 */\n  lo = Math.imul(al5, bl0);\n  mid = Math.imul(al5, bh0);\n  mid = (mid + Math.imul(ah5, bl0)) | 0;\n  hi = Math.imul(ah5, bh0);\n  lo = (lo + Math.imul(al4, bl1)) | 0;\n  mid = (mid + Math.imul(al4, bh1)) | 0;\n  mid = (mid + Math.imul(ah4, bl1)) | 0;\n  hi = (hi + Math.imul(ah4, bh1)) | 0;\n  lo = (lo + Math.imul(al3, bl2)) | 0;\n  mid = (mid + Math.imul(al3, bh2)) | 0;\n  mid = (mid + Math.imul(ah3, bl2)) | 0;\n  hi = (hi + Math.imul(ah3, bh2)) | 0;\n  lo = (lo + Math.imul(al2, bl3)) | 0;\n  mid = (mid + Math.imul(al2, bh3)) | 0;\n  mid = (mid + Math.imul(ah2, bl3)) | 0;\n  hi = (hi + Math.imul(ah2, bh3)) | 0;\n  lo = (lo + Math.imul(al1, bl4)) | 0;\n  mid = (mid + Math.imul(al1, bh4)) | 0;\n  mid = (mid + Math.imul(ah1, bl4)) | 0;\n  hi = (hi + Math.imul(ah1, bh4)) | 0;\n  lo = (lo + Math.imul(al0, bl5)) | 0;\n  mid = (mid + Math.imul(al0, bh5)) | 0;\n  mid = (mid + Math.imul(ah0, bl5)) | 0;\n  hi = (hi + Math.imul(ah0, bh5)) | 0;\n\n  let w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n  w5 &= 0x3ffffff;\n\n  /* k = 6 */\n  lo = Math.imul(al6, bl0);\n  mid = Math.imul(al6, bh0);\n  mid = (mid + Math.imul(ah6, bl0)) | 0;\n  hi = Math.imul(ah6, bh0);\n  lo = (lo + Math.imul(al5, bl1)) | 0;\n  mid = (mid + Math.imul(al5, bh1)) | 0;\n  mid = (mid + Math.imul(ah5, bl1)) | 0;\n  hi = (hi + Math.imul(ah5, bh1)) | 0;\n  lo = (lo + Math.imul(al4, bl2)) | 0;\n  mid = (mid + Math.imul(al4, bh2)) | 0;\n  mid = (mid + Math.imul(ah4, bl2)) | 0;\n  hi = (hi + Math.imul(ah4, bh2)) | 0;\n  lo = (lo + Math.imul(al3, bl3)) | 0;\n  mid = (mid + Math.imul(al3, bh3)) | 0;\n  mid = (mid + Math.imul(ah3, bl3)) | 0;\n  hi = (hi + Math.imul(ah3, bh3)) | 0;\n  lo = (lo + Math.imul(al2, bl4)) | 0;\n  mid = (mid + Math.imul(al2, bh4)) | 0;\n  mid = (mid + Math.imul(ah2, bl4)) | 0;\n  hi = (hi + Math.imul(ah2, bh4)) | 0;\n  lo = (lo + Math.imul(al1, bl5)) | 0;\n  mid = (mid + Math.imul(al1, bh5)) | 0;\n  mid = (mid + Math.imul(ah1, bl5)) | 0;\n  hi = (hi + Math.imul(ah1, bh5)) | 0;\n  lo = (lo + Math.imul(al0, bl6)) | 0;\n  mid = (mid + Math.imul(al0, bh6)) | 0;\n  mid = (mid + Math.imul(ah0, bl6)) | 0;\n  hi = (hi + Math.imul(ah0, bh6)) | 0;\n\n  let w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n  w6 &= 0x3ffffff;\n\n  /* k = 7 */\n  lo = Math.imul(al7, bl0);\n  mid = Math.imul(al7, bh0);\n  mid = (mid + Math.imul(ah7, bl0)) | 0;\n  hi = Math.imul(ah7, bh0);\n  lo = (lo + Math.imul(al6, bl1)) | 0;\n  mid = (mid + Math.imul(al6, bh1)) | 0;\n  mid = (mid + Math.imul(ah6, bl1)) | 0;\n  hi = (hi + Math.imul(ah6, bh1)) | 0;\n  lo = (lo + Math.imul(al5, bl2)) | 0;\n  mid = (mid + Math.imul(al5, bh2)) | 0;\n  mid = (mid + Math.imul(ah5, bl2)) | 0;\n  hi = (hi + Math.imul(ah5, bh2)) | 0;\n  lo = (lo + Math.imul(al4, bl3)) | 0;\n  mid = (mid + Math.imul(al4, bh3)) | 0;\n  mid = (mid + Math.imul(ah4, bl3)) | 0;\n  hi = (hi + Math.imul(ah4, bh3)) | 0;\n  lo = (lo + Math.imul(al3, bl4)) | 0;\n  mid = (mid + Math.imul(al3, bh4)) | 0;\n  mid = (mid + Math.imul(ah3, bl4)) | 0;\n  hi = (hi + Math.imul(ah3, bh4)) | 0;\n  lo = (lo + Math.imul(al2, bl5)) | 0;\n  mid = (mid + Math.imul(al2, bh5)) | 0;\n  mid = (mid + Math.imul(ah2, bl5)) | 0;\n  hi = (hi + Math.imul(ah2, bh5)) | 0;\n  lo = (lo + Math.imul(al1, bl6)) | 0;\n  mid = (mid + Math.imul(al1, bh6)) | 0;\n  mid = (mid + Math.imul(ah1, bl6)) | 0;\n  hi = (hi + Math.imul(ah1, bh6)) | 0;\n  lo = (lo + Math.imul(al0, bl7)) | 0;\n  mid = (mid + Math.imul(al0, bh7)) | 0;\n  mid = (mid + Math.imul(ah0, bl7)) | 0;\n  hi = (hi + Math.imul(ah0, bh7)) | 0;\n\n  let w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n  w7 &= 0x3ffffff;\n\n  /* k = 8 */\n  lo = Math.imul(al8, bl0);\n  mid = Math.imul(al8, bh0);\n  mid = (mid + Math.imul(ah8, bl0)) | 0;\n  hi = Math.imul(ah8, bh0);\n  lo = (lo + Math.imul(al7, bl1)) | 0;\n  mid = (mid + Math.imul(al7, bh1)) | 0;\n  mid = (mid + Math.imul(ah7, bl1)) | 0;\n  hi = (hi + Math.imul(ah7, bh1)) | 0;\n  lo = (lo + Math.imul(al6, bl2)) | 0;\n  mid = (mid + Math.imul(al6, bh2)) | 0;\n  mid = (mid + Math.imul(ah6, bl2)) | 0;\n  hi = (hi + Math.imul(ah6, bh2)) | 0;\n  lo = (lo + Math.imul(al5, bl3)) | 0;\n  mid = (mid + Math.imul(al5, bh3)) | 0;\n  mid = (mid + Math.imul(ah5, bl3)) | 0;\n  hi = (hi + Math.imul(ah5, bh3)) | 0;\n  lo = (lo + Math.imul(al4, bl4)) | 0;\n  mid = (mid + Math.imul(al4, bh4)) | 0;\n  mid = (mid + Math.imul(ah4, bl4)) | 0;\n  hi = (hi + Math.imul(ah4, bh4)) | 0;\n  lo = (lo + Math.imul(al3, bl5)) | 0;\n  mid = (mid + Math.imul(al3, bh5)) | 0;\n  mid = (mid + Math.imul(ah3, bl5)) | 0;\n  hi = (hi + Math.imul(ah3, bh5)) | 0;\n  lo = (lo + Math.imul(al2, bl6)) | 0;\n  mid = (mid + Math.imul(al2, bh6)) | 0;\n  mid = (mid + Math.imul(ah2, bl6)) | 0;\n  hi = (hi + Math.imul(ah2, bh6)) | 0;\n  lo = (lo + Math.imul(al1, bl7)) | 0;\n  mid = (mid + Math.imul(al1, bh7)) | 0;\n  mid = (mid + Math.imul(ah1, bl7)) | 0;\n  hi = (hi + Math.imul(ah1, bh7)) | 0;\n  lo = (lo + Math.imul(al0, bl8)) | 0;\n  mid = (mid + Math.imul(al0, bh8)) | 0;\n  mid = (mid + Math.imul(ah0, bl8)) | 0;\n  hi = (hi + Math.imul(ah0, bh8)) | 0;\n\n  let w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n  w8 &= 0x3ffffff;\n\n  /* k = 9 */\n  lo = Math.imul(al9, bl0);\n  mid = Math.imul(al9, bh0);\n  mid = (mid + Math.imul(ah9, bl0)) | 0;\n  hi = Math.imul(ah9, bh0);\n  lo = (lo + Math.imul(al8, bl1)) | 0;\n  mid = (mid + Math.imul(al8, bh1)) | 0;\n  mid = (mid + Math.imul(ah8, bl1)) | 0;\n  hi = (hi + Math.imul(ah8, bh1)) | 0;\n  lo = (lo + Math.imul(al7, bl2)) | 0;\n  mid = (mid + Math.imul(al7, bh2)) | 0;\n  mid = (mid + Math.imul(ah7, bl2)) | 0;\n  hi = (hi + Math.imul(ah7, bh2)) | 0;\n  lo = (lo + Math.imul(al6, bl3)) | 0;\n  mid = (mid + Math.imul(al6, bh3)) | 0;\n  mid = (mid + Math.imul(ah6, bl3)) | 0;\n  hi = (hi + Math.imul(ah6, bh3)) | 0;\n  lo = (lo + Math.imul(al5, bl4)) | 0;\n  mid = (mid + Math.imul(al5, bh4)) | 0;\n  mid = (mid + Math.imul(ah5, bl4)) | 0;\n  hi = (hi + Math.imul(ah5, bh4)) | 0;\n  lo = (lo + Math.imul(al4, bl5)) | 0;\n  mid = (mid + Math.imul(al4, bh5)) | 0;\n  mid = (mid + Math.imul(ah4, bl5)) | 0;\n  hi = (hi + Math.imul(ah4, bh5)) | 0;\n  lo = (lo + Math.imul(al3, bl6)) | 0;\n  mid = (mid + Math.imul(al3, bh6)) | 0;\n  mid = (mid + Math.imul(ah3, bl6)) | 0;\n  hi = (hi + Math.imul(ah3, bh6)) | 0;\n  lo = (lo + Math.imul(al2, bl7)) | 0;\n  mid = (mid + Math.imul(al2, bh7)) | 0;\n  mid = (mid + Math.imul(ah2, bl7)) | 0;\n  hi = (hi + Math.imul(ah2, bh7)) | 0;\n  lo = (lo + Math.imul(al1, bl8)) | 0;\n  mid = (mid + Math.imul(al1, bh8)) | 0;\n  mid = (mid + Math.imul(ah1, bl8)) | 0;\n  hi = (hi + Math.imul(ah1, bh8)) | 0;\n  lo = (lo + Math.imul(al0, bl9)) | 0;\n  mid = (mid + Math.imul(al0, bh9)) | 0;\n  mid = (mid + Math.imul(ah0, bl9)) | 0;\n  hi = (hi + Math.imul(ah0, bh9)) | 0;\n\n  let w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n  w9 &= 0x3ffffff;\n\n  /* k = 10 */\n  lo = Math.imul(al9, bl1);\n  mid = Math.imul(al9, bh1);\n  mid = (mid + Math.imul(ah9, bl1)) | 0;\n  hi = Math.imul(ah9, bh1);\n  lo = (lo + Math.imul(al8, bl2)) | 0;\n  mid = (mid + Math.imul(al8, bh2)) | 0;\n  mid = (mid + Math.imul(ah8, bl2)) | 0;\n  hi = (hi + Math.imul(ah8, bh2)) | 0;\n  lo = (lo + Math.imul(al7, bl3)) | 0;\n  mid = (mid + Math.imul(al7, bh3)) | 0;\n  mid = (mid + Math.imul(ah7, bl3)) | 0;\n  hi = (hi + Math.imul(ah7, bh3)) | 0;\n  lo = (lo + Math.imul(al6, bl4)) | 0;\n  mid = (mid + Math.imul(al6, bh4)) | 0;\n  mid = (mid + Math.imul(ah6, bl4)) | 0;\n  hi = (hi + Math.imul(ah6, bh4)) | 0;\n  lo = (lo + Math.imul(al5, bl5)) | 0;\n  mid = (mid + Math.imul(al5, bh5)) | 0;\n  mid = (mid + Math.imul(ah5, bl5)) | 0;\n  hi = (hi + Math.imul(ah5, bh5)) | 0;\n  lo = (lo + Math.imul(al4, bl6)) | 0;\n  mid = (mid + Math.imul(al4, bh6)) | 0;\n  mid = (mid + Math.imul(ah4, bl6)) | 0;\n  hi = (hi + Math.imul(ah4, bh6)) | 0;\n  lo = (lo + Math.imul(al3, bl7)) | 0;\n  mid = (mid + Math.imul(al3, bh7)) | 0;\n  mid = (mid + Math.imul(ah3, bl7)) | 0;\n  hi = (hi + Math.imul(ah3, bh7)) | 0;\n  lo = (lo + Math.imul(al2, bl8)) | 0;\n  mid = (mid + Math.imul(al2, bh8)) | 0;\n  mid = (mid + Math.imul(ah2, bl8)) | 0;\n  hi = (hi + Math.imul(ah2, bh8)) | 0;\n  lo = (lo + Math.imul(al1, bl9)) | 0;\n  mid = (mid + Math.imul(al1, bh9)) | 0;\n  mid = (mid + Math.imul(ah1, bl9)) | 0;\n  hi = (hi + Math.imul(ah1, bh9)) | 0;\n\n  let w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n  w10 &= 0x3ffffff;\n\n  /* k = 11 */\n  lo = Math.imul(al9, bl2);\n  mid = Math.imul(al9, bh2);\n  mid = (mid + Math.imul(ah9, bl2)) | 0;\n  hi = Math.imul(ah9, bh2);\n  lo = (lo + Math.imul(al8, bl3)) | 0;\n  mid = (mid + Math.imul(al8, bh3)) | 0;\n  mid = (mid + Math.imul(ah8, bl3)) | 0;\n  hi = (hi + Math.imul(ah8, bh3)) | 0;\n  lo = (lo + Math.imul(al7, bl4)) | 0;\n  mid = (mid + Math.imul(al7, bh4)) | 0;\n  mid = (mid + Math.imul(ah7, bl4)) | 0;\n  hi = (hi + Math.imul(ah7, bh4)) | 0;\n  lo = (lo + Math.imul(al6, bl5)) | 0;\n  mid = (mid + Math.imul(al6, bh5)) | 0;\n  mid = (mid + Math.imul(ah6, bl5)) | 0;\n  hi = (hi + Math.imul(ah6, bh5)) | 0;\n  lo = (lo + Math.imul(al5, bl6)) | 0;\n  mid = (mid + Math.imul(al5, bh6)) | 0;\n  mid = (mid + Math.imul(ah5, bl6)) | 0;\n  hi = (hi + Math.imul(ah5, bh6)) | 0;\n  lo = (lo + Math.imul(al4, bl7)) | 0;\n  mid = (mid + Math.imul(al4, bh7)) | 0;\n  mid = (mid + Math.imul(ah4, bl7)) | 0;\n  hi = (hi + Math.imul(ah4, bh7)) | 0;\n  lo = (lo + Math.imul(al3, bl8)) | 0;\n  mid = (mid + Math.imul(al3, bh8)) | 0;\n  mid = (mid + Math.imul(ah3, bl8)) | 0;\n  hi = (hi + Math.imul(ah3, bh8)) | 0;\n  lo = (lo + Math.imul(al2, bl9)) | 0;\n  mid = (mid + Math.imul(al2, bh9)) | 0;\n  mid = (mid + Math.imul(ah2, bl9)) | 0;\n  hi = (hi + Math.imul(ah2, bh9)) | 0;\n\n  let w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n  w11 &= 0x3ffffff;\n\n  /* k = 12 */\n  lo = Math.imul(al9, bl3);\n  mid = Math.imul(al9, bh3);\n  mid = (mid + Math.imul(ah9, bl3)) | 0;\n  hi = Math.imul(ah9, bh3);\n  lo = (lo + Math.imul(al8, bl4)) | 0;\n  mid = (mid + Math.imul(al8, bh4)) | 0;\n  mid = (mid + Math.imul(ah8, bl4)) | 0;\n  hi = (hi + Math.imul(ah8, bh4)) | 0;\n  lo = (lo + Math.imul(al7, bl5)) | 0;\n  mid = (mid + Math.imul(al7, bh5)) | 0;\n  mid = (mid + Math.imul(ah7, bl5)) | 0;\n  hi = (hi + Math.imul(ah7, bh5)) | 0;\n  lo = (lo + Math.imul(al6, bl6)) | 0;\n  mid = (mid + Math.imul(al6, bh6)) | 0;\n  mid = (mid + Math.imul(ah6, bl6)) | 0;\n  hi = (hi + Math.imul(ah6, bh6)) | 0;\n  lo = (lo + Math.imul(al5, bl7)) | 0;\n  mid = (mid + Math.imul(al5, bh7)) | 0;\n  mid = (mid + Math.imul(ah5, bl7)) | 0;\n  hi = (hi + Math.imul(ah5, bh7)) | 0;\n  lo = (lo + Math.imul(al4, bl8)) | 0;\n  mid = (mid + Math.imul(al4, bh8)) | 0;\n  mid = (mid + Math.imul(ah4, bl8)) | 0;\n  hi = (hi + Math.imul(ah4, bh8)) | 0;\n  lo = (lo + Math.imul(al3, bl9)) | 0;\n  mid = (mid + Math.imul(al3, bh9)) | 0;\n  mid = (mid + Math.imul(ah3, bl9)) | 0;\n  hi = (hi + Math.imul(ah3, bh9)) | 0;\n\n  let w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n  w12 &= 0x3ffffff;\n\n  /* k = 13 */\n  lo = Math.imul(al9, bl4);\n  mid = Math.imul(al9, bh4);\n  mid = (mid + Math.imul(ah9, bl4)) | 0;\n  hi = Math.imul(ah9, bh4);\n  lo = (lo + Math.imul(al8, bl5)) | 0;\n  mid = (mid + Math.imul(al8, bh5)) | 0;\n  mid = (mid + Math.imul(ah8, bl5)) | 0;\n  hi = (hi + Math.imul(ah8, bh5)) | 0;\n  lo = (lo + Math.imul(al7, bl6)) | 0;\n  mid = (mid + Math.imul(al7, bh6)) | 0;\n  mid = (mid + Math.imul(ah7, bl6)) | 0;\n  hi = (hi + Math.imul(ah7, bh6)) | 0;\n  lo = (lo + Math.imul(al6, bl7)) | 0;\n  mid = (mid + Math.imul(al6, bh7)) | 0;\n  mid = (mid + Math.imul(ah6, bl7)) | 0;\n  hi = (hi + Math.imul(ah6, bh7)) | 0;\n  lo = (lo + Math.imul(al5, bl8)) | 0;\n  mid = (mid + Math.imul(al5, bh8)) | 0;\n  mid = (mid + Math.imul(ah5, bl8)) | 0;\n  hi = (hi + Math.imul(ah5, bh8)) | 0;\n  lo = (lo + Math.imul(al4, bl9)) | 0;\n  mid = (mid + Math.imul(al4, bh9)) | 0;\n  mid = (mid + Math.imul(ah4, bl9)) | 0;\n  hi = (hi + Math.imul(ah4, bh9)) | 0;\n\n  let w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n  w13 &= 0x3ffffff;\n\n  /* k = 14 */\n  lo = Math.imul(al9, bl5);\n  mid = Math.imul(al9, bh5);\n  mid = (mid + Math.imul(ah9, bl5)) | 0;\n  hi = Math.imul(ah9, bh5);\n  lo = (lo + Math.imul(al8, bl6)) | 0;\n  mid = (mid + Math.imul(al8, bh6)) | 0;\n  mid = (mid + Math.imul(ah8, bl6)) | 0;\n  hi = (hi + Math.imul(ah8, bh6)) | 0;\n  lo = (lo + Math.imul(al7, bl7)) | 0;\n  mid = (mid + Math.imul(al7, bh7)) | 0;\n  mid = (mid + Math.imul(ah7, bl7)) | 0;\n  hi = (hi + Math.imul(ah7, bh7)) | 0;\n  lo = (lo + Math.imul(al6, bl8)) | 0;\n  mid = (mid + Math.imul(al6, bh8)) | 0;\n  mid = (mid + Math.imul(ah6, bl8)) | 0;\n  hi = (hi + Math.imul(ah6, bh8)) | 0;\n  lo = (lo + Math.imul(al5, bl9)) | 0;\n  mid = (mid + Math.imul(al5, bh9)) | 0;\n  mid = (mid + Math.imul(ah5, bl9)) | 0;\n  hi = (hi + Math.imul(ah5, bh9)) | 0;\n\n  let w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n  w14 &= 0x3ffffff;\n\n  /* k = 15 */\n  lo = Math.imul(al9, bl6);\n  mid = Math.imul(al9, bh6);\n  mid = (mid + Math.imul(ah9, bl6)) | 0;\n  hi = Math.imul(ah9, bh6);\n  lo = (lo + Math.imul(al8, bl7)) | 0;\n  mid = (mid + Math.imul(al8, bh7)) | 0;\n  mid = (mid + Math.imul(ah8, bl7)) | 0;\n  hi = (hi + Math.imul(ah8, bh7)) | 0;\n  lo = (lo + Math.imul(al7, bl8)) | 0;\n  mid = (mid + Math.imul(al7, bh8)) | 0;\n  mid = (mid + Math.imul(ah7, bl8)) | 0;\n  hi = (hi + Math.imul(ah7, bh8)) | 0;\n  lo = (lo + Math.imul(al6, bl9)) | 0;\n  mid = (mid + Math.imul(al6, bh9)) | 0;\n  mid = (mid + Math.imul(ah6, bl9)) | 0;\n  hi = (hi + Math.imul(ah6, bh9)) | 0;\n\n  let w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n  w15 &= 0x3ffffff;\n\n  /* k = 16 */\n  lo = Math.imul(al9, bl7);\n  mid = Math.imul(al9, bh7);\n  mid = (mid + Math.imul(ah9, bl7)) | 0;\n  hi = Math.imul(ah9, bh7);\n  lo = (lo + Math.imul(al8, bl8)) | 0;\n  mid = (mid + Math.imul(al8, bh8)) | 0;\n  mid = (mid + Math.imul(ah8, bl8)) | 0;\n  hi = (hi + Math.imul(ah8, bh8)) | 0;\n  lo = (lo + Math.imul(al7, bl9)) | 0;\n  mid = (mid + Math.imul(al7, bh9)) | 0;\n  mid = (mid + Math.imul(ah7, bl9)) | 0;\n  hi = (hi + Math.imul(ah7, bh9)) | 0;\n\n  let w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n  w16 &= 0x3ffffff;\n\n  /* k = 17 */\n  lo = Math.imul(al9, bl8);\n  mid = Math.imul(al9, bh8);\n  mid = (mid + Math.imul(ah9, bl8)) | 0;\n  hi = Math.imul(ah9, bh8);\n  lo = (lo + Math.imul(al8, bl9)) | 0;\n  mid = (mid + Math.imul(al8, bh9)) | 0;\n  mid = (mid + Math.imul(ah8, bl9)) | 0;\n  hi = (hi + Math.imul(ah8, bh9)) | 0;\n\n  let w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n  w17 &= 0x3ffffff;\n\n  /* k = 18 */\n  lo = Math.imul(al9, bl9);\n  mid = Math.imul(al9, bh9);\n  mid = (mid + Math.imul(ah9, bl9)) | 0;\n  hi = Math.imul(ah9, bh9);\n\n  let w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n  w18 &= 0x3ffffff;\n\n  o[0] = w0;\n  o[1] = w1;\n  o[2] = w2;\n  o[3] = w3;\n  o[4] = w4;\n  o[5] = w5;\n  o[6] = w6;\n  o[7] = w7;\n  o[8] = w8;\n  o[9] = w9;\n  o[10] = w10;\n  o[11] = w11;\n  o[12] = w12;\n  o[13] = w13;\n  o[14] = w14;\n  o[15] = w15;\n  o[16] = w16;\n  o[17] = w17;\n  o[18] = w18;\n\n  if (c !== 0) {\n    o[19] = c;\n    out.length += 1;\n  }\n\n  // Note: we shouldn't need to strip here.\n  return out;\n}\n\n// Polyfill comb.\nif (!Math.imul)\n  comb10MulTo = smallMulTo;\n\n/*\n * Expose\n */\n\nBN.Red = Red;\n\nmodule.exports = BN;\n"]},"metadata":{},"sourceType":"script"}