{"ast":null,"code":"'use strict';\n\nconst {\n  difference\n} = require('./utils');\n\nconst EventEmitter = require('events');\n\nconst DEFAULT_OPTIONS = {\n  start: true,\n  pollInterval: 1000\n};\n\nclass IpfsPubsubPeerMonitor extends EventEmitter {\n  constructor(ipfsPubsub, topic, options) {\n    super();\n    this._pubsub = ipfsPubsub;\n    this._topic = topic;\n    this._options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this._peers = [];\n    this._interval = null;\n    if (this._options.start) this.start();\n  }\n\n  get started() {\n    return this._interval !== null;\n  }\n\n  set started(val) {\n    throw new Error(\"'started' is read-only\");\n  }\n\n  start() {\n    if (this._interval) this.stop();\n    this._interval = setInterval(this._pollPeers.bind(this), this._options.pollInterval);\n\n    this._pollPeers();\n  }\n\n  stop() {\n    clearInterval(this._interval);\n    this._interval = null;\n    this.removeAllListeners('error');\n    this.removeAllListeners('join');\n    this.removeAllListeners('leave');\n  }\n\n  async getPeers() {\n    this._peers = await this._pubsub.peers(this._topic);\n    return this._peers.slice();\n  }\n\n  hasPeer(peer) {\n    return this._peers.includes(peer);\n  }\n\n  async _pollPeers() {\n    try {\n      const peers = await this._pubsub.peers(this._topic);\n\n      IpfsPubsubPeerMonitor._emitJoinsAndLeaves(new Set(this._peers), new Set(peers), this);\n\n      this._peers = peers;\n    } catch (err) {\n      clearInterval(this._interval);\n      this.emit('error', err);\n    }\n  }\n\n  static _emitJoinsAndLeaves(oldValues, newValues, events) {\n    const emitJoin = addedPeer => events.emit('join', addedPeer);\n\n    const emitLeave = removedPeer => events.emit('leave', removedPeer);\n\n    difference(newValues, oldValues).forEach(emitJoin);\n    difference(oldValues, newValues).forEach(emitLeave);\n  }\n\n}\n\nmodule.exports = IpfsPubsubPeerMonitor;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-pubsub-peer-monitor/src/ipfs-pubsub-peer-monitor.js"],"names":["difference","require","EventEmitter","DEFAULT_OPTIONS","start","pollInterval","IpfsPubsubPeerMonitor","constructor","ipfsPubsub","topic","options","_pubsub","_topic","_options","Object","assign","_peers","_interval","started","val","Error","stop","setInterval","_pollPeers","bind","clearInterval","removeAllListeners","getPeers","peers","slice","hasPeer","peer","includes","_emitJoinsAndLeaves","Set","err","emit","oldValues","newValues","events","emitJoin","addedPeer","emitLeave","removedPeer","forEach","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { difference} = require('./utils')\nconst EventEmitter = require('events')\n\nconst DEFAULT_OPTIONS = {\n  start: true,\n  pollInterval: 1000,\n}\n\nclass IpfsPubsubPeerMonitor extends EventEmitter {\n  constructor (ipfsPubsub, topic, options) {\n    super()\n    this._pubsub = ipfsPubsub\n    this._topic = topic\n    this._options = Object.assign({}, DEFAULT_OPTIONS, options)\n    this._peers = []\n    this._interval = null\n\n    if (this._options.start)\n      this.start()\n  }\n\n  get started () { return this._interval !== null }\n  set started (val) { throw new Error(\"'started' is read-only\") }\n\n  start () {\n    if (this._interval)\n      this.stop()\n\n    this._interval = setInterval(\n      this._pollPeers.bind(this),\n      this._options.pollInterval\n    )\n    this._pollPeers()\n  }\n\n  stop () {\n    clearInterval(this._interval)\n    this._interval = null\n    this.removeAllListeners('error')\n    this.removeAllListeners('join')\n    this.removeAllListeners('leave')\n  }\n\n  async getPeers () {\n    this._peers = await this._pubsub.peers(this._topic)\n    return this._peers.slice()\n  }\n\n  hasPeer (peer) {\n    return this._peers.includes(peer)\n  }\n\n  async _pollPeers () {\n    try {\n      const peers = await this._pubsub.peers(this._topic)\n      IpfsPubsubPeerMonitor._emitJoinsAndLeaves(new Set(this._peers), new Set(peers), this)\n      this._peers = peers\n    } catch (err) {\n      clearInterval(this._interval)\n      this.emit('error', err)\n    }\n  }\n\n  static _emitJoinsAndLeaves (oldValues, newValues, events) {\n    const emitJoin = addedPeer => events.emit('join', addedPeer)\n    const emitLeave = removedPeer => events.emit('leave', removedPeer)\n    difference(newValues, oldValues).forEach(emitJoin)\n    difference(oldValues, newValues).forEach(emitLeave)\n  }\n}\n\nmodule.exports = IpfsPubsubPeerMonitor\n"]},"metadata":{},"sourceType":"script"}