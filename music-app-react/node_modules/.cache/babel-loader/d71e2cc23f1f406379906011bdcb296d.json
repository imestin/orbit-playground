{"ast":null,"code":"'use strict';\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst first = require('it-first');\n\nconst last = require('it-last');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  return withTimeoutOption(async function get(ipfsPath, options = {}) {\n    const {\n      cid,\n      path\n    } = toCidAndPath(ipfsPath);\n\n    if (path) {\n      options.path = path;\n    }\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    if (options.path) {\n      if (options.localResolve) {\n        return first(ipld.resolve(cid, options.path));\n      }\n\n      return last(ipld.resolve(cid, options.path));\n    }\n\n    return {\n      value: await ipld.get(cid, options),\n      remainderPath: ''\n    };\n  });\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/dag/get.js"],"names":["withTimeoutOption","require","first","last","toCidAndPath","module","exports","ipld","preload","get","ipfsPath","options","cid","path","localResolve","resolve","value","remainderPath"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAwBC,OAAO,CAAC,aAAD,CAArC;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,qCAAD,CAA5B;;AAEAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC,SAAOR,iBAAiB,CAAC,eAAeS,GAAf,CAAoBC,QAApB,EAA8BC,OAAO,GAAG,EAAxC,EAA4C;AACnE,UAAM;AACJC,MAAAA,GADI;AAEJC,MAAAA;AAFI,QAGFT,YAAY,CAACM,QAAD,CAHhB;;AAKA,QAAIG,IAAJ,EAAU;AACRF,MAAAA,OAAO,CAACE,IAAR,GAAeA,IAAf;AACD;;AAED,QAAIF,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACI,GAAD,CAAP;AACD;;AAED,QAAID,OAAO,CAACE,IAAZ,EAAkB;AAChB,UAAIF,OAAO,CAACG,YAAZ,EAA0B;AACxB,eAAOZ,KAAK,CAACK,IAAI,CAACQ,OAAL,CAAaH,GAAb,EAAkBD,OAAO,CAACE,IAA1B,CAAD,CAAZ;AACD;;AAED,aAAOV,IAAI,CAACI,IAAI,CAACQ,OAAL,CAAaH,GAAb,EAAkBD,OAAO,CAACE,IAA1B,CAAD,CAAX;AACD;;AAED,WAAO;AACLG,MAAAA,KAAK,EAAE,MAAMT,IAAI,CAACE,GAAL,CAASG,GAAT,EAAcD,OAAd,CADR;AAELM,MAAAA,aAAa,EAAE;AAFV,KAAP;AAID,GA1BuB,CAAxB;AA2BD,CA5BD","sourcesContent":["'use strict'\n\nconst { withTimeoutOption } = require('../../utils')\nconst first = require('it-first')\nconst last = require('it-last')\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path')\n\nmodule.exports = ({ ipld, preload }) => {\n  return withTimeoutOption(async function get (ipfsPath, options = {}) {\n    const {\n      cid,\n      path\n    } = toCidAndPath(ipfsPath)\n\n    if (path) {\n      options.path = path\n    }\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      if (options.localResolve) {\n        return first(ipld.resolve(cid, options.path))\n      }\n\n      return last(ipld.resolve(cid, options.path))\n    }\n\n    return {\n      value: await ipld.get(cid, options),\n      remainderPath: ''\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}