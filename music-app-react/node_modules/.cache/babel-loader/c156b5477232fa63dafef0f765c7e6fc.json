{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageCache = void 0;\n\nclass MessageCache {\n  /**\n   * @param {Number} gossip\n   * @param {Number} history\n   * @param {msgIdFn} msgIdFn a function that returns message id from a message\n   *\n   * @constructor\n   */\n  constructor(gossip, history, msgIdFn) {\n    /**\n     * @type {Map<string, RPC.Message>}\n     */\n    this.msgs = new Map();\n    this.peertx = new Map();\n    /**\n     * @type {Array<Array<CacheEntry>>}\n     */\n\n    this.history = [];\n\n    for (let i = 0; i < history; i++) {\n      this.history[i] = [];\n    }\n    /**\n     * @type {Number}\n     */\n\n\n    this.gossip = gossip;\n    /**\n     * @type {Function}\n     */\n\n    this.msgIdFn = msgIdFn;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   *\n   * @param {RPC.Message} msg\n   * @returns {void}\n   */\n\n\n  put(msg) {\n    const msgID = this.getMsgId(msg);\n    this.msgs.set(msgID, msg);\n    this.history[0].push({\n      msgID,\n      topics: msg.topicIDs\n    });\n  }\n  /**\n   * Get message id of message.\n   * @param {RPC.Message} msg\n   * @returns {string}\n   */\n\n\n  getMsgId(msg) {\n    return this.msgIdFn(msg);\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is still present\n   *\n   * @param {String} msgID\n   * @returns {Message}\n   */\n\n\n  get(msgID) {\n    return this.msgs.get(msgID);\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is present\n   * for a specific peer.\n   * Returns the message and the number of times the peer has requested the message\n   *\n   * @param {string} msgID\n   * @param {string} p\n   * @returns {[InMessage | undefined, number]}\n   */\n\n\n  getForPeer(msgID, p) {\n    const msg = this.msgs.get(msgID);\n\n    if (!msg) {\n      return [undefined, 0];\n    }\n\n    let peertx = this.peertx.get(msgID);\n\n    if (!peertx) {\n      peertx = new Map();\n      this.peertx.set(msgID, peertx);\n    }\n\n    const count = (peertx.get(p) || 0) + 1;\n    peertx.set(p, count);\n    return [msg, count];\n  }\n  /**\n   * Retrieves a list of message IDs for a given topic\n   *\n   * @param {String} topic\n   *\n   * @returns {Array<String>}\n   */\n\n\n  getGossipIDs(topic) {\n    const msgIDs = [];\n\n    for (let i = 0; i < this.gossip; i++) {\n      this.history[i].forEach(entry => {\n        for (const t of entry.topics) {\n          if (t === topic) {\n            msgIDs.push(entry.msgID);\n            break;\n          }\n        }\n      });\n    }\n\n    return msgIDs;\n  }\n  /**\n   * Shifts the current window, discarding messages older than this.history.length of the cache\n   *\n   * @returns {void}\n   */\n\n\n  shift() {\n    const last = this.history[this.history.length - 1];\n    last.forEach(entry => {\n      this.msgs.delete(entry.msgID);\n      this.peertx.delete(entry.msgID);\n    });\n    this.history.pop();\n    this.history.unshift([]);\n  }\n\n}\n\nexports.MessageCache = MessageCache;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/libp2p-gossipsub/src/message-cache.js"],"names":["Object","defineProperty","exports","value","MessageCache","constructor","gossip","history","msgIdFn","msgs","Map","peertx","i","put","msg","msgID","getMsgId","set","push","topics","topicIDs","get","getForPeer","p","undefined","count","getGossipIDs","topic","msgIDs","forEach","entry","t","shift","last","length","delete","pop","unshift"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageCache = void 0;\nclass MessageCache {\n    /**\n     * @param {Number} gossip\n     * @param {Number} history\n     * @param {msgIdFn} msgIdFn a function that returns message id from a message\n     *\n     * @constructor\n     */\n    constructor(gossip, history, msgIdFn) {\n        /**\n         * @type {Map<string, RPC.Message>}\n         */\n        this.msgs = new Map();\n        this.peertx = new Map();\n        /**\n         * @type {Array<Array<CacheEntry>>}\n         */\n        this.history = [];\n        for (let i = 0; i < history; i++) {\n            this.history[i] = [];\n        }\n        /**\n         * @type {Number}\n         */\n        this.gossip = gossip;\n        /**\n         * @type {Function}\n         */\n        this.msgIdFn = msgIdFn;\n    }\n    /**\n     * Adds a message to the current window and the cache\n     *\n     * @param {RPC.Message} msg\n     * @returns {void}\n     */\n    put(msg) {\n        const msgID = this.getMsgId(msg);\n        this.msgs.set(msgID, msg);\n        this.history[0].push({ msgID, topics: msg.topicIDs });\n    }\n    /**\n     * Get message id of message.\n     * @param {RPC.Message} msg\n     * @returns {string}\n     */\n    getMsgId(msg) {\n        return this.msgIdFn(msg);\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     *\n     * @param {String} msgID\n     * @returns {Message}\n     */\n    get(msgID) {\n        return this.msgs.get(msgID);\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is present\n     * for a specific peer.\n     * Returns the message and the number of times the peer has requested the message\n     *\n     * @param {string} msgID\n     * @param {string} p\n     * @returns {[InMessage | undefined, number]}\n     */\n    getForPeer(msgID, p) {\n        const msg = this.msgs.get(msgID);\n        if (!msg) {\n            return [undefined, 0];\n        }\n        let peertx = this.peertx.get(msgID);\n        if (!peertx) {\n            peertx = new Map();\n            this.peertx.set(msgID, peertx);\n        }\n        const count = (peertx.get(p) || 0) + 1;\n        peertx.set(p, count);\n        return [msg, count];\n    }\n    /**\n     * Retrieves a list of message IDs for a given topic\n     *\n     * @param {String} topic\n     *\n     * @returns {Array<String>}\n     */\n    getGossipIDs(topic) {\n        const msgIDs = [];\n        for (let i = 0; i < this.gossip; i++) {\n            this.history[i].forEach((entry) => {\n                for (const t of entry.topics) {\n                    if (t === topic) {\n                        msgIDs.push(entry.msgID);\n                        break;\n                    }\n                }\n            });\n        }\n        return msgIDs;\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     *\n     * @returns {void}\n     */\n    shift() {\n        const last = this.history[this.history.length - 1];\n        last.forEach((entry) => {\n            this.msgs.delete(entry.msgID);\n            this.peertx.delete(entry.msgID);\n        });\n        this.history.pop();\n        this.history.unshift([]);\n    }\n}\nexports.MessageCache = MessageCache;\n"]},"metadata":{},"sourceType":"script"}