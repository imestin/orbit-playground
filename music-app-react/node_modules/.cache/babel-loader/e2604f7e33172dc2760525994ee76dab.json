{"ast":null,"code":"'use strict';\n\nconst protons = require('protons');\n\nconst pb = protons(require('./record.proto')).Record;\n\nconst utils = require('./utils');\n\nclass Record {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [recvtime]\n   */\n  constructor(key, value, recvtime) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array');\n    }\n\n    this.key = key;\n    this.value = value;\n    this.timeReceived = recvtime;\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  serialize() {\n    return pb.encode(this.prepareSerialize());\n  }\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   *\n   * @returns {Object}\n   */\n\n\n  prepareSerialize() {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    };\n  }\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Uint8Array} raw\n   * @returns {Record}\n   */\n\n\n  static deserialize(raw) {\n    const dec = pb.decode(raw);\n    return Record.fromDeserialized(dec);\n  }\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {Object} obj\n   * @returns {Record}\n   */\n\n\n  static fromDeserialized(obj) {\n    let recvtime;\n\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived);\n    }\n\n    const rec = new Record(obj.key, obj.value, recvtime);\n    return rec;\n  }\n\n}\n\nmodule.exports = Record;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/libp2p-record/src/record.js"],"names":["protons","require","pb","Record","utils","constructor","key","value","recvtime","Uint8Array","Error","timeReceived","serialize","encode","prepareSerialize","toRFC3339","deserialize","raw","dec","decode","fromDeserialized","obj","parseRFC3339","rec","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGF,OAAO,CAACC,OAAO,CAAC,gBAAD,CAAR,CAAP,CAAmCE,MAA9C;;AACA,MAAMC,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,MAAN,CAAa;AACX;;;;;AAKAE,EAAAA,WAAW,CAAEC,GAAF,EAAOC,KAAP,EAAcC,QAAd,EAAwB;AACjC,QAAI,EAAEF,GAAG,YAAYG,UAAjB,CAAJ,EAAkC;AAChC,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,QAAI,EAAEH,KAAK,YAAYE,UAAnB,CAAJ,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,SAAKJ,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKI,YAAL,GAAoBH,QAApB;AACD;AAED;;;;;AAGAI,EAAAA,SAAS,GAAI;AACX,WAAOV,EAAE,CAACW,MAAH,CAAU,KAAKC,gBAAL,EAAV,CAAP;AACD;AAED;;;;;;;AAKAA,EAAAA,gBAAgB,GAAI;AAClB,WAAO;AACLR,MAAAA,GAAG,EAAE,KAAKA,GADL;AAELC,MAAAA,KAAK,EAAE,KAAKA,KAFP;AAGLI,MAAAA,YAAY,EAAE,KAAKA,YAAL,IAAqBP,KAAK,CAACW,SAAN,CAAgB,KAAKJ,YAArB;AAH9B,KAAP;AAKD;AAED;;;;;;;;AAMA,SAAOK,WAAP,CAAoBC,GAApB,EAAyB;AACvB,UAAMC,GAAG,GAAGhB,EAAE,CAACiB,MAAH,CAAUF,GAAV,CAAZ;AACA,WAAOd,MAAM,CAACiB,gBAAP,CAAwBF,GAAxB,CAAP;AACD;AAED;;;;;;;;AAMA,SAAOE,gBAAP,CAAyBC,GAAzB,EAA8B;AAC5B,QAAIb,QAAJ;;AACA,QAAIa,GAAG,CAACV,YAAR,EAAsB;AACpBH,MAAAA,QAAQ,GAAGJ,KAAK,CAACkB,YAAN,CAAmBD,GAAG,CAACV,YAAvB,CAAX;AACD;;AAED,UAAMY,GAAG,GAAG,IAAIpB,MAAJ,CACVkB,GAAG,CAACf,GADM,EACDe,GAAG,CAACd,KADH,EACUC,QADV,CAAZ;AAIA,WAAOe,GAAP;AACD;;AApEU;;AAuEbC,MAAM,CAACC,OAAP,GAAiBtB,MAAjB","sourcesContent":["'use strict'\n\nconst protons = require('protons')\nconst pb = protons(require('./record.proto')).Record\nconst utils = require('./utils')\n\nclass Record {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [recvtime]\n   */\n  constructor (key, value, recvtime) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array')\n    }\n\n    this.key = key\n    this.value = value\n    this.timeReceived = recvtime\n  }\n\n  /**\n   * @returns {Uint8Array}\n   */\n  serialize () {\n    return pb.encode(this.prepareSerialize())\n  }\n\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   *\n   * @returns {Object}\n   */\n  prepareSerialize () {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    }\n  }\n\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Uint8Array} raw\n   * @returns {Record}\n   */\n  static deserialize (raw) {\n    const dec = pb.decode(raw)\n    return Record.fromDeserialized(dec)\n  }\n\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {Object} obj\n   * @returns {Record}\n   */\n  static fromDeserialized (obj) {\n    let recvtime\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived)\n    }\n\n    const rec = new Record(\n      obj.key, obj.value, recvtime\n    )\n\n    return rec\n  }\n}\n\nmodule.exports = Record\n"]},"metadata":{},"sourceType":"script"}