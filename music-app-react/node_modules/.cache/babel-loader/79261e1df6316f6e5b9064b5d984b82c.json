{"ast":null,"code":"'use strict';\n\nrequire('node-forge/lib/util');\n\nrequire('node-forge/lib/jsbn');\n\nconst forge = require('node-forge/lib/forge');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayConcat = require('uint8arrays/concat');\n\nexports.bigIntegerToUintBase64url = (num, len) => {\n  // Call `.abs()` to convert to unsigned\n  let buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n\n  buf = buf[0] === 0 ? buf.slice(1) : buf;\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n  }\n\n  return uint8ArrayToString(buf, 'base64url');\n}; // Convert a base64url encoded string to a BigInteger\n\n\nexports.base64urlToBigInteger = str => {\n  const buf = exports.base64urlToBuffer(str);\n  return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16);\n};\n\nexports.base64urlToBuffer = (str, len) => {\n  let buf = uint8ArrayFromString(str, 'base64urlpad');\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n  }\n\n  return buf;\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/node_modules/libp2p-crypto/src/util.js"],"names":["require","forge","uint8ArrayFromString","uint8ArrayToString","uint8ArrayConcat","exports","bigIntegerToUintBase64url","num","len","buf","Uint8Array","from","abs","toByteArray","slice","length","Error","base64urlToBigInteger","str","base64urlToBuffer","jsbn","BigInteger"],"mappings":"AAAA;;AAEAA,OAAO,CAAC,qBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,yBAAD,CAApC;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,oBAAD,CAAhC;;AAEAK,OAAO,CAACC,yBAAR,GAAoC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChD;AACA,MAAIC,GAAG,GAAGC,UAAU,CAACC,IAAX,CAAgBJ,GAAG,CAACK,GAAJ,GAAUC,WAAV,EAAhB,CAAV,CAFgD,CAEG;AAEnD;AACA;AACA;AACA;;AACAJ,EAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,KAAW,CAAX,GAAeA,GAAG,CAACK,KAAJ,CAAU,CAAV,CAAf,GAA8BL,GAApC;;AAEA,MAAID,GAAG,IAAI,IAAX,EAAiB;AACf,QAAIC,GAAG,CAACM,MAAJ,GAAaP,GAAjB,EAAsB,MAAM,IAAIQ,KAAJ,CAAU,uCAAV,CAAN;AACtBP,IAAAA,GAAG,GAAGL,gBAAgB,CAAC,CAAC,IAAIM,UAAJ,CAAeF,GAAG,GAAGC,GAAG,CAACM,MAAzB,CAAD,EAAmCN,GAAnC,CAAD,CAAtB;AACD;;AAED,SAAON,kBAAkB,CAACM,GAAD,EAAM,WAAN,CAAzB;AACD,CAhBD,C,CAkBA;;;AACAJ,OAAO,CAACY,qBAAR,GAAgCC,GAAG,IAAI;AACrC,QAAMT,GAAG,GAAGJ,OAAO,CAACc,iBAAR,CAA0BD,GAA1B,CAAZ;AACA,SAAO,IAAIjB,KAAK,CAACmB,IAAN,CAAWC,UAAf,CAA0BlB,kBAAkB,CAACM,GAAD,EAAM,QAAN,CAA5C,EAA6D,EAA7D,CAAP;AACD,CAHD;;AAKAJ,OAAO,CAACc,iBAAR,GAA4B,CAACD,GAAD,EAAMV,GAAN,KAAc;AACxC,MAAIC,GAAG,GAAGP,oBAAoB,CAACgB,GAAD,EAAM,cAAN,CAA9B;;AAEA,MAAIV,GAAG,IAAI,IAAX,EAAiB;AACf,QAAIC,GAAG,CAACM,MAAJ,GAAaP,GAAjB,EAAsB,MAAM,IAAIQ,KAAJ,CAAU,uCAAV,CAAN;AACtBP,IAAAA,GAAG,GAAGL,gBAAgB,CAAC,CAAC,IAAIM,UAAJ,CAAeF,GAAG,GAAGC,GAAG,CAACM,MAAzB,CAAD,EAAmCN,GAAnC,CAAD,CAAtB;AACD;;AAED,SAAOA,GAAP;AACD,CATD","sourcesContent":["'use strict'\n\nrequire('node-forge/lib/util')\nrequire('node-forge/lib/jsbn')\nconst forge = require('node-forge/lib/forge')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayConcat = require('uint8arrays/concat')\n\nexports.bigIntegerToUintBase64url = (num, len) => {\n  // Call `.abs()` to convert to unsigned\n  let buf = Uint8Array.from(num.abs().toByteArray()) // toByteArray converts to big endian\n\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n  buf = buf[0] === 0 ? buf.slice(1) : buf\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length')\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf])\n  }\n\n  return uint8ArrayToString(buf, 'base64url')\n}\n\n// Convert a base64url encoded string to a BigInteger\nexports.base64urlToBigInteger = str => {\n  const buf = exports.base64urlToBuffer(str)\n  return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16)\n}\n\nexports.base64urlToBuffer = (str, len) => {\n  let buf = uint8ArrayFromString(str, 'base64urlpad')\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length')\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf])\n  }\n\n  return buf\n}\n"]},"metadata":{},"sourceType":"script"}