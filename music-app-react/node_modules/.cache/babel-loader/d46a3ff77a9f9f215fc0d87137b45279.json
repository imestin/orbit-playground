{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Block = require('ipld-block');\n\nconst uint8ArrayEquals = require('uint8arrays/equals');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst CONSTANTS = require('./constants');\n\nconst logger = require('./utils').logger;\n\nconst unwantEvent = cid => `unwant:${uint8ArrayToString(cid.multihash, 'base64')}`;\n\nconst blockEvent = cid => `block:${uint8ArrayToString(cid.multihash, 'base64')}`;\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\n\n\nclass Notifications extends EventEmitter {\n  constructor(peerId) {\n    super();\n    this.setMaxListeners(CONSTANTS.maxListeners);\n    this._log = logger(peerId, 'notif');\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n\n\n  hasBlock(block) {\n    const event = blockEvent(block.cid);\n\n    this._log(event);\n\n    this.emit(event, block);\n  }\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {Object} options\n   * @param {AbortSignal} options.abortSignal\n   * @returns {Promise<Block>}\n   */\n\n\n  wantBlock(cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid');\n    }\n\n    const blockEvt = blockEvent(cid);\n    const unwantEvt = unwantEvent(cid);\n\n    this._log(`wantBlock:${cid}`);\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock);\n        reject(new Error(`Block for ${cid} unwanted`));\n      };\n\n      const onBlock = block => {\n        this.removeListener(unwantEvt, onUnwant);\n\n        if (!uint8ArrayEquals(cid.multihash, block.cid.multihash)) {\n          // wrong block\n          return reject(new Error(`Incorrect block received for ${cid}`));\n        } else if (cid.version !== block.cid.version || cid.codec !== block.cid.codec) {\n          // right block but wrong version or codec\n          block = new Block(block.data, cid);\n        }\n\n        resolve(block);\n      };\n\n      this.once(unwantEvt, onUnwant);\n      this.once(blockEvt, onBlock);\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock);\n          this.removeListener(unwantEvt, onUnwant);\n          reject(new Error(`Want for ${cid} aborted`));\n        });\n      }\n    });\n  }\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n\n\n  unwantBlock(cid) {\n    const event = unwantEvent(cid);\n\n    this._log(event);\n\n    this.emit(event);\n  }\n\n}\n\nmodule.exports = Notifications;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-bitswap/src/notifications.js"],"names":["EventEmitter","require","Block","uint8ArrayEquals","uint8ArrayToString","CONSTANTS","logger","unwantEvent","cid","multihash","blockEvent","Notifications","constructor","peerId","setMaxListeners","maxListeners","_log","hasBlock","block","event","emit","wantBlock","options","Error","blockEvt","unwantEvt","Promise","resolve","reject","onUnwant","removeListener","onBlock","version","codec","data","once","signal","addEventListener","unwantBlock","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst Block = require('ipld-block')\nconst uint8ArrayEquals = require('uint8arrays/equals')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\nconst CONSTANTS = require('./constants')\nconst logger = require('./utils').logger\n\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash, 'base64')}`\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash, 'base64')}`\n\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\nclass Notifications extends EventEmitter {\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n  hasBlock (block) {\n    const event = blockEvent(block.cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {Object} options\n   * @param {AbortSignal} options.abortSignal\n   * @returns {Promise<Block>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n      const onBlock = (block) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        if (!uint8ArrayEquals(cid.multihash, block.cid.multihash)) {\n          // wrong block\n          return reject(new Error(`Incorrect block received for ${cid}`))\n        } else if (cid.version !== block.cid.version || cid.codec !== block.cid.codec) {\n          // right block but wrong version or codec\n          block = new Block(block.data, cid)\n        }\n\n        resolve(block)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n\nmodule.exports = Notifications\n"]},"metadata":{},"sourceType":"script"}