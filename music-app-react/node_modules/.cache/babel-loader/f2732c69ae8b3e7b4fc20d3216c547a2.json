{"ast":null,"code":"'use strict';\n\nconst pkg = require('../../../package.json');\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n/**\n * @typedef {object} VersionObj - An object with the version of the implementation, the commit and the Repo. `js-ipfs` instances will also return the version of `interface-ipfs-core` and `ipfs-http-client` supported by this node\n * @property {string} version\n * @property {string} repo\n * @property {string} [commit]\n * @property {string} [interface-ipfs-core]\n * @property {string} [ipfs-http-client]\n */\n\n/**\n * Returns the implementation version\n * @template {Record<string, any>} ExtraOptions\n * @callback Version\n * @param {import('../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<VersionObj>}\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * @type {Version<{}>}\n   */\n  async function version(options) {\n    const repoVersion = await repo.version.get(options);\n    return {\n      version: pkg.version,\n      repo: repoVersion,\n      commit: pkg.gitHead || '',\n      // is defined in published versions,\n      'interface-ipfs-core': pkg.devDependencies['interface-ipfs-core'],\n      'ipfs-http-client': pkg.dependencies['ipfs-http-client']\n    };\n  }\n\n  return withTimeoutOption(version);\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/version.js"],"names":["pkg","require","withTimeoutOption","module","exports","repo","version","options","repoVersion","get","commit","gitHead","devDependencies","dependencies"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,UAAD,CAArC;AAEA;;;;;;;;;AASA;;;;;;;;;AAQAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B;;AACA;;;AAGA,iBAAeC,OAAf,CAAwBC,OAAxB,EAAiC;AAC/B,UAAMC,WAAW,GAAG,MAAMH,IAAI,CAACC,OAAL,CAAaG,GAAb,CAAiBF,OAAjB,CAA1B;AAEA,WAAO;AACLD,MAAAA,OAAO,EAAEN,GAAG,CAACM,OADR;AAELD,MAAAA,IAAI,EAAEG,WAFD;AAGLE,MAAAA,MAAM,EAAEV,GAAG,CAACW,OAAJ,IAAe,EAHlB;AAGsB;AAC3B,6BAAuBX,GAAG,CAACY,eAAJ,CAAoB,qBAApB,CAJlB;AAKL,0BAAoBZ,GAAG,CAACa,YAAJ,CAAiB,kBAAjB;AALf,KAAP;AAOD;;AAED,SAAOX,iBAAiB,CAACI,OAAD,CAAxB;AACD,CAlBD","sourcesContent":["'use strict'\n\nconst pkg = require('../../../package.json')\nconst { withTimeoutOption } = require('../utils')\n\n/**\n * @typedef {object} VersionObj - An object with the version of the implementation, the commit and the Repo. `js-ipfs` instances will also return the version of `interface-ipfs-core` and `ipfs-http-client` supported by this node\n * @property {string} version\n * @property {string} repo\n * @property {string} [commit]\n * @property {string} [interface-ipfs-core]\n * @property {string} [ipfs-http-client]\n */\n\n/**\n * Returns the implementation version\n * @template {Record<string, any>} ExtraOptions\n * @callback Version\n * @param {import('../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<VersionObj>}\n */\n\nmodule.exports = ({ repo }) => {\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * @type {Version<{}>}\n   */\n  async function version (options) {\n    const repoVersion = await repo.version.get(options)\n\n    return {\n      version: pkg.version,\n      repo: repoVersion,\n      commit: pkg.gitHead || '', // is defined in published versions,\n      'interface-ipfs-core': pkg.devDependencies['interface-ipfs-core'],\n      'ipfs-http-client': pkg.dependencies['ipfs-http-client']\n    }\n  }\n\n  return withTimeoutOption(version)\n}\n"]},"metadata":{},"sourceType":"script"}