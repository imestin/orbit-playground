{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IWantTracer = void 0;\n\nconst constants_1 = require(\"./constants\"); // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\n\nconst pubsubErrors = require(\"libp2p-interfaces/src/pubsub/errors\");\n\nconst {\n  ERR_INVALID_SIGNATURE,\n  ERR_MISSING_SIGNATURE\n} = pubsubErrors.codes;\n/**\n * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize\n * peers who don't follow up on IWANT requests after an IHAVE advertisement.\n * The tracking of promises is probabilistic to avoid using too much memory.\n *\n * Note: Do not confuse these 'promises' with JS Promise objects.\n * These 'promises' are merely expectations of a peer's behavior.\n */\n\nclass IWantTracer {\n  constructor(getMsgId) {\n    this.getMsgId = getMsgId;\n    this.promises = new Map();\n  }\n  /**\n   * Track a promise to deliver a message from a list of msgIDs we are requesting\n   * @param {string} p peer id\n   * @param {string[]} msgIds\n   * @returns {void}\n   */\n\n\n  addPromise(p, msgIds) {\n    // pick msgId randomly from the list\n    const ix = Math.floor(Math.random() * msgIds.length);\n    const msgId = msgIds[ix];\n    let peers = this.promises.get(msgId);\n\n    if (!peers) {\n      peers = new Map();\n      this.promises.set(msgId, peers);\n    }\n\n    if (!peers.has(p)) {\n      peers.set(p, Date.now() + constants_1.GossipsubIWantFollowupTime);\n    }\n  }\n  /**\n   * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.\n   * @returns {Map<string, number>}\n   */\n\n\n  getBrokenPromises() {\n    const now = Date.now();\n    const result = new Map();\n    this.promises.forEach((peers, msgId) => {\n      peers.forEach((expire, p) => {\n        // the promise has been broken\n        if (expire < now) {\n          // add 1 to result\n          result.set(p, (result.get(p) || 0) + 1); // delete from tracked promises\n\n          peers.delete(p);\n        }\n      }); // clean up empty promises for a msgId\n\n      if (!peers.size) {\n        this.promises.delete(msgId);\n      }\n    });\n    return result;\n  }\n  /**\n   * Someone delivered a message, stop tracking promises for it\n   * @param {InMessage} msg\n   * @returns {void}\n   */\n\n\n  deliverMessage(msg) {\n    const msgId = this.getMsgId(msg);\n    this.promises.delete(msgId);\n  }\n  /**\n   * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,\n   * unless its an obviously invalid message.\n   * @param {InMessage} msg\n   * @returns {void}\n   */\n\n\n  rejectMessage(msg, reason) {\n    switch (reason) {\n      case ERR_INVALID_SIGNATURE:\n      case ERR_MISSING_SIGNATURE:\n        return;\n    }\n\n    const msgId = this.getMsgId(msg);\n    this.promises.delete(msgId);\n  }\n\n  clear() {\n    this.promises.clear();\n  }\n\n}\n\nexports.IWantTracer = IWantTracer;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/libp2p-gossipsub/src/tracer.js"],"names":["Object","defineProperty","exports","value","IWantTracer","constants_1","require","pubsubErrors","ERR_INVALID_SIGNATURE","ERR_MISSING_SIGNATURE","codes","constructor","getMsgId","promises","Map","addPromise","p","msgIds","ix","Math","floor","random","length","msgId","peers","get","set","has","Date","now","GossipsubIWantFollowupTime","getBrokenPromises","result","forEach","expire","delete","size","deliverMessage","msg","rejectMessage","reason","clear"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IWantTracer = void 0;\nconst constants_1 = require(\"./constants\");\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst pubsubErrors = require(\"libp2p-interfaces/src/pubsub/errors\");\nconst { ERR_INVALID_SIGNATURE, ERR_MISSING_SIGNATURE } = pubsubErrors.codes;\n/**\n * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize\n * peers who don't follow up on IWANT requests after an IHAVE advertisement.\n * The tracking of promises is probabilistic to avoid using too much memory.\n *\n * Note: Do not confuse these 'promises' with JS Promise objects.\n * These 'promises' are merely expectations of a peer's behavior.\n */\nclass IWantTracer {\n    constructor(getMsgId) {\n        this.getMsgId = getMsgId;\n        this.promises = new Map();\n    }\n    /**\n     * Track a promise to deliver a message from a list of msgIDs we are requesting\n     * @param {string} p peer id\n     * @param {string[]} msgIds\n     * @returns {void}\n     */\n    addPromise(p, msgIds) {\n        // pick msgId randomly from the list\n        const ix = Math.floor(Math.random() * msgIds.length);\n        const msgId = msgIds[ix];\n        let peers = this.promises.get(msgId);\n        if (!peers) {\n            peers = new Map();\n            this.promises.set(msgId, peers);\n        }\n        if (!peers.has(p)) {\n            peers.set(p, Date.now() + constants_1.GossipsubIWantFollowupTime);\n        }\n    }\n    /**\n     * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.\n     * @returns {Map<string, number>}\n     */\n    getBrokenPromises() {\n        const now = Date.now();\n        const result = new Map();\n        this.promises.forEach((peers, msgId) => {\n            peers.forEach((expire, p) => {\n                // the promise has been broken\n                if (expire < now) {\n                    // add 1 to result\n                    result.set(p, (result.get(p) || 0) + 1);\n                    // delete from tracked promises\n                    peers.delete(p);\n                }\n            });\n            // clean up empty promises for a msgId\n            if (!peers.size) {\n                this.promises.delete(msgId);\n            }\n        });\n        return result;\n    }\n    /**\n     * Someone delivered a message, stop tracking promises for it\n     * @param {InMessage} msg\n     * @returns {void}\n     */\n    deliverMessage(msg) {\n        const msgId = this.getMsgId(msg);\n        this.promises.delete(msgId);\n    }\n    /**\n     * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,\n     * unless its an obviously invalid message.\n     * @param {InMessage} msg\n     * @returns {void}\n     */\n    rejectMessage(msg, reason) {\n        switch (reason) {\n            case ERR_INVALID_SIGNATURE:\n            case ERR_MISSING_SIGNATURE:\n                return;\n        }\n        const msgId = this.getMsgId(msg);\n        this.promises.delete(msgId);\n    }\n    clear() {\n        this.promises.clear();\n    }\n}\nexports.IWantTracer = IWantTracer;\n"]},"metadata":{},"sourceType":"script"}