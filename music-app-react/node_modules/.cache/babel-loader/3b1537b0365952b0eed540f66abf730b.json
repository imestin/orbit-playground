{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst errCode = require('err-code');\n\nconst IPFS_PREFIX = '/ipfs/';\n\nconst toCidAndPath = string => {\n  if (string instanceof Uint8Array) {\n    try {\n      string = new CID(string);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n\n  if (CID.isCID(string)) {\n    return {\n      cid: string,\n      path: undefined\n    };\n  }\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n\n  const parts = string.split('/');\n  let cid;\n  let path;\n\n  try {\n    cid = new CID(parts.shift());\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID');\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`;\n  }\n\n  return {\n    cid,\n    path\n  };\n};\n\nmodule.exports = toCidAndPath;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-core-utils/src/to-cid-and-path.js"],"names":["CID","require","errCode","IPFS_PREFIX","toCidAndPath","string","Uint8Array","err","isCID","cid","path","undefined","startsWith","substring","length","parts","split","shift","join","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAME,WAAW,GAAG,QAApB;;AAEA,MAAMC,YAAY,GAAIC,MAAD,IAAY;AAC/B,MAAIA,MAAM,YAAYC,UAAtB,EAAkC;AAChC,QAAI;AACFD,MAAAA,MAAM,GAAG,IAAIL,GAAJ,CAAQK,MAAR,CAAT;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,YAAML,OAAO,CAACK,GAAD,EAAM,iBAAN,CAAb;AACD;AACF;;AAED,MAAIP,GAAG,CAACQ,KAAJ,CAAUH,MAAV,CAAJ,EAAuB;AACrB,WAAO;AACLI,MAAAA,GAAG,EAAEJ,MADA;AAELK,MAAAA,IAAI,EAAEC;AAFD,KAAP;AAID;;AAED,MAAIN,MAAM,CAACO,UAAP,CAAkBT,WAAlB,CAAJ,EAAoC;AAClCE,IAAAA,MAAM,GAAGA,MAAM,CAACQ,SAAP,CAAiBV,WAAW,CAACW,MAA7B,CAAT;AACD;;AAED,QAAMC,KAAK,GAAGV,MAAM,CAACW,KAAP,CAAa,GAAb,CAAd;AACA,MAAIP,GAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAI;AACFD,IAAAA,GAAG,GAAG,IAAIT,GAAJ,CAAQe,KAAK,CAACE,KAAN,EAAR,CAAN;AACD,GAFD,CAEE,OAAOV,GAAP,EAAY;AACZ,UAAML,OAAO,CAACK,GAAD,EAAM,iBAAN,CAAb;AACD;;AAED,MAAIQ,KAAK,CAACD,MAAV,EAAkB;AAChBJ,IAAAA,IAAI,GAAI,IAAGK,KAAK,CAACG,IAAN,CAAW,GAAX,CAAgB,EAA3B;AACD;;AAED,SAAO;AACLT,IAAAA,GADK;AAELC,IAAAA;AAFK,GAAP;AAID,CAtCD;;AAwCAS,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst errCode = require('err-code')\n\nconst IPFS_PREFIX = '/ipfs/'\n\nconst toCidAndPath = (string) => {\n  if (string instanceof Uint8Array) {\n    try {\n      string = new CID(string)\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  if (CID.isCID(string)) {\n    return {\n      cid: string,\n      path: undefined\n    }\n  }\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length)\n  }\n\n  const parts = string.split('/')\n  let cid\n  let path\n\n  try {\n    cid = new CID(parts.shift())\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`\n  }\n\n  return {\n    cid,\n    path\n  }\n}\n\nmodule.exports = toCidAndPath\n"]},"metadata":{},"sourceType":"script"}