{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst multihash = require('multihashes');\n\nconst crypto = require('./crypto');\n\nconst equals = require('uint8arrays/equals');\n/**\n * Hash the given `buf` using the algorithm specified by `alg`.\n * @param {Uint8Array} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Uint8Array>}\n */\n\n\nasync function Multihashing(buf, alg, length) {\n  const digest = await Multihashing.digest(buf, alg, length);\n  return multihash.encode(digest, alg, length);\n}\n/**\n * Expose multihash itself, to avoid silly double requires.\n */\n\n\nMultihashing.multihash = multihash;\n/**\n * @param {Uint8Array} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Uint8Array>}\n */\n\nMultihashing.digest = async (buf, alg, length) => {\n  const hash = Multihashing.createHash(alg);\n  const digest = await hash(buf);\n  return length ? digest.slice(0, length) : digest;\n};\n/**\n * Creates a function that hashes with the given algorithm\n *\n * @param {string|number} alg - The algorithm to use eg 'sha1'\n *\n * @returns {function} - The hash function corresponding to `alg`\n */\n\n\nMultihashing.createHash = function (alg) {\n  if (!alg) {\n    throw errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED');\n  }\n\n  alg = multihash.coerceCode(alg);\n\n  if (!Multihashing.functions[alg]) {\n    throw errcode(new Error(`multihash function '${alg}' not yet supported`), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED');\n  }\n\n  return Multihashing.functions[alg];\n};\n/**\n * Mapping of multihash codes to their hashing functions.\n * @type {Object}\n */\n\n\nMultihashing.functions = {\n  // identity\n  0x00: crypto.identity,\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}; // add blake functions\n\ncrypto.addBlake(Multihashing.functions);\n\nMultihashing.validate = async (buf, hash) => {\n  const newHash = await Multihashing(buf, multihash.decode(hash).name);\n  return equals(hash, newHash);\n};\n\nmodule.exports = Multihashing;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/multihashing-async/src/index.js"],"names":["errcode","require","multihash","crypto","equals","Multihashing","buf","alg","length","digest","encode","hash","createHash","slice","Error","coerceCode","functions","identity","sha1","sha2256","sha2512","sha3512","sha3384","sha3256","sha3224","shake128","shake256","keccak224","keccak256","keccak384","keccak512","murmur3128","murmur332","dblSha2256","addBlake","validate","newHash","decode","name","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst multihash = require('multihashes')\nconst crypto = require('./crypto')\nconst equals = require('uint8arrays/equals')\n\n/**\n * Hash the given `buf` using the algorithm specified by `alg`.\n * @param {Uint8Array} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Uint8Array>}\n */\nasync function Multihashing (buf, alg, length) {\n  const digest = await Multihashing.digest(buf, alg, length)\n  return multihash.encode(digest, alg, length)\n}\n\n/**\n * Expose multihash itself, to avoid silly double requires.\n */\nMultihashing.multihash = multihash\n\n/**\n * @param {Uint8Array} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Uint8Array>}\n */\nMultihashing.digest = async (buf, alg, length) => {\n  const hash = Multihashing.createHash(alg)\n  const digest = await hash(buf)\n  return length ? digest.slice(0, length) : digest\n}\n\n/**\n * Creates a function that hashes with the given algorithm\n *\n * @param {string|number} alg - The algorithm to use eg 'sha1'\n *\n * @returns {function} - The hash function corresponding to `alg`\n */\nMultihashing.createHash = function (alg) {\n  if (!alg) {\n    throw errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED')\n  }\n\n  alg = multihash.coerceCode(alg)\n  if (!Multihashing.functions[alg]) {\n    throw errcode(new Error(`multihash function '${alg}' not yet supported`), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED')\n  }\n\n  return Multihashing.functions[alg]\n}\n\n/**\n * Mapping of multihash codes to their hashing functions.\n * @type {Object}\n */\nMultihashing.functions = {\n  // identity\n  0x00: crypto.identity,\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}\n\n// add blake functions\ncrypto.addBlake(Multihashing.functions)\n\nMultihashing.validate = async (buf, hash) => {\n  const newHash = await Multihashing(buf, multihash.decode(hash).name)\n\n  return equals(hash, newHash)\n}\n\nmodule.exports = Multihashing\n"]},"metadata":{},"sourceType":"script"}