{"ast":null,"code":"'use strict';\n\nconst {\n  cleanCid\n} = require('./utils');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('ipld-block')} Block\n */\n\n/**\n * @typedef {object} PreloadOptions\n * @property {boolean} [preload] - (default: `true`)\n */\n\n/**\n * Get a raw IPFS block.\n * @template {Record<string, any>} ExtraOptions\n * @callback BlockGet\n * @param {CID | string | Buffer} cid - A CID that corresponds to the desired block\n * @param {import('../../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<Block>} - A Block type object, containing both the data and the hash of the block\n */\n\n\nmodule.exports = ({\n  blockService,\n  preload\n}) => {\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * @type {BlockGet<PreloadOptions>}\n   */\n  async function get(cid, options) {\n    // eslint-disable-line require-await\n    options = options || {};\n    cid = cleanCid(cid);\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return blockService.get(cid, options);\n  }\n\n  return withTimeoutOption(get);\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/block/get.js"],"names":["cleanCid","require","withTimeoutOption","module","exports","blockService","preload","get","cid","options"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,aAAD,CAArC;AAEA;;;;;AAKA;;;;;AAKA;;;;;;;;;;AASAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAA+B;AAC9C;;AACA;;;AAGA,iBAAeC,GAAf,CAAoBC,GAApB,EAAyBC,OAAzB,EAAkC;AAAE;AAClCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAD,IAAAA,GAAG,GAAGR,QAAQ,CAACQ,GAAD,CAAd;;AAEA,QAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD;;AAED,WAAOH,YAAY,CAACE,GAAb,CAAiBC,GAAjB,EAAsBC,OAAtB,CAAP;AACD;;AAED,SAAOP,iBAAiB,CAACK,GAAD,CAAxB;AACD,CAjBD","sourcesContent":["'use strict'\n\nconst { cleanCid } = require('./utils')\nconst { withTimeoutOption } = require('../../utils')\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('ipld-block')} Block\n */\n\n/**\n * @typedef {object} PreloadOptions\n * @property {boolean} [preload] - (default: `true`)\n */\n\n/**\n * Get a raw IPFS block.\n * @template {Record<string, any>} ExtraOptions\n * @callback BlockGet\n * @param {CID | string | Buffer} cid - A CID that corresponds to the desired block\n * @param {import('../../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<Block>} - A Block type object, containing both the data and the hash of the block\n */\n\nmodule.exports = ({ blockService, preload }) => {\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * @type {BlockGet<PreloadOptions>}\n   */\n  async function get (cid, options) { // eslint-disable-line require-await\n    options = options || {}\n    cid = cleanCid(cid)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return blockService.get(cid, options)\n  }\n\n  return withTimeoutOption(get)\n}\n"]},"metadata":{},"sourceType":"script"}