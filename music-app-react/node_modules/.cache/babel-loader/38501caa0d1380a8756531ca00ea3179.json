{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGNode = dagPB.DAGNode;\n\nconst multicodec = require('multicodec');\n\nconst Unixfs = require('ipfs-unixfs');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  return withTimeoutOption(async function _new(options = {}) {\n    let data;\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = new Unixfs('directory').marshal();\n      } else {\n        throw new Error('unknown template');\n      }\n    } else {\n      data = new Uint8Array(0);\n    }\n\n    const node = new DAGNode(data);\n    const cid = await ipld.put(node, multicodec.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: multicodec.SHA2_256,\n      signal: options.signal\n    });\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return cid;\n  });\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/object/new.js"],"names":["dagPB","require","DAGNode","multicodec","Unixfs","withTimeoutOption","module","exports","ipld","preload","_new","options","data","template","marshal","Error","Uint8Array","node","cid","put","DAG_PB","cidVersion","hashAlg","SHA2_256","signal"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACE,OAAtB;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAwBJ,OAAO,CAAC,aAAD,CAArC;;AAEAK,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC,SAAOJ,iBAAiB,CAAC,eAAeK,IAAf,CAAqBC,OAAO,GAAG,EAA/B,EAAmC;AAC1D,QAAIC,IAAJ;;AAEA,QAAID,OAAO,CAACE,QAAZ,EAAsB;AACpB,UAAIF,OAAO,CAACE,QAAR,KAAqB,YAAzB,EAAuC;AACrCD,QAAAA,IAAI,GAAI,IAAIR,MAAJ,CAAW,WAAX,CAAD,CAA0BU,OAA1B,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AACF,KAND,MAMO;AACLH,MAAAA,IAAI,GAAG,IAAII,UAAJ,CAAe,CAAf,CAAP;AACD;;AAED,UAAMC,IAAI,GAAG,IAAIf,OAAJ,CAAYU,IAAZ,CAAb;AAEA,UAAMM,GAAG,GAAG,MAAMV,IAAI,CAACW,GAAL,CAASF,IAAT,EAAed,UAAU,CAACiB,MAA1B,EAAkC;AAClDC,MAAAA,UAAU,EAAE,CADsC;AAElDC,MAAAA,OAAO,EAAEnB,UAAU,CAACoB,QAF8B;AAGlDC,MAAAA,MAAM,EAAEb,OAAO,CAACa;AAHkC,KAAlC,CAAlB;;AAMA,QAAIb,OAAO,CAACF,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACS,GAAD,CAAP;AACD;;AAED,WAAOA,GAAP;AACD,GA1BuB,CAAxB;AA2BD,CA5BD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst multicodec = require('multicodec')\nconst Unixfs = require('ipfs-unixfs')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ ipld, preload }) => {\n  return withTimeoutOption(async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new Unixfs('directory')).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    } else {\n      data = new Uint8Array(0)\n    }\n\n    const node = new DAGNode(data)\n\n    const cid = await ipld.put(node, multicodec.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: multicodec.SHA2_256,\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  })\n}\n"]},"metadata":{},"sourceType":"script"}