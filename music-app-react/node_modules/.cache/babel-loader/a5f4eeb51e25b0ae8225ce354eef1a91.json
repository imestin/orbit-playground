{"ast":null,"code":"'use strict';\n\nconst multibase = require('multibase');\n\nconst ciphers = require('../ciphers/aes-gcm');\n\nmodule.exports = {\n  /**\n   * Attempts to decrypt a base64 encoded PrivateKey string\n   * with the given password. The privateKey must have been exported\n   * using the same password and underlying cipher (aes-gcm)\n   *\n   * @param {string} privateKey A base64 encoded encrypted key\n   * @param {string} password\n   * @returns {Promise<Uint8Array>} The private key protobuf\n   */\n  import: async function (privateKey, password) {\n    const base64 = multibase.names.base64;\n    const encryptedKey = base64.decode(privateKey);\n    const cipher = ciphers.create();\n    return await cipher.decrypt(encryptedKey, password);\n  }\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/libp2p-kad-dht/node_modules/libp2p-crypto/src/keys/importer.js"],"names":["multibase","require","ciphers","module","exports","import","privateKey","password","base64","names","encryptedKey","decode","cipher","create","decrypt"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;;;;AASAC,EAAAA,MAAM,EAAE,gBAAgBC,UAAhB,EAA4BC,QAA5B,EAAsC;AAC5C,UAAMC,MAAM,GAAGR,SAAS,CAACS,KAAV,CAAgBD,MAA/B;AACA,UAAME,YAAY,GAAGF,MAAM,CAACG,MAAP,CAAcL,UAAd,CAArB;AACA,UAAMM,MAAM,GAAGV,OAAO,CAACW,MAAR,EAAf;AACA,WAAO,MAAMD,MAAM,CAACE,OAAP,CAAeJ,YAAf,EAA6BH,QAA7B,CAAb;AACD;AAfc,CAAjB","sourcesContent":["'use strict'\n\nconst multibase = require('multibase')\nconst ciphers = require('../ciphers/aes-gcm')\n\nmodule.exports = {\n  /**\n   * Attempts to decrypt a base64 encoded PrivateKey string\n   * with the given password. The privateKey must have been exported\n   * using the same password and underlying cipher (aes-gcm)\n   *\n   * @param {string} privateKey A base64 encoded encrypted key\n   * @param {string} password\n   * @returns {Promise<Uint8Array>} The private key protobuf\n   */\n  import: async function (privateKey, password) {\n    const base64 = multibase.names.base64\n    const encryptedKey = base64.decode(privateKey)\n    const cipher = ciphers.create()\n    return await cipher.decrypt(encryptedKey, password)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}