{"ast":null,"code":"'use strict';\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst CID = require('cids');\n\nconst multibase = require('multibase');\n\nconst errcode = require('err-code');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\n\n\nexports.cidToKey = cid => {\n  if (!CID.isCID(cid)) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  return new Key('/' + uint8ArrayToString(multibase.encode('base32', cid.multihash)).slice(1).toUpperCase(), false);\n};\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n * @returns {CID}\n */\n\n\nexports.keyToCid = key => {\n  // Block key is of the form /<base32 encoded string>\n  return new CID(1, 'raw', multibase.decode('b' + key.toString().slice(1).toLowerCase()));\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-repo/src/blockstore-utils.js"],"names":["Key","require","CID","multibase","errcode","uint8ArrayToString","exports","cidToKey","cid","isCID","Error","encode","multihash","slice","toUpperCase","keyToCid","key","decode","toString","toLowerCase"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,uBAAD,CAAlC;AAEA;;;;;;;;AAMAK,OAAO,CAACC,QAAR,GAAmBC,GAAG,IAAI;AACxB,MAAI,CAACN,GAAG,CAACO,KAAJ,CAAUD,GAAV,CAAL,EAAqB;AACnB,UAAMJ,OAAO,CAAC,IAAIM,KAAJ,CAAU,iBAAV,CAAD,EAA+B,iBAA/B,CAAb;AACD;;AAED,SAAO,IAAIV,GAAJ,CAAQ,MAAMK,kBAAkB,CAACF,SAAS,CAACQ,MAAV,CAAiB,QAAjB,EAA2BH,GAAG,CAACI,SAA/B,CAAD,CAAlB,CAA8DC,KAA9D,CAAoE,CAApE,EAAuEC,WAAvE,EAAd,EAAoG,KAApG,CAAP;AACD,CAND;AAQA;;;;;;;;;;AAQAR,OAAO,CAACS,QAAR,GAAmBC,GAAG,IAAI;AACxB;AACA,SAAO,IAAId,GAAJ,CAAQ,CAAR,EAAW,KAAX,EAAkBC,SAAS,CAACc,MAAV,CAAiB,MAAMD,GAAG,CAACE,QAAJ,GAAeL,KAAf,CAAqB,CAArB,EAAwBM,WAAxB,EAAvB,CAAlB,CAAP;AACD,CAHD","sourcesContent":["'use strict'\n\nconst { Key } = require('interface-datastore')\nconst CID = require('cids')\nconst multibase = require('multibase')\nconst errcode = require('err-code')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\nexports.cidToKey = cid => {\n  if (!CID.isCID(cid)) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  return new Key('/' + uint8ArrayToString(multibase.encode('base32', cid.multihash)).slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n * @returns {CID}\n */\nexports.keyToCid = key => {\n  // Block key is of the form /<base32 encoded string>\n  return new CID(1, 'raw', multibase.decode('b' + key.toString().slice(1).toLowerCase()))\n}\n"]},"metadata":{},"sourceType":"script"}