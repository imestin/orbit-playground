{"ast":null,"code":"'use strict';\n\nconst WS = require('libp2p-websockets');\n\nconst WebRTCStar = require('libp2p-webrtc-star');\n\nconst Multiplex = require('libp2p-mplex');\n\nconst {\n  NOISE\n} = require('libp2p-noise');\n\nconst SECIO = require('libp2p-secio');\n\nconst KadDHT = require('libp2p-kad-dht');\n\nconst GossipSub = require('libp2p-gossipsub');\n\nconst ipnsUtils = require('../ipns/routing/utils');\n\nmodule.exports = () => {\n  return {\n    dialer: {\n      maxParallelDials: 150,\n      // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4,\n      // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3 // 10 second dial timeout per peer dial\n\n    },\n    modules: {\n      transport: [WS, WebRTCStar],\n      streamMuxer: [Multiplex],\n      connEncryption: [NOISE, SECIO],\n      peerDiscovery: [],\n      dht: KadDHT,\n      pubsub: GossipSub\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        // [Bootstrap.tag] = 'bootstrap'\n        bootstrap: {\n          enabled: true\n        },\n        // [WebRTCStar.discovery.tag]\n        webRTCStar: {\n          enabled: true\n        }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: false,\n        clientMode: true,\n        randomWalk: {\n          enabled: false\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      }\n    },\n    metrics: {\n      enabled: true\n    },\n    peerStore: {\n      persistence: true,\n      threshold: 1\n    }\n  };\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/runtime/libp2p-browser.js"],"names":["WS","require","WebRTCStar","Multiplex","NOISE","SECIO","KadDHT","GossipSub","ipnsUtils","module","exports","dialer","maxParallelDials","maxDialsPerPeer","dialTimeout","modules","transport","streamMuxer","connEncryption","peerDiscovery","dht","pubsub","config","autoDial","bootstrap","enabled","webRTCStar","kBucketSize","clientMode","randomWalk","validators","ipns","validator","selectors","selector","emitSelf","metrics","peerStore","persistence","threshold"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,mBAAD,CAAlB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAYH,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,uBAAD,CAAzB;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,MAAM;AACrB,SAAO;AACLC,IAAAA,MAAM,EAAE;AACNC,MAAAA,gBAAgB,EAAE,GADZ;AACiB;AACvBC,MAAAA,eAAe,EAAE,CAFX;AAEc;AACpBC,MAAAA,WAAW,EAAE,IAHP,CAGY;;AAHZ,KADH;AAMLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,CACThB,EADS,EAETE,UAFS,CADJ;AAKPe,MAAAA,WAAW,EAAE,CACXd,SADW,CALN;AAQPe,MAAAA,cAAc,EAAE,CACdd,KADc,EAEdC,KAFc,CART;AAYPc,MAAAA,aAAa,EAAE,EAZR;AAaPC,MAAAA,GAAG,EAAEd,MAbE;AAcPe,MAAAA,MAAM,EAAEd;AAdD,KANJ;AAsBLe,IAAAA,MAAM,EAAE;AACNH,MAAAA,aAAa,EAAE;AACbI,QAAAA,QAAQ,EAAE,IADG;AAEb;AACAC,QAAAA,SAAS,EAAE;AACTC,UAAAA,OAAO,EAAE;AADA,SAHE;AAMb;AACAC,QAAAA,UAAU,EAAE;AACVD,UAAAA,OAAO,EAAE;AADC;AAPC,OADT;AAYNL,MAAAA,GAAG,EAAE;AACHO,QAAAA,WAAW,EAAE,EADV;AAEHF,QAAAA,OAAO,EAAE,KAFN;AAGHG,QAAAA,UAAU,EAAE,IAHT;AAIHC,QAAAA,UAAU,EAAE;AACVJ,UAAAA,OAAO,EAAE;AADC,SAJT;AAOHK,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EAAEvB,SAAS,CAACwB;AADN,SAPT;AAUHC,QAAAA,SAAS,EAAE;AACTF,UAAAA,IAAI,EAAEvB,SAAS,CAAC0B;AADP;AAVR,OAZC;AA0BNb,MAAAA,MAAM,EAAE;AACNI,QAAAA,OAAO,EAAE,IADH;AAENU,QAAAA,QAAQ,EAAE;AAFJ;AA1BF,KAtBH;AAqDLC,IAAAA,OAAO,EAAE;AACPX,MAAAA,OAAO,EAAE;AADF,KArDJ;AAwDLY,IAAAA,SAAS,EAAE;AACTC,MAAAA,WAAW,EAAE,IADJ;AAETC,MAAAA,SAAS,EAAE;AAFF;AAxDN,GAAP;AA6DD,CA9DD","sourcesContent":["'use strict'\n\nconst WS = require('libp2p-websockets')\nconst WebRTCStar = require('libp2p-webrtc-star')\nconst Multiplex = require('libp2p-mplex')\nconst { NOISE } = require('libp2p-noise')\nconst SECIO = require('libp2p-secio')\nconst KadDHT = require('libp2p-kad-dht')\nconst GossipSub = require('libp2p-gossipsub')\nconst ipnsUtils = require('../ipns/routing/utils')\n\nmodule.exports = () => {\n  return {\n    dialer: {\n      maxParallelDials: 150, // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4, // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3 // 10 second dial timeout per peer dial\n    },\n    modules: {\n      transport: [\n        WS,\n        WebRTCStar\n      ],\n      streamMuxer: [\n        Multiplex\n      ],\n      connEncryption: [\n        NOISE,\n        SECIO\n      ],\n      peerDiscovery: [],\n      dht: KadDHT,\n      pubsub: GossipSub\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        // [Bootstrap.tag] = 'bootstrap'\n        bootstrap: {\n          enabled: true\n        },\n        // [WebRTCStar.discovery.tag]\n        webRTCStar: {\n          enabled: true\n        }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: false,\n        clientMode: true,\n        randomWalk: {\n          enabled: false\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      }\n    },\n    metrics: {\n      enabled: true\n    },\n    peerStore: {\n      persistence: true,\n      threshold: 1\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}