{"ast":null,"code":"/* eslint-disable require-await */\n'use strict';\n\nconst multihash = require('multihashes');\n\nconst crypto = self.crypto || self.msCrypto;\n\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || !self.crypto && !self.msCrypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n  }\n\n  switch (alg) {\n    case 'sha1':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-1'\n      }, data));\n\n    case 'sha2-256':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-256'\n      }, data));\n\n    case 'sha2-512':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-512'\n      }, data));\n\n    case 'dbl-sha2-256':\n      {\n        const d = await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, data);\n        return new Uint8Array(await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, d));\n      }\n\n    default:\n      throw new Error(`${alg} is not a supported algorithm`);\n  }\n};\n\nmodule.exports = {\n  factory: alg => async data => {\n    return digest(data, alg);\n  },\n  digest,\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg, length);\n    return multihash.encode(h, alg, length);\n  }\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/multihashing-async/src/sha.browser.js"],"names":["multihash","require","crypto","self","msCrypto","digest","data","alg","Error","Uint8Array","subtle","name","d","module","exports","factory","multihashing","buf","length","h","encode"],"mappings":"AAAA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAMC,MAAM,GAAGC,IAAI,CAACD,MAAL,IAAeC,IAAI,CAACC,QAAnC;;AAEA,MAAMC,MAAM,GAAG,OAAOC,IAAP,EAAaC,GAAb,KAAqB;AAClC,MAAI,OAAOJ,IAAP,KAAgB,WAAhB,IAAgC,CAACA,IAAI,CAACD,MAAN,IAAgB,CAACC,IAAI,CAACC,QAA1D,EAAqE;AACnE,UAAM,IAAII,KAAJ,CACJ,2IADI,CAAN;AAGD;;AACD,UAAQD,GAAR;AACE,SAAK,MAAL;AACE,aAAO,IAAIE,UAAJ,CAAe,MAAMP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAArB,EAAwCL,IAAxC,CAArB,CAAP;;AACF,SAAK,UAAL;AACE,aAAO,IAAIG,UAAJ,CAAe,MAAMP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAArB,EAA0CL,IAA1C,CAArB,CAAP;;AACF,SAAK,UAAL;AACE,aAAO,IAAIG,UAAJ,CAAe,MAAMP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAArB,EAA0CL,IAA1C,CAArB,CAAP;;AACF,SAAK,cAAL;AAAqB;AACnB,cAAMM,CAAC,GAAG,MAAMV,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,UAAAA,IAAI,EAAE;AAAR,SAArB,EAA0CL,IAA1C,CAAhB;AACA,eAAO,IAAIG,UAAJ,CAAe,MAAMP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,UAAAA,IAAI,EAAE;AAAR,SAArB,EAA0CC,CAA1C,CAArB,CAAP;AACD;;AACD;AACE,YAAM,IAAIJ,KAAJ,CAAW,GAAED,GAAI,+BAAjB,CAAN;AAZJ;AAcD,CApBD;;AAsBAM,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,OAAO,EAAGR,GAAD,IAAS,MAAOD,IAAP,IAAgB;AAChC,WAAOD,MAAM,CAACC,IAAD,EAAOC,GAAP,CAAb;AACD,GAHc;AAIfF,EAAAA,MAJe;AAKfW,EAAAA,YAAY,EAAE,OAAOC,GAAP,EAAYV,GAAZ,EAAiBW,MAAjB,KAA4B;AACxC,UAAMC,CAAC,GAAG,MAAMd,MAAM,CAACY,GAAD,EAAMV,GAAN,EAAWW,MAAX,CAAtB;AACA,WAAOlB,SAAS,CAACoB,MAAV,CAAiBD,CAAjB,EAAoBZ,GAApB,EAAyBW,MAAzB,CAAP;AACD;AARc,CAAjB","sourcesContent":["/* eslint-disable require-await */\n'use strict'\n\nconst multihash = require('multihashes')\n\nconst crypto = self.crypto || self.msCrypto\n\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {\n    throw new Error(\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\n    )\n  }\n  switch (alg) {\n    case 'sha1':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-1' }, data))\n    case 'sha2-256':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, data))\n    case 'sha2-512':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-512' }, data))\n    case 'dbl-sha2-256': {\n      const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, d))\n    }\n    default:\n      throw new Error(`${alg} is not a supported algorithm`)\n  }\n}\n\nmodule.exports = {\n  factory: (alg) => async (data) => {\n    return digest(data, alg)\n  },\n  digest,\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg, length)\n    return multihash.encode(h, alg, length)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}