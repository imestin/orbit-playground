{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst log = require('debug')('ipfs:mfs:utils:to-async-iterator');\n\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../../utils');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst toAsyncIterator = content => {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = uint8ArrayFromString(content);\n  }\n\n  if (content.length) {\n    log('Content was array-like');\n    return {\n      [Symbol.asyncIterator]: function* bufferContent() {\n        yield content;\n      }\n    };\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob');\n    let index = 0;\n    const iterator = {\n      next: () => {\n        if (index > content.size) {\n          return {\n            done: true\n          };\n        }\n\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, MFS_MAX_CHUNK_SIZE);\n          index += MFS_MAX_CHUNK_SIZE;\n          const reader = new global.FileReader();\n\n          const handleLoad = ev => {\n            reader.removeEventListener('loadend', handleLoad, false);\n\n            if (ev.error) {\n              return reject(ev.error);\n            }\n\n            resolve({\n              done: false,\n              value: new Uint8Array(reader.result, reader.result.byteOffset, reader.result.byteLength)\n            });\n          };\n\n          reader.addEventListener('loadend', handleLoad);\n          reader.readAsArrayBuffer(chunk);\n        });\n      }\n    };\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator;\n      }\n    };\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS');\n};\n\nmodule.exports = toAsyncIterator;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/files/utils/to-async-iterator.js"],"names":["errCode","require","log","MFS_MAX_CHUNK_SIZE","uint8ArrayFromString","toAsyncIterator","content","Error","String","length","Symbol","asyncIterator","bufferContent","iterator","global","Blob","index","next","size","done","Promise","resolve","reject","chunk","slice","reader","FileReader","handleLoad","ev","removeEventListener","error","value","Uint8Array","result","byteOffset","byteLength","addEventListener","readAsArrayBuffer","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst log = require('debug')('ipfs:mfs:utils:to-async-iterator')\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../../utils')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nconst toAsyncIterator = (content) => {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string')\n\n    content = uint8ArrayFromString(content)\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n\n    let index = 0\n\n    const iterator = {\n      next: () => {\n        if (index > content.size) {\n          return {\n            done: true\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, MFS_MAX_CHUNK_SIZE)\n          index += MFS_MAX_CHUNK_SIZE\n\n          const reader = new global.FileReader()\n\n          const handleLoad = (ev) => {\n            reader.removeEventListener('loadend', handleLoad, false)\n\n            if (ev.error) {\n              return reject(ev.error)\n            }\n\n            resolve({\n              done: false,\n              value: new Uint8Array(reader.result, reader.result.byteOffset, reader.result.byteLength)\n            })\n          }\n\n          reader.addEventListener('loadend', handleLoad)\n          reader.readAsArrayBuffer(chunk)\n        })\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator\n      }\n    }\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n\nmodule.exports = toAsyncIterator\n"]},"metadata":{},"sourceType":"script"}