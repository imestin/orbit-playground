{"ast":null,"code":"'use strict';\n\nconst forgePbkdf2 = require('node-forge/lib/pbkdf2');\n\nconst forgeUtil = require('node-forge/lib/util');\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\n\n\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n};\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\n\nfunction pbkdf2(password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash];\n\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`);\n  }\n\n  const dek = forgePbkdf2(password, salt, iterations, keySize, hasher);\n  return forgeUtil.encode64(dek);\n}\n\nmodule.exports = pbkdf2;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/libp2p-crypto/src/pbkdf2.js"],"names":["forgePbkdf2","require","forgeUtil","hashName","sha1","pbkdf2","password","salt","iterations","keySize","hash","hasher","Error","dek","encode64","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,uBAAD,CAA3B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;AAEA;;;;;;;;;AAOA,MAAME,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE,MADS;AAEf,cAAY,QAFG;AAGf,cAAY;AAHG,CAAjB;AAMA;;;;;;;;;;;AAUA,SAASC,MAAT,CAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,UAAjC,EAA6CC,OAA7C,EAAsDC,IAAtD,EAA4D;AAC1D,QAAMC,MAAM,GAAGR,QAAQ,CAACO,IAAD,CAAvB;;AACA,MAAI,CAACC,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAW,SAAQF,IAAK,+BAAxB,CAAN;AACD;;AACD,QAAMG,GAAG,GAAGb,WAAW,CACrBM,QADqB,EAErBC,IAFqB,EAGrBC,UAHqB,EAIrBC,OAJqB,EAKrBE,MALqB,CAAvB;AAMA,SAAOT,SAAS,CAACY,QAAV,CAAmBD,GAAnB,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBX,MAAjB","sourcesContent":["'use strict'\n\nconst forgePbkdf2 = require('node-forge/lib/pbkdf2')\nconst forgeUtil = require('node-forge/lib/util')\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash]\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`)\n  }\n  const dek = forgePbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher)\n  return forgeUtil.encode64(dek)\n}\n\nmodule.exports = pbkdf2\n"]},"metadata":{},"sourceType":"script"}