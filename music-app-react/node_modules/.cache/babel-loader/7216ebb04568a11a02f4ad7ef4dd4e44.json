{"ast":null,"code":"var _jsxFileName = \"/home/user/orbit-playground/music-app/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nconst {\n  globSource\n} = require('ipfs');\n\nconst Ipfs = require('ipfs');\n\nconst OrbitDB = require('orbit-db');\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n} // This will create an IPFS node and an OrbitDB database when new instance is created\n\n\nclass NewPiecePlease {\n  constructor(orbitdb, node, piecesDb, user) {\n    this.orbitdb = orbitdb;\n    this.node = node;\n    this.piecesDb = piecesDb;\n    this.user = user;\n  } // This will create OrbitDB instance, and orbitdb folder.\n\n\n  static async create(IPFS, OrbitDB) {\n    const node = await IPFS.create({\n      repo: \"./ipfs\"\n    });\n    const peerInfo = await node.id();\n    const orbitdb = await OrbitDB.createInstance(node);\n    console.log(\"OrbitDB instance created!\"); //orbitdb.identity.publicKey\n\n    const defaultOptions = {\n      accessController: {\n        write: [orbitdb.identity.id]\n      }\n    };\n    console.log(\"orbitdb.identity.publicKey: \", orbitdb.identity.publicKey);\n    const docStoreOptions = { ...defaultOptions,\n      indexBy: 'hash'\n    };\n    console.log(\"docStoreOptions\", docStoreOptions);\n    const piecesDb = await orbitdb.docstore('pieces', docStoreOptions);\n    await piecesDb.load();\n    const user = await orbitdb.kvstore(\"user\", this.defaultOptions);\n    await user.load();\n    await user.set('pieces', piecesDb.id); // Random user id\n\n    const fixtureData = {\n      \"username\": Math.floor(Math.random() * 1000000),\n      \"pieces\": piecesDb.id,\n      \"nodeId\": peerInfo.id\n    };\n    const fixtureKeys = Object.keys(fixtureData);\n\n    for (let i in fixtureKeys) {\n      let key = fixtureKeys[i];\n      console.log(this);\n      if (!user.get(key)) await user.set(key, fixtureData[key]);\n    }\n\n    console.log(\"End of create function.\");\n    return new NewPiecePlease(orbitdb, node, piecesDb, user);\n  } // Because create is not working because of static\n\n\n  createEvents() {\n    this.node.libp2p.on(\"peer:connect\", this.handlePeerConnected.bind(this));\n    console.log(\"Event(s) created.\");\n  }\n\n  async addNewPiece(hash, instrument = \"Piano\") {\n    try {\n      const existingPiece = this.piecesDb.get(hash);\n      console.log(\"existing[0]\", existingPiece[0]);\n      console.log(\"existing?\", existingPiece[0] && true);\n\n      if (existingPiece[0]) {\n        console.log(\"updatePieceByHash will run: \");\n        const cid = await this.updatePieceByHash(hash, instrument);\n        console.log(\"THIS IS THE CID (in addNewPiece-existing): \", cid);\n        return cid;\n      } //console.log(\"accessController: \", this.piecesDb.options.accessController);\n      // The hash is linking to data in IPFS, in this case a pdf file.\n\n\n      const dbName = \"counter.\" + hash.substr(20, 20);\n      const counterDb = await this.orbitdb.counter(dbName, this.defaultOptions);\n      const cid = await this.piecesDb.put({\n        hash: hash,\n        instrument: instrument,\n        counter: counterDb.id\n      });\n      return cid;\n    } catch (err) {\n      console.error(\"Error while adding new piece\");\n      console.error(err);\n    }\n  }\n\n  async updatePieceByHash(hash, instrument = \"Piano\") {\n    try {\n      let piece = await this.getPieceByHash(hash);\n      piece.instrument = instrument;\n      const cid = await this.piecesDb.put(piece);\n      return cid;\n    } catch (err) {\n      console.error(\"Error in updatePieceByHash\");\n      console.error(err);\n    }\n  }\n\n  async deletePieceByHash(hash) {\n    const cid = await this.piecesDb.del(hash);\n    return cid;\n  }\n\n  getAllPiece() {\n    const pieces = this.piecesDb.get('');\n    return pieces;\n  }\n\n  getPieceByHash(hash) {\n    const singlePiece = this.piecesDb.get(hash)[0];\n    return singlePiece;\n  }\n\n  getByInstrument(instrument) {\n    return this.piecesDb.query(piece => piece.instrument === instrument);\n  }\n\n  async uploadFileToIpfs(fileName) {\n    console.log(\"fileName is: \", fileName); //console.log(this.node)\n\n    const file = await this.node.add(globSource('./NOTES.md'), {\n      recursive: true\n    });\n    return file.cid.toString();\n  }\n\n  async getPracticeCount(piece) {\n    const counter = await this.orbitdb.counter(piece.counter);\n    await counter.load();\n    return counter.value;\n  }\n\n  async incrementPracticeCounter(piece) {\n    const counter = await this.orbitdb.counter(piece.counter);\n    const cid = await counter.inc();\n    return cid;\n  }\n\n  async deleteProfileField(key) {\n    const cid = await this.user.del(key);\n    return cid;\n  }\n\n  getAllProfileFields() {\n    return this.user.all;\n  }\n\n  getProfileField(key) {\n    return this.user.get(key);\n  }\n\n  async updateProfile(key, value) {\n    const cid = await this.user.set(key, value);\n    return cid;\n  }\n\n  async getIpfsPeers() {\n    const peers = await this.node.swarm.peers();\n    return peers;\n  }\n\n  async connectToPeer(multiaddr, protocol = \"/p2p-circuit/ipfs/\") {\n    try {\n      console.log(\"swarm.connect: \", protocol + multiaddr);\n      await this.node.swarm.connect(protocol + multiaddr);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  handlePeerConnected(ipfsPeer) {\n    console.log(\"CONNECTED! CONNECTED!\");\n    const ipfsId = ipfsPeer.id._idB58String;\n    console.log(\"ipfsId: \", ipfsId);\n    if (this.onpeerconnect) this.onpeerconnect(ipfsId);\n  }\n\n} // This is exporting the class\n\n\ntry {\n  module.exports = exports = new NewPiecePlease(Ipfs, OrbitDB);\n} catch (e) {\n  window.NPP = new NewPiecePlease(window.IPFS, window.OrbitDB);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      NPP: undefined,\n      DB_ID: null\n    };\n  }\n\n  componentDidMount() {\n    // Creating database instance\n    (async () => {\n      this.setState({\n        NPP: await NewPiecePlease.create(Ipfs, OrbitDB)\n      });\n    })();\n\n    (async () => {\n      do {\n        if (this.state.NPP) {\n          //this.state.NPP._init();\n          console.log(\"Database instance:\", this.state.NPP); //console.log(\"OrbitDB: \", this.state.NPP.OrbitDB);\n\n          console.log(\"orbitdb: \", this.state.NPP.orbitdb); //console.log(\"Table ID: \", this.state.NPP.pieces.id);\n\n          console.log(\"id: \", \"wtf\");\n        } else {\n          console.log(\"Not ready...\");\n          console.log(\"example: \", this.state.NPP.example);\n          console.log(this.state.NPP.node);\n          console.log(this.state.NPP.ready);\n          await sleep(1000);\n        }\n      } while (this.state.NPP.piecesDb.id !== \"hello\");\n    })();\n  }\n\n  componentDidUpdate() {\n    /*this.setState((state, props) => {\n      return {\n        DB_ID: this.state.NPP.pieces.id,\n      }\n    });*/\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    }, \"This is an OrbitDB test.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }\n    }, this.state.DB_ID)));\n  }\n\n}\n\nexport default App;\n;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/src/App.js"],"names":["React","globSource","require","Ipfs","OrbitDB","sleep","ms","Promise","resolve","setTimeout","NewPiecePlease","constructor","orbitdb","node","piecesDb","user","create","IPFS","repo","peerInfo","id","createInstance","console","log","defaultOptions","accessController","write","identity","publicKey","docStoreOptions","indexBy","docstore","load","kvstore","set","fixtureData","Math","floor","random","fixtureKeys","Object","keys","i","key","get","createEvents","libp2p","on","handlePeerConnected","bind","addNewPiece","hash","instrument","existingPiece","cid","updatePieceByHash","dbName","substr","counterDb","counter","put","err","error","piece","getPieceByHash","deletePieceByHash","del","getAllPiece","pieces","singlePiece","getByInstrument","query","uploadFileToIpfs","fileName","file","add","recursive","toString","getPracticeCount","value","incrementPracticeCounter","inc","deleteProfileField","getAllProfileFields","all","getProfileField","updateProfile","getIpfsPeers","peers","swarm","connectToPeer","multiaddr","protocol","connect","e","ipfsPeer","ipfsId","_idB58String","onpeerconnect","module","exports","window","NPP","App","Component","props","state","undefined","DB_ID","componentDidMount","setState","example","ready","componentDidUpdate","render","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst { globSource } = require('ipfs');\nconst Ipfs = require('ipfs');\nconst OrbitDB = require('orbit-db');\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// This will create an IPFS node and an OrbitDB database when new instance is created\nclass NewPiecePlease {\n  constructor(orbitdb, node, piecesDb, user) {\n      this.orbitdb = orbitdb;\n      this.node = node;\n      this.piecesDb = piecesDb;\n      this.user = user;\n    }\n\n  // This will create OrbitDB instance, and orbitdb folder.\n  static async create(IPFS, OrbitDB) {\n    const node = await IPFS.create({repo: \"./ipfs\"});\n    const peerInfo = await node.id();\n    const orbitdb = await OrbitDB.createInstance(node);\n    console.log(\"OrbitDB instance created!\");\n    \n    //orbitdb.identity.publicKey\n    const defaultOptions = {\n      accessController: {\n        write: [orbitdb.identity.id]\n      }\n    }\n  \n    console.log(\"orbitdb.identity.publicKey: \", orbitdb.identity.publicKey);\n    const docStoreOptions = { ...defaultOptions, indexBy: 'hash' };\n    console.log(\"docStoreOptions\", docStoreOptions);\n    const piecesDb = await orbitdb.docstore('pieces', docStoreOptions);\n    await piecesDb.load();\n\n    const user = await orbitdb.kvstore(\"user\", this.defaultOptions);\n    await user.load();\n    await user.set('pieces', piecesDb.id);\n\n    // Random user id\n    const fixtureData = {\n        \"username\": Math.floor(Math.random() * 1000000),\n        \"pieces\": piecesDb.id,\n        \"nodeId\": peerInfo.id\n    };\n    const fixtureKeys = Object.keys(fixtureData);\n    for (let i in fixtureKeys) {\n        let key = fixtureKeys[i];\n        console.log(this);\n        if(!user.get(key)) await user.set(key, fixtureData[key]);\n    }\n\n    console.log(\"End of create function.\")\n    return new NewPiecePlease(orbitdb, node, piecesDb, user);\n  }\n  \n  // Because create is not working because of static\n  createEvents() {\n    this.node.libp2p.on(\"peer:connect\", this.handlePeerConnected.bind(this));\n    console.log(\"Event(s) created.\");\n  }\n\n  async addNewPiece(hash, instrument = \"Piano\") {\n    try {\n        const existingPiece = this.piecesDb.get(hash);\n        console.log(\"existing[0]\", existingPiece[0])\n        console.log(\"existing?\", existingPiece[0] && true);\n        if (existingPiece[0]) {\n            console.log(\"updatePieceByHash will run: \");\n            const cid = await this.updatePieceByHash(hash, instrument);\n            console.log(\"THIS IS THE CID (in addNewPiece-existing): \", cid);\n            return cid;\n        }\n\n        //console.log(\"accessController: \", this.piecesDb.options.accessController);\n        // The hash is linking to data in IPFS, in this case a pdf file.\n\n        const dbName = \"counter.\" +  hash.substr(20,20);\n        const counterDb = await this.orbitdb.counter(dbName, this.defaultOptions);\n\n\n        const cid = await this.piecesDb.put({\n            hash: hash,\n            instrument: instrument,\n            counter: counterDb.id\n        });\n        return cid; \n\n    } catch (err) {\n        console.error(\"Error while adding new piece\");\n        console.error(err);\n    }\n  }\n\n  async updatePieceByHash(hash, instrument = \"Piano\") {\n    try {\n        let piece = await this.getPieceByHash(hash);\n        piece.instrument = instrument;\n        const cid = await this.piecesDb.put(piece);\n        return cid;\n\n    } catch (err) {\n        console.error(\"Error in updatePieceByHash\");\n        console.error(err);\n    }\n  }\n\n  async deletePieceByHash(hash) {\n    const cid = await this.piecesDb.del(hash);\n    return cid;\n  }\n\n  getAllPiece() {\n    const pieces = this.piecesDb.get('');\n    return pieces;\n  }\n\n  getPieceByHash(hash) {\n    const singlePiece = this.piecesDb.get(hash)[0];\n    return singlePiece;\n  }\n\n  getByInstrument(instrument) {\n    return this.piecesDb.query((piece) => piece.instrument === instrument);\n  }\n\n  async uploadFileToIpfs(fileName) {\n    console.log(\"fileName is: \", fileName);\n    //console.log(this.node)\n    const file = await this.node.add(globSource('./NOTES.md'), {recursive: true});  \n    return (file.cid).toString();\n  }\n\n  async getPracticeCount(piece) {\n    const counter = await this.orbitdb.counter(piece.counter);\n    await counter.load();\n    return counter.value;\n  }\n\n  async incrementPracticeCounter(piece) {\n    const counter = await this.orbitdb.counter(piece.counter);\n    const cid = await counter.inc();\n    return cid;\n  }\n\n  async deleteProfileField(key) {\n    const cid = await this.user.del(key);\n    return cid;\n  }\n\n  getAllProfileFields() {\n    return this.user.all;\n  }\n\n  getProfileField(key) {\n    return this.user.get(key);\n  }\n\n  async updateProfile(key, value) {\n    const cid = await this.user.set(key, value);\n    return cid;\n  }\n\n  async getIpfsPeers() {\n    const peers = await this.node.swarm.peers();\n    return peers;\n  }\n\n  async connectToPeer(multiaddr, protocol =\"/p2p-circuit/ipfs/\") {\n    try {\n        console.log(\"swarm.connect: \", protocol + multiaddr);\n        await this.node.swarm.connect(protocol + multiaddr);\n    } catch (e) {\n        throw(e);\n    }\n  }\n\n  handlePeerConnected(ipfsPeer) {\n    console.log(\"CONNECTED! CONNECTED!\")\n    const ipfsId = ipfsPeer.id._idB58String;\n    console.log(\"ipfsId: \", ipfsId);\n    if (this.onpeerconnect) this.onpeerconnect(ipfsId);\n  }\n}\n\n// This is exporting the class\ntry {\n  module.exports = exports = new NewPiecePlease(Ipfs, OrbitDB);\n} catch (e) {\n  window.NPP = new NewPiecePlease(window.IPFS, window.OrbitDB);\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      NPP: undefined,\n      DB_ID: null,\n    }\n  }\n  componentDidMount() {\n    // Creating database instance\n    (async () => {\n      this.setState({\n        NPP: await NewPiecePlease.create(Ipfs, OrbitDB),\n      })\n    })();\n      \n    (async () => {\n      do {\n        if (this.state.NPP) {\n          //this.state.NPP._init();\n          console.log(\"Database instance:\", this.state.NPP);\n          //console.log(\"OrbitDB: \", this.state.NPP.OrbitDB);\n          console.log(\"orbitdb: \", this.state.NPP.orbitdb);\n          //console.log(\"Table ID: \", this.state.NPP.pieces.id);\n          console.log(\"id: \", \"wtf\");\n          } else {\n            console.log(\"Not ready...\");\n            console.log(\"example: \", this.state.NPP.example);\n            console.log(this.state.NPP.node)\n            console.log(this.state.NPP.ready)\n            await sleep(1000);\n          }\n        } while (this.state.NPP.piecesDb.id !== \"hello\");\n    })();\n    \n  }\n  \n  componentDidUpdate() {\n    /*this.setState((state, props) => {\n      return {\n        DB_ID: this.state.NPP.pieces.id,\n      }\n    });*/\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            This is an OrbitDB test.\n          </p>\n          <p>{this.state.DB_ID}</p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n;"]},"metadata":{},"sourceType":"module"}