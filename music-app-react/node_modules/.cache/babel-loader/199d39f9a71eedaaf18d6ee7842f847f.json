{"ast":null,"code":"'use strict';\n\nconst AccessController = require('./access-controller-interface');\n\nconst AccessControllerManifest = require('./access-controller-manifest');\n\nconst LegacyIPFSAccessController = require('./legacy-ipfs-access-controller');\n\nconst IPFSAccessController = require('./ipfs-access-controller');\n\nconst OrbitDBAccessController = require('./orbitdb-access-controller');\n\nconst supportedTypes = {\n  'legacy-ipfs': LegacyIPFSAccessController,\n  ipfs: IPFSAccessController,\n  orbitdb: OrbitDBAccessController\n};\n\nconst getHandlerFor = type => {\n  if (!AccessControllers.isSupported(type)) {\n    throw new Error(`AccessController type '${type}' is not supported`);\n  }\n\n  return supportedTypes[type];\n};\n\nclass AccessControllers {\n  static get AccessController() {\n    return AccessController;\n  }\n\n  static isSupported(type) {\n    return Object.keys(supportedTypes).includes(type);\n  }\n\n  static addAccessController(options) {\n    if (!options.AccessController) {\n      throw new Error('AccessController class needs to be given as an option');\n    }\n\n    if (!options.AccessController.type || typeof options.AccessController.type !== 'string') {\n      throw new Error('Given AccessController class needs to implement: static get type() { /* return a string */}.');\n    }\n\n    supportedTypes[options.AccessController.type] = options.AccessController;\n  }\n\n  static addAccessControllers(options) {\n    const accessControllers = options.AccessControllers;\n\n    if (!accessControllers) {\n      throw new Error('AccessController classes need to be given as an option');\n    }\n\n    accessControllers.forEach(accessController => {\n      AccessControllers.addAccessController({\n        AccessController: accessController\n      });\n    });\n  }\n\n  static removeAccessController(type) {\n    delete supportedTypes[type];\n  }\n\n  static async resolve(orbitdb, manifestAddress, options = {}) {\n    const {\n      type,\n      params\n    } = await AccessControllerManifest.resolve(orbitdb._ipfs, manifestAddress, options);\n    const AccessController = getHandlerFor(type);\n    const accessController = await AccessController.create(orbitdb, Object.assign({}, options, params));\n    await accessController.load(params.address);\n    return accessController;\n  }\n\n  static async create(orbitdb, type, options = {}) {\n    const AccessController = getHandlerFor(type);\n    const ac = await AccessController.create(orbitdb, options);\n    const params = await ac.save();\n    const hash = await AccessControllerManifest.create(orbitdb._ipfs, type, params);\n    return hash;\n  }\n\n}\n\nmodule.exports = AccessControllers;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/orbit-db-access-controllers/src/access-controllers.js"],"names":["AccessController","require","AccessControllerManifest","LegacyIPFSAccessController","IPFSAccessController","OrbitDBAccessController","supportedTypes","ipfs","orbitdb","getHandlerFor","type","AccessControllers","isSupported","Error","Object","keys","includes","addAccessController","options","addAccessControllers","accessControllers","forEach","accessController","removeAccessController","resolve","manifestAddress","params","_ipfs","create","assign","load","address","ac","save","hash","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst AccessController = require('./access-controller-interface')\nconst AccessControllerManifest = require('./access-controller-manifest')\nconst LegacyIPFSAccessController = require('./legacy-ipfs-access-controller')\nconst IPFSAccessController = require('./ipfs-access-controller')\nconst OrbitDBAccessController = require('./orbitdb-access-controller')\n\nconst supportedTypes = {\n  'legacy-ipfs': LegacyIPFSAccessController,\n  ipfs: IPFSAccessController,\n  orbitdb: OrbitDBAccessController\n}\n\nconst getHandlerFor = (type) => {\n  if (!AccessControllers.isSupported(type)) {\n    throw new Error(`AccessController type '${type}' is not supported`)\n  }\n  return supportedTypes[type]\n}\n\nclass AccessControllers {\n  static get AccessController () { return AccessController }\n\n  static isSupported (type) {\n    return Object.keys(supportedTypes).includes(type)\n  }\n\n  static addAccessController (options) {\n    if (!options.AccessController) {\n      throw new Error('AccessController class needs to be given as an option')\n    }\n\n    if (!options.AccessController.type ||\n      typeof options.AccessController.type !== 'string') {\n      throw new Error('Given AccessController class needs to implement: static get type() { /* return a string */}.')\n    }\n\n    supportedTypes[options.AccessController.type] = options.AccessController\n  }\n\n  static addAccessControllers (options) {\n    const accessControllers = options.AccessControllers\n    if (!accessControllers) {\n      throw new Error('AccessController classes need to be given as an option')\n    }\n\n    accessControllers.forEach((accessController) => {\n      AccessControllers.addAccessController({ AccessController: accessController })\n    })\n  }\n\n  static removeAccessController (type) {\n    delete supportedTypes[type]\n  }\n\n  static async resolve (orbitdb, manifestAddress, options = {}) {\n    const { type, params } = await AccessControllerManifest.resolve(orbitdb._ipfs, manifestAddress, options)\n    const AccessController = getHandlerFor(type)\n    const accessController = await AccessController.create(orbitdb, Object.assign({}, options, params))\n    await accessController.load(params.address)\n    return accessController\n  }\n\n  static async create (orbitdb, type, options = {}) {\n    const AccessController = getHandlerFor(type)\n    const ac = await AccessController.create(orbitdb, options)\n    const params = await ac.save()\n    const hash = await AccessControllerManifest.create(orbitdb._ipfs, type, params)\n    return hash\n  }\n}\n\nmodule.exports = AccessControllers\n"]},"metadata":{},"sourceType":"script"}