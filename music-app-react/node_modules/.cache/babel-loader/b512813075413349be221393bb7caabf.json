{"ast":null,"code":"'use strict';\n\nconst io = require('orbit-db-io');\n\nclass AccessControllerManifest {\n  constructor(type, params = {}) {\n    this.type = type;\n    this.params = params;\n  }\n\n  static async resolve(ipfs, manifestHash, options = {}) {\n    if (options.skipManifest) {\n      if (!options.type) {\n        throw new Error('No manifest, access-controller type required');\n      }\n\n      return new AccessControllerManifest(options.type, {\n        address: manifestHash\n      });\n    } else {\n      // TODO: ensure this is a valid multihash\n      if (manifestHash.indexOf('/ipfs') === 0) {\n        manifestHash = manifestHash.split('/')[2];\n      }\n\n      const {\n        type,\n        params\n      } = await io.read(ipfs, manifestHash);\n      return new AccessControllerManifest(type, params);\n    }\n  }\n\n  static async create(ipfs, type, params) {\n    if (params.skipManifest) {\n      return params.address;\n    }\n\n    const manifest = {\n      type: type,\n      params: params\n    };\n    return io.write(ipfs, 'dag-cbor', manifest);\n  }\n\n}\n\nmodule.exports = AccessControllerManifest;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/orbit-db-access-controllers/src/access-controller-manifest.js"],"names":["io","require","AccessControllerManifest","constructor","type","params","resolve","ipfs","manifestHash","options","skipManifest","Error","address","indexOf","split","read","create","manifest","write","module","exports"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AAEA,MAAMC,wBAAN,CAA+B;AAC7BC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,MAAM,GAAG,EAAjB,EAAqB;AAC9B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAED,eAAaC,OAAb,CAAsBC,IAAtB,EAA4BC,YAA5B,EAA0CC,OAAO,GAAG,EAApD,EAAwD;AACtD,QAAIA,OAAO,CAACC,YAAZ,EAA0B;AACxB,UAAI,CAACD,OAAO,CAACL,IAAb,EAAmB;AACjB,cAAM,IAAIO,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,aAAO,IAAIT,wBAAJ,CAA6BO,OAAO,CAACL,IAArC,EAA2C;AAAEQ,QAAAA,OAAO,EAAEJ;AAAX,OAA3C,CAAP;AACD,KALD,MAKO;AACL;AACA,UAAIA,YAAY,CAACK,OAAb,CAAqB,OAArB,MAAkC,CAAtC,EAAyC;AAAEL,QAAAA,YAAY,GAAGA,YAAY,CAACM,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAf;AAA2C;;AACtF,YAAM;AAAEV,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAmB,MAAML,EAAE,CAACe,IAAH,CAAQR,IAAR,EAAcC,YAAd,CAA/B;AACA,aAAO,IAAIN,wBAAJ,CAA6BE,IAA7B,EAAmCC,MAAnC,CAAP;AACD;AACF;;AAED,eAAaW,MAAb,CAAqBT,IAArB,EAA2BH,IAA3B,EAAiCC,MAAjC,EAAyC;AACvC,QAAIA,MAAM,CAACK,YAAX,EAAyB;AACvB,aAAOL,MAAM,CAACO,OAAd;AACD;;AACD,UAAMK,QAAQ,GAAG;AACfb,MAAAA,IAAI,EAAEA,IADS;AAEfC,MAAAA,MAAM,EAAEA;AAFO,KAAjB;AAIA,WAAOL,EAAE,CAACkB,KAAH,CAASX,IAAT,EAAe,UAAf,EAA2BU,QAA3B,CAAP;AACD;;AA7B4B;;AAgC/BE,MAAM,CAACC,OAAP,GAAiBlB,wBAAjB","sourcesContent":["'use strict'\nconst io = require('orbit-db-io')\n\nclass AccessControllerManifest {\n  constructor (type, params = {}) {\n    this.type = type\n    this.params = params\n  }\n\n  static async resolve (ipfs, manifestHash, options = {}) {\n    if (options.skipManifest) {\n      if (!options.type) {\n        throw new Error('No manifest, access-controller type required')\n      }\n      return new AccessControllerManifest(options.type, { address: manifestHash })\n    } else {\n      // TODO: ensure this is a valid multihash\n      if (manifestHash.indexOf('/ipfs') === 0) { manifestHash = manifestHash.split('/')[2] }\n      const { type, params } = await io.read(ipfs, manifestHash)\n      return new AccessControllerManifest(type, params)\n    }\n  }\n\n  static async create (ipfs, type, params) {\n    if (params.skipManifest) {\n      return params.address\n    }\n    const manifest = {\n      type: type,\n      params: params\n    }\n    return io.write(ipfs, 'dag-cbor', manifest)\n  }\n}\n\nmodule.exports = AccessControllerManifest\n"]},"metadata":{},"sourceType":"script"}