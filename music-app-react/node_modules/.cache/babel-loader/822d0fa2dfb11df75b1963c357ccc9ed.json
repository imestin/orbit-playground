{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidPublicKey = exports.getHkdf = exports.verifySignedPayload = exports.getHandshakePayload = exports.decodePayload = exports.getPeerIdFromPayload = exports.signPayload = exports.createHandshakePayload = exports.getPayload = exports.generateKeypair = void 0;\n\nconst hkdf_1 = __importDefault(require(\"bcrypto/lib/hkdf\"));\n\nconst x25519_1 = __importDefault(require(\"bcrypto/lib/js/x25519\"));\n\nconst sha256_1 = __importDefault(require(\"bcrypto/lib/js/sha256\"));\n\nconst buffer_1 = require(\"buffer\");\n\nconst peer_id_1 = __importDefault(require(\"peer-id\"));\n\nconst libp2p_crypto_1 = require(\"libp2p-crypto\");\n\nconst payload_1 = require(\"./proto/payload\");\n\nconst equals_1 = __importDefault(require(\"uint8arrays/equals\"));\n\nconst NoiseHandshakePayloadProto = payload_1.pb.NoiseHandshakePayload;\n\nfunction generateKeypair() {\n  const privateKey = x25519_1.default.privateKeyGenerate();\n  const publicKey = x25519_1.default.publicKeyCreate(privateKey);\n  return {\n    publicKey,\n    privateKey\n  };\n}\n\nexports.generateKeypair = generateKeypair;\n\nasync function getPayload(localPeer, staticPublicKey, earlyData) {\n  const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n  const earlyDataPayload = earlyData || buffer_1.Buffer.alloc(0);\n  return await createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);\n}\n\nexports.getPayload = getPayload;\n\nfunction createHandshakePayload(libp2pPublicKey, signedPayload, earlyData) {\n  const payloadInit = NoiseHandshakePayloadProto.create({\n    identityKey: buffer_1.Buffer.from(libp2pPublicKey),\n    identitySig: signedPayload,\n    data: earlyData || null\n  });\n  return buffer_1.Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish());\n}\n\nexports.createHandshakePayload = createHandshakePayload;\n\nasync function signPayload(peerId, payload) {\n  return buffer_1.Buffer.from(await peerId.privKey.sign(payload));\n}\n\nexports.signPayload = signPayload;\n\nasync function getPeerIdFromPayload(payload) {\n  return await peer_id_1.default.createFromPubKey(buffer_1.Buffer.from(payload.identityKey));\n}\n\nexports.getPeerIdFromPayload = getPeerIdFromPayload;\n\nfunction decodePayload(payload) {\n  return NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(buffer_1.Buffer.from(payload)));\n}\n\nexports.decodePayload = decodePayload;\n\nfunction getHandshakePayload(publicKey) {\n  return buffer_1.Buffer.concat([buffer_1.Buffer.from('noise-libp2p-static-key:'), publicKey]);\n}\n\nexports.getHandshakePayload = getHandshakePayload;\n\nasync function isValidPeerId(peerId, publicKeyProtobuf) {\n  const generatedPeerId = await peer_id_1.default.createFromPubKey(publicKeyProtobuf);\n  return equals_1.default(generatedPeerId.id, peerId);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\n\n\nasync function verifySignedPayload(noiseStaticKey, payload, remotePeer) {\n  const identityKey = buffer_1.Buffer.from(payload.identityKey);\n\n  if (!(await isValidPeerId(remotePeer.id, identityKey))) {\n    throw new Error(\"Peer ID doesn't match libp2p public key.\");\n  }\n\n  const generatedPayload = getHandshakePayload(noiseStaticKey); // Unmarshaling from PublicKey protobuf\n\n  const publicKey = libp2p_crypto_1.keys.unmarshalPublicKey(identityKey);\n\n  if (!payload.identitySig || !publicKey.verify(generatedPayload, buffer_1.Buffer.from(payload.identitySig))) {\n    throw new Error(\"Static key doesn't match to peer that signed payload!\");\n  }\n\n  return peer_id_1.default.createFromPubKey(identityKey);\n}\n\nexports.verifySignedPayload = verifySignedPayload;\n\nfunction getHkdf(ck, ikm) {\n  const info = buffer_1.Buffer.alloc(0);\n  const prk = hkdf_1.default.extract(sha256_1.default, ikm, ck);\n  const okm = hkdf_1.default.expand(sha256_1.default, prk, info, 96);\n  const k1 = okm.slice(0, 32);\n  const k2 = okm.slice(32, 64);\n  const k3 = okm.slice(64, 96);\n  return [k1, k2, k3];\n}\n\nexports.getHkdf = getHkdf;\n\nfunction isValidPublicKey(pk) {\n  return x25519_1.default.publicKeyVerify(pk.slice(0, 32));\n}\n\nexports.isValidPublicKey = isValidPublicKey;","map":{"version":3,"sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValidPublicKey = exports.getHkdf = exports.verifySignedPayload = exports.getHandshakePayload = exports.decodePayload = exports.getPeerIdFromPayload = exports.signPayload = exports.createHandshakePayload = exports.getPayload = exports.generateKeypair = void 0;\nconst hkdf_1 = __importDefault(require(\"bcrypto/lib/hkdf\"));\nconst x25519_1 = __importDefault(require(\"bcrypto/lib/js/x25519\"));\nconst sha256_1 = __importDefault(require(\"bcrypto/lib/js/sha256\"));\nconst buffer_1 = require(\"buffer\");\nconst peer_id_1 = __importDefault(require(\"peer-id\"));\nconst libp2p_crypto_1 = require(\"libp2p-crypto\");\nconst payload_1 = require(\"./proto/payload\");\nconst equals_1 = __importDefault(require(\"uint8arrays/equals\"));\nconst NoiseHandshakePayloadProto = payload_1.pb.NoiseHandshakePayload;\nfunction generateKeypair() {\n    const privateKey = x25519_1.default.privateKeyGenerate();\n    const publicKey = x25519_1.default.publicKeyCreate(privateKey);\n    return {\n        publicKey,\n        privateKey\n    };\n}\nexports.generateKeypair = generateKeypair;\nasync function getPayload(localPeer, staticPublicKey, earlyData) {\n    const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n    const earlyDataPayload = earlyData || buffer_1.Buffer.alloc(0);\n    return await createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);\n}\nexports.getPayload = getPayload;\nfunction createHandshakePayload(libp2pPublicKey, signedPayload, earlyData) {\n    const payloadInit = NoiseHandshakePayloadProto.create({\n        identityKey: buffer_1.Buffer.from(libp2pPublicKey),\n        identitySig: signedPayload,\n        data: earlyData || null\n    });\n    return buffer_1.Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish());\n}\nexports.createHandshakePayload = createHandshakePayload;\nasync function signPayload(peerId, payload) {\n    return buffer_1.Buffer.from(await peerId.privKey.sign(payload));\n}\nexports.signPayload = signPayload;\nasync function getPeerIdFromPayload(payload) {\n    return await peer_id_1.default.createFromPubKey(buffer_1.Buffer.from(payload.identityKey));\n}\nexports.getPeerIdFromPayload = getPeerIdFromPayload;\nfunction decodePayload(payload) {\n    return NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(buffer_1.Buffer.from(payload)));\n}\nexports.decodePayload = decodePayload;\nfunction getHandshakePayload(publicKey) {\n    return buffer_1.Buffer.concat([buffer_1.Buffer.from('noise-libp2p-static-key:'), publicKey]);\n}\nexports.getHandshakePayload = getHandshakePayload;\nasync function isValidPeerId(peerId, publicKeyProtobuf) {\n    const generatedPeerId = await peer_id_1.default.createFromPubKey(publicKeyProtobuf);\n    return equals_1.default(generatedPeerId.id, peerId);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\nasync function verifySignedPayload(noiseStaticKey, payload, remotePeer) {\n    const identityKey = buffer_1.Buffer.from(payload.identityKey);\n    if (!(await isValidPeerId(remotePeer.id, identityKey))) {\n        throw new Error(\"Peer ID doesn't match libp2p public key.\");\n    }\n    const generatedPayload = getHandshakePayload(noiseStaticKey);\n    // Unmarshaling from PublicKey protobuf\n    const publicKey = libp2p_crypto_1.keys.unmarshalPublicKey(identityKey);\n    if (!payload.identitySig || !publicKey.verify(generatedPayload, buffer_1.Buffer.from(payload.identitySig))) {\n        throw new Error(\"Static key doesn't match to peer that signed payload!\");\n    }\n    return peer_id_1.default.createFromPubKey(identityKey);\n}\nexports.verifySignedPayload = verifySignedPayload;\nfunction getHkdf(ck, ikm) {\n    const info = buffer_1.Buffer.alloc(0);\n    const prk = hkdf_1.default.extract(sha256_1.default, ikm, ck);\n    const okm = hkdf_1.default.expand(sha256_1.default, prk, info, 96);\n    const k1 = okm.slice(0, 32);\n    const k2 = okm.slice(32, 64);\n    const k3 = okm.slice(64, 96);\n    return [k1, k2, k3];\n}\nexports.getHkdf = getHkdf;\nfunction isValidPublicKey(pk) {\n    return x25519_1.default.publicKeyVerify(pk.slice(0, 32));\n}\nexports.isValidPublicKey = isValidPublicKey;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}