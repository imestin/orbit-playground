{"ast":null,"code":"/*!\n * random.js - random number generator for bcrypto\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://wiki.openssl.org/index.php/Random_Numbers\n *   https://csrc.nist.gov/projects/random-bit-generation/\n *   http://www.pcg-random.org/posts/bounded-rands.html\n *   https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n/*\n * Constants\n */\n\n\nconst crypto = global.crypto || global.msCrypto;\nconst HAS_CRYPTO = crypto && typeof crypto.getRandomValues === 'function';\nconst randomValues = HAS_CRYPTO ? crypto.getRandomValues.bind(crypto) : null;\nconst pool = new Uint32Array(16);\nconst MAX_BYTES = 65536;\nlet poolPos = 0;\n/**\n * Generate pseudo-random bytes.\n * @param {Number} size\n * @returns {Buffer}\n */\n\nfunction randomBytes(size) {\n  assert(size >>> 0 === size);\n  const data = Buffer.alloc(size);\n  randomFillSync(data, 0, size);\n  return data;\n}\n/**\n * Generate pseudo-random bytes.\n * @param {Buffer} data\n * @param {Number} [off=0]\n * @param {Number} [size=data.length-off]\n * @returns {Buffer}\n */\n\n\nfunction randomFill(data, off, size) {\n  assert(Buffer.isBuffer(data));\n  if (off == null) off = 0;\n  assert(off >>> 0 === off);\n  if (size == null) size = data.length - off;\n  assert(size >>> 0 === size);\n  assert(off + size <= data.length);\n  randomFillSync(data, off, size);\n  return data;\n}\n/**\n * Generate a random uint32.\n * @returns {Number}\n */\n\n\nfunction randomInt() {\n  if ((poolPos & 15) === 0) {\n    getRandomValues(pool);\n    poolPos = 0;\n  }\n\n  return pool[poolPos++];\n}\n/**\n * Generate a random uint32 within a range.\n * @param {Number} min - Inclusive.\n * @param {Number} max - Exclusive.\n * @returns {Number}\n */\n\n\nfunction randomRange(min, max) {\n  assert(min >>> 0 === min);\n  assert(max >>> 0 === max);\n  assert(max >= min);\n  const space = max - min;\n  if (space === 0) return min;\n  const top = -space >>> 0;\n  let x, r;\n\n  do {\n    x = randomInt();\n    r = x % space;\n  } while (x - r > top);\n\n  return r + min;\n}\n/*\n * Helpers\n */\n\n\nfunction getRandomValues(array) {\n  if (!HAS_CRYPTO) throw new Error('Entropy source not available.');\n  return randomValues(array);\n}\n\nfunction randomFillSync(data, off, size) {\n  assert(Buffer.isBuffer(data));\n  assert(data.buffer instanceof ArrayBuffer);\n  assert(data.byteOffset >>> 0 === data.byteOffset);\n  assert(data.byteLength >>> 0 === data.byteLength);\n  assert(off >>> 0 === off);\n  assert(size >>> 0 === size);\n  assert(off + size <= data.byteLength);\n  if (size > 2 ** 31 - 1) throw new RangeError('The value \"size\" is out of range.');\n  const offset = data.byteOffset + off;\n  const array = new Uint8Array(data.buffer, offset, size);\n\n  if (array.length > MAX_BYTES) {\n    for (let i = 0; i < array.length; i += MAX_BYTES) {\n      let j = i + MAX_BYTES;\n      if (j > array.length) j = array.length;\n      getRandomValues(array.subarray(i, j));\n    }\n  } else {\n    if (array.length > 0) getRandomValues(array);\n  }\n}\n/*\n * Expose\n */\n\n\nexports.native = 0;\nexports.randomBytes = randomBytes;\nexports.randomFill = randomFill;\nexports.randomInt = randomInt;\nexports.randomRange = randomRange;","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/bcrypto/lib/js/random.js"],"names":["assert","require","crypto","global","msCrypto","HAS_CRYPTO","getRandomValues","randomValues","bind","pool","Uint32Array","MAX_BYTES","poolPos","randomBytes","size","data","Buffer","alloc","randomFillSync","randomFill","off","isBuffer","length","randomInt","randomRange","min","max","space","top","x","r","array","Error","buffer","ArrayBuffer","byteOffset","byteLength","RangeError","offset","Uint8Array","i","j","subarray","exports","native"],"mappings":"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","sourcesContent":["/*!\n * random.js - random number generator for bcrypto\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://wiki.openssl.org/index.php/Random_Numbers\n *   https://csrc.nist.gov/projects/random-bit-generation/\n *   http://www.pcg-random.org/posts/bounded-rands.html\n *   https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\n\n/*\n * Constants\n */\n\nconst crypto = global.crypto || global.msCrypto;\nconst HAS_CRYPTO = crypto && typeof crypto.getRandomValues === 'function';\nconst randomValues = HAS_CRYPTO ? crypto.getRandomValues.bind(crypto) : null;\nconst pool = new Uint32Array(16);\nconst MAX_BYTES = 65536;\n\nlet poolPos = 0;\n\n/**\n * Generate pseudo-random bytes.\n * @param {Number} size\n * @returns {Buffer}\n */\n\nfunction randomBytes(size) {\n  assert((size >>> 0) === size);\n\n  const data = Buffer.alloc(size);\n\n  randomFillSync(data, 0, size);\n\n  return data;\n}\n\n/**\n * Generate pseudo-random bytes.\n * @param {Buffer} data\n * @param {Number} [off=0]\n * @param {Number} [size=data.length-off]\n * @returns {Buffer}\n */\n\nfunction randomFill(data, off, size) {\n  assert(Buffer.isBuffer(data));\n\n  if (off == null)\n    off = 0;\n\n  assert((off >>> 0) === off);\n\n  if (size == null)\n    size = data.length - off;\n\n  assert((size >>> 0) === size);\n  assert(off + size <= data.length);\n\n  randomFillSync(data, off, size);\n\n  return data;\n}\n\n/**\n * Generate a random uint32.\n * @returns {Number}\n */\n\nfunction randomInt() {\n  if ((poolPos & 15) === 0) {\n    getRandomValues(pool);\n    poolPos = 0;\n  }\n\n  return pool[poolPos++];\n}\n\n/**\n * Generate a random uint32 within a range.\n * @param {Number} min - Inclusive.\n * @param {Number} max - Exclusive.\n * @returns {Number}\n */\n\nfunction randomRange(min, max) {\n  assert((min >>> 0) === min);\n  assert((max >>> 0) === max);\n  assert(max >= min);\n\n  const space = max - min;\n\n  if (space === 0)\n    return min;\n\n  const top = -space >>> 0;\n\n  let x, r;\n\n  do {\n    x = randomInt();\n    r = x % space;\n  } while (x - r > top);\n\n  return r + min;\n}\n\n/*\n * Helpers\n */\n\nfunction getRandomValues(array) {\n  if (!HAS_CRYPTO)\n    throw new Error('Entropy source not available.');\n\n  return randomValues(array);\n}\n\nfunction randomFillSync(data, off, size) {\n  assert(Buffer.isBuffer(data));\n  assert(data.buffer instanceof ArrayBuffer);\n  assert((data.byteOffset >>> 0) === data.byteOffset);\n  assert((data.byteLength >>> 0) === data.byteLength);\n  assert((off >>> 0) === off);\n  assert((size >>> 0) === size);\n  assert(off + size <= data.byteLength);\n\n  if (size > 2 ** 31 - 1)\n    throw new RangeError('The value \"size\" is out of range.');\n\n  const offset = data.byteOffset + off;\n  const array = new Uint8Array(data.buffer, offset, size);\n\n  if (array.length > MAX_BYTES) {\n    for (let i = 0; i < array.length; i += MAX_BYTES) {\n      let j = i + MAX_BYTES;\n\n      if (j > array.length)\n        j = array.length;\n\n      getRandomValues(array.subarray(i, j));\n    }\n  } else {\n    if (array.length > 0)\n      getRandomValues(array);\n  }\n}\n\n/*\n * Expose\n */\n\nexports.native = 0;\nexports.randomBytes = randomBytes;\nexports.randomFill = randomFill;\nexports.randomInt = randomInt;\nexports.randomRange = randomRange;\n"]},"metadata":{},"sourceType":"script"}