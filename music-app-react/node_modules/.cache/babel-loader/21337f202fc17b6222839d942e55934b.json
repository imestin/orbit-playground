{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst dagpb = require('ipld-dag-pb');\n\nconst cbor = require('cbor');\n\nconst multicodec = require('multicodec');\n\nconst multibase = require('multibase');\n\nconst pinset = require('./pin-set');\n\nconst {\n  createStore\n} = require('../../src/utils');\n\nconst {\n  cidToKey,\n  PIN_DS_KEY,\n  PinTypes\n} = require('./utils');\n\nconst length = require('it-length');\n\nasync function pinsToDatastore(blockstore, datastore, pinstore, onProgress) {\n  if (!(await datastore.has(PIN_DS_KEY))) {\n    return;\n  }\n\n  const mh = await datastore.get(PIN_DS_KEY);\n  const cid = new CID(mh);\n  const pinRootBuf = await blockstore.get(cidToKey(cid));\n  const pinRoot = dagpb.util.deserialize(pinRootBuf);\n  let counter = 0;\n  let pinCount;\n\n  if (onProgress) {\n    pinCount = (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive))) + (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct)));\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.recursive)) {\n    counter++;\n    const pin = {\n      depth: Infinity\n    };\n\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n\n    if (cid.codec !== 'dag-pb') {\n      pin.codec = multicodec.getNumber(cid.codec);\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin));\n\n    if (onProgress) {\n      onProgress(counter / pinCount * 100, `Migrated recursive pin ${cid}`);\n    }\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.direct)) {\n    counter++;\n    const pin = {\n      depth: 0\n    };\n\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n\n    if (cid.codec !== 'dag-pb') {\n      pin.codec = multicodec.getNumber(cid.codec);\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin));\n    onProgress(counter / pinCount * 100, `Migrated direct pin ${cid}`);\n  }\n\n  await blockstore.delete(cidToKey(cid));\n  await datastore.delete(PIN_DS_KEY);\n}\n\nasync function pinsToDAG(blockstore, datastore, pinstore, onProgress) {\n  let recursivePins = [];\n  let directPins = [];\n  let counter = 0;\n  let pinCount;\n\n  if (onProgress) {\n    pinCount = await length(pinstore.query({\n      keysOnly: true\n    }));\n  }\n\n  for await (const {\n    key,\n    value\n  } of pinstore.query({})) {\n    counter++;\n    const pin = cbor.decode(value);\n    const cid = new CID(pin.version || 0, pin.codec && multicodec.getName(pin.codec) || 'dag-pb', multibase.decode('b' + key.toString().split('/').pop()));\n\n    if (pin.depth === 0) {\n      if (onProgress) {\n        onProgress(counter / pinCount * 100, `Reverted direct pin ${cid}`);\n      }\n\n      directPins.push(cid);\n    } else {\n      if (onProgress) {\n        onProgress(counter / pinCount * 100, `Reverted recursive pin ${cid}`);\n      }\n\n      recursivePins.push(cid);\n    }\n  }\n\n  onProgress(100, 'Updating pin root');\n  const pinRoot = new dagpb.DAGNode(new Uint8Array(), [await pinset.storeSet(blockstore, PinTypes.recursive, recursivePins), await pinset.storeSet(blockstore, PinTypes.direct, directPins)]);\n  const buf = pinRoot.serialize();\n  const cid = await dagpb.util.cid(buf, {\n    cidVersion: 0,\n    hashAlg: multicodec.SHA2_256\n  });\n  await blockstore.put(cidToKey(cid), buf);\n  await datastore.put(PIN_DS_KEY, cid.multihash);\n}\n\nasync function process(repoPath, repoOptions, onProgress, fn) {\n  const blockstore = await createStore(repoPath, 'blocks', repoOptions);\n  const datastore = await createStore(repoPath, 'datastore', repoOptions);\n  const pinstore = await createStore(repoPath, 'pins', repoOptions);\n  await blockstore.open();\n  await datastore.open();\n  await pinstore.open();\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress);\n  } finally {\n    await pinstore.close();\n    await datastore.close();\n    await blockstore.close();\n  }\n}\n\nmodule.exports = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (repoPath, repoOptions, onProgress) => {\n    return process(repoPath, repoOptions, onProgress, pinsToDatastore);\n  },\n  revert: (repoPath, repoOptions, onProgress) => {\n    return process(repoPath, repoOptions, onProgress, pinsToDAG);\n  }\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs-repo-migrations/migrations/migration-9/index.js"],"names":["CID","require","dagpb","cbor","multicodec","multibase","pinset","createStore","cidToKey","PIN_DS_KEY","PinTypes","length","pinsToDatastore","blockstore","datastore","pinstore","onProgress","has","mh","get","cid","pinRootBuf","pinRoot","util","deserialize","counter","pinCount","loadSet","recursive","direct","pin","depth","Infinity","version","codec","getNumber","put","encode","delete","pinsToDAG","recursivePins","directPins","query","keysOnly","key","value","decode","getName","toString","split","pop","push","DAGNode","Uint8Array","storeSet","buf","serialize","cidVersion","hashAlg","SHA2_256","multihash","process","repoPath","repoOptions","fn","open","close","module","exports","description","migrate","revert"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst dagpb = require('ipld-dag-pb')\nconst cbor = require('cbor')\nconst multicodec = require('multicodec')\nconst multibase = require('multibase')\nconst pinset = require('./pin-set')\nconst { createStore } = require('../../src/utils')\nconst { cidToKey, PIN_DS_KEY, PinTypes } = require('./utils')\nconst length = require('it-length')\n\nasync function pinsToDatastore (blockstore, datastore, pinstore, onProgress) {\n  if (!await datastore.has(PIN_DS_KEY)) {\n    return\n  }\n\n  const mh = await datastore.get(PIN_DS_KEY)\n  const cid = new CID(mh)\n  const pinRootBuf = await blockstore.get(cidToKey(cid))\n  const pinRoot = dagpb.util.deserialize(pinRootBuf)\n  let counter = 0\n  let pinCount\n\n  if (onProgress) {\n    pinCount = (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive))) + (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct)))\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.recursive)) {\n    counter++\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.codec !== 'dag-pb') {\n      pin.codec = multicodec.getNumber(cid.codec)\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    if (onProgress) {\n      onProgress((counter / pinCount) * 100, `Migrated recursive pin ${cid}`)\n    }\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.direct)) {\n    counter++\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.codec !== 'dag-pb') {\n      pin.codec = multicodec.getNumber(cid.codec)\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated direct pin ${cid}`)\n  }\n\n  await blockstore.delete(cidToKey(cid))\n  await datastore.delete(PIN_DS_KEY)\n}\n\nasync function pinsToDAG (blockstore, datastore, pinstore, onProgress) {\n  let recursivePins = []\n  let directPins = []\n  let counter = 0\n  let pinCount\n\n  if (onProgress) {\n    pinCount = await length(pinstore.query({ keysOnly: true }))\n  }\n\n  for await (const { key, value } of pinstore.query({})) {\n    counter++\n    const pin = cbor.decode(value)\n    const cid = new CID(pin.version || 0, pin.codec && multicodec.getName(pin.codec) || 'dag-pb', multibase.decode('b' + key.toString().split('/').pop()))\n\n    if (pin.depth === 0) {\n      if (onProgress) {\n        onProgress((counter / pinCount) * 100, `Reverted direct pin ${cid}`)\n      }\n\n      directPins.push(cid)\n    } else {\n      if (onProgress) {\n        onProgress((counter / pinCount) * 100, `Reverted recursive pin ${cid}`)\n      }\n\n      recursivePins.push(cid)\n    }\n  }\n\n  onProgress(100, 'Updating pin root')\n  const pinRoot = new dagpb.DAGNode(new Uint8Array(), [\n    await pinset.storeSet(blockstore, PinTypes.recursive, recursivePins),\n    await pinset.storeSet(blockstore, PinTypes.direct, directPins)\n  ])\n  const buf = pinRoot.serialize()\n  const cid = await dagpb.util.cid(buf, {\n    cidVersion: 0,\n    hashAlg: multicodec.SHA2_256,\n  })\n  await blockstore.put(cidToKey(cid), buf)\n  await datastore.put(PIN_DS_KEY, cid.multihash)\n}\n\nasync function process (repoPath, repoOptions, onProgress, fn) {\n  const blockstore = await createStore(repoPath, 'blocks', repoOptions)\n  const datastore = await createStore(repoPath, 'datastore', repoOptions)\n  const pinstore = await createStore(repoPath, 'pins', repoOptions)\n\n  await blockstore.open()\n  await datastore.open()\n  await pinstore.open()\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress)\n  } finally {\n    await pinstore.close()\n    await datastore.close()\n    await blockstore.close()\n  }\n}\n\nmodule.exports = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (repoPath, repoOptions, onProgress) => {\n    return process(repoPath, repoOptions, onProgress, pinsToDatastore)\n  },\n  revert: (repoPath, repoOptions, onProgress) => {\n    return process(repoPath, repoOptions, onProgress, pinsToDAG)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}