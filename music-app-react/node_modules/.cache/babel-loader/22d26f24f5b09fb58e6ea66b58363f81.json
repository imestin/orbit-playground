{"ast":null,"code":"'use strict';\n\nconst last = require('it-last');\n/**\n * @typedef {import('./add-all').Source} Source\n * @typedef {import('./add-all').UnixFSEntry} UnixFSEntry\n */\n\n/**\n * @typedef {object} AddOptions\n * @property {string} [chunker] - chunking algorithm used to build ipfs DAGs (default: `'size-262144'`)\n * @property {number} [cidVersion] - the CID version to use when storing the data (default: `0`)\n * @property {string} [hashAlg] - multihash hashing algorithm to use (default: `'sha2-256'`)\n * @property {boolean} [onlyHash] - If true, will not add blocks to the blockstore (default: `false`)\n * @property {boolean} [pin] - pin this object when adding (default: `true`)\n * @property {function} [progress] - a function that will be called with the byte length of chunks as a file is added to ipfs (default: `undefined`)\n * @property {boolean} [rawLeaves] - if true, DAG leaves will contain raw file data and not be wrapped in a protobuf (default: `false`)\n * @property {boolean} [trickle] - if true will use the [trickle DAG](https://godoc.org/github.com/ipsn/go-ipfs/gxlibs/github.com/ipfs/go-unixfs/importer/trickle) format for DAG generation (default: `false`)\n * @property {boolean} [wrapWithDirectory] - Adds a wrapping node around the content (default: `false`)\n */\n\n/**\n * Import a file or data into IPFS.\n * @template {Record<string, any>} ExtraOptions\n * @callback Add\n * @param {Source} source - Data to import\n * @param {AddOptions & import('../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<UnixFSEntry>}\n */\n\n\nmodule.exports = ({\n  addAll\n}) => {\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * @type {Add<{}>}\n   */\n  async function add(source, options) {\n    // eslint-disable-line require-await\n    return last(addAll(source, options));\n  }\n\n  return add;\n};","map":{"version":3,"sources":["/home/user/orbit-playground/music-app/node_modules/ipfs/src/core/components/add.js"],"names":["last","require","module","exports","addAll","add","source","options"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;AAEA;;;;;AAKA;;;;;;;;;;;;;AAaA;;;;;;;;;;AASAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC/B;;AACA;;;AAGA,iBAAeC,GAAf,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AAAE;AACrC,WAAOP,IAAI,CAACI,MAAM,CAACE,MAAD,EAASC,OAAT,CAAP,CAAX;AACD;;AACD,SAAOF,GAAP;AACD,CATD","sourcesContent":["'use strict'\n\nconst last = require('it-last')\n\n/**\n * @typedef {import('./add-all').Source} Source\n * @typedef {import('./add-all').UnixFSEntry} UnixFSEntry\n */\n\n/**\n * @typedef {object} AddOptions\n * @property {string} [chunker] - chunking algorithm used to build ipfs DAGs (default: `'size-262144'`)\n * @property {number} [cidVersion] - the CID version to use when storing the data (default: `0`)\n * @property {string} [hashAlg] - multihash hashing algorithm to use (default: `'sha2-256'`)\n * @property {boolean} [onlyHash] - If true, will not add blocks to the blockstore (default: `false`)\n * @property {boolean} [pin] - pin this object when adding (default: `true`)\n * @property {function} [progress] - a function that will be called with the byte length of chunks as a file is added to ipfs (default: `undefined`)\n * @property {boolean} [rawLeaves] - if true, DAG leaves will contain raw file data and not be wrapped in a protobuf (default: `false`)\n * @property {boolean} [trickle] - if true will use the [trickle DAG](https://godoc.org/github.com/ipsn/go-ipfs/gxlibs/github.com/ipfs/go-unixfs/importer/trickle) format for DAG generation (default: `false`)\n * @property {boolean} [wrapWithDirectory] - Adds a wrapping node around the content (default: `false`)\n */\n\n/**\n * Import a file or data into IPFS.\n * @template {Record<string, any>} ExtraOptions\n * @callback Add\n * @param {Source} source - Data to import\n * @param {AddOptions & import('../utils').AbortOptions & ExtraOptions} [options]\n * @returns {Promise<UnixFSEntry>}\n */\n\nmodule.exports = ({ addAll }) => {\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * @type {Add<{}>}\n   */\n  async function add (source, options) { // eslint-disable-line require-await\n    return last(addAll(source, options))\n  }\n  return add\n}\n"]},"metadata":{},"sourceType":"script"}